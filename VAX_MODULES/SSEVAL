**** SOURCE FILE : M0001054.V01   ***
*
      SUBROUTINE CNCURV(UIN,C,CV,MODE)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C---    PURPOSE IS TO RETRIEVE CURVE POINT, DERIVATIVE AND SECOND
C---    DERIVATIVE AT A PARAMETER VALUE U
C---    C IS THE CANON FORM OF A RATIONAL PARAMETRIC CUBIC CURVE
C---    CV(1 THRU 3) CONTAINS THE CURVE POINT OUTPUT,
C---    CV(5 THRU 7) THE FIRST DERIVATIVE, CV(9 THRU 11), THE
C---    SECOND DERIVATIVE AND CV(13 THRU 15 ) THE NORMALISED
C---    FIRST DERIVATIVE.
      DIMENSION C(16),CV(16)
      DIMENSION F(12)
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-14/
      DATA TWO/2.0D0/
C
C---      SET IUOUT FLAG TO 1 WHEN U IS OUTSIDE (0,1)
      IUOUT=0
      U=UIN
      IF(U.GE.ZERO.AND.U.LE.ONE) GO TO 9
      IUOUT=1
      IF(U.LT.ZERO) U=ZERO
      IF(U.GT.ONE) U=ONE
    9 CONTINUE
C
      CALL BLENDF(U,F)
C
C---  CV(1)=F(1)*C(1)+F(2)*C(2)+F(3)*C(3)+F(4)*C(4)
C---  CV(2)=F(1)*C(5)+F(2)*C(6)+F(3)*C(7)+F(4)*C(8)
C---  CV(3)=F(1)*C(9)+F(2)*C(10)+F(3)*C(11)+F(4)*C(12)
C---  CV(4)=F(1)*C(13)+F(2)*C(14)+F(3)*C(15)+F(4)*C(16)
C---  CV(5)=F(5)*C(1)+F(6)*C(2)+F(7)*C(3)+F(8)*C(4)
C---  CV(6)=F(5)*C(5)+F(6)*C(6)+F(7)*C(7)+F(8)*C(8)
C---  CV(7)=F(5)*C(9)+F(6)*C(10)+F(7)*C(11)+F(8)*C(12)
C---  CV(8)=F(5)*C(13)+F(6)*C(14)+F(7)*C(15)+F(8)*C(16)
C---  CV(9)=F(9)*C(1)+F(10)*C(2)+F(11)*C(3)+F(12)*C(4)
C---  CV(10)=F(9)*C(5)+F(10)*C(6)+F(11)*C(7)+F(12)*C(8)
C---  CV(11)=F(9)*C(9)+F(10)*C(10)+F(11)*C(11)+F(12)*C(12)
C---  CV(12)=F(9)*C(13)+F(10)*C(14)+F(11)*C(15)+F(12)*C(16)
      KLIM=9
      IF(MODE.EQ.0) KLIM=1
      DO 10 I=1,KLIM,4
      CV(I  )=F(I)*C( 1)+F(I+1)*C( 2)+F(I+2)*C( 3)+F(I+3)*C( 4)
      CV(I+1)=F(I)*C( 5)+F(I+1)*C( 6)+F(I+2)*C( 7)+F(I+3)*C( 8)
      CV(I+2)=F(I)*C( 9)+F(I+1)*C(10)+F(I+2)*C(11)+F(I+3)*C(12)
      CV(I+3)=F(I)*C(13)+F(I+1)*C(14)+F(I+2)*C(15)+F(I+3)*C(16)
   10 CONTINUE
      IF(MODE.EQ.0) GO TO 100
C---     NOW CHECK IF THE FORM IS RATIONAL OR SIMPLE
      WSQ=ONE
      DO 25 I=13,16
      IF(I.GT.14) WSQ=ZERO
      IF(DABS(C(I)-WSQ).GT.SMAL) GO TO 30
   25 CONTINUE
C---     FORM IS SIMPLE NON-RATIONAL SO SKIP THESE CALCULATIONS
      GO TO 100
C---     CALCULATE DERIVATIVES BASED ON FORMULA PV(I)=CV(I)/CV(4)
   30 CONTINUE
      WSQ=CV(4)*CV(4)
      TWPW=TWO*CV(8)/CV(4)
      DO 40 I=1,3
      CV(I+4)=(CV(I+4)*CV(4)-CV(I)*CV(8))/WSQ
      CV(I+8)=(CV(I+8)*CV(4)-CV(I)*CV(12))/WSQ-CV(I+4)*TWPW
   40 CONTINUE
C
  100 CONTINUE
      WSQ=ZERO
      DO 110 I=1,3
      CV(I)=CV(I)/CV(4)
      IF(MODE.EQ.0) GO TO 110
      WSQ=WSQ+CV(I+4)**2
  110 CONTINUE
      CV(4)=ONE
      IF(MODE.EQ.0) GO TO 200
C---      UNITIZE FIRST DERIVATIVE
      WSQ=DSQRT(WSQ)
      IF(WSQ.LT.SMAL) WSQ=ONE
      DO 120 I=1,3
      CV(I+12)=CV(I+4)/WSQ
      CV(4*I+4)=ONE
  120 CONTINUE
C
  200 CONTINUE
C
      IF(IUOUT.EQ.0.OR.MODE.EQ.0) GO TO 999
      UINC=UIN
      IF(UIN.GT.ONE) UINC=UIN-ONE
      DO 210 I=1,3
      CV(I)=CV(I)+UINC*CV(I+4)
      CV(I+8)=ZERO
  210 CONTINUE
C
  999 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0001046.V02   ***
*
      SUBROUTINE BLENDF(U,FU)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION FU(*)
      DATA ZERO,ONE/0.0D0,1.0D0/
      DATA TWO,THREE,FOUR,SIX/2.0D0,3.0D0,4.0D0,6.0D0/
C------ INPUT IS A SCALAR U
C------ OUTPUT ARE VALUES OF COONS CUBIC BLEND FUNCTIONS
C------ (FU(I),I=1,4), THEIR FIRST AND SECOND
      IF(U.LT.ZERO.OR.U.GT.ONE) GO TO 100
C------ DERIVATIVES (FU(I),I=5,12)
      U2=U*U
      U3=U2*U
      DIF=U3-U2
      FU(1)=DIF+DIF-U2+ONE
      FU(2)=-FU(1)+ONE
      FU(3)=DIF-U2+U
      FU(4)=DIF
      DIF=THREE*(U2-U)
      FU(5)=DIF+DIF
      FU(6)=-FU(5)
      FU(7)=DIF-U+ONE
      FU(8)=DIF+U
      DIF=SIX*U
      FU(9)=DIF+DIF-SIX
      FU(10)=-FU(9)
      FU(11)=DIF-FOUR
      FU(12)=DIF-TWO
      RETURN
  100 DO 110 I=1,12
  110 FU(I)=ZERO
      IF(U.GT.ONE) GO TO 200
C---  U IS LESS THAN ZERO
      FU(1)=ONE
      FU(3)=U
      FU(7)=ONE
      RETURN
  200 FU(2)=ONE
      FU(4)=U-ONE
      FU(8)=ONE
      RETURN
      END
**** SOURCE FILE : M0000620.V04   ***
*
      SUBROUTINE CRBLEN(U,SC,CV,MODE)
C---     CALLING ARGUMENTS ARE ANALAGOUS TO THOSE OF CNCURV
C---     HOWEVER , THE BLEND FORMULA IS DESIGNED TO PRSERVE
C---     DIRECTIONALITY OF POINTS AS A FUNCTION OF THE NATURAL
C---     FLOW PARAMETER
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION SC(*),CV(*)
      INCLUDE 'DARRAY.INC'
      DIMENSION FU(12),PA(3),PB(3),TA(3),TB(3)
      DATA ONE,ZERO,SMAL/1.0D0,0.0D0,1.0D-15/
C
      CALL BLENDF(U,FU)
      A=SC(1)*SC(1)+SC(5)*SC(5)+SC(9)*SC(9)
      B=SC(2)*SC(2)+SC(6)*SC(6)+SC(10)*SC(10)
      A=DSQRT(A)+SMAL
      B=DSQRT(B)+SMAL
C
      K=0
      DO 10 I=1,9,4
      K=K+1
      PA(K)=SC(I)/A
      PB(K)=SC(I+1)/B
      TA(K)=SC(I+2)/A
      TB(K)=SC(I+3)/B
   10 CONTINUE
C
      W=FU(1)*A+FU(2)*B
      WP=FU(5)*A+FU(6)*B
      WPP=FU(9)*A+FU(10)*B
C
      DO 20 I=1,3
      TEMP1=FU(1)*PA(I)+FU(2)*PB(I)+FU(3)*TA(I)+FU(4)*TB(I)
      CV(I)=W*TEMP1
      IF(MODE.LT.1) GO TO 20
      TEMP2=FU(5)*PA(I)+FU(6)*PB(I)+FU(7)*TA(I)+FU(8)*TB(I)
      CV(I+4)=TEMP1*WP+TEMP2*W
      CV(I+8)=WPP*TEMP1+2.*TEMP2*WP+W*(FU(9)*PA(I)+FU(10)*PB(I)+
     X         FU(11)*TA(I)+FU(12)*TB(I))
   20 CONTINUE
      CV(4)=ONE
      CV(8)=ZERO
      CV(12)=ZERO
      CV(16)=ZERO
      IF(MODE.LT.1) GO TO 999
      CV(8)=ONE
      CV(12)=ONE
      GO TO 999
C
  998 CONTINUE
      CALL CFORM(' ERROR IN CRBLEN',DARRAY,0,16)
      CALL CPRINT(DARRAY)
      GO TO 999
C
  999 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0001061.V07   ***
*
      SUBROUTINE CURFLO(UIN,SC,CV,MODE,NNSEG)
C---     PURPOSE IS TO COMPUTE CURVE POINT AND DERIVATIVES FROM AN
C---     INPUT PARAMETRIC VALUE U.  SC IS THE COMPLETE INPUT CURVE
C---     CANONICAL FORM AND MODE IS ZERO FOR POINT EXTRACTION,
C---     AND NON ZERO IF FIRST AND SECONDERIVATIVES ARE ALSO
C---     DESIRED.   CV IS THE OUTPUT ARRAY. CV(1-3) CONTAINS
C---     THE CURVE POINT, CV(5-7) CONTAINS THE FIRST DERIVATIVE,
C---     CV(9-11) THE SECOND DERIVATIVE AND CV(13-15) CONTAINS
C---     THE UNITIZED TANGENT VECTOR
C---     IF MODE=2 ON INPUT THEN CV(17-19) CONTAINS THE CRSSPL VECOTR,
C---     CV(21-23) THE TWIST ETC. ANALAGOUS TO THE CURVE POINT
C---     AND TANGENT VECTOR ETC.
C---     IF THESE QUANTITIES DO NOT EXIST, THE UPPER PART IS ZEROED.
C---     INPUT  INSEG IS NORMALLY 0.  HOWEVER, IF INSEG
C---     IS POSITIVE THEN INSEG IS INTERPRETED AS A SPECIFIC
C---     SEGMENT NUMBER AND UIN IS A PARAMETER
C---     RELATIVE TO THIS SEGMENT ONLY.  IF UIN IS OUTSIDE THE
C---     0,1 RANGE THE A POINT ON THE LINEAR EXTENSION OF THIS
C---     SEGMENT WILL BE GENERATED.  IF INSEG IS NEGATIVE, THEN
C---     THE ABSOLUTE VALUE REFERS TO A SEGMENT COUNTING BACKWARD FROM
C---     THE LAST SEGMENT OF THE CURVE.
C---     IN EITHER CASE, INSEG MUST REFER TO A LEGITIMATE SEGMENT.
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INCLUDE 'DARRAY.INC'
      DIMENSION SC(*),CV(*)
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC
      DIMENSION TEMP(4,4)
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-7/
C
      INSEG=NNSEG
      MERR=0
C
C
      NMAX=SC(8)
C---     IF NMAX IS ZERO THERE IS NO FLOW STRUCTURE
C---     THEN TREAT INDIVIDUAL ARCS AS CURVE SEGMENTS USING
C---     THE NATURAL COON PARAMETER AS FLOW.
      IF(NMAX.EQ.0) GO TO 300
      IF(INSEG.EQ.0) GO TO 5
C
      MERR=1
      IF(IABS(INSEG).GT.NMAX) GO TO 998
      ISEG=IABS(INSEG)
      IF(INSEG.LT.0) ISEG=NMAX-ISEG+1
      U=UIN
      IF(INSEG.LT.0) U=ONE-U
      FRAC=U
      LOCSEG=SC(9)+(ISEG-1)*4
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200
      IF(U.GE.ZERO.AND.U.LE.ONE) GO TO 30
      LOCARC=SC(7)
      IARC=LOCARC+SC(LOCSEG)*4.
      IF(U.GT.ONE) IARC=IARC+(SC(LOCSEG+1)-ONE)*4.
      ISPL=SC(IARC)
      IF(U.GT.ONE) ISPL=ISPL+(SC(IARC+1)-ONE-ONE)*4.
      IARC=(IARC-LOCARC)/4+1
      GO TO 80
C
    5 CONTINUE
      U=UIN
      IF(U.LT.ZERO) GO TO 10
      IF(U.GT.SC(8)) GO TO 20
C---      OBTAIN SEGMENT NUMBER AND FRACTIONAL AMOUNT
      ISEG=U
      FRAC=U-ISEG
      NMAX=SC(8)
      ISEG=ISEG+1
      IF(ISEG.GT.NMAX) FRAC=ONE
      IF(ISEG.GT.NMAX) ISEG=ISEG-1
      GO TO 30
C
   10 CONTINUE
      ISEG=1
      FRAC=U
      ISPL=SC(11)
      IARC=1
C
      LOCSEG=SC(9)+(ISEG-1)*4
C---     BRANCH FOR CASE OF A DEGENERATE SEGMENT
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200
      GO TO 80
C
   20 CONTINUE
      ISEG=SC(8)
      FRAC=U-SC(8)+ONE
      ISPL=SC(11)+SC(10)*4.-8.
      IARC=SC(4)
C
      LOCSEG=SC(9)+(ISEG-1)*4
C---     BRANCH FOR CASE OF A DEGENERATE SEGMENT
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200
      GO TO 80
C
   30 CONTINUE
C
      LOCSEG=SC(9)+(ISEG-1)*4
C---     BRANCH FOR CASE OF A DEGENERATE SEGMENT
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200
C---     COMPUTE STARTING AND ENDING ARCS FOR THIS SEGMENT(ISEG)
      LOCARC=SC(7)
      IARC1=LOCARC+SC(LOCSEG)*4.
      IARC2=IARC1+(SC(LOCSEG+1)-ONE)*4.
C---     FIND  AN ARC WHICH INCLUDES THE FRACTIONAL VALUE
      DO 50 IARC=IARC1,IARC2,4
      IFLOW1=SC(IARC)
      IFLOW2=(SC(IARC+1)-ONE)*4.+SC(IARC)
      IF(FRAC.GE.SC(IFLOW1).AND.FRAC.LT.SC(IFLOW2)+SMAL) GO TO 60
   50 CONTINUE
      MERR=2
      GO TO 998
C---
   60 CONTINUE
C---     CONVERT ARC REFERENCE TO AN ABSOLUTE
      IARC=(IARC-LOCARC)/4+1
C---     LOCATE FRAC WITHIN THE RANGE OF ONE FLOW FUNCTION
      DO 70 ISPL=IFLOW1,IFLOW2,4
      IF(FRAC.GE.SC(ISPL).AND.FRAC.LT.SC(ISPL+4)+SMAL) GO TO 80
   70 CONTINUE
      MERR=3
      GO TO 998
C
   80 CONTINUE
      IF(IBUG.NE.11) GO TO 83
      CALL BAD(1,1,'U   ',U)
      CALL BAD(1,1,'FRAC',FRAC)
      CALL BAD(1,0,'SEG ',ISEG)
      CALL BAD(1,0,'IARC',IARC)
      CALL BAD(1,0,'ISPL',ISPL)
      CALL BAD(-1,0,'LOCS',LOCSEG)
   83 CONTINUE
C
      IF(FRAC.LT.ZERO) GO TO 85
      IF(FRAC.GT.ONE) GO TO 87
C---      CASE WHERE FRAC IS BETWEEN ZERO AND ONE
C
      PU=FRAC-SC(ISPL)
      SPAN=SC(ISPL+4)-SC(ISPL)
      IF(SPAN.EQ.ZERO) GO TO 81
      PU=PU/SPAN
      UA=SC(ISPL+1)
      UB=SC(ISPL+5)
      UMA=SC(ISPL+2)*SPAN
      UMB=SC(ISPL+6)*SPAN
      GO TO 89
C
   85 CONTINUE
C---      CASE WHERE FRAC IS LT ZERO
      PU=FRAC-SC(ISPL)
      SPAN=SC(ISPL+4)-SC(ISPL)
      IF(SPAN.EQ.ZERO) GO TO 81
      PU=PU/SPAN
      UA=SC(ISPL+1)
      UMA=SC(ISPL+2)*SPAN
      UB=UMA
      UMB=UMA
      GO TO 89
C
   87 CONTINUE
      PU=FRAC-SC(ISPL)
      SPAN=SC(ISPL)-SC(ISPL-4)
      IF(SPAN.EQ.ZERO) GO TO 81
      PU=PU/SPAN
      UB=ONE
      UMB=SC(ISPL+2)*SPAN
      UA=UB-UMB
      UMA=UMB
      GO TO 89
C
   81 CONTINUE
      U=UA
      UP=ZERO
      UPP=ZERO
      UPSQ=ZERO
      GO TO 92
C
   89 CONTINUE
      IF(IBUG.NE.11) GO TO 88
      CALL BAD(1,1,'PU  ',PU)
      CALL BAD(1,1,'SPAN',SPAN)
      CALL BAD(1,1,'UA  ',UA)
      CALL BAD(1,1,'UB  ',UB)
      CALL BAD(1,1,'UMA ',UMA)
      CALL BAD(-1,1,'UMB ',UMB)
   88 CONTINUE
C---     COMPUTE EXACT CORRESPONDING VALUE U OF COONS PARAMETER
      W1=3.0*(UB-UA)-UMA-UMA-UMB
      W2=2.0*(UA-UB)+UMA+UMB
      U=UA+PU*(UMA+PU*(W1+PU*W2))
      UP=UMA+PU*(W1+W1+PU*3.*W2)
      UPP=W1+W1+6.*PU*W2
      UP=UP/SPAN
      UPP=UPP/(SPAN*SPAN)
      UPSQ=UP*UP
   92 CONTINUE
      NN=SC(5)+(IARC-1)*24
      IF(IBUG.NE.11) GO TO 91
      CALL BAD(1,1,'U   ',U)
      CALL BAD(1,1,'UP  ',UP)
      CALL BAD(-1,1,'UPP ',UPP)
   91 CONTINUE
      CALL CNCURV(U,SC(NN),CV,MODE)
C     DO 556 I=1,13,4
C     CALL BAD(-4,1,'CNCV',CV(I))
C 556 CONTINUE
      IF(MODE.EQ.0) GO TO 999
C---     CHANGE DERIVATIVES TO COMPENSATE FOR FLOW RATE.
      DO 90 I=1,3
      CV(I+8)=CV(I+4)*UPP+CV(I+8)*UPSQ
      CV(I+4)=CV(I+4)*UP
   90 CONTINUE
C---     WORK COMPLETED IF MODE.LT.2
      IF(MODE.LT.2) GO TO 999
C---     CHECK IF A CRSSPL IS AVAILABLE AT EACH END OF THE ARC
      IF(DABS(SC(NN-5)-ONE)+DABS(SC(NN+19)-ONE).LT.SMAL) GO TO 100
      IF(DABS(SC(NN-5)-ONE).LT.SMAL.AND.DABS(U).LT.SMAL) GO TO 130
      IF(DABS(SC(NN+19)-ONE).LT.SMAL.AND.DABS(ONE-U).LT.SMAL) GO TO 140
C
C---     NO CROSS SPLINES ARE THERE, SO ZERO OUT CV(17-32)
      DO 101 I=17,32
  101 CV(I)=ZERO
      GO TO 999
C
C---     NOW INTERPOLATE A CROSS SPLINE VECTOR AND DERIVATIVES
  100 CONTINUE
      W1=DABS(SC(NN-1)-3.)
      W2=DABS(SC(NN+23)-3.)
C---    SET UP CANON FORM FOR CRSSPL VECTOR AS A CUBIC ARC
      DO 110 I=1,3
      TEMP(1,I)=SC(NN-9+I)
      TEMP(2,I)=SC(NN+15+I)
      TEMP(3,I)=ZERO
      IF(W1.LT.SMAL) TEMP(3,I)=SC(NN-5+I)
      TEMP(4,I)=ZERO
      IF(W2.LT.SMAL) TEMP(4,I)=SC(NN+19+I)
  110 CONTINUE
C
      TEMP(1,4)=ONE
      TEMP(2,4)=ONE
      TEMP(3,4)=ZERO
      TEMP(4,4)=ZERO
C
      CALL CRBLEN(U,TEMP,CV(17),1)
C     DO 557 I=17,32,4
C     CALL BAD(-4,1,'CRBN',CV(I))
C 557 CONTINUE
      DO 120 I=1,3
      CV(I+24)=CV(I+20)*UPP+CV(I+24)*UPSQ
      CV(I+20)=CV(I+20)*UP
  120 CONTINUE
C---     FINALLY COMPUTE THE NORMAL (TAN CROSSED WITH CRS)
  121 CONTINUE
      CALL CROSS(CV(5),CV(17),TEMP(1,1))
      W=TEMP(1,1)**2+TEMP(2,1)**2+TEMP(3,1)**2
      W=DSQRT(W)
      IF(W.LT.SMAL) W=ONE
      CV(29)=TEMP(1,1)/W
      CV(30)=TEMP(2,1)/W
      CV(31)=TEMP(3,1)/W
      CV(32)=ONE
      GO TO 999
C---     SIMPLE EXTRACTION OF AVAILABLE VECTORS FROM JUNCTION
  130 CONTINUE
      DO 131 L=1,3
      CV(L+16)=SC(NN-9+L)
      IF(DABS(SC(NN-1)-3.).LT.SMAL) CV(L+20)=SC(NN-5+L)
      CV(L+24)=ZERO
  131 CONTINUE
      CV(20)=ONE
      CV(28)=ZERO
      GO TO 121
C
  140 CONTINUE
      DO 141 L=1,3
      CV(L+16)=SC(NN+15+L)
      IF(DABS(SC(NN+23)-3.).LT.SMAL) CV(L+20)=SC(NN+19+L)
      CV(L+24)=ZERO
  141 CONTINUE
      CV(20)=ONE
      CV(28)=ZERO
      IF(DABS(SC(NN+23)-3.).LT.SMAL) CV(24)=ONE
      GO TO 121
C
C
  999 CONTINUE
      IF(IBUG.NE.11) GO TO 997
      CALL BAD(-4,1,'CV1 ',CV(1))
      CALL BAD(-4,1,'CV5 ',CV(5))
      CALL BAD(-4,1,'CV9 ',CV(9))
      CALL BAD(-4,1,'CV17',CV(17))
      CALL BAD(-4,1,'CV21',CV(21))
  997 CONTINUE
      RETURN
C
  998 CONTINUE
      CALL CFORM(' WARNING ERROR IN CURFLO',DARRAY,1,24)
      CALL CPRINT(DARRAY)
      CALL BAD(1,1,'UIN ',UIN)
      CALL BAD(1,0,'MERR',MERR)
      CALL BAD(1,0,'INSG',INSEG)
      CALL BAD(1,1,'U   ',U)
      CALL BAD(1,1,'FRAC',FRAC)
      CALL BAD(1,0,'SEG ',ISEG)
      CALL BAD(1,0,'IARC',IARC)
      CALL BAD(1,0,'ISPL',ISPL)
      CALL BAD(-1,0,'LOCS',LOCSEG)
      CALL SCDUMP(333,SC)
      GO TO 999
C
  200 CONTINUE
C---     SPECIAL ENTRY FOR A DEGENERATE SEGMENT
      LOCARC=SC(7)
      IARC=SC(LOCSEG)
      IF(IARC.EQ.0) GO TO 210
C
      IARC=IARC-1
      PU=ONE
      GO TO 220
C
  210 CONTINUE
      IARC=1
      PU=ZERO
C
  220 CONTINUE
      NN=SC(5)+(IARC-1)*24
      CALL CNCURV(PU,SC(NN),CV,MODE)
C---      ZERO OUT FIRST AND SECOND DERIVATIVES
      DO 230 J=1,2
      DO 230 I=1,3
      CV(I+J*4)=ZERO
  230 CONTINUE
      GO TO 999
C
C---      UIN AND INSEG REFER TO ARC STRUCTURE AND COONS NATURAL
C---      FLOW PARAMETER DIRECTLY
  300 CONTINUE
      U=UIN
      NMAX=SC(4)
      IF(INSEG) 310,320,330
C
  310 CONTINUE
C---     CONVERT INSEG AND UIN TO CASE OF POSITIVE INSEG
      INSEG=NMAX-IABS(INSEG)+1
      UIN=ONE-UIN
      GO TO 330
C
  320 CONTINUE
      IARC=UIN+ONE
      IARC=MIN0(NMAX,IARC)
      IARC=MAX0(1,IARC)
      ULO=IARC-1
      U=UIN-ULO
      GO TO 340
C
  330 CONTINUE
C****    SEGMENT REFERENCE IS OUT OF VALID RANGE
      MERR=4
      IF(INSEG.LT.1.OR.INSEG.GT.NMAX) GO TO 998
C
      IARC=INSEG
      U=UIN
C
  340 CONTINUE
C---     COMPUTE ARC LOCATION IN SC ARRAY
      NN=(SC(2)-ONE+IARC)*24+1
      CALL CNCURV(U,SC(NN),CV,MODE)
      IF(MODE.LT.2) GO TO 999
C
      IF(DABS(SC(NN-5)-ONE)+DABS(SC(NN+19)-ONE).LT.SMAL) GO TO 345
      IF(DABS(SC(NN-5)-ONE).LT.SMAL.AND.DABS(U).LT.SMAL) GO TO 130
      IF(DABS(SC(NN+19)-ONE).LT.SMAL.AND.DABS(ONE-U).LT.SMAL) GO TO 140
C
  345 CONTINUE
C
      W1=DABS(SC(NN-1)-3.)
      W2=DABS(SC(NN+23)-3.)
C---    SET UP CANON FORM FOR CRSSPL VECTOR AS A CUBIC ARC
      DO 350 I=1,3
      TEMP(1,I)=SC(NN-9+I)
      TEMP(2,I)=SC(NN+15+I)
      TEMP(3,I)=ZERO
      IF(W1.LT.SMAL) TEMP(3,I)=SC(NN-5+I)
      TEMP(4,I)=ZERO
      IF(W2.LT.SMAL) TEMP(4,I)=SC(NN+19+I)
  350 CONTINUE
C
      TEMP(4,1)=ONE
      TEMP(4,2)=ONE
      TEMP(4,3)=ZERO
      TEMP(4,4)=ZERO
C
      CALL CRBLEN(U,TEMP,CV(17),1)
C---     FINALLY COMPUTE THE NORMAL (TAN CROSSED WITH CRS)
      CALL CROSS(CV(5),CV(17),TEMP(1,1))
      CALL VNORM(TEMP(1,1),CV(29))
      CV(32)=ONE
      GO TO 999
C
      END
**** SOURCE FILE : M0001635.V04   ***
*
      SUBROUTINE CNSURF(U,V,B,SPV,IFLAG,MMODE)
C...................................................................
C..PURPOSE   GIVEN PATCH AND PARAMETRIC COORDINATES COMPUTE THE PATCH
C..          POINTS AND DERIVATIVES.  SEARCH LOGIC IS USED TO ATTEMPT
C..          TO FIND A NON-ZERO SURFACE NORMAL WHEN THAT NORMAL IS TOO
C..          SMALL.  WHEN PATCH COORDINATES ARE OUTSIDE THE UNIT SQUARE
C..          DATA IS COMPUTED ON THE UNIT BORDER AND EXTRAPOLATED BY A
C..          LINEAR BLEND FORMULA.
C..ARGUMENTS
C..   U,V -  INPUT  PARAMETRIC U,V COORDINATES OF PATCH.
C..   B   -  INPUT PATCH COEFFICIENT ARRAY FOR BICUBIC PATCH AND PATCH
C..          TYPE FLAG ( IN B(1) ) FOR GENCUR PATCH
C..   SPV -  OUTPUT  POINT AND DERIVATIVES OF PATCH AT U,V POSITION
C..          SPV(1-3)=POINT, SPV(5-8)=DP/DU, SPV(9-11)=DP/DV,
C..          SPV(13-15)=DDP/DUU, SPV(17-19)=DDP/DUV, SPV(21-23)=DDP/DVV
C..          SPV(25-27)= DP/DU X DP/DV,  SPV(29-31)=NORM OF SPV(25-27)
C..          SPV(4,8,12,..)=1 IF ARRAY IS SET, =0 IF NOT SET.
C..   IFLAG  INPUT MATRIX FLAGS FOR BICUBIC PATCH AND LOCAL POINTERS
C..          FOR GENCUR PATCH CURVES.
C..   MMODE  INPUT  =0 MEANS CALCULATE PATCH POINT ONLY.
C..                 =1 MEANS CALCULATE POINT AND DERIVATIVES(SPV)
C
C..CALLED BY APT109 BALLOC BALSRF DGEOM  PCHPRC PUVLOC SRFCOM SSPICT
C..CALLS     CNSURG CNSURH CROSS  DMIN1  DMAX1  DOTV   DSQRT
C..ERRORS    NO PROGRAMMED ERROR MODES.
C..RESTRICTIONS
C..          SEARCH LOGIC TO RETRIEVE A NON-ZERO NORMAL MAY NOT
C..          SUCCEED.  IN THAT CASE NORMAL IS SET TO ZERO.  ALSO
C..          SURFACE NORMAL ORIENTATION MAY BE REVERSED IN AREAS
C..          OF COLLAPSING EXTENSIONS.
C..LOCAL VARIABLES
C..   AINC   VARIABLE TO CONTROL THE PARAMETRIC INCREMENT FOR SEARCHING
C..   MODE   VARIABLE TO CONTROL NUMBER OF DERIVATIVES CALCULATED
C..          =MMODE, BUT =1 ALWAYS ON LINEAR EXTENSIONS OF SURFACE
C..   NCT    THE NUMBER OF SEARCH ATTEMPTS
C..   SPW    A BUFFER TO HOLD CURRENT SURFACE PT AND DERIVATIVES WHILE
C..          SEARCHING FOR A NON ZERO NORMAL OR EXTRAPOLATING DATA ON
C..          EXTENSIONS
C..   U1,V1  THE CLOSEST POINT IN THE UNIT SQUARE TO U,V
C..   VSMAL  FIXED VARIABLE USED TO JUDGE WHEN A VECTOR LENGTH IS SMALL
C...................................................................
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      DIMENSION B(64),SPV(32),IFLAG(4)
      DIMENSION SPW(32)
      CHARACTER ENAME*8
C
      INCLUDE 'BLANKCOM.INC'
C
      DATA ZERO,ONE/0.0D0,1.0D0/
      DATA VSMAL,SMAL,HALF/1.0D-9,1.0D-6,0.499999D0/
C
C---/STEP 1/   PREPARATION
C---      SET U1,V1 TO CLOSEST POINT IN UNIT SQUARE TO U,V
C---      WHEN U,V IS OUTSIDE THE UNIT SQUARE THE SURFACE POINT
C---      AND DERIVATIVES ARE EXTRAPOLATED FROM DATA ON THE BORDER.
      U1=U
      V1=V
      U1=DMIN1(ONE,U1)
      U1=DMAX1(ZERO,U1)
      V1=DMIN1(ONE,V1)
      V1=DMAX1(ZERO,V1)
      MODE=MMODE
      IEXT=0
      IF(U.EQ.U1.AND.V.EQ.V1) GO TO 5
C---      U,V IS OUTSIDE THE UNIT SQUARE, EXTRAPOLATION REQUIRED.
      IEXT=1
      MODE=1
    5 CONTINUE
C
C--- NCT IS THE COUNTER WHICH KEEPS TRACK OF THE NUMBER OF TRIALS
C--- WITHIN CNSURF WHENEVER TROUBLE IS ENCOUNTERED IN FINDING A NORMAL
      NCT=0
C---    AINC IS STARTING FACTOR FOR ALTERATION OF U-V VALUES
C---    WHILE SEARCHING FOR A NON DEGENERATE SURFACE NORMAL
      AINC=0.000000001
C---      SAVE U1,V1 VALUES, AS THEY MAY BE CHANGED BY A SEARCH
      U1SAVE=U1
      V1SAVE=V1
C
    1 CONTINUE
C---/STEP 2/   PATCH DERIVATIVES
C
C---    EXTRACT SURFACE POINT AND DERIVATIVES AT U,V VALUES
C---     INTERPOLATE SURF PT AND DERIVS AS RATIONAL BICUBIC.
      IF(IFLAG(1).GT.9) GOTO 7
      CALL CNSURG(U1,V1,B,SPW,IFLAG,MODE)
      GOTO 6
C---     INTERPOLATE SURF PT AND DERIVS AS GENCUR PATCH
    7 IF(IFLAG(2).EQ.0) GOTO 8
      CALL CNSURH(U1,V1,B,SPW,IFLAG,MODE)
      GOTO 6
C---     INTERPOLATE SURF PT AND DERIVS AS FOREIGN PATCH
    8 CALL HOLFRM(B(1),ENAME,1,8,NWD)
      CALL EVAL(ENAME,U1,V1,CANON(IFLAG(1)),SPW,MODE)
C
C---      SAVE SURFACE POINT ON FIRST PASS
    6 IF(NCT.NE.0) GO TO 3
      DO 2 I=1,3
    2 SPV(I)=SPW(I)
      SPV(4)=ONE
    3 CONTINUE
C
C---      SKIP NORMAL CHECKING WHEN ONLY POINT IS DESIRED
      IF(MMODE.EQ.0) GO TO 400
C---/STEP 3/   SIGNIFICANCE OF DERIVATIVES
C---    EXAMINE SURFACE NORMAL FOR NON DEGENERACY
      CALL CROSS(SPW(5),SPW(9),SPW(25))
      CALL DOTV(D3,SPW(25),SPW(25))
      D3=DSQRT(D3)
      IF(D3.GT.VSMAL) GO TO 310
C---    SURFACE NORMAL MAGNITUDE IS SMALL SO EXAMINE FURTHER
C---    FIND MAGNITUDES OF TANSPL AND CRSSPL VECTORS
      CALL DOTV(D1,SPW(5),SPW(5))
      D1=DSQRT(D1)
      CALL DOTV(D2,SPW(9),SPW(9))
      D2=DSQRT(D2)
C---    IF EITHER TANGENT VECTOR IS SMALL, FIND NEW U,V
      IF(D1.LT.VSMAL.OR.D2.LT.VSMAL) GO TO 309
C---    FINALLY CHECK ANGULAR SPREAD BETWEEN TANSPL AND CRSSPL
      IF(D3.GT.SMAL*D1*D2) GO TO 310
C
  309 CONTINUE
C---/STEP 4/   ALTER COORDINATES
C---    OBTAIN A NEW U,V AND TRY FOR A CLEARER SURFACE NORMAL
      NCT=NCT+1
C---    QUIT AFTER 8 TRIALS
      IF(NCT.GT.8) GO TO 310
      FAC=ONE-VSMAL*10.0D0**NCT
      U1=(U1SAVE-HALF)*FAC+HALF
      V1=(V1SAVE-HALF)*FAC+HALF
C---    RECYCLE TO CHECK WHETHER NEW NORMAL IS DEFINED
      GO TO 1
C
C---/STEP 5/   CONSOLIDATE PATCH DERIVATIVES
  310 CONTINUE
C---      RESTORE U1,V1 AND COMPUTE UNIT NORMAL
      U1=U1SAVE
      V1=V1SAVE
      IF(D3.EQ.ZERO) D3=ONE
      DO 311 I=1,3
      SPW(I)=SPV(I)
      SPW(I+28)=SPW(I+24)/D3
  311 CONTINUE
C
C---      FINAL STEP, EXTRAPOLATE SURFACE PT AND DERIVS IF POINT
C---      IS OUTSIDE THE UNIT SQUARE.
  400 CONTINUE
      IF(IEXT.NE.0) GO TO 410
      IF(MMODE.EQ.0) GO TO 490
C---      TRANSFER DERIVATIVES TO SPV ARRAY
      DO 405 I=5,32
  405 SPV(I)=SPW(I)
      GO TO 490
C
  410 CONTINUE
C---/STEP 6/   DERIVATIVES EXTRAPOLATED TO PATCH EXTENSION.
      DU=U-U1
      DV=V-V1
C---      U1 IS A FUNCTION OF U.  U1P IS RATE OF CHANGE OF U1 WRT U.
C---      SIMILARLY FOR V1 AND V1P.
      U1P=ZERO
      IF(U.EQ.U1) U1P=ONE
      V1P=ZERO
      IF(V.EQ.V1) V1P=ONE
      SPV(4)=ONE
C---      EXTRAPOLATION FORMULA IS AS FOLLOWS
C---      SPV = SPW + DU*SPW-U +DV*SPW-V + DU*DV*SPW-UV
      DO 430 I=1,3
      SPV(I)=SPW(I)+DU*SPW(I+4)+DV*(SPW(I+8)+DU*SPW(I+16))
      IF(MMODE.EQ.0) GO TO 430
      SPV(I+4)=SPW(I+4)+DV*SPW(I+16)
      SPV(I+8)=SPW(I+8)+DU*SPW(I+16)
      SPV(I+12)=U1P*SPW(I+12)
      SPV(I+16)=SPW(I+16)
      SPV(I+20)=V1P*SPW(I+20)
  430 CONTINUE
      IF(MMODE.EQ.0) GO TO 490
      CALL CROSS(SPV(5),SPV(9),SPV(25))
      CALL DOTV(D1,SPV(25),SPV(25))
      D1=DSQRT(D1)
      IF(D1.EQ.ZERO) D1=ONE
      DO 440 I=1,3
  440 SPV(I+28)=SPV(I+24)/D1
  490 CONTINUE
C---      SET FLAGS FOR DERIVATIVES
      IF(MMODE.EQ.0) GO TO 999
      DO 495 I=8,32,4
  495 SPV(I)=ONE
C
  999 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0000617.V02   ***
*
      SUBROUTINE CNSURG(U,V,B,SPV,IFLAG,MODE)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C--  MODULAR.  PURPOSE IS TO GENERATE SURFACE POINT AND DIFFERENTIAL
C--  ELEMENTS ON A COONS PATCH (B) FROM INPUT COORDINATES U,V.
C--  U,V = INPUT SURFACE COORDINATES
C--  B   = INPUT COONS PATCH COEFFICIENTS
C--  IFLAG = INPUT ARRAY WHICH RECORDS THE TYPE OF EACH 16-COMPONENT
C--           MATRIX IN THE ARRAY B( 1=CONSTANT,2=LINEAR,3,4=FULL)
C--  MODE  = INPUT.  MODE=0 MEANS ONLY SURFACE POINT REQD.
C--               OTHERWISE FIRST AND SECOND ORDER DIFFERENTIAL ELEMENTS
C--                ARE ALSO REQUIRED
C--  SPV   = OUTPUT  SPV(1-4)= PROJECTIVE COORDINATES OF SURFACE POINT
C--               SPV(5-8) = P.C. OF FIRST DERIV WRT U
C--                SPV(9-12)=  P.C. OF FIRST DERIV WRT V
C--                SPV(13-16)= P.C. OF SECOND DERIV WRT U
C--                SPV(17-20) = P.C. OF MIXED PARTIAL WRT U,V
C--                SPV(21-24) = P.C. OF SECOND DERIV WRT TO V
      LOGICAL IMODE
      DIMENSION B(64),SPV(32),IFLAG(4)
      DIMENSION F(12),G(12),T(12)
C---     POINTERS FOR RAPID EVALUATION OF SPV THRU PRODUCTS OF T AND G.
      DIMENSION NT(6),NG(6)
      DATA NT/1,5,1,9,5,1/
      DATA NG/1,1,5,1,5,9/
C
C
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-12/
C
      IMODE=.FALSE.
      IF(MODE.EQ.0) IMODE=.TRUE.
C------ EVALUATE COONS BLEND FUNCTIONS AND THEIR DERIVATIVES
C------ FOR PARAMETER VALUES U AND V
      CALL BLENDF(U,F)
      CALL BLENDF(V,G)
C------ EVALUATE THE PROJECTIVE SURFACE POINT AND PARTIAL DERIVATIVE
C------ COORDINATES.  EACH COORDINATE SET(X,Y,Z,W) IS EVALUATED
C------ ON SUCCESSIVE PASSES THRU THE 10 LOOP AND SPECIAL SPEED
C------ ROUTES ARE TAKEN FOR A LINEAR OR CONSTANT COORDINATE
C------ MATRIX
      DO 10 I=1,4
      K=IFLAG(I)
      GO TO (100,200,300,300),K
  300 CONTINUE
      N=16*I-16
      KLIM=9
      IF(IMODE) KLIM=1
      DO 310 L=1,KLIM,4
      T(L  )=F(L)*B(N+ 1)+F(L+1)*B(N+ 2)+F(L+2)*B(N+ 3)+F(L+3)*B(N+ 4)
      T(L+1)=F(L)*B(N+ 5)+F(L+1)*B(N+ 6)+F(L+2)*B(N+ 7)+F(L+3)*B(N+ 8)
      T(L+2)=F(L)*B(N+ 9)+F(L+1)*B(N+10)+F(L+2)*B(N+11)+F(L+3)*B(N+12)
      T(L+3)=F(L)*B(N+13)+F(L+1)*B(N+14)+F(L+2)*B(N+15)+F(L+3)*B(N+16)
  310 CONTINUE
      SPV(I) = T(1)*G(1)+T(2)*G(2)+T(3)*G(3)+T(4)*G(4)
      IF(IMODE) GO TO 10
C
      LV=0
      DO 320 L=1,5
      LV=LV+4
      M=NT(L+1)
      LG=NG(L+1)
      SPV(I+LV)=T(M)*G(LG)+T(M+1)*G(LG+1)+T(M+2)*G(LG+2)+T(M+3)*G(LG+3)
  320 CONTINUE
      GO TO 10
C
  100 SPV(I)=B(16*I-15)
      IF(IMODE) GO TO 10
      DO 110 L = 4,20,4
  110 SPV(I +L) = ZERO
      GO TO 10
C
  200 CONTINUE
      N=16*I-15
      T(1) = B(N)
      T(2) = B(N +1)-B(N)
      T(3) = B(N +4)-B(N)
      T(4) = B(N +5)-B(N +4)-T(2)
      SPV(I) = T(1) +T(2)*U +(T(3) +T(4)*U)*V
      IF(IMODE) GO TO 10
      SPV(I +4) = T(2) +T(4)*V
      SPV(I +8) = T(3) +T(4)*U
      SPV(I +12) = ZERO
      SPV(I +16) = T(4)
      SPV(I +20) = ZERO
   10 CONTINUE
C
      IF(IFLAG(4).EQ.1) GO TO 400
C
C--  INTERPOLATE EUCLIDEAN QUANTITIES FROM PROJECTIVE QUANTITIES
C---     PATCH IS OF RATIONAL FORM SO COMPUTE DERIVATIVES BY RATIOS.
C---     FIRST EVALUATE FIXED W DERIVATIVES AND RATIOS.
      IF(IMODE) GO TO 360
C---     T(1)=WSQ, 2=WU, 3=WV, 4=TWU, 5=TWV, 6=WUU, 7=WUV, 8=WVV
      T(1)=SPV(4)**2
      T(2)=SPV(8)/T(1)
      T(3)=SPV(12)/T(1)
      T(4)=(SPV(8)+SPV(8))/SPV(4)
      T(5)=(SPV(12)+SPV(12))/SPV(4)
      T(6)=SPV(16)/T(1)
      T(7)=SPV(20)/T(1)
      T(8)=SPV(24)/T(1)
C---     LOOP TO EVALUATE RATIONAL DERIVATIVES FOR X,Y,Z COMPONENTS
      DO 350 L=1,3
C---     PARTIAL OF F WITH RESPECT TO U =FU.
      SPV(L+4)=SPV(L+4)/SPV(4)-SPV(L)*T(2)
C---     PARTIAL OF F WITH RESPECT TO V
      SPV(L+8)=SPV(L+8)/SPV(4)-SPV(L)*T(3)
C---     SECOND PARTIAL OF F WITH RESPECT TO U.
      SPV(L+12)=-T(4)*SPV(L+4)+SPV(L+12)/SPV(4)-SPV(L)*T(6)
C---     SECOND PARTIAL OF F WITH RESPECT TO V.
      SPV(L+20)=-T(5)*SPV(L+8)+SPV(L+20)/SPV(4)-SPV(L)*T(8)
C---     MIXED SECOND PARTIAL OF F WITH RESPECT TO U AND V.
      SPV(L+16)=-(T(5)*SPV(L+4)+T(4)*SPV(L+8))/2.0+
     X          SPV(L+16)/SPV(4)-SPV(L)*T(7)
C---     NOTE THAT THE ORDER OF THE ABOVE CALCULATIONS IS SENSITIVE
  350 CONTINUE
C
  360 CONTINUE
      DO 370 L=1,3
      SPV(L)=SPV(L)/SPV(4)
  370 CONTINUE
C
  400 CONTINUE
C---     SET INDICATOR VALUES FOR QUANTITIES COMPUTED
      IF(IMODE) GO TO 501
      DO 500 I=8,24,4
  500 SPV(I)=ONE
  501 CONTINUE
      SPV(4)=ONE
C
      RETURN
      END
**** SOURCE FILE : M0001056.V02   ***
*
      SUBROUTINE CNSURH(U,V,B,SPV,IFLAG,MMODE)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C------  INTERPOLATION FORMULAS FOR VARIOUS TYPES OF GENCUR
C------  PATCHES ARE HERE.
C---     BLANK COMMON INCLUDED TO PROVIDE ACCESS TO SURFACE
C---     FOR THE SPECIAL CASE OF A SURFACE THRU GENERAL CURVES
C
      INCLUDE 'BLANKCOM.INC'
C
      DIMENSION B(64),SPV(32),IFLAG(4)
      DIMENSION SPW(32),FV(12)
      DIMENSION RK(32,2)
      DIMENSION R(32),RT(32)
      EQUIVALENCE (RK(1,1),R(1)),(RK(1,2),RT(1))
      DIMENSION IFLX(4)
      DATA IFLX/4,4,4,1/
C--- INPUT CONSISTS OF PARAMETRIC U,V COORDINATES.  THE UNIT SQUARE
C--- DIVIDES THE PLANE INTO 9 SECTORS.  THIS ROUTINE DETERMINES THE
C--- CORRECT SECTOR FOR U,V AND THEN COMPUTES SURFACE DIFFERENTIAL
C--- QUANTITIES FOR THE NATURAL PATCH OR ELSE FOR ITS RULED EXTENSIONS
C
      DATA ZERO,ONE/0.0D0,1.0D0/
C
      U1=U
      V1=V
      MODE=MMODE
C
C---     SPECIAL PATH FOR HANDLING A PATCH THRU GENERAL CURVES.
C---     FIRST DECOMPOSE THE PATCH FLAG INTO COMPONENTS FOR
C---     INTERPOLATING BOUNDARIES 1 AND 2 AND BOUNDARIES 3 AND 4
C
  100 CONTINUE
      II=DABS(B(1))
      IA=MOD(II,10)
      IB=II/10
      IB=MOD(IB,10)
C---     LEVEL OF INTERPOLATION IS DIFFERENT FOR RULED INTERPOLATION
C---     AND HIGHER LEVEL OF INTERPOLATION
      IF(IA.LT.2) JLEV=1
      IF(IA.GT.1) JLEV=2
C
C---     OBTAIN DERIVATIVES AT CORRESPONDING EDGES OF BOUNDARIES
C---     NUMBERED 1 AND 2
      DO 110 I=1,2
      LOC=IFLAG(I)
      CALL CURFLO(U,CANON(LOC),RK(1,I),JLEV,1)
  110 CONTINUE
C---      BRANCH TO NON RULED TYPE OF INTERPOLATION
      IF(IA.GT.1) GO TO 200
C---     RULED TYPE OF INTERPOLATION FOLLOWS
      VA=ONE-V1
      VB=V1
      DO 120 I=1,3
      SPV(I)=RK(I,1)*VA+RK(I,2)*VB
      IF(MODE.EQ.0) GO TO 120
      SPV(I+4)=RK(I+4,1)*VA+RK(I+4,2)*VB
      SPV(I+12)=RK(I+8,1)*VA+RK(I+8,2)*VB
      SPV(I+8)=RK(I,2)-RK(I,1)
      SPV(I+20)=ZERO
      SPV(I+16)=RK(I+4,2)-RK(I+4,1)
  120 CONTINUE
C
  140 CONTINUE
C
      GO TO 999
C
C---     THE CASE OF NON-RULED INTERPOLATION
  200 CONTINUE
      CALL BLENDF(V,FV)
      DO 210 I=1,3
      SPV(I)=
     C FV(1)*RK(I,1)+FV(2)*RK(I,2)+FV(3)*RK(I+16,1)+FV(4)*RK(I+16,2)
      IF(MODE.EQ.0) GO TO 210
      SPV(I+4)=
     C FV(1)*RK(I+4,1)+FV(2)*RK(I+4,2)+FV(3)*RK(I+20,1)+FV(4)*RK(I+20,2)
      SPV(I+8)=
     C FV(5)*RK(I,1)+FV(6)*RK(I,2)+FV(7)*RK(I+16,1)+FV(8)*RK(I+16,2)
      SPV(I+12)=
     C FV(1)*RK(I+8,1)+FV(2)*RK(I+8,2)+FV(3)*RK(I+24,1)+FV(4)*RK(I+24,2)
      SPV(I+16)=
     C FV(5)*RK(I+4,1)+FV(6)*RK(I+4,2)+FV(7)*RK(I+20,1)+FV(8)*RK(I+20,2)
      SPV(I+20)=
     C FV(9)*RK(I,1)+FV(10)*RK(I,2)+FV(11)*RK(I+16,1)+FV(12)*RK(I+16,2)
  210 CONTINUE
C
      IF(IB.LT.2) GO TO 140
C
C---     THE FULL CROSS CURVE CASE, TWO MORE LEVELS OF INTERPOLATION
C---     ARE NOW REQUIRED.
C
C---     FIRST LOAD THE TWO CROSS CURVES AND INTERPOLATE THEM
      DO 410 I=3,4
      LOC=IFLAG(I)
      II=I-2
      CALL CURFLO(V,CANON(LOC),RK(1,II),JLEV,1)
  410 CONTINUE
      BSAVE=B(1)
      CALL BLENDF(U,FV)
      DO 420 I=1,3
      SPW(I)=SPV(I)+
     C FV(1)*RK(I,1)+FV(2)*RK(I,2)+FV(3)*RK(I+16,1)+FV(4)*RK(I+16,2)
      IF(MODE.EQ.0) GO TO 420
      SPW(I+4)=SPV(I+8)+
     C FV(1)*RK(I+4,1)+FV(2)*RK(I+4,2)+FV(3)*RK(I+20,1)+FV(4)*RK(I+20,2)
      SPW(I+8)=SPV(I+4)+
     C FV(5)*RK(I,1)+FV(6)*RK(I,2)+FV(7)*RK(I+16,1)+FV(8)*RK(I+16,2)
      SPW(I+12)=SPV(I+20)+
     C FV(1)*RK(I+8,1)+FV(2)*RK(I+8,2)+FV(3)*RK(I+24,1)+FV(4)*RK(I+24,2)
      SPW(I+16)=SPV(I+16)+
     C FV(5)*RK(I+4,1)+FV(6)*RK(I+4,2)+FV(7)*RK(I+20,1)+FV(8)*RK(I+20,2)
      SPW(I+20)=SPV(I+12)+
     C FV(9)*RK(I,1)+FV(10)*RK(I,2)+FV(11)*RK(I+16,1)+FV(12)*RK(I+16,2)
  420 CONTINUE
C---     FINALLY SET UP MATRIX FOR CONVENTIONAL COONS INTERPOLATION
C
      DO 470 I=1,2
C
      LOC=IFLAG(I)
      DO 470 J=1,2
      UT=J-1
      CALL CURFLO(UT,CANON(LOC),R(1),2,1)
      IN=J+(I-1)*4-1
      KINC=0
      DO 430 K=1,33,16
      KINC=KINC+1
      B(IN+K)=R(KINC)
      B(IN+K+2)=R(KINC+4)
      B(IN+K+8)=R(KINC+16)
      B(IN+K+10)=R(KINC+20)
  430 CONTINUE
C---     SET THE W MATRIX
      DO 435 L=51,64
      B(L)=ZERO
  435 CONTINUE
      B(49)=ONE
      B(50)=ONE
      B(53)=ONE
      B(54)=ONE
C
  470 CONTINUE
C
C---     NOW EVALUATE COONS INTERPOLATION OF SURFACE POINT
C
      CALL CNSURG(U,V,B,SPV,IFLX,MODE)
C
C---     NOWSUBTRACT THIS POINT AND DERIVATIVES FROM SPW
C---     TO OBTAIN THE CONSTRAINED INTERPOLATION.
C
      DO 450 I=1,3
      SPV(I)=SPW(I)-SPV(I)
      IF(MODE.LT.1) GO TO 450
      SPV(I+4)=SPW(I+8)-SPV(I+4)
      SPV(I+8)=SPW(I+4)-SPV(I+8)
      SPV(I+12)=SPW(I+20)-SPV(I+12)
      SPV(I+16)=SPW(I+16)-SPV(I+16)
      SPV(I+20)=SPW(I+12)-SPV(I+20)
  450 CONTINUE
C---     NOW RESTORE THE B MATRIX
      DO 480 I=2,64
  480 B(I)=ZERO
      B(49)=ONE
      B(50)=ONE
      B(53)=ONE
      B(54)=ONE
      B(1)=BSAVE
C
  999 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0011517.V05   ***
*
      SUBROUTINE CMESH(SPV,UST,VST,J11)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
C---- THIS ROUTINE GIVES A POINT WITH ITS DERIVATIVES,WHEN UST AND VST
C---- IS GIVEN.
C---- THE SURFACE IS LOADED BEFORE BY APT094 IN CAN
C---- LODPCH AND CNSURF ARE CALLED
C
C
C    NPATCH : IST DIE ZURUECKGEGEBENE PATCH-NUMMER
C    UST    : FLAECHEN-PARAMETER IN U-RICHTUNG
C    VST    : FLAECHENPARAMETER IN V-RICHTUNG
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'ISHR16.INC'
C
C
      DIMENSION SPV(32),IFLAG(4),PATCH(64),ITOP(6,4)
C
      INCLUDE 'BLANKCOM.INC'
C
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC
C
C  PUNKT/VECTOR MITTELS PARAMETER AUS SSURF
C
      PA01=UST
      PB01=VST
      PC01=0.0D0
C   MAXIMALE PATCH-ANZAHL
      MPATCH=CAN(J11+4)
C   FLAECHENART (2 FUER MESH-TYP)
      MESH=CAN(J11+5)
C   ANZAHL DER KURVENSEGMENTE IN U-RICHTUNG
      NSPL=CAN(J11+9)-1.
C   ANZAHL DER KURVENSEGMENTE IN V-RICHTUNG
      NPNT=CAN(J11+10)-1.
      IPA01=PA01
      IPB01=PB01
      IF(IPA01.LT.NPNT) GOTO 10
      IPA01=NPNT-1
   30 PU01=PA01-IPA01
   40 IF(IPB01.LT.NSPL) GOTO 20
      IPB01=NSPL-1
   50 PV01=PB01-IPB01
   60 NPATCH=IPB01*NPNT+IPA01+1
      GOTO 70
   10 IF(IPA01.GE.0) GOTO 30
      IPA01=0
      PU01=PA01
      GOTO 40
   20 IF(IPB01.GE.0) GOTO 50
      IPB01=0
      PV01=PB01
      GOTO 60
   70 CONTINUE
      CALL LODPCH(CAN(J11+1),PATCH,IFLAG,ITOP,NPATCH,1)
C
C    MMODE=1 MEANS CALCULATE POINT AND DERIVATIVES(SPV)
      MM=1
C
C
C
      CALL CNSURF(PU01,PV01,PATCH,SPV,IFLAG,MM)
C
      RETURN
      END
