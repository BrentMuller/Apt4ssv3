**** SOURCE FILE : M0000752.V03   ***
*
C.....FORTRAN SUBROUTINE  ....APT001         8/68                 SR
C
C LINKAGE      CALL APT001 (RESULT)
C
C ARGUMENT     RESULT  ARRAY CONTAINING THE X AND Y CO-
C              ORDINATES OF THE INPUT POINT.
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          APT081
C
      SUBROUTINE APT001(RESULT)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
      IF(UNFLAG)GO TO 40
C
      RESULT(3)=Z0
C
C...     TEST FOR ZSURF
C
      IF (ZFLAG) GO TO 30
C
C...     TEST FOR REFSYS
C
      I=K1
      IF (REFFLG) I=K2
      IF (REF(I,3).EQ.Z0) GO TO 10
      RESULT(3)=(REF(I,4)-REF(I,1)*RESULT(1)-REF(I,2)*RESULT(2))/
     1          REF(I,3)
C
C...     CONVERT TO BASE SYSTEM
C
   30 CALL TRANSF(P,RESULT,K2,K3,KM1)
   40 CALL DEFEXT(RESULT)
C
      RETURN
   10 CONTINUE
      UNFLAG=.TRUE.
      GO TO 40
       END
**** SOURCE FILE : M0000753.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT003...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT003
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT
C              DEFINED AS THE INTERSECTION OF TWO LINES BY
C              THE FOLLOWING APT STATEMENT
C              RESULT = POINT/INTOF, LINE1, LINE2
C
C
C LINKAGE      CALL APT003  (RESULT, LINE1, LINE2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING POINT.
C              LINE1   ARRAY CONTAINING THE CANONICAL FORM
C                      OF ONE INPUT LINE.
C              LINE2   ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE OTHER INPUT LINE.
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT001
C              SUBROUTINE          APT077
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       ABS
C
      SUBROUTINE APT003 (RESULT,LINE1,LINE2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(3),LINE1(4),LINE2(4)
      DOUBLE PRECISION LINE1,LINE2
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      DIMENSION PLL(4,3)
C
C...     TRANSFORM CANONICAL FORM TO LOCAL SYSTEM
C
      CALL APT077(LINE1,  2)
      DO 10 I=1,4
   10 PLL(I,1)=L(I)
      CALL APT077(LINE2,  3)
      DO 11 I=1,4
   11 PLL(I,2)=L(I)
      PLL(1,3)=Z0
      PLL(2,3)=Z0
      PLL(3,3)=Z1
      PLL(4,3)=Z0
C
C....   COMPUTE SIMULTANEOUS SOLUTION OF 3 PLANE EQUATIONS
C
      CALL APT075 (RESULT,PLL)
      IF(IERROR.EQ.K52) GO TO 20
      CALL APT001(RESULT)
      GO TO 30
   20 IERROR=K4
      CALL DEFEXT(RESULT)
   30 RETURN
      END
**** SOURCE FILE : M0002787.V03   ***
*
C
C.... FORTRAN SUBROUTINE              APT004               4/17/68
C
C              FORTRAN SUBROUTINE APT004
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT
C              DEFINED AS THE INTERSECTION OF A LINE AND A
C              CIRCLE BY THE FOLLOWING APT STATEMENT
C              RESULT = POINT/****, INTOF, LINE1, CIRC1
C                 **** = XLARGE, YLARGE, XSMALL, OR YSMALL
C
C LINKAGE      CALL APT004 (RESULT, M, LINE1, CIRC1)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING POINT
C              M       INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = XLARGE 2 = YLARGE
C                      4 = XSMALL 5 = YSMALL
C              LINE1   ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT LINE
C              CIRC1   ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT CIRCLE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT083
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          ERROR
C              SUBROUTINE          APT001
C              REAL FUNCTION       ABS
C              REAL FUNCTION       SQRT
C              REAL FUNCTION       SIGN
C
      SUBROUTINE APT004 (RESULT,MN,LINE1,CIRC1)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3),LINE1(4),CIRC1(7)
      DOUBLE PRECISION LINE1
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     TRANSFORM CANONICAL FORMS AND CHECK INPUT VALIDITY
C
      CALL APT077 (LINE1,K5)
      CALL APT083 (CIRC1,K7)
      M = MN
C
C...     COMPUTE DISTANCE FROM CENTER TO LINE AND TEST FOR INTERSECTION
C
      S1  =L(4)-L(1)*C(1)-L(2)*C(2)
      IF (DABS(DABS(S1)-C(7)).LE.Z1EM5) GO TO 270
      IF ((DABS(S1)-C(7)).GT.Z1EM5) GO TO 330
C
C...     COMPUTE CHORD LENGTH AND CHECK MODIFIER FOR VALIDITY
C
      S2 = DSQRT(C(7)**2-S1**2)
      GO TO (140,170,170,140,170),M
  140 IF (L(2)) 400,150,410
  150 CALL ERROR(K8,'APT004  ')
      IF ((M.EQ.K2).OR.(M.EQ.K3).OR.(M.EQ.K5)) GO TO 330
  170 IF (L(1)) 410,180,400
  180 CALL ERROR(K9,'APT004  ')
      IF ((M.EQ.K1).OR.(M.EQ.K4)) GO TO 330
      GO TO 140
C
C...     S(1)=RADIUS,MAKE CHORD LENGTH 0
C
  270 S2  =Z0
      S1 = DSIGN(C(7),S1)
      GO TO 430
C
C...     LINE AND CIRCLE DO NOT INTERSECT
C
  330 IERROR=K6
      UNFLAG=.TRUE.
  300 CALL DEFEXT(RESULT)
      GO TO 9999
C
C...     COMPUTE X AND Y, STORE IN RESULT AND CALL APT001 TO GET Z
C
  400 IF (M.GT.K3) GO TO 430
  420 S2=-S2
      GO TO 430
  410 IF (M.GT.K3) GO TO 420
  430 RESULT(1)=C(1)+ S1 *L(1)+ S2 *L(2)
      RESULT(2)=C(2)+S1*L(2)-S2*L(1)
      CALL APT001(RESULT)
 9999 CONTINUE
       RETURN
       END
**** SOURCE FILE : M0000755.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT005...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT005
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT
C              DEFINED AS THE INTERSECTION OF TWO CIRCLES
C              BY THE FOLLOWING APT STATEMENT
C              RESULT = POINT/****, INTOF, CIRC1, CIRC2
C                 **** = XLARGE, YLARGE, XSMALL, YSMALL
C
C LINKAGE      CALL APT005 (RESULT, M, CIRC1, CIRC2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING POINT
C              M       INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = XLARGE
C                      2 = YLARGE
C                      4 = XSMALL
C                      5 = YSMALL
C              CIRC1   ARRAY CONTAINING THE CANONICAL FORM
C                      OF ONE INPUT CIRCLE
C              CIRC2   ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      OTHER INPUT CIRCLE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT083
C              SUBROUTINE          APT044
C              SUBROUTINE          APT004
C
      SUBROUTINE APT005 (RESULT,MN,CIRC1,CIRC2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3),CIRC1(7),CIRC2(7)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      DIMENSION RSAVE(4)
C
C...     TRANSFORM CANONICAL FORMS AND CHECK INPUT VALIDITY
C
      CALL APT083(CIRC1,K12)
      DO 10 I=1,7
   10 SC(I)=C(I)
      CALL APT083(CIRC2,K13)
C
C...     GET CANONICAL FORM OF LINE (APT044) AND THEN POINT (APT004)
C
      SC(8) =Z2*(C(1) -SC(1))
      SC(9) = Z2* (C(2) -SC(2))
      SC(10) =SC(7)**2 -C(7)**2 +C(1)**2-SC(1)**2 +C(2)**2-SC(2)**2
      DO 20 I=1,4
   20 RSAVE(I)=R(I+3)
      CALL APT044 (C1(2),SC(8),SC(9),Z0,SC(10))
      DO 30 I=1,4
   30 R(I+3)=RSAVE(I)
      CALL APT004 (RESULT,MN,C1(2),CIRC1)
       RETURN
       END
**** SOURCE FILE : M0000756.V02   ***
*
C.....FORTRAN SUBROUTINE             APT006...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT006
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT ON
C              THE CIRCUMFERENCE OF A CIRCLE, DEFINED SUCH
C              THAT A VECTOR FROM THE CENTER OF THE CIRCLE TO
C              THE POINT MAKES A SPECIFIED ANGLE WITH THE
C              POSITIVE X AXIS, BY THE FOLLOWING APT STATEMENT
C              RESULT = POINT/CIRC1, ATANGL, A
C
C LINKAGE      CALL APT006 (RESULT, CIRC1, A)
C
C ARGUMENT     RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING POINT
C              CIRC1   ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT CIRCLE
C              A       REAL VARIABLE CONTAINING THE SIZE OF
C                      THE ANGLE IN DEGREES
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT083
C              SUBROUTINE          APT001
C
      SUBROUTINE APT006 (RESULT,CIRC1,ANG)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(3),CIRC1(7)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     TRANSFORM CANONICAL FORM AND CHECK INPUT VALIDITY
C
      CALL APT083(CIRC1,K7)
      SC(1) =ANG *DEGRAD
      SC(2)=DSIN(SC(1))
      SC(1)=DCOS(SC(1))
      DO 10 I =1,2
   10 RESULT(I) =C(I) +C(7)*SC(I)
      CALL APT001(RESULT)
       RETURN
       END
**** SOURCE FILE : M0000757.V02   ***
*
C.....FORTRAN SUBROUTINE             APT007...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT007
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT
C              DEFINED AS THE CENTER OF A CIRCLE BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = POINT/CENTER, CIRC1
C
C LINKAGE      CALL APT007 (RESULT, CIRC1)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING POINT
C              CIRC1   ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT CIRCLE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT083
C              SUBROUTINE          APT001
C
      SUBROUTINE APT007 (RESULT,CIRC1)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3),CIRC1(7)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     TRANSFORM CANONICAL FORM AND CHECK INPUT VALIDITY
C
      CALL APT083 (CIRC1,K7)
C
C...     SET X AND Y
C
      RESULT(1)=C(1)
      RESULT(2)=C(2)
C
C...     GET Z COORDINATE
C
      CALL APT001 (RESULT)
       RETURN
       END
**** SOURCE FILE : M0002791.V03   ***
*
C.....FORTRAN SUBROUTINE  ....APT008         8/68                    SR
C.....FORTRAN SUBROUTINE             APT008...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT008
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT
C              DEFINED AS THE INTERSECTION OF A LINE AND A
C              CONIC BY THE FOLLOWING APT STATEMENT
C              RESULT = POINT/****, INTOF, LINE1, G1
C              **** = XLARGE, YLARGE, XSMALL OR YSMALL
C
C LINKAGE      CALL APT008 (RESULT, M, LINE1, G1)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING POINT
C              M       INTEGER EQUIVALENT OF THE MODIFIER;
C                      1 = XLARGE
C                      2 = YLARGE
C                      4 = XSMALL
C                      5 = YSMALL
C              LINE1   ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT LINE
C              G1      ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT CONIC.
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT079
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          ERROR
C              SUBROUTINE          APT001
C              REAL FUNCTION       ABS
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT008 (RESULT,MN,LINE1,G1)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3),LINE1(4),G1(10)
      DOUBLE PRECISION LINE1
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE(S1,SC(1)),(S2,SC(2)),(S3,SC(3)),(S4,SC(4)),(S5,SC(5)),
     1(S6,SC(6)),(S7,SC(7)),(S8,SC(8))
C
C...     TRANSFORM CANONICAL FORMS AND CHECK INPUT VALIDITY
C
      M = MN
      CALL APT077 (LINE1,K5)
      CALL APT079 (G1,0)
      IF ((DABS(G(3)).GT.Z1EM5).OR.(DABS(G(5)).GT.Z1EM5).OR.
     1    (DABS(G(6)).GT.Z1EM5).OR.(DABS(G(10)).GT.Z1EM5)) GO TO 60
C
C...     DETERMINE A POINT ON THE LINE
C
      S1  =L(4)*L(1)
      S2  =L(4)*L(2)
C
C...     DETERMINE COEFFICIENTS S(3),S(4),S(5) OF QUADRATIC FORMULA
C
      S3  =G(1)*L(2)*L(2)+G(2)*L(1)*L(1)-Z2*G(7)*L(2)*L(1)
      S4  =G(1)*S1  *L(2)-G(2)*L(1)*S2  -G(7)*L(1)*S1
     1      +G(7)*L(2)*S2  +G(8)*L(2)-G(9)*L(1)
      S5  =G(1)*S1  *S1  +G(2)*S2  *S2  +G(4)
     1       +Z2*(G(7)*S1  *S2  +G(8)*S1  +G(9)*S2  )
C
C...     DETERMINE THE RADICAL OF THE QUADRATIC FORMULA
C
      S6=S4*S4-S3*S5
      IF (S6  .LT.-Z1EM5) GO TO 70
      IF (DABS(Z1EM5-DABS(S6)).LT.Z1EM5) S6=Z0
      S6=DSQRT(S6)
      IF (DABS(S3).LT.Z1EM7) GO TO 80
C
C...     DETERMINE THE TWO ROOTS OF THE QUADRATIC FORMULA
C
      S7=(-S4+S6)/S3
      S8=(-S4-S6)/S3
C
C...     SELECT THE CORRECT ROOT DEPENDING ON M
C
      GO TO (10,20,20,10,20),M
   10 IF(L(2)/S3) 140,30,100
   20 IF(L(1)/S3) 100,40,140
C
C...     VERTICAL LINE WITH XLARGE OR XSMALL
C
   30 CALL ERROR (K8,'APT008  ')
      GO TO 20
C
C...     HORIZONTAL LINE WITH YLARGE OR YSMALL
C
   40 CALL ERROR (K9,'APT008  ')
      GO TO 10
C
C...     INPUT SURFACE UNDEFINED
C
   50 UNFLAG=.TRUE.
   55 CALL DEFEXT (RESULT)
      GO TO 500
C
C...     CONIC SURFACE CONTAINS VALUES FOR Z COORDINATE
C
   60 IERROR=K16
      GO TO 50
C
C...     LINE AND CONIC DO NOT INTERSECT
C
   70 IERROR=K15
      GO TO 50
C
C...     S(3)=0 - QUAD IS X=-S(5)/S(4)  S(4) LT S(5)*Z1EM7-NO INTERSEC.
C
   80 IF (DABS(S4).LT.(Z1EM7*S5)) GO TO 70
      S7=-S5/S4
      GO TO 110
C
C...     DETERMINE LARGE OR SMALL
C
  100 IF (M-K3) 110,110,130
  110 RESULT(1)=S1  +L(2)*S7
      RESULT(2)=S2  -L(1)*S7
  120 CALL APT001 (RESULT)
      GO TO 500
  130 RESULT(1)=S1  +L(2)*S8
      RESULT(2)=S2  -L(1)*S8
      GOTO 120
  140 IF (M-K3) 130,130,110
  500 CONTINUE
      RETURN
       END
**** SOURCE FILE : M0000759.V03   ***
*
C.....FORTRAN SUBROUTINE             APT009...              3/1/68   GK
C              FORTRAN SUBROUTINE APT009
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT
C              DEFINED AS THE INTERSECTION OF THREE PLANES BY
C              THE FOLLOWING APT STATEMENT
C              RESULT = POINT/INTOF,PLANE1,PLANE2,PLANE3
C
C LINKAGE      CALL APT009 (RESULT,PL1,PL2,PL3)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING POINT
C              PL1     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      FIRST INPUT PLANE
C              PL2     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      SECOND INPUT PLANE
C              PL3     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      THIRD INPUT PLANE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT075
C              SUBROUTINE          DEFEXT
C              LOGICAL FUNCTION    CKDEF
C
      SUBROUTINE APT009 (RESULT,PL1,PL2,PL3)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3),PL1(4),PL2(4),PL3(4),PT(4,3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (PT(1,1),P(1))
C
C...     MOVE CANONICAL FORMS TO ONE ARRAY AND CHECK VALIDITY
C
      DO 20 I=1,4
      PT(I,1)=PL1(I)
      PT(I,2)=PL2(I)
      PT(I,3)=PL3(I)
      GO TO (10,10,10,20),I
   10 IF (CKDEF(PT(1,I))) IERROR=K18
   20 CONTINUE
C
C...     COMPUTE SIMULTANEOUS SOLUTION OF 3 PLANE EQUATIONS
C
      CALL APT075 (R,PT)
   30 CALL DEFEXT (RESULT)
       RETURN
       END
**** SOURCE FILE : M0000760.V03   ***
*
C.....FORTRAN SUBROUTINE  ....APT010         8/68                    AR
C.....FORTRAN SUBROUTINE             APT010...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT010
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT
C              DEFINED IN A COORDINATE PLANE BY A POLAR COOR-
C              DINATE AND THE RADIUS VALUE BY THE FOLLOWING
C              APT STATEMENT
C              RESULT = POINT/RTHETA, ****, VAL
C                       **** = XYPLAN, YZPLAN, OR ZXPLAN
C              OR TO DETERMINE A VECTOR IN A COORDINATE PLANE
C              DEFINED BY ITS LENGTH AND AN ANGLE BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = VECTOR/LENGTH, VAL, ATANGL, THETA, ****
C                       **** = XYPLAN, YZPLAN OR ZXPLAN
C
C LINKAGE      CALL APT010 (RESULT, M, VAL, THETA)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING POINT OR VECTOR
C              M       INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = XYPLAN, 2 = YZPLAN, 3 = ZXPLAN
C              VAL     REAL VARIABLE CONTAINING THE VALUE
C                      OF THE POLAR COORDINATE RADIUS OR LENGTH
C                      OF THE VECTOR
C              THETA   REAL VARIABLE CONTAINING THE VALUE
C                      OF THE POLAR COORDINATE ANGLE IN DEGREES
C                      OR ANGLE OF THE VECTOR IN DEGREES
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT081
C              SUBROUTINE          DEFEXT
C              REMAINDERING FUNCTION MOD
C
      SUBROUTINE APT010 (RESULT,MN,VAL,THETA)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1))
C
C...     CONVERT THETA TO RADIANS
C
      S1  =THETA*DEGRAD
      R(MN) = VAL*DCOS(S1)
      M=1+MOD(MN,K3)
      R(M) = VAL*DSIN(S1)
      M=1+MOD(M,K3)
      R(M)=Z0
C
C...     CONVERT TO BASE SYSTEM IF NECESSARY
C
      CALL UNPACK(RESULT,I,J,K)
C...    CHECK FOR POINT OR VECTOR
      IF(I.EQ.20) GO TO 10
      CALL APT081(R,KM1)
      GO TO 20
   10 CALL APT078(R,KM1)
   20 CALL DEFEXT(RESULT)
       RETURN
       END
**** SOURCE FILE : M0000693.V06   ***
*
C.....FORTRAN SUBROUTINE  ....APT011         8/68                    RN
C
C
C              FORTRAN SUBROUTINE APT011
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A POINT DEFINED
C              AS THE INTERSECTION CLOSEST TO A GIVEN POINT OF
C              A TABCYL AND A LINE BY THE FOLLOWING APT
C              STATEMENT
C                RESULT = POINT/INTOF, LIN, TAB, PT
C
C LINKAGE      CALL APT011 (RESULT, LIN, TAB, PT)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING LINE
C              LIN     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT LINE
C              TAB     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT TABCYL
C              PT      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT001
C              SUBROUTINE          APT092
C              SUBROUTINE          APT093
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DDTABC
C              LOGICAL FUNCTION    LINDEF
C              SUBROUTINE          SCHTB
C
      SUBROUTINE APT011 (RESULT,LIN,TAB,PT)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DOUBLE PRECISION  LIN,TAB,RADI,PT,RESULT
      DIMENSION RESULT(3),LIN(4),TAB(2),PT(3)
      LOGICAL CKDEF,LINDEF
C
      INCLUDE 'BLANKCOM.INC'
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'SV.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISV.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'IFXCOR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C
C
C...     TRANSFER ARRAYS, CHECK INPUT
C
      IABCL=0
      IF(SUBFLG) IABCL=1
      DO 10 I=1,2
      P(I)=PT(I)
      L(I)=LIN(I)
   10 V(I)=TAB(I)
      L(3)=LIN(3)
      L(4)=LIN(4)
      UNFLAG=LINDEF(L,K5).OR.CKDEF(P).OR.CKDEF(V)
      IF (UNFLAG) RETURN
C
C... RETRIEVE TABCYL EXTERNAL CANONICAL FORM. STORE CANON INDEX IN J11.
C
      CALL APT094(3,TAB(1),J11)
      IF (CKDEF(TAB(1)))  GO TO 99
C
C...     FIND PART OF TABCYL CLOSEST TO INPUT POINT P, USING SCHTB
C
      CALL SCHTB(CANON(J11-1))
C
C...     CONSIDER TABCYL AS A CHECK SURFACE, LINE AS TOOL NORMAL,
C...     DESIRED POINT AS SURFACE POINT -USE DDTABC TO FIND SP
      M11=IS
      IS =ICS
      DO 30 I=1,3
      SC(I)  =TN(I,ICS)
      SC(I+3)=TP(I,ICS)
   30 TP(I,ICS)  =L(I)*L(4)
      TN(1,ICS)  =L(2)
      TN(2,ICS)=-L(1)
      TN(3,ICS)=Z0
      L11=IOP(ICS)
      IOP(ICS) = 0
      SUBFLG =.TRUE.
      CALL DDTABC(CANON(J11-1))
      IF(IER.NE.K0) IERROR = 72
      RESULT(1)=SP(1,ICS)
      RESULT(2)=SP(2,ICS)
C
C...     GET THIRD COORDINATE
C
      IF(IABCL.EQ.1) GO TO 88
      CALL APT001 (RESULT)
   88 CONTINUE
      IER = 0
      IS =M11
      IOP(ICS)=L11
      DO 40 I=1,3
      TN(I,ICS) =SC(I)
   40 TP(I,ICS) =SC(I+3)
      SUBFLG =.FALSE.
   99 CONTINUE
      RETURN
       END
**** SOURCE FILE : M0000762.V02   ***
*
C.....FORTRAN SUBROUTINE             APT012...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT012
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS PASSING THROUGH TWO POINTS BY ONE OF THE
C              FOLLOWING APT STATEMENTS
C                  RESULT = LINE/X1, Y1, Z1, X2, Y2, Z2
C              OR  RESULT = LINE/X1, Y1, X2, Y2
C
C LINKAGE      CALL APT012 (RESULT, X1, Y1, X2, Y2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN CANONICAL FORM OF
C                      RESULTING LINE
C              X1      X COORDINATE OF THE FIRST INPUT POINT
C              Y1      Y COORDINATE OF THE FIRST INPUT POINT
C              X2      X COORDINATE OF THE SECOND INPUT POINT
C              Y2      Y COORDINATE OF THE SECOND INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          VNORM
C              LOGICAL FUNCTION    ZVECT
C
      SUBROUTINE APT012 (RESULT,X1,Y1,X2,Y2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4)
      LOGICAL ZVECT
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     SET UP VECTOR
C
      V(1)=Y1-Y2
      V(2)=X2-X1
      V(3)=Z0
C
C...     CHECK POINTS TOO CLOSE (ALL VECTOR COMPONENTS LT .000001)
C
      IF (.NOT.ZVECT(V)) IERROR=K19
C
C...     NORMALIZE VECTOR
C
      CALL VNORM(V,V)
C
C...     COMPUTE RESULT(4) AND TRANSFORM IF NECESSARY  (APT077)
C
      V(4)=V(1)*X1+V(2)*Y1
      CALL APT077 (V,KM1)
   10 CALL DEFEXT (RESULT)
       RETURN
       END
**** SOURCE FILE : M0000694.V03   ***
*
C
C     FORTRAN SUBROUTINE APT013
C  PURPOSE     TO GENERATE THE CANONICAL FORM OF A CIRCLE OR A CYLNDER
C              DEFINED AS TANGENT TO EACH OF THREE GIVEN LINES
C              BY THE FOLLOWING APT STATEMENT.
C              RESULT=CYLNDR/**,L1,**,L2,**,L3
C                **=XLARGE,YLARGE,ZLARGE,XSMALL,YSMALL,ZSMALL
C                CYLNDR CAN BE REPLACED BY CIRCLE
C  LINKAGE     CALL APT013 (RESULT,M1,L1,M2,L2,M3,L3)
C  ARGUMENTS   RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CYLNDR OR CIRCLE.
C              M1-M3   INTEGER EQUIVALENT OF THE MODIFIER
C                      1=XLARGE  2=YLARGE  3=ZLARGE
C                      4=XSMALL  5=YSMALL  6=ZSMALL
C              L1-L3   ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      PLANE OR LINE.
C  SUBSIDIARIES    TYPE      ENTRY
C                SUBROUTINE  APT077
C                SUBROUTINE  DOTF
C                SUBROUTINE  CROSSV
C                SUBROUTINE  APT075
C                SUBROUTINE  APT047
C                SUBROUTINE  DEFEXT
      SUBROUTINE APT013(RESULT,M1,L1,M2,L2,M3,L3)
      IMPLICIT DOUBLE PRECISION (A-H), DOUBLE PRECISION (O-Z)
C
C
C
      INCLUDE 'TOTAL.INC'
C...  ALL REFERENCES TO VARIABLE A HAVE BEEN CHANGED TO AZ,
C...  BECAUSE A OCCURS IN DEF.INC.
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'IDEF.INC'
C
C
      DIMENSION RESULT(7),L1(4),L2(4),L3(4),SL(4,3),TL(4,3),MS(3)
      DIMENSION MT(3),TTL(4,3),PT1(3,2),PT2(3,2),MTT(3)
      DOUBLE PRECISION L1,L2,L3
C...  TRANSFORM FROM BASE TO LOCAL
      CALL APT077(L1,0)
      DO 10 I=1,4
   10 SL(I,1) = L(I)
      MS(1) = M1
C
       CALL APT077(L2,0)
      DO 11 I=1,4
   11 SL(I,2)=L(I)
      MS(2)=M2
C
      CALL APT077(L3,0)
      DO 12 I=1,4
   12 SL(I,3) = L(I)
      MS(3)=M3
C...  GET TWO UNPARALLEL PLANE
      DO 13 J=1,3
      I=J+1
      IF(J.EQ.3) I=1
      CALL DOTF(DOT,SL(1,J),SL(1,I))
      MT(J)=0
      IF(DABS(DOT).LT.0.9999) MT(J)=1
   13 CONTINUE
      IF(MT(1)+MT(2)+MT(3).LE.1) GO TO 98
      IF(MT(1).EQ.0) GO TO 14
      I=1
      J=2
      IF(MT(2).EQ.0) J=3
      GO TO 15
   14 I=2
      J=3
   15 JJ=J+1
      IF(J.EQ.3) JJ=1
      DO 16 K=1,4
      TL(K,1)=SL(K,I)
      TL(K,2)=SL(K,I+1)
      TTL(K,1)=SL(K,J)
   16 TTL(K,2)=SL(K,JJ)
      MT(1)=MS(I)
      MT(2)=MS(I+1)
      MTT(1)=MS(J)
      MTT(2)=MS(JJ)
      TL(4,3) = 0.0
      CALL CROSS(TL(1,1),TL(1,2),TL(1,3))
      CALL VNORM(TL(1,3),TL(1,3))
      DO 17 K=1,4
   17 TTL(K,3)=TL(K,3)
C...  CHECK PERPENDICULARITY
      DO 18 J=1,3
      CALL DOTF (DOT,SL(1,J),TL(1,3))
      IF(DABS(DOT).GT.0.000001) GO TO 98
   18 CONTINUE
C..   GET INTERSECTION POINT
      CALL APT075 (PT1(1,1),TL(1,1))
      CALL APT075(PT1(1,2),TTL(1,1))
C...  OFFSET THE PLANE
      DO 19 I=1,2
      DO 191 J=1,4
  191 L(J)=TL(J,I)
      MN=MT(I)
      ASSIGN 192 TO IRTN
      GO TO 70
  192 DO 193 J=1,4
  193 TL(J,I)=L(J)
      DO 194 J=1,4
  194 L(J)=TTL(J,I)
      MN=MTT(I)
      ASSIGN 195 TO IRTN
      GO TO 70
  195 DO 196 J=1,4
  196 TTL(J,I)=L(J)
   19 CONTINUE
C...  GET INTERSECTION POINT
      CALL APT075 (PT2(1,1),TL(1,1))
      CALL APT075(PT2(1,2),TTL(1,1))
C...  GET PLANE THRU TWO POINTS
      DO 21 J=1,2
      DO 20 I=1,3
   20 TL(I,J)=PT2(I,J)-PT1(I,J)
      CALL CROSS(TL(1,3),TL(1,J),TL(1,J))
      CALL VNORM(TL(1,J),TL(1,J))
   21 CALL DOTF(TL(4,J),TL(1,J),PT1(1,J))
C...  GET INTERSECTION OF TWO PLANES
      CALL APT075 (R(1),TL(1,1))
C--- CII UPDATE TO CHECK FOR INCONSISTENCY  NIU-APR/75
      DO 200 M=1,3
      CALL DOTF(AZ,R,SL(1,M))
      N=MS(M)
      IF(N.GT.3) N=N-3
      IF((SL(4,M)-AZ)*SL(N,M)*(MS(M)-3.5).LT.0.D0) GO TO 98
  200 CONTINUE
      CALL VNORM(TL(1,3),TL(1,3))
      R(4)=TL(1,3)
      R(5)=TL(2,3)
      R(6)=TL(3,3)
      R(7) = SL(4,1)-SL(1,1)*R(1)-SL(2,1)*R(2)-SL(3,1)*R(3)
      R(7) = DABS(R(7))
      GO TO 99
   98 IERROR = 43
   99 CALL DEFEXT(RESULT)
      RETURN
C.... GET PARALLEL PLANE.
   70 JI=MOD(MN-1,3)
      DUMMY1=MN
      S1=L(JI+1)*(3.5D0-DUMMY1)
      IF(S1.NE.0.0D0) GO TO 80
      IERROR=59
      GO TO 99
   80 L(4)=L(4)+DSIGN(0.5D0,S1)
      GOTO IRTN,(192,195)
      E N D
**** SOURCE FILE : M0000764.V02   ***
*
C.....FORTRAN SUBROUTINE             APT014...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT014
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE
C              DEFINED AS PASSING THROUGH TWO SYMBOLIC POINTS
C              BY THE FOLLOWING APT STATEMENT
C                   RESULT = LINE/P1, P2
C
C LINKAGE      CALL APT014 (RESULT, P1, P2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN CANONICAL FORM OF THE
C                      RESULTING LINE
C              P1      ARRAY CONTAINING CANONICAL FORM OF THE
C                      FIRST INPUT POINT
C              P2      ARRAY CONTAINING CANONICAL FORM OF THE
C                      SECOND INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT081
C              SUBROUTINE          APT012
C
      SUBROUTINE APT014 (RESULT,P1,P2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),P1(3),P2(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C...     CHECK INPUT VALIDITY AND TRANSFORM CANONICAL FORMS
C
      CALL APT081 (P1,0)
      SC(1) = P(1)
      SC(2) = P(2)
      CALL APT081 (P2,0)
C
C...     LINE THRU TWO POINTS FROM APT012
C
      CALL APT012(RESULT,SC(1),SC(2),P(1),P(2))
       RETURN
       END
**** SOURCE FILE : M0000765.V02   ***
*
C.....FORTRAN SUBROUTINE             APT015...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT015
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS TANGENT TO A CIRCLE AND PASSING THROUGH A
C              GIVEN POINT BY THE FOLLOWING APT STATEMENT
C              RESULT = LINE/POINT1, ****, TANTO, CIRC1,
C                       **** = RIGHT OR LEFT
C
C LINKAGE      CALL APT015 (RESULT, PNT, N, CIRC1)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING LINE
C              PNT     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              N       INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = RIGHT     2 = LEFT
C              CIRC1   ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT CIRCLE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT016
C              SUBROUTINE          APT081
C              SUBROUTINE          APT083
C
      SUBROUTINE APT015 (RESULT, PNT, MN, CIRC1)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4), PNT(3), CIRC1(7)
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C...       TRANSFORM CANONICAL FORM TO LOCAL COORDINATE SYSTEM
C
      CALL APT081 (PNT,0)
C
C
C...       MAKE THE POINT A ZERO RADIUS VERTICAL CYLINDER
C
      DO 10 I=3,7
   10 P(I) = R(I)
C
C
C...       TRANSFORM TO BASE SYSTEM AND CALL APT016 TO GET LINE
C
      CALL APT083 (P,KM1)
      CALL APT016 (RESULT, MN, R, MN, CIRC1)
       RETURN
       END
**** SOURCE FILE : M0004296.V02   ***
*
C.....FORTRAN SUBROUTINE             APT016...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT016
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS TANGENT TO TWO CIRCLES BY THE FOLLOWING APT
C              STATEMENT
C              RESULT = LINE/****, TANTO, CIRC1, ****, TANTO,
C                       CIRC2
C                **** = LEFT OR RIGHT
C
C LINKAGE      CALL APT016 (RESULT, M, CIRC1, N, CIRC2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING LINE
C              M       INTEGER EQUIVALENT OF THE FIRST MODIFIER
C                             1 = RIGHT        2 = LEFT
C              CIRC1   ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST CIRCLE
C              N       INTEGER EQUIVALENT OF THE SECOND MODIFIER
C                             1 = RIGHT       2 = LEFT
C              CIRC2   ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND CIRCLE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT083
C              REAL FUNCTION       ABS
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT016 (RESULT,MN, CIRC1,NM, CIRC2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),CIRC1(7),CIRC2(7)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1)),(S2,SC(2)),(S3,SC(3)),(S4,SC(4)),(S5,SC(5))
C
C...     TRANSFORM CANONICAL FORMS AND CHECK INPUT VALIDITY
C
      CALL APT083 (CIRC1,21)
      DO 10 I=1,7
   10 SC(I+5) = C(I)
      CALL APT083 (CIRC2,22)
C
C...     CALCULATE DISTANCE BETWEEN CENTERS CHECK FOR CONCENTRIC,
C...        INTERSECTING CIRCLES OR CENTERS TOO CLOSE.
C
      S1=DSQRT((C(1)-SC(6))**2+(C(2)-SC(7))**2)
      IF (S1.LE.Z1EM5) IERROR=K23
      IF (IERROR.NE. 0) GO TO 30
      IF(DABS(SC(12)-C(7))-S1.GT.Z1EM5) IERROR = K24
      IF (IERROR.NE. 0) GO TO 30
      IF ((S1 -(SC(12) +C(7))).GE.Z1EM5) GO TO 20
      IF (NM.NE.MN) IERROR = K25
   20 IF (IERROR.NE. 0) GO TO 30
C...     CALCULATE SIN(ALPHA) AND COS(ALPHA)
C
      S2 =   (C(2)-SC(7))/S1
      S3 =   (C(1)-SC(6))/S1
      IF (MN.EQ.NM)SC(12) = -SC(12)
C
C...     CALCULATE SIN(GAMMA) AND COS(GAMMA)
C
      S4 = (C(7) +SC(12)) /S1
      S5=DSQRT(Z1-S4*S4)
      IF (NM.EQ.K1) S5 = -S5
C
C...     SET UP CANONICAL FORM IN P AND TRANSFORM TO BASE COORDINATES
C
      P(1)=S4*S3+S5*S2
      P(2)=S4*S2-S5*S3
      P(3)=Z0
      CALL VNORM (P,P)
      P(4)=P(1)*C(1)+P(2)*C(2)-C(7)
      CALL APT077 (P,KM1)
   30 CALL DEFEXT (RESULT)
       RETURN
       END
**** SOURCE FILE : M0000767.V02   ***
*
C.....FORTRAN SUBROUTINE              APT017               4/17/68
C
C              FORTRAN SUBROUTINE APT017
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS PASSING THROUGH A POINT AND HAVING A SPECI-
C              FIED SLOPE OR FORMING A SPECIFIED ANGLE WITH THE
C              X-AXIS BY ONE OF THE FOLLOWING APT STATEMENTS
C              RESULT = LINE/PNT, ATANGL, ALPHA
C              RESULT = LINE/PNT, SLOPE, ALPHA
C
C LINKAGE      CALL APT017 (RESULT, PNT, M, ALPHA)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING LINE
C              PNT     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT POINT
C              M       INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = ATANGL 2 = SLOPE
C              ALPHA   REAL VARIABLE CONTAINING THE VALUE OF
C                      THE ANGLE (DEGREES) OR SLOPE.
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT022
C              REAL FUNCTION       ATAN
C
      SUBROUTINE APT017 (RESULT,PNT,MN,ALPHA)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(4),PNT(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     IF SLOPE, SOLVE FOR ANGLE
C
      IF (MN.EQ.K1)GO TO 10
      ALPHA=DATAN(ALPHA)/DEGRAD
C
C...     TRANSFORM LOCAL X-AXIS (0,1,0,0) TO BASE SYSTEM
C
   10 CALL APT077 (R(5),KM1)
      CALL APT022 (RESULT,PNT,K1,ALPHA,R)
      RETURN
       END
**** SOURCE FILE : M0000768.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT018...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT018
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS PASSING A GIVEN POINT AND PARALLEL TO A GIVEN
C              LINE BY THE FOLLOWING APT STATEMENT
C              RESULT = LINE/PNT, PARLEL, LN
C
C LINKAGE      CALL APT018 (RESULT, PNT, LN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING LINE
C              PNT     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT POINT
C              LN      ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT LINE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT046
C              SUBROUTINE          APT077
C
      SUBROUTINE APT018 (RESULT,PNT,LN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(4),PNT(3),LN(4)
      DOUBLE PRECISION LN
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     CHECK VALIDITY OF LN IN LOCAL SYSTEM
C
      CALL APT077(LN, 92)
C
C...     SOLVE FOR PLANE PARLEL TO LN-PLANE  (APT046)
C
      CALL APT046 (RESULT,PNT,LN)
      RETURN
       END
**** SOURCE FILE : M0000769.V02   ***
*
C.....FORTRAN SUBROUTINE              APT019                3/6/68
C
C              FORTRAN SUBROUTINE APT019
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS PASSING THROUGH A POINT AND PERPENDICULAR TO
C              A GIVEN LINE BY THE FOLLOWING APT STATEMENT
C              RESULT = LINE/PNT, PERPTO, LN
C
C LINKAGE      CALL APT019 (RESULT, PNT, LN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING LINE
C              PNT     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C              LN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT LINE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT022
C
      SUBROUTINE APT019(RESULT,PNT,LN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(4),PNT(3),LN(4)
      DOUBLE PRECISION LN
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C...     USE APT022 TO FIND LINE THRU PNT, AT 90 DEGREES WITH LN
C
      CALL APT022 (RESULT,PNT,1,Z90,LN)
      RETURN
       END
**** SOURCE FILE : M0000770.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT020...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT020
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS PARALLEL TO, AND AT A GIVEN DISTANCE FROM A
C              GIVEN LINE BY THE FOLLOWING APT STATEMENT
C              RESULT = LINE/PARLEL, LN, ****, DT
C                   **** = XLARGE, YLARGE, XSMALL, YSMALL
C
C LINKAGE      CALL APT020 (RESULT, LN, M, DT)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING LINE
C              LN      ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT LINE
C              M       INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = XLARGE
C                      2 = YLARGE
C                      4 = XSMALL
C                      5 = YSMALL
C              DT      REAL VARIABLE CONTAINING THE DISTANCE
C                      BETWEEN THE LINES
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT047
C              SUBROUTINE          APT077
C
      SUBROUTINE APT020 (RESULT,LN,MN,DT)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(4),LN(4)
      DOUBLE PRECISION LN
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     CHECK VALIDITY OF LN IN LOCAL SYSTEM
C
      CALL APT077 (LN, 92)
C
C...     SOLVE FOR PLANE PARLEL TO LN, DISTANCE DT - APT047 (BASE SYS)
C
      CALL APT047(RESULT,LN,MN,DT)
      RETURN
       END
**** SOURCE FILE : M0000771.V02   ***
*
C.....FORTRAN SUBROUTINE              APT021               3/26/68
C
C              FORTRAN SUBROUTINE APT021
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS HAVING A GIVEN SLOPE (OR FORMING A GIVEN ANGLE WITH
C              THE POSITIVE XAXIS) AND A GIVEN X OR Y - INTERCEPT
C              BY THE FOLLOWING APT STATEMENTS
C              RESULT = LINE/MN,PSI,INTERC,IAX,YIN
C
C LINKAGE      CALL APT021 (RESULT,MN,PSI,IAX,YIN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING LINE
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = ATANGL  2 = SLOPE
C              PSI     REAL VARIABLE CONTAINING THE VALUE OF THE
C                      ANGLE (IN DEGREES) OR SLOPE
C              IAX     INTEGER EQUIVALENT OF THE AXIS
C                      1 = XAXIS  2 = YAXIS
C              YIN     REAL VARIABLE CONTAINING THE VALUE OF THE
C                      X OR Y - INTERCEPT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT012
C              REAL FUNCTION       TAN
C
      SUBROUTINE APT021 (RESULT,MN,PSI,IAX,YIN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(4)
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C...     USE APT012 TO FIND LINE THRU TWO POINTS
C
C
      PS = PSI
      IF (MN.EQ.2) GO TO 10
      PS = PS*DEGRAD
      PS = DTAN(PS)
   10 IF (IAX.EQ.2) GO TO 20
      CALL APT012 (RESULT,YIN,Z0,YIN+Z1/PS,Z1)
      GO TO 30
   20 CALL APT012 (RESULT,Z0,YIN,Z1,PS+YIN)
   30 CONTINUE
      RETURN
       END
**** SOURCE FILE : M0000772.V03   ***
*
C
C.....FORTRAN SUBROUTINE              APT022                3/5/68
C
C              FORTRAN SUBROUTINE APT022
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS PASSING THROUGH A GIVEN POINT AND FORMING A
C              SPECIFIED ANGLE OR SLOPE WITH A GIVEN LINE BY THE
C              FOLLOWING APT STATEMENTS
C              RESULT = LINE/PN, ATANGL, PSI, LIN
C              RESULT = LINE/PN, SLOPE, PSI, LIN
C
C LINKAGE      CALL APT022 (RESULT,PN,MN,PSI,LIN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING LINE
C              PN      ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT POINT
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = ATANGL  2 = SLOPE
C              PSI     REAL VARIABLE CONTAINING THE VALUE OF
C                      THE ANGLE (IN DEGREES) OR SLOPE
C              LIN     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT LINE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT081
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          VNORM
C              REAL FUNCTION       SIN
C              REAL FUNCTION       COS
C              REAL FUNCTION       ATAN
C
      SUBROUTINE APT022 (RESULT,PN,MN,PSI,LIN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(4),PN(3),LIN(4)
      DOUBLE PRECISION LIN
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1)),(S2,SC(2)),(S3,SC(3))
C
C...     TRANSFORM PN, LIN, CHECK VALIDITY
C
      CALL APT081(PN,0)
      CALL APT077(LIN,K26)
      IF (MN.EQ.K1) GO TO 10
      S1 = DATAN(PSI)
      GO TO 20
   10 S1 = PSI*DEGRAD
   20 S2 = DSIN(S1)
      S3 = DCOS(S1)
C
C...     CALCULATE UNIT NORMAL R(1),R(2)
C
      R(1)=L(1)* S3 -L(2)*S2
      R(2)=L(1)* S2 +L(2)*S3
      R(3)=0.0
      CALL VNORM(R,R)
C
      R(4)=P(1)*R(1)+P(2)*R(2)
      CALL APT077(R,KM1)
      CALL DEFEXT (RESULT)
      RETURN
       END
**** SOURCE FILE : M0000773.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT023...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT023
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE DEFINED
C              AS THE INTERSECTION OF TWO PLANES BY THE FOLLOWING
C              APT STATEMENT
C              RESULT = LINE/INTOF, PL1, PL2
C
C LINKAGE      CALL APT023 (RESULT, PL1, PL2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING LINE
C              PL1     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT PLANE
C              PL2     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT PLANE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT023 (RESULT,PL1,PL2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PL1(4),PL2(4)
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1)),(S2,SC(2)),(S3,SC(3)),(S4,SC(4))
C
C...     TRANSFORM PL1,PL2,CHECK VALIDITY
C
      CALL APT077(PL1,0)
      DO 10 I= 1,4
   10 SC(I+4) =L(I)
      CALL APT077(PL2,0)
C
C...     SOLVE FOR VERTICAL PLANE AT INTERSECTION OF PL1,PL2
C
      S1 =  SC(5)*L(3)-L(1)*SC(7)
      S2 =  SC(6)*L(3)-L(2)*SC(7)
      S3 =  SC(8)*L(3)-L(4)*SC(7)
      S4 = DSQRT(S1*S1+S2*S2)
C
C...     TEST FOR PARALLEL PLANES - LINE UNDEFINED
C
      IF (S4  .LT.Z1EM5) GO TO 30
      R(1)= S1/S4
      R(2)= S2/S4
      R(4)= S3/S4
      CALL APT077 (R,KM1)
   20 CALL DEFEXT (RESULT)
      RETURN
   30 IERROR =K27
      GO TO 20
       END
**** SOURCE FILE : M0000775.V04   ***
*
C
C.....FORTRAN SUBROUTINE             APT025...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT025
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              WITH THE CENTER AT A GIVEN POINT AND TANGENT TO A
C              GIVEN LINE BY THE FOLLOWING APT STATEMENT
C              RESULT = CIRCLE/CENTER, PNT, TANTO, LN
C
C LINKAGE      CALL APT025 (RESULT, PNT, LN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C
C                      THE RESULTING CIRCLE
C              PNT     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C              LN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT LINE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT081
C              SUBROUTINE          APT083
C              REAL FUNCTION       ABS
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT025 (RESULT,PNT,LN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),PNT(3),LN(4)
      DOUBLE PRECISION LN
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     TRANSFORM PNT,LN, CHECK FOR VALIDITY
C
      CALL APT077 (LN,28)
      CALL APT081 (PNT,0)
C
C...     DEFINE VERTICAL CYLINDER WITH CENTER PNT,RADIUS DIST TO LN
C
      R(1)=P(1)
      R(2)=P(2)
      R(7)=DABS(L(4)-L(1)*R(1)-L(2)*R(2))
      CALL APT083(R,KM1)
   20 CALL DEFEXT (RESULT)
      RETURN
       END
**** SOURCE FILE : M0000776.V02   ***
*
C.....FORTRAN SUBROUTINE             APT026...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT026
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              AS HAVING ITS CENTER AT A GIVEN POINT AND PASSING
C              THROUGH A GIVEN POINT BY THE FOLLOWING APT STATEMENT
C              RESULT = CIRCLE/CENTER, PNT1, PNT2
C
C LINKAGE      CALL APT026 (RESULT, PNT1, PNT2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CIRCLE
C              PNT1    ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT POINT (CENTER)
C              PNT2    ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT POINT (ON CIRCUMFERENCE)
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT081
C              SUBROUTINE          APT083
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT026(RESULT,PNT1,PNT2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),PNT1(3),PNT2(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     TRANSFORM COORDINATES, CHECK VALIDITY
C
      CALL APT081(PNT1,0)
      R(1) = P(1)
      R(2) = P(2)
      CALL APT081(PNT2,0)
C
C...     RADIUS,R(7),OF CIRCLE IS DISTANCE BETWEEN PNT1 AND PNT2
C
      R(7) = DSQRT((R(1)-P(1))**2+(R(2)-P(2))**2)
      CALL APT083 (R,KM1)
      CALL DEFEXT (RESULT)
      RETURN
       END
**** SOURCE FILE : M0002795.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT027...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT027
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              AS PASSING THROUGH THREE GIVEN POINTS BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = CIRCLE/PN1, PN2, PN3
C
C LINKAGE      CALL APT027 (RESULT, PN1, PN2, PN3)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CIRCLE
C              PN1     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT POINT
C              PN2     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT POINT
C              PN3     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE THIRD INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT075
C              SUBROUTINE          APT081
C              SUBROUTINE          APT083
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          ERROR
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT027(RESULT,PN1,PN2,PN3)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),PN1(3),PN2(3),PN3(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
      DATA ZLIT1/4.D0/
C
C...     TRANSFORM COORDINATES, FORM P ARRAY, CHECK VALIDITY
C...     WARNING IF POINTS NOT IN HORIZONTAL PLANE
      CALL APT081 (PN3,0 )
      DO 10 I=1,3
   10 P(I+8) =P(I)
      CALL APT081 (PN2,0)
      DO 20 I=1,3
   20 P(I+4) =P(I)
      CALL APT081 (PN1,0)
      IF (P(3).NE.P(7).OR. P(3).NE.P(11)) CALL ERROR(K30,'APT027  ')
C
C
C...     SOLVE 3 SIMULTANEOUS EQUATIONS FOR COEFFICIENTS OF CIRCLE EQ.
   30 DO 40 I=1,9,4
      P(I+3)=P(I)**2+P(I+1)**2
   40 P(I+2)=Z1
      CALL APT075 (R,P)
      IF (IERROR.NE. 0) IERROR=K29
   50 R(7)=DSQRT(R(1)**2+R(2)**2+ZLIT1*R(3))/Z2
      DO 60 I=1,2
      R(I)=R(I)/Z2
   60 R(I+2)=Z0
      R(5) = Z0
      R(6) = Z1
      CALL APT083(R,KM1)
      CALL DEFEXT (RESULT)
      RETURN
       END
**** SOURCE FILE : M0000778.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT028...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT028
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              AS HAVING ITS CENTER AT A GIVEN POINT AND TANGENT
C              TO A GIVEN CIRCLE BY THE FOLLOWING APT STATEMENT
C              RESULT = CIRCLE/CENTER, PN, ****, TANTO, CIR
C                **** = LARGE OR SMALL
C
C LINKAGE      CALL APT028 (RESULT, PN, M, CIR)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CIRCLE
C              PN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C              M       INTEGER EQUIVALENT OF THE MODIFIER
C                             1 = LARGE         2 = SMALL
C              CIR     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT CIRCLE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT081
C              SUBROUTINE          APT083
C              REAL FUNCTION       ABS
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT028 (RESULT,PN,MN,CIR)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),PN(3),CIR(7)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1)),(S2,SC(2))
C
C
C...     TRANSFORM PN,CIR, CHECK VALIDITY
C
      CALL APT081(PN,0)
      CALL APT083(CIR,K31)
C
C...     DESIRED CIRCLE. RADIUS IS THAT OF GIVEN CIRCLE+-DIST.BETWEEN
C        CENTERS
      R(1)=P(1)
      R(2)=P(2)
      S1=DSQRT((R(1)-C(1))**2+(R(2)-C(2))**2)
      S2=MN
      R(7)=DABS(C(7)+(Z3-Z2*S2)*S1)
      CALL APT083 (R,KM1)
      CALL DEFEXT (RESULT)
      RETURN
       END
**** SOURCE FILE : M0000779.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT029...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT029
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              AS TANGENT TO A GIVEN LINE, PASSING THROUGH A
C              GIVEN POINT AND HAVING A GIVEN RADIUS BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = CIRCLE/TANTO, LN, ****, PN, RADIUS, R
C                **** = XLARGE, YLARGE, XSMALL, YSMALL
C
C LINKAGE      CALL APT029 (RESULT, LN, MN, PN, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CIRCLE
C              LN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT LINE
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              PN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C              RAD     REAL VARIABLE CONTAINING THE VALUE OF
C                      THE DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT004
C              SUBROUTINE          APT020
C              SUBROUTINE          APT078
C              REAL FUNCTION       ABS
C              LOGICAL FUNCTION    CKDEF
C              REAL FUNCTION       SIGN
C
      SUBROUTINE APT029 (RESULT,LN,MN, PN,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),LN(4),PN(3)
      DOUBLE PRECISION LN
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE(S1,SC(1))
C
C
C...     TEST VALIDITY OF PN
C
      UNFLAG=CKDEF(PN)
C
C...     DEFINE CIRCLE C1 WITH CENTER PN, LINE LN1 PARLEL TO LN
      CALL APT078(R(4),KM1)
      C1(8)=RAD
      LN1(5)=LN(4)
      S1=-LN1(5)
      DO 10 I=1,3
      C1(I+1)=PN(I)
      C1(I+4)=R(I)
      LN1(I+1)=LN(I)
   10 S1=S1+LN1(I+1)*C1(I+1)
C
C...     TEST FOR PN ON LINE LN
C
      IF (DABS(S1).LE.Z1EM5) GO TO 40
      LN1(5)=LN1(5)+DSIGN(C1(8),S1)
C
C...     CENTER OF DESIRED CIRCLE IS INTERSECTION OF LN1 AND C1
C
   20 DO 50 I=4,7
   50 R(I)=C1(I+1)
      CALL APT004(RESULT,MN,LN1(2),C1(2))
      DO 30 I=4,7
   30 RESULT(I)=C1(I+1)
      RETURN
   40 CALL APT020(LN1(2),LN1(2),MN, RAD)
      GO TO 20
       END
**** SOURCE FILE : M0000780.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT030...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT030
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              AS TANGENT TO EACH OF TWO GIVEN LINES AND HAVING
C              A GIVEN RADIUS BY THE FOLLOWING APT STATEMENT
C              RESULT = CIRCLE/****, LI, ****, L2, RADIUS, RAD
C                **** = XLARGE, YLARGE, XSMALL, YSMALL
C
C LINKAGE      CALL APT030 (RESULT, M1, L1, M2, L2, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CIRCLE
C              M1      INTEGER EQUIVALENT OF THE FIRST MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              L1      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT LINE
C              M2      INTEGER EQUIVALENT OF THE SECOND MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              L2      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT LINE
C              RAD     REAL VARIABLE CONTAINING THE VALUE OF THE
C                      DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT003
C              SUBROUTINE          APT020
C              SUBROUTINE          APT078
C
      SUBROUTINE APT030 (RESULT,M1,L1,M2,L2,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(7),L1(4),L2(4)
      DOUBLE PRECISION L1,L2
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C
C...     DEFINE C1 WITH AXIS OF DESIRED CYLINDER
C
      CALL APT078 (R(4),KM1)
      DO 10 I=1,3
      C1(I+1)=R(I)
   10 R(I)=Z0
      C1(5)=RAD
C...     DEFINE LINES PARALLEL TO L1,L2 AT DISTANCE RAD
C
      CALL APT020 (LN1(2),L1,M1,C1(5))
      DO 30 I=2,5
   30 SC(I+11)=LN1(I)
      CALL APT020 (LN1(2),L2,M2,C1(5))
C
C...     SOLVE FOR INTERSECTION OF LN1 AND SC(13) -GIVES CIRCLE CENTER
C
      DO 50 I=4,7
   50 R(I)=C1(I-2)
      CALL APT003 (RESULT,SC(13),LN1(2))
      DO 20 I=4,7
   20 RESULT(I)=C1(I-2)
      RETURN
       END
**** SOURCE FILE : M0000781.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT031...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT031
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              AS TANGENT TO EACH OF TWO GIVEN CIRCLES AND HAVING
C              A GIVEN RADIUS BY THE APT STATEMENT
C              RESULT = CIRCLE/*****, ***, CIR1, ***, CIR2, RADIUS,
C                       RAD
C               ***** = XLARGE, YLARGE, XSMALL, OR YSMALL
C                 *** = IN OR OUT
C
C LINKAGE      CALL APT031 (RESULT, M1, M2, CIR1, M3, CIR2, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CIRCLE
C              M1      INTEGER EQUIVALENT OF THE FIRST MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              M2      INTEGER EQUIVALENT OF THE SECOND MODIFIER
C                             1 = IN           2 = OUT
C              CIR1    ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT CIRCLE
C              M3      INTEGER EQUIVALENT OF THE THIRD MODIFIER
C                             1 = IN           2 = OUT
C              CIR2    ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT CIRCLE
C              RAD     REAL VARIABLE CONTAINING THE VALUE OF THE
C                      DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT005
C              SUBROUTINE          APT078
C              REAL FUNCTION       ABS
C
      SUBROUTINE APT031 (RESULT,M1,M2,CIR1,M3,CIR2,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),CIR1(7),CIR2(7)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      DIMENSION CARG(7)
C
C...     ESTABLISH CIRCLE C31 WITH RADIUS RAD
C
      CALL APT078(R(4),KM1)
      DO 10 I=1,3
   10 SC(I +10) =R(I)
      SC(14)=RAD
      DO 20 I=1,7
      SC(I) = CIR1(I)
   20 P(I) = CIR2(I)
      DUMMY1 = M2
      DUMMY2 = M3
      SC(7) = DABS(SC(7)+(Z2*DUMMY1-Z3)*SC(14))
      P(7)= DABS(P(7)+(Z2*DUMMY2-Z3)*SC(14))
C
C...     CENTER OF DESIRED CIRCLE - INTERSECTION OF CI31 AND CR31
C
      DO 50 I=4,7
   50 R(I)=SC(I+7)
      DO 40 I=1,7
   40 CARG(I)=SC(I)
      CALL APT005(RESULT,M1,CARG,P)
      DO 30 I=4,7
   30 RESULT(I)= SC(I+7)
      RETURN
       END
**** SOURCE FILE : M0000782.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT032...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT032
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE DEFINED
C              AS TANGENT TO A GIVEN LINE AND A GIVEN CIRCLE AND
C              HAVING A GIVEN RADIUS BY THE FOLLOWING APT STATEMENT
C              RESULT = CIRCLE/ *****, LN, *****, ***, CIR, RADIUS,
C                       RAD
C               ***** = XLARGE, YLARGE, XSMALL, YSMALL
C                 *** = IN OR OUT
C
C LINKAGE      CALL APT032 (RESULT, M1, LN, M2, M3, CIR, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING CIRCLE
C              M1      INTEGER EQUIVALENT OF THE FIRST MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              LN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT LINE
C              M2      INTEGER EQUIVALENT OF THE SECOND MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              M3      INTEGER EQUIVALENT OF THIRD MODIFIER
C                             1 = IN           2 = OUT
C              CIR     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT CIRCLE
C              RAD     REAL VARIABLE CONTAINING THE VALUE OF THE
C                      DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT004
C              SUBROUTINE          APT020
C              SUBROUTINE          APT078
C              REAL FUNCTION       ABS
C
      SUBROUTINE APT032 (RESULT,M1,LN,M2,M3,CIR,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),LN(4),CIR(7)
      DOUBLE PRECISION LN
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     FORM VERTICAL CYLINDER WITH RADIUS RAD, TRANSFORM TO BASE SYS.
C
      CALL APT078(R(4),KM1)
      DO 10 I=1,3
   10 SC(I+10) = R(I)
      SC(14)=RAD
C
C...     DEFINE LN1 PARALLEL TO LN, RAD AWAY
C
      CALL APT020(LN1(2),LN,M1,SC(14))
C
C...     MODIFY RADIUS OF CIR BY RAD, SOLVE FOR INTERS.OF LN1 AND CIR
C
      DO 15 I=1,7
   15 C1(I+1)=CIR(I)
      DUMMY1 = M3
      C1(8)=DABS(C1(8)+(Z2*DUMMY1-Z3)*SC(14))
      DO 50 I=4,7
   50 R(I)=SC(I+7)
      CALL APT004(RESULT,M2,LN1(2),C1(2))
      DO 20 I=4,7
   20 RESULT(I)= SC(I+7)
      RETURN
       END
**** SOURCE FILE : M0002799.V04   ***
*
C.....FORTRAN SUBROUTINE  ....APT033         8/68                 PH
C.....FORTRAN SUBROUTINE             APT033...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT033
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A RULED SURFACE
C              DEFINED BY EITHER OF THE APT STATEMENTS
C              RLDSRF/S1,P1,P2,P3 OR V1,S2,P4,P5,P6, OR V2
C              RLDSRF/S1,P1,P2,P3 OR V1,P7
C                IN THESE STATEMENTS S REFERS TO A SURFACE,P TO A POINT
C              AND V TO A VECTOR
C
C LINKAGE      CALL APT033(ARG1,ARG2,.....,ARG8,IARG9,IARG10)
C
C ARGUMENTS    THE FIRST EIGHT ARGUMENT CONTAIN RULED SURFACE PARAMETERS
C              THE NINTH ARG CONTAINS A 5 OR 8 TO DISTINGUISH AMOUNG
C              THE STATEMENT TYPES. THE LAST ARG HAS THE ADD. OF THE
C              RULED SURFACE CANONICAL FORM
C
C CALLS        UNPACK,APT094,ERROR,CROSS,VNORM,DOTF
C
C
      SUBROUTINE APT033(ARG1,ARG2,ARG3,ARG4,ARG5,ARG6,ARG7,ARG8,IARG9,
     1                  IARG10)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
      DOUBLE PRECISION IARG10
      DOUBLE PRECISION LCANON
      DIMENSION ARG1(*),ARG2(3),ARG3(3),ARG4(3),ARG5(*),ARG6(3),ARG7(3),
     1          ARG8(3),IARG10(2)
C
      INCLUDE 'BLANKCOM.INC'
C
      DIMENSION LCANON(COMSIZ),TEMP(10),PT1(3),PT2(3),DELCHD(3),
     1          DELVEC(3)
      EQUIVALENCE (CANON(1),LCANON(1))
C
C     INITIALIZE
      LENS1 = 0
      LENS2 = 0
      NPTS = 0
      DO 10 I=42,82
   10 LCANON(I) = 0
      LCANON(43) = IARG9
      LCANON(44) = 43
      IF (IARG9.EQ.5) GO TO 20
      NPTS = 6
      GO TO 30
   20 NPTS = 4
   30 CALL UNPACK (ARG1,MODE,ISIZE,SUBS)
      LCANON(83) = MODE
C
C     IS SI A TABCYL
C
      IF((MODE.EQ.11).OR.(MODE.EQ.22)) GO TO 50
      LENS1 = ISIZE
      DO 40 I = 1,LENS1
   40 CANON(I+83) = ARG1(I)
      GO TO 60
   50 LENS1 = ARG1(2)
      CALL APT094(2,ARG1,CANON(84))
C
C     FULL INDEX TO FLAG SURFACE BEING FILLED IN CANON
C
 60   K = LENS1 + 44
      LCANON(45) = K
      LCANON(46) = K+4
      LCANON(47) = K+8
      LCANON(48) = K+12
      K = K +40
      LCANON(K) = 1
      LCANON(K+4) = 1
      TEMP(1) = 0.
C
C     PROCESS P1 AND P2
C
      DO 70 I = 1,3
      L = K + I
      CANON(L) = ARG2(I)
      PT1(I) = ARG2(I)
      CANON(L+4) = ARG3(I)
      PT2(I) = ARG3(I)
      DELCHD(I) = PT2(I) - PT1(I)
   70 TEMP(1) = TEMP(1) + DELCHD(I)*DELCHD(I)
C
C     IF P2-P1 LESS THAN .01 TAKE ERROR OUTLET
C
      IF (TEMP(1).GT..0001) GO TO 80
      CALL ERROR (87,'APT033  ')
      CALL APT094 (4,IARG10,CANON(41))
      GO TO 999
C
   80 CALL UNPACK (ARG4,MODE,ISIZE,SUBS)
      LCANON(LENS1+92) = MODE
C
C     IF P3 RATHER THAN V1 CONVERT TO VECTOR
C
      IF (MODE.EQ.20) GO TO 100
      DO 90 I = 1,3
   90 DELVEC(I) = ARG4(I) - PT1(I)
      CALL CROSS (DELVEC,DELCHD,DELVEC)
      CALL CROSS (DELCHD,DELVEC,DELVEC)
      GO TO 120
  100 DO 110 I = 1,3
  110 DELVEC(I) = ARG4(I)
 120  CALL VNORM (DELCHD,DELCHD)
      CALL VNORM (DELVEC,DELVEC)
C
C     VECTOR AND CHORD CANNOT BE PARALLEL
C
      CALL CROSS (DELVEC,DELCHD,TEMP)
      TEMP(1)=TEMP(1)**2+TEMP(2)**2+TEMP(3)**2
      IF (TEMP(1).GT..01) GO TO 130
      CALL ERROR (88,'APT033  ')
      CALL APT094 (4,IARG10,CANON(41))
      RETURN
 130  K = LENS1 + 92
      DO 140 I = 1,3
      L = K + I
      CANON(L) = DELVEC(I)
      IF (IARG9.NE.5) GO TO 140
      CANON(L+4) = ARG5(I)
  140 CONTINUE
      IF (IARG9.NE.5) GO TO145
      LCANON(K) = 1
      LCANON(K+4)=1.
      GOTO 250
C
C     PROCESS S2
C
  145 CALL UNPACK (ARG5,MODE,ISIZE,SUBS)
      K = LENS1 + 96
      IF ((MODE.EQ.11).OR.(MODE.EQ.22)) GO TO 160
      LENS2 = ISIZE
      DO 150 I = 1,LENS2
      L = K + I
  150 CANON(L) = ARG5(I)
      GO TO 165
  160 LENS2 = ARG5(2)
      CALL APT094(2,ARG5,CANON(K+1))
 165  L=K+LENS2+1
      I = L - 40
      LCANON(49) = I
      LCANON(50) = I + 4
      LCANON(51) = I + 8
      LCANON(K) = MODE
      LCANON(L) = 1
      LCANON(L+4) = 1
      TEMP(1) = 0.
      K = L
      DO 170 I = 1,3
      L = K + I
      CANON(L) = ARG6(I)
      PT1(I) = ARG6(I)
      CANON(L+4) = ARG7(I)
      PT2(I) = ARG7(I)
      DELCHD(I) = PT2(I) - PT1(I)
  170 TEMP(1) = TEMP(1) + DELCHD(I)*DELCHD(I)
      IF (TEMP(1).GT..0001) GO TO 180
      CALL ERROR (87,'APT033  ')
      CALL APT094 (4,IARG10,CANON(41))
      GO TO 999
  180 CALL UNPACK (ARG8,MODE,ISIZE,SUBS)
      N = LENS1+LENS2+105
      LCANON(N) = MODE
      IF (MODE.EQ.20) GO TO 200
      DO 190 I = 1,3
  190 DELVEC(I) = ARG8(I) - PT1(I)
      CALL CROSS (DELVEC,DELCHD,DELVEC)
      CALL CROSS (DELCHD,DELVEC,DELVEC)
      GO TO 220
  200 DO 210 I = 1,3
  210 DELVEC(I) = ARG8(I)
  220 CALL VNORM (DELCHD,DELCHD)
      CALL VNORM (DELVEC,DELVEC)
      CALL CROSS (DELVEC,DELCHD,TEMP)
      TEMP(1)=TEMP(1)**2+TEMP(2)**2+TEMP(3)**2
      IF (TEMP(1).GT..01) GO TO 230
      CALL ERROR (88,'APT033  ')
      CALL APT094 (4,IARG10,CANON(41))
      GO TO 999
 230  K = 105 +LENS1+LENS2
      DO 240 I = 1,3
      L = K + I
  240 CANON(L) = DELVEC(I)
      IF (IARG9.EQ.5) GO TO 250
      N = 2
      GO TO 260
  250 N = 1
 260  LSIZE = LENS1+LENS2+N+4*NPTS+42
      LCANON(42) = LSIZE
      IARG10(2) = LSIZE
      CALL APT094 (1,IARG10,CANON(41))
  999 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0000784.V06   ***
*
C
C
C              FORTRAN SUBROUTINE APT034
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE,OF A
C              GIVEN RADIUS, TANGENT TO A LINE AND A TABULATED
C              CYLINDER IN THE XYPLANE.
C
C              A CIRCLE IS DEFINED BY THE FOLLOWING STATEMENT
C                RESULT = CIRCLE/ TANTO,LIN,****,TAB,****, $
C                                 PT,RADIUS,RADI
C                **** = XLARGE, YLARGE, XSMALL, YSMALL
C
C LINKAGE      CALL APT034 (RESULT, LIN, M1, TAB, M2, PT, RADI)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING CIRCLE
C              LIN     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT LINE
C              M1      INTEGER EQUIVALENT OF THE FIRST MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              TAB     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT TABCYL
C              M2      INTEGER EQUIVALENT OF THE SECOND MODIFIER
C                             1 = XLARGE       2 = YLARGE
C                             4 = XSMALL       5 = YSMALL
C              PT      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C
C
      SUBROUTINE APT034 (RESULT,LIN,M1,TAB,M2,PT,RADI)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DOUBLE PRECISION  LIN,TAB,RADI,PT,RESULT
      DIMENSION RESULT(7),LIN(4),TAB(2),PT(3)
C
      INCLUDE 'BLANKCOM.INC'
C
      DIMENSION D(COMSIZ),VMOD(4,2),XN(11),YN(11),XINTRS(11),
     1 YINTRS(11),VECNRL(11)
      DIMENSION DD(5)
      EQUIVALENCE (CANON(1),D(1))
      LOGICAL CKDEF,LINDEF
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE(UNIT,UINT)
C
      SMAL(Q)=DSIGN(DMAX1(DABS(Q),Z1EM9),Q)
      DO 777 I=1,2
      P(I)=PT(I)
      L(I)=LIN(I)
  777 V(I)=TAB(I)
      L(3)=LIN(3)
      L(4)=LIN(4)
      UNFLAG=LINDEF(L,K5).OR.CKDEF(P).OR.CKDEF(V)
      IF(UNFLAG) GO TO 9998
C
C...  RETRIEVE TABCYL EXTERNAL CANONICAL FORM. STORE CANON INDEX IN J11.
C
      CALL APT094(3,TAB(1),J11)
      J11=J11-2
C
C
C
C
C
C
C
C
C
C
C.....INITIALIZE
C
      IERROR=0
      TOLER=0.000025
C
C...   INUM=1 IF RADIUS PARALLEL LINE INTERSECTS TABCYL,
C           2 IF DIA. + TOL. PARALLEL LINE INTERSECTS,
C           3 IF LINE + TOL. INTERSECTS
C
      INUM=0
C
C...   IBACFG=0 IF DIRECTION OF SEARCH IS FWD,1 IF BACKWARD
C
      IBACFG=0
C
C...   ICOUNT IS COUNTER ON TABCYL INTERVALS SEARCHED
C
      ICOUNT=1
      KCHECK=0
      IONTST=0
      ITBPNT=0
      VMOD(1,1)=1.0
      VMOD(2,1)=-1.0
      VMOD(3,1)=0.0
      VMOD(4,1)=0.0
      VMOD(1,2)=0.0
      VMOD(2,2)=0.0
      VMOD(3,2)=1.0
      VMOD(4,2)=-1.0
C
C.....CHECK FOR NEGATIVE P IN LINE CANONICAL FORM.  LX+MY+NZ=P
C
      IF(L(4).GE.Z0) GO TO 921
      L(4)=-L(4)
      L(2)=-L(2)
      L(3)=-L(3)
      L(1)=-L(1)
  921 ILOUT=0
      LOUT=0
      NT=(D(J11+12)-Z1)*7.0+18.1
      NTZ=NT-2
      RAD=RADI
      RADSQR=RAD*RAD
      EPSILN=Z2*Z1EM5*RAD
      DELTA=Z1EM5/RAD
      DIAMT=Z2*RAD+TOLER
      ITRY=0
      CALL SCHTB(D(J11+1))
      IHU=D(J11+13)+0.1+J11
      IHUT=IHU
      ITL=NT-4+J11
      ITFR=J11+14
      D6SAVE=L(4)
C
C.....EXAMINE MOD 1 AND SET A LINE PARALLEL TO THE GIVEN LINE, ON
C.....WHICH THE CENTER OF THE TANGENT CIRCLE WILL LIE.
C
      IF(M1.EQ.1) IMOD=1
      IF(M1.EQ.2) IMOD=3
      IF(M1.EQ.4) IMOD=2
      IF(M1.EQ.5) IMOD=4
      XTEST=L(1)*VMOD(IMOD,1)+L(2)*VMOD(IMOD,2)
      IF(DABS(XTEST).GT.Z1EM7) GO TO 12
C
C.....IF MODIFIER 1 IS IN ERROR
C
   10 IERROR=77
      GO TO 9999
   12 IF(XTEST) 13,10,14
   13 L(4)=DABS(L(4))-DABS(RAD)
      SAVD6=L(4)
      GO TO 102
   14 L(4)=DABS(L(4))+DABS(RAD)
      SAVD6=L(4)
  102 D3SAVE=L(1)
      INUM=1
   15 CONTINUE
C
C.....IHUINT = INDEX LOCATING INTERVAL IN WHICH INTERSECTION
C.....ACTUALLY OCCURS
C
      IHUINT=0
C
C.....UNIT = X COORD. IN LOCAL SYSTEM OF INTERSECTION POINT
C.....OF PARALLEL LINE AND TABCYL
C
      UNIT=Z0
   41 IHU=IHUT
      L(1)=D3SAVE
      XAA=D(IHU+7)-D(IHU)
      YAA=D(IHU+8)-D(IHU+1)
      IZ=K1
      RA=-DATAN(YAA/SMAL(XAA))
      IF(XAA) 1000,1001,1001
 1000 RA=RA+PI
 1001 CALL TRANRO(XAA,YAA,XBB,YBB,RA,IZ)
C
C.....TABCYL MODIFIER ACCEPTANCE CRITERION
C
      IF(M2.NE.1) GO TO 17
      DPVALU=Z1
      GO TO 504
   17 IF(M2.NE.4) GO TO 19
      DPVALU=-Z1
  504 XAXIS=Z1
      YAXIS=Z0
      GO TO 22
   19 IF(M2.NE.2) GO TO 21
      DPVALU=Z1
      GO TO 505
   21 IF(M2.NE.5) GO TO 10
      DPVALU=-Z1
  505 XAXIS=Z0
      YAXIS=Z1
   22 CONTINUE
   31 CALL CHKRET(IHU,RAD,INTRCT,D,L)
      IF(INTRCT) 42,42,400
  400 DIS=-(L(1)*D(IHU)+L(2)*D(IHU+1)-SAVD6)
      CALL TRANRO(L(1),L(2),XF,YF,RA,IZ)
      X1PLIN=XF*DIS
      Y1PLIN=YF*DIS
C
C.....CHECK FOR VERTICAL PARALLEL LINE IN LOCAL SYSTEM
C
      IF(DABS(YF).GT.Z1EM7) GO TO 501
  500 SLPLIN =9.0D+7
      GO TO 502
  501 SLPLIN =-XF/YF
  502 BPLIN=Y1PLIN-SLPLIN*X1PLIN
      KOUNT=1
      KCHECK=0
C
C.....DIVISION OF TABCYL INTERVAL INTO 10 EQUAL PARTS.
C
   64 IF(IBACFG.EQ.0) GO TO 105
      XSTART=XBB
      XLENTH=-XBB
      GO TO 107
  105 XSTART=Z0
      XLENTH=XBB
  107 KOUNT=2
      GO TO 67
  866 ISAVE=I-1
C
C.....SUBDIVISION OF LIKELY DIVISION.
C
   65 IF(KOUNT-2) 64,103,103
  103 IF(KOUNT-12) 66,66,42
   66 XLENTH=DABS(XN(ISAVE+1)-XN(ISAVE))
  633 XSTART=XN(ISAVE)
      IF(IBACFG.EQ.0) GO TO 111
  109 XLENTH=-XLENTH
  111 KOUNT=KOUNT+1
   67 DELTX=XLENTH/Z10
C
C.....IF LENGTH OF NORMAL VECTOR FROM TABCYL TO PLINE IS LESS THAN
C.....RADSQR MORE=0,WHEN ONE IS FOUND GREATER THAN RADSQR MORE=2
C
  671 MORE=0
C
C.... INDEX OF FIRST VECTOR IN PROPER DIRECTION
C
      IFIRST=-1
C.... INDEX OF LAST VECTOR IN PROPER DIRECTION
      ILAST=-4
C
C.... LESS=5 UNTIL NORMAL VECTOR IS FOUND LESS THAN,THEN LESS=1
C
      LESS=5
      ILESS=0
      IMORE=0
      DO 84 I=1,11
      XI=I-1
      XN(I)=XSTART+XI*DELTX
      YN(I)=D(IHU+2)*XN(I)**3+D(IHU+3)*XN(I)**2-(D(IHU+2)*D(IHU+4)+
     C D(IHU+3))*(D(IHU+4)*XN(I))
      SLOPE= Z3*D(IHU+2)*XN(I)**2+Z2*D(IHU+3)*XN(I)-(D(IHU+2)*D(IHU+4)+
     C D(IHU+3))*D(IHU+4)
      IF(DABS(SLOPE).GE.Z1EM7) GO TO 69
      SLPNOR=-DSIGN(9.0D+7,SLOPE)
      IF(DABS(SLPLIN).GE.9.0D7) GO TO 79
      XINTRS(I)=XN(I)
      YINTRS(I)=SLPLIN*(XINTRS(I))+BPLIN
      GO TO 25
C
C.....SLOPE OF NORMAL AT EACH POINT IS SLPNOR
C
   69 SLPNOR=-Z1/SLOPE
   70 BNLIN=YN(I)-SLPNOR*XN(I)
C
C.....INTERSECTION OF PLINE AND NORMAL TO TABCYL AT EACH TABCYL
C.....DIVISION POINT.
      XINTRS(I)=((BNLIN-BPLIN)/(SLPLIN-SLPNOR))
C...
      YINTRS(I)= SLPLIN*XINTRS(I)+BPLIN
   25 VECNRX=XINTRS(I)-XN(I)
      VECNRY=YINTRS(I)-YN(I)
      CC=IZ
      AXISXV=XAXIS*DCOS(RA)-CC*YAXIS*DSIN(RA)
      AXISYV= CC*XAXIS*DSIN(RA)+YAXIS*DCOS(RA)
C
C.....CHECK TO SEE IF TABCYL MODIFIER IS ACCEPTABLE FOR THIS NORMAL
C
      DOTP=VECNRX*AXISXV+VECNRY*AXISYV
      IF((DPVALU*DOTP).LE.Z1EM5) GO TO 79
C
C.....LENGTH OF NORMAL VECTOR FROM TABCYL POINT TO PLINE
C
   80 VECNRL(I)=VECNRX**2+VECNRY**2
      IF(IFIRST) 183,183,184
  183 IFIRST=I
  184 ILAST=I
C
C.....HAVE WE FOUND LOCATION OF CIRCLE CENTER
C
      IF(DABS(VECNRL(I)-RADSQR)-EPSILN)83,83,82
   82 IF(VECNRL(I)-RADSQR) 85,83,86
   85 LESS=1
      ILESS=I
      GO TO 876
   86 MORE=2
      IMORE=I
C
C.....DO WE HAVE ONE VECTOR GREATER AND ONE SMALLER THAN RADSQR
C
  876 IF(MORE.LE.LESS) GO TO 84
C
C.....YES-ARE THEY ADJACENT
C
  890 IF(IABS(ILESS-IMORE)-K1) 878,878,84
C
C.....YES-HAVE SUBDIVISIONS BECOME SMALL ENOUGH TO ASSUME
C.....PERPENDICULARITY
C
  878 IF(DABS(XN(1)-XN(2))-Z1EM7) 5500,5500,866
   79 VECNRL(I)=-1.0
   84 CONTINUE
C
C.....UTILIZE TABPNT SUBROUTINE TO FIND THE INTERSECTION OF THE PARALLEL
C.....LINE AND THE TABCYL.
      IF(ITBPNT.NE.0) GO TO 867
C..
C..   DD(1),DD(2) ARE UV CORDINATE OF INTERSECTION
C..   DD(3)       SUBSCRIPT OF D LOCATION AT WHICH THE DATA BEGINS
C..               FOR THE TABCYL INTERVAL IN WHICH THE INTERSECTION
C..               POINT WAS FOUND
C
C
C
C
C
      J111=J11
      SUBFLG =.TRUE.
      CALL APT011(DD,L,TAB,PT)
      J11=J111
C
      ITBPNT=1
      IF(IERROR) 621,600,621
  600 IHUINT=D(J11+13)+0.1+J11
      XXAA=D(IHUINT+7)-D(IHUINT)
      YYAA=D(IHUINT+8)-D(IHUINT+1)
      IIZZ=K1
      RRA=-DATAN(YYAA/SMAL(XXAA))
      IF(XXAA.LT.Z0) RRA=RRA+PI
      CALL TRANRO(DD(1),DD(2),UINT,UINT2,RRA,IIZZ)
      IERROR=0
      SAUINT=UINT
      SAVXBB=DSQRT((D(IHUINT+7)-D(IHUINT))**2+(D(IHUINT+8)-D(IHUINT+1))
     C  **2)
C
C.....IS THIS INTERVAL WITHIN ONE ON EITHER SIDE OF
C.....INTERVAL OF INTERSECTION
C
  867 IF(IABS(IHU-IHUINT)-7) 800,800,621
C
C.... IT IS WITHIN ONE-IS IT BEFORE,IN,OR AFTER THE INTERSECTION
C.... INTERVAL
C
  800 IF(IHU-IHUINT) 809,801,802
  809 IF(DABS(SAUINT)-Z1EM6) 803,803,621
  803 UINT=XBB
      GO TO 602
  801 UINT=SAUINT
      GO TO 602
  802 IF(DABS(SAUINT-SAVXBB)-Z1EM6) 806,806,621
  806 UNIT=Z0
  602 CSLOPE=Z3*D(IHU+2)*UINT**2+Z2*D(IHU+3)*UNIT-(D(IHU+2)*D(IHU+4)+
     C D(IHU+3))*D(IHU+4)
C
C.....TEST FOR LINE PERPENDICULAR TO TABCYL
C
      IF(DABS(SLPLIN)-0.000015) 6073,6073,6071
 6071 IF(DABS(CSLOPE)-0.000015) 6075,6072,6072
 6075 IF(DABS(SLPLIN)-99000.) 6073,6070,6070
 6072 COSTHA=((SLPLIN*CSLOPE)+Z1)/(DABS(SLPLIN*CSLOPE))
      IF(DABS(COSTHA)-DMIN1(Z1EM3,DELTA)) 6070,6070,6073
C
C.....LINE NOT PERPENDICULAR TO TABCYL
C
 6073 IF(KCHECK-1) 6074,603,6074
 6074 IF(KOUNT-12) 180,180,42
 6070 IF(DABS(L(2))-Z1EM7) 651,651,650
  651 XCOMP=Z0
      YCOMP=RAD
      CLOPE=9999999.
      GO TO 652
  650 CLOPE=-L(1)/L(2)
      XCOMP=DSQRT(RADSQR/(Z1+CLOPE**2))
      YCOMP=DABS(CLOPE*XCOMP)
  652 IZ=-K1
      XAA=D(IHU+7)-D(IHU)
      YAA=D(IHU+8)-D(IHU+1)
      RA=-DATAN(YAA/SMAL(XAA))
      IF(XAA) 1002,1003,1003
 1002 RA=RA+PI
 1003 CALL TRANRO(DD(1),DD(2),PX,PY,RA,IZ)
      IF(M2-2) 608,609,610
  608 RESULT(1)=D(IHU)+PX+XCOMP
      RESULT(2)=D(IHU+1)+PY+DSIGN(YCOMP,CLOPE)
      GO TO 613
  609 RESULT(1)=D(IHU)+PX-XCOMP
      RESULT(2)=D(IHU+1)+PY-DSIGN(YCOMP,CLOPE)
      GO TO 613
  610 IF(M2.EQ.5) GO TO 612
      RESULT(1)=D(IHU)+PX+DSIGN(XCOMP,CLOPE)
      RESULT(2)=D(IHU+1)+PY+YCOMP
      GO TO 613
  612 RESULT(1)=D(IHU)+PX-DSIGN(XCOMP,CLOPE)
      RESULT(2)=D(IHU+1)+PY-YCOMP
      GO TO 613
C
C....
C.... THIS SECTION IS FOR THE CASE WHERE THE RADIUS OF CURVATURE OF THE
C.... TABCYL IS SMALL,AND THE NORMALS FROM POINTS VERY CLOSE TOGETHER
C.... ON THE TABCYL HIT THE STRAIGHT LINE UPON WHICH THE CIRCLE CENTER
C.... IS TO LIE AT POINTS THAT ARE A SIGNIFICANT DISTANCE APART.
C
 5500 IF(DABS(XN(1)-DD(1))-Z1EM7) 6070,6070,5501
 5501 XP = (XN(I) + SLPLIN*(YN(I)-BPLIN))/(SLPLIN**2+Z1)
      YP = (SLPLIN*(XN(I)+SLPLIN*YN(I))+BPLIN)/(SLPLIN**2+Z1)
      DISP = ((XN(I)-XP)**2+(YN(I)-YP)**2)
      DMOVE = RADSQR-DIST
      XMOVE = DSQRT(DMOVE/(Z1+SLPLIN**2))
      YMOVE = DABS(SLPLIN*XMOVE)
      IF(IMORE.GT.ILESS) GO TO 5503
      XLONG=XINTRS(I-1)
      YLONG=YINTRS(I-1)
      GO TO 5505
 5503 XLONG=XINTRS(I)
      YLONG=YINTRS(I)
 5505 IF(XLONG.GT.XP) GO TO 27
      XINTRS(I)=XP-XMOVE
      GO TO 28
   27 XINTRS(I)=XP+XMOVE
   28 IF(YLONG.GT.YP) GO TO 30
      YINTRS(I)=YP-YMOVE
      GO TO 83
   30 YINTRS(I)=YP+YMOVE
      GO TO 83
C
C.....CHECK FOR A HUMP OR VALLEY WHERE THE SUCCESSIVE VECTOR LENGTHS
C.....CHANGE FROM INCREASING TO DECREASING OR VICE VERSA
C
  621 INCRES=0
      IDECRS=0
      IERROR=0
  199 DO 630 I=1,11
      IF(I-9) 622,622,42
  622 IF(VECNRL(I)) 630,625,625
  625 IF(VECNRL(I+1)) 630,6251,6251
 6251 IF(VECNRL(I+2)) 630,6252,6252
 6252 IF(VECNRL(I+1)-VECNRL(I)) 626,630,627
  626 IDECRS=1
      GO TO 6271
  627 INCRES=1
 6271 IF(VECNRL(I+2)-VECNRL(I+1)) 628,630,629
  628 IDECRS=1
      GO TO 6291
  629 INCRES=1
 6291 IF(INCRES-IDECRS) 630,631,630
  630 CONTINUE
      GO TO 42
  631 IF(KOUNT-12) 632,632,42
  632 IF(KOUNT-12) 634,196,196
  634 XLENTH=DABS(XN(I+2)-XN(I))
      ISAVE=I
      GO TO 633
C
C.....SUBDIVIDED BETWEEN ADJACENT GOOD AND BAD VECTORS
C
  180 IF(IFIRST) 603,603,186
  186 IF(VECNRL(IFIRST)-VECNRL(ILAST)) 181,193,185
  182 IF(IFIRST-1) 196,196,187
  187 IF(IFIRST-11) 188,196,196
  188 I=IFIRST-1
      GO TO 632
  185 IF(LESS-1) 189,182,189
  189 IF(ILAST-11) 190,196,196
  190 I=ILAST-1
      GO TO 632
  181 IF(LESS-1) 182,189,182
  193 IF(IFIRST-1) 191,191,194
  194 IF(ILAST-11) 188,192,192
  191 I=2
  195 IF(KOUNT-12) 866,196,196
  196 IF(KCHECK-1) 197,42,42
  197 KCHECK=1
      KOUNT=1
      GO TO 64
  192 I=11
      GO TO 195
  618 IF(KOUNT-12) 619,619,42
C
C.....SUBDIVIDE AROUND THE INTERSECTION OF PARALLEL LINE AND TABCYL
C
  619 IF(I-2) 720,720,721
  720 ISAVE=I-1
  724 XLENTH=DABS(XN(ISAVE+2)-XN(ISAVE))
      GO TO 633
  721 ISAVE=I-2
      IF(I-11) 722,724,724
  722 XLENTH=DABS(XN(ISAVE+3)-XN(ISAVE))
      GO TO 633
  603 DO 605 I=2,11
      IF(IBACFG) 604,604,606
  604 IF(UNIT-Z1EM6-XN(I)) 618,618,605
  606 IF(UNIT+Z1EM6-XN(I)) 605,618,618
  605 CONTINUE
C
C.....SET-UP RE-TRY IN ANOTHER INTERVAL UNTIL 3 INTERVALS ON EACH SIDE
C.....OF THE ESTIMATED INTERVAL HAVE BEEN TRIED----A TOTAL OF 7
C.....INTERVALS.(EXTENSION INTERVALS ARE INCLUDED)
C
   42 IF(ICOUNT-7) 422,43,43
  422 IZ=-K1
      XAA=D(IHU+7)-D(IHU)
      YAA=D(IHU+8)-D(IHU+1)
      RA=-DATAN(YAA/SMAL(XAA))
      IF(XAA) 1004,330,330
 1004 RA=RA+PI
  330 IF(MOD(ICOUNT,2)) 301,300,301
  300 IHU=IHU+7*ICOUNT
      IBACFG=0
      ICOUNT=ICOUNT+1
      IF(IHU-ITL) 72,340,340
  301 IHU=IHU-7*ICOUNT
      IBACFG=1
      ICOUNT=ICOUNT+1
      IF(IHU-ITFR) 350,350,72
  340 LOUT=1
      GO TO 330
  350 ILOUT=1
      IF(LOUT-ILOUT) 330,43,330
   43 IERROR=77
      GO TO 9999
   72 IZ=1
      XAA=D(IHU+7)-D(IHU)
      YAA=D(IHU+8)-D(IHU+1)
      RA=-DATAN(YAA/SMAL(XAA))
      IF(XAA) 1005,1006,1006
 1005 RA=RA+PI
 1006 CALL TRANRO(XAA,YAA,XBB,YBB,RA,IZ)
      GO TO 31
   83 X11=XINTRS(I)
      Y11=YINTRS(I)
C
C.....CENTER FOUND, PUT IT BACK INTO ORIGINAL COORDINATE SYSTEM AND PUT
C.....CANONICAL FORM OF CIRCLE IN DEFANS BLOCK.
C
   50 IZ=-1
      XAA=D(IHU+7)-D(IHU)
      YAA=D(IHU+8)-D(IHU+1)
      RA=-DATAN(YAA/SMAL(XAA))
      IF(XAA) 1007,1008,1008
 1007 RA=RA+PI
 1008 CALL TRANRO(X11,Y11,XA,YA,RA,IZ)
      R(1)=D(IHU)+XA
      R(2)=D(IHU+1)+YA
  613 R(7)=RAD
      CALL APT083(R,KM1)
 9999 CALL DEFEXT(RESULT)
   51 CONTINUE
      RETURN
 9998 IERROR=79
      GO TO 9999
       END
**** SOURCE FILE : M0000785.V02   ***
*
C     FORTRAN SUBROUTINE               APT035    4/69      SR
C
C              FORTRAN SUBROUTINE APT035
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR DEFINED
C              FROM ONE VECTOR (OR POINT) TO ANOTHER OR AS THE
C              DIFFERENCE OF TWO VECTORS BY THE FOLLOWING APT
C              STATEMENTS
C              RESULT = VECTOR/PN1, PN2
C              RESULT = VECTOR/PN2, MINUS, PN1
C
C LINKAGE      CALL APT035 (RESULT, PN1, PN2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING VECTOR
C              PN1     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT POINT OR VECTOR
C              PN2     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT POINT OR VECTOR
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT035 (RESULT,PN1,PN2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(3),PN1(3),PN2(3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C...     CHECK VALIDITY OF PN1,PN2
C
      UNFLAG=CKDEF(PN1).OR.CKDEF(PN2)
      DO 10 I=1,3
   10 R(I)=PN2(I)-PN1(I)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000786.V03   ***
*
C
C.....FORTRAN SUBROUTINE              APT036                12/67
C
C              FORTRAN SUBROUTINE APT036
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR DEFINED
C              AS PERPENDICULAR TO A GIVEN PLANE BY THE FOLLOWING
C              APT STATEMENT
C              RESULT = VECTOR/PERPTO, PLN, ****
C                **** = POSX, POSY, POSZ, NEGX, NEGY, OR NEGZ
C
C LINKAGE      CALL APT036 (RESULT, PLN, MN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING VECTOR
C              PLN     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT PLANE
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = POSX  2 = POSY  3 = POSZ
C                      4 = NEGX  5 = NEGY  6 = NEGZ
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT078
C              SUBROUTINE          DEFEXT
C              REMAINDERING FUNCTION MOD
C              REAL FUNCTION       SIGN
C              REAL FUNCTION       FLOAT
C
      SUBROUTINE APT036 (RESULT,PLN,MN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(3),PLN(4)
      EQUIVALENCE (S1,SC(1))
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
      DATA ZLIT1/3.5D0/
C
C...     TRANFORM CANONICAL FORM, CHECK VALIDITY
C
      CALL APT077(PLN,0)
      I = K1+ MOD(MN -K1,K3)
      DUMMY1 = MN
      S1 = DSIGN(Z1,L(I)*(ZLIT1-DUMMY1))
C
C...     IF NORMAL TO PLN HAS WRONG ORIENTATION,REVERSE DIRECTION
C
      DO 10 J=1,3
   10 L(J)=S1*L(J)
      CALL APT078(L,KM1)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000787.V02   ***
*
C.....FORTRAN SUBROUTINE             APT037...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT037
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR DEFINED
C              AS A GIVEN SCALAR TIMES A GIVEN VECTOR OR POINT
C              BY THE FOLLOWING APT STATEMENT
C              RESULT  VECTOR/SCA, TIMES, VEC
C
C LINKAGE      CALL APT037 (RESULT, SCA, VEC)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING VECTOR
C              SCA     REAL VARIABLE CONTAINING THE VALUE OF
C                      THE SCALAR
C              VEC     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT VECTOR OR POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT037 (RESULT,SCA,VEC)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(3),VEC(3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
      UNFLAG=CKDEF(VEC)
      DO 10 I=1,3
   10 R(I)=SCA*VEC(I)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000788.V02   ***
*
C.....FORTRAN SUBROUTINE             APT038...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT038
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR DEFINED
C              AS THE CROSS PRODUCT OF TWO VECTORS BY THE FOLLOWING
C              APT STATEMENT
C              RESULT = VECTOR/VEC1, CROSS, VEC2
C
C LINKAGE      CALL APT038 (RESULT, VEC1, VEC2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING VECTOR
C              VEC1    ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT VECTOR
C              VEC2    ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT VECTOR
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C              REMAINDERING FUNCTION MOD
C
      SUBROUTINE APT038 (RESULT,VEC1,VEC2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(3),VEC1(3),VEC2(3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C
      DO 10 I=1,3
      SC(I)=VEC1(I)
   10 SC(I+3) =VEC2(I)
      UNFLAG =CKDEF(SC).OR.CKDEF(SC(4))
      DO 20 K=1,3
      I=MOD(K,K3)+K1
      J=MOD(I,K3)+K1
   20 R(K) =SC(I)*SC(J+3) -SC(J)*SC(I+3)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000789.V02   ***
*
C.....FORTRAN SUBROUTINE             APT039...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT039
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR
C              DEFINED AS THE SUM OF TWO GIVEN VECTORS BY
C              THE APT FOLLOWING STATEMENTS
C              RESULT = VECTOR/VEC1, PLUS, VEC2
C
C LINKAGE      CALL APT039 (RESULT, VEC1, VEC2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING VECTOR
C              VEC1    ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE FIRST INPUT VECTOR
C              VEC2    ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE SECOND INPUT VECTOR
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          DEFEXT
C              LOGICAL FUNCTION    CKDEF
C
      SUBROUTINE APT039 (RESULT,VEC1,VEC2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(3),VEC1(3),VEC2(3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
      UNFLAG=CKDEF(VEC1).OR.CKDEF(VEC2)
C
C...     RESULTANT VECTOR IS SUM OF COMPONENTS OF VEC1,VEC2
C
      DO 10 I=1,3
   10 R(I)=VEC1(I)+VEC2(I)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000790.V03   ***
*
C.....FORTRAN SUBROUTINE  ....APT040         8/68                    RN
C.....FORTRAN SUBROUTINE             APT040...              3/1/68   GK
C                                      6/69      RW
C
C              FORTRAN SUBROUTINE APT040
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR
C              DEFINED AS THE NORMALIZATION OF A GIVEN VECTOR
C              BY THE FOLLOWING APT STATEMENT
C              RESULT = VECTOR/UNIT, VC
C
C LINKAGE      CALL APT040 (RESULT, VC)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING VECTOR
C              VC      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT VECTOR
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          UNDEF
C              SUBROUTINE          VNORM
C
      SUBROUTINE APT040 (RESULT,VC)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'LDEF.INC'
C
      LOGICAL CKDEF
      DIMENSION RESULT(3),VC(3)
C
C
C
      IF (CKDEF(VC)) GO TO 10
      CALL VNORM(VC,RESULT)
      IF (PRNTON) GO TO 20
      RETURN
   10 CALL UNDEF(RESULT)
      RETURN
C...  IF PRINTON WANT TO PRINT ONLY IF CALLED BY PART PROGRAM.
   20 CALL UNPACK(RESULT,MODE,IDUMMY,IDUMMY)
      IF (MODE .EQ. 20) CALL PRINT(3,RESULT,1)
      RETURN
      END
**** SOURCE FILE : M0000791.V03   ***
*
C
C.... FORTRAN SUBROUTINE              APT041               4/17/68
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR DEFINED
C              AS PARALLEL TO THE INTERSECTION OF TWO GIVEN PLANES
C              BY THE FOLLOWING APT STATEMENT
C              VEC = VECTOR/PARLEL,INTOF,PL1,PL2,***
C              *** = POSX,POSY,POSZ,NEGX,NEGY,NEGZ
C
C LINKAGE      CALL APT041 (RESULT,PL1,PL2,MN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING VECTOR
C              PL1     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE FIRST INPUT PLANE
C              PL2     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE SECOND INPUT PLANE
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = POSX  2 = POSY  3 = POSZ
C                      4 = NEGX  5 = NEGY  6 = NEGZ
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT078
C              SUBROUTINE          CROSS
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          VNORM
C              REMAINDERING FUNCTION  MOD
C              REAL FUNCTION       SIGN
C              REAL FUNCTION       FLOAT
C
      SUBROUTINE APT041 (RESULT,PL1,PL2,MN)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3), PL1(4), PL2(4)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     TRANSFORM CANONICAL FORMS AND CHECK VALIDITY
C
      CALL APT077 (PL1,K0)
      DO 10 J = 1,4
   10 SC(J) = L(J)
      CALL APT077 (PL2,K0)
C
C...     DETERMINE VECTOR PARALLEL TO INTERSECTION OF THE TWO PLANES
C
      CALL CROSS (SC,L,L)
      CALL VNORM (L,L)
C
C...     IF VECTOR HAS WRONG ORIENTATION, REVERSE DIRECTION
C
      I = K1+MOD(MN-K1,K3)
      DUMMY1 = MN
      SC(4) = DSIGN(Z1,L(I)*(3.5D0-DUMMY1))
      DO 20 J = 1,3
   20 L(J) = SC(4)*L(J)
C
      CALL APT078 (L,KM1)
      CALL DEFEXT (RESULT)
      RETURN
       END
**** SOURCE FILE : M0000792.V03   ***
*
C.....FORTRAN SUBROUTINE ....APT042              8/68                SR
C.... FORTRAN SUBROUTINE              APT042               5/6/68
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A VECTOR WHICH
C              MAKES A GIVEN ANGLE WITH A GIVEN LINE DEFINED BY
C              THE FOLLOWING APT STATEMENT
C              VEC = VECTOR/ATANGL,VAL,LN,***
C              *** = POSX,POSY,NEGX,NEGY
C
C LINKAGE      CALL APT042(RESULT,VAL,LN,MN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING VECTOR
C              VAL     MEASURE (IN DEGREES) OF THE GIVEN ANGLE
C              LN      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE GIVEN LINE
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = POSX  2 = POSY  4 = NEGX  5 = NEGY
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          APT078
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       DSIGN
C              REAL FUNCTION       DCOS
C
      SUBROUTINE APT042(RESULT,VAL,LN,MN)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3),LN(4)
      DOUBLE PRECISION LN
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C...     TRANSFORM CANONICAL FORM AND CHECK VALIDITY
C
      CALL APT077(LN,K0)
C
      VA=VAL*DEGRAD
      SINA=DSIN(VA)
      COSA=DCOS(VA)
C
C...     DETERMINE REQUIRED VECTOR
      V(1)=L(1)*SINA+L(2)*COSA
      V(2)=L(2)*SINA-L(1)*COSA
C
C...     IF VECTOR HAS WRONG ORIENTATION, REVERSE DIRECTION
C
      IF(((MN.EQ.K1).AND.(V(1).GE.Z0)).OR.((MN.EQ.K2).AND.(V(2).GE.Z0)).
     1OR.((MN.EQ.K4).AND.(V(1).LT.Z0)).OR.((MN.EQ.K5).AND.(V(2).LT.Z0)))
     2GO TO 10
      V(1)=-V(1)
      V(2)=-V(2)
   10 V(3)=Z0
C
      CALL APT078(V,KM1)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000793.V02   ***
*
C.... FORTRAN SUBROUTINE              APT043               4/17/68
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A PLANE DEFINED
C              AS CONTAINING A GIVEN POINT AND PERPENDICULAR TO TWO
C              GIVEN INTERSECTING PLANES BY THE FOLLOWING APT
C              STATEMENT
C              PLN = PLANE/PN,PERPTO,PL1,PL2
C
C LINKAGE      CALL APT043 (RESULT,PN,PL1,PL2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING PLANE
C              PN      ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      INPUT POINT
C              PL1     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      FIRST INPUT PLANE
C              PL2     ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      SECOND INPUT PLANE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          CROSS
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          VNORM
C              LOGICAL FUNCTION    CKDEF
C
      SUBROUTINE APT043 (RESULT,PN,PL1,PL2)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(4),PN(3),PL1(4),PL2(4)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
      UNFLAG = CKDEF(PN).OR.CKDEF(PL1).OR.CKDEF(PL2)
C
C...     DETERMINE UNIT NORMAL VECTOR
C
      CALL CROSS (PL1,PL2,R)
      CALL VNORM (R,R)
C
C...     COMPUTE NORMAL DISTANCE TO DESIRED PLANE
C
      DO 10 I=1,3
   10 R(4) = R(4)+R(I)*PN(I)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000794.V02   ***
*
C.....FORTRAN SUBROUTINE             APT044...              6/10/68 EAN
C
C              FORTRAN SUBROUTINE APT044
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A PLANE
C              FROM THE COEFFICIENTS OF ITS EQUATION BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = PLANE/A, B, C, D
C
C LINKAGE      CALL APT044 (RESULT, AN, BN, CN, DN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING PLANE
C              AN      REAL VARIABLE CONTAINING THE VALUE
C                      OF COEFFICIENT OF X
C              BN      REAL VARIABLE CONTAINING THE VALUE
C                      OF COEFFICIENT OF Y
C              CN      REAL VARIABLE CONTAINING THE VALUE
C                      OF COEFFICIENT OF Z
C              DN      REAL VARIABLE CONTAINING THE VALUE
C                      OF CONSTANT TERM
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT044 (RESULT,AN,BN,CN,DN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
      S1 = AN**2 +BN**2 +CN**2
      IF (S1.LE.Z1EM5) GO TO 20
      S1=DSQRT(S1)
      R(1)=AN /S1
      R(2)=BN /S1
      R(3)=CN/S1
      R(4)=DN /S1
      CALL APT077(R,KM1)
   10 CALL DEFEXT (RESULT)
      RETURN
   20 IERROR=K44
      GO TO 10
       END
**** SOURCE FILE : M0000795.V03   ***
*
C.....FORTRAN SUBROUTINE             APT045...              3/1/68   GK
C
C                                                6/70      RW
C
C              FORTRAN SUBROUTINE APT045
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A PLANE
C              DEFINED AS PASSING THROUGH THREE POINTS BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = PLANE/PN1, PN2, PN3
C
C LINKAGE      CALL APT045 (RESULT, PN1, PN2, PN3)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING PLANE
C              PN1     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE FIRST INPUT POINT
C              PN2     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE SECOND INPUT POINT
C              PN3     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE THIRD INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT073
C              LOGICAL FUNCTION    CKDEF
C
      SUBROUTINE APT045 (RESULT,PN1,PN2,PN3)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PN1(3),PN2(3),PN3(3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
C
C
      INCLUDE 'ISHR16.INC'
C
C
C
      UNFLAG=CKDEF(PN2).OR.CKDEF(PN3)
C
C...     VECTORS FROM PN1 TO PN2 AND PN3
C
      DO 10 I=1,3
      SC(I) =PN1(I) -PN2(I)
   10 SC(I+3) =PN1(I) -PN3(I)
C
C...     USE APT073 TO FIND PLANE CONTAINING VECTORS AND PN1
C
      CALL APT073 (RESULT,SC,SC(4),PN1)
      IF (UNFLAG .OR. IERROR .NE. 0) CALL DEFEXT(RESULT)
      IF(PRNTON) CALL PRINT(3,RESULT,1)
      RETURN
       END
**** SOURCE FILE : M0000796.V02   ***
*
C.....FORTRAN SUBROUTINE              APT046               3/26/68
C
C              FORTRAN SUBROUTINE APT046
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A PLANE
C              DEFINED AS PARALLEL TO A GIVEN PLANE AND
C              PASSING THROUGH A GIVEN POINT BY THE APT
C              STATEMENT
C              RESULT = PLANE/PN, PARLEL, PL
C
C LINKAGE      CALL APT046 (RESULT, PN, PL)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING PLANE
C              PN      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              PL      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT PLANE
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT046 (RESULT,PN,PL)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PN(3),PL(4)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
      UNFLAG = CKDEF(PN).OR.CKDEF(PL)
C
C...     COMPUTE NORMAL DISTANCE TO DESIRED PLANE
C
      CALL VNORM (PL(1),R(1))
      DO 10 I=1,3
   10 R(4)=R(4)+R(I)*PN(I)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000797.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT047...              6/10/68 EAN
C
C              FORTRAN SUBROUTINE APT047
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A PLANE DEFINED
C              AS PARALLEL TO A GIVEN PLANE AND OFFSET A GIVEN
C              DISTANCE BY THE FOLLOWING APT STATEMENT
C              RESULT = PLANE/PARLEL, P1, ****, D,
C                **** = XLARGE, YLARGE, ZLARGE, XSMALL, YSMALL,
C                       OR ZSMALL
C
C LINKAGE      CALL APT047 (RESULT, PL, MN, D)
C
C ARGUMENT     RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING PLANE
C              PL      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT PLANE
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = XLARGE, 2 = YLARGE, 3 = ZLARGE,
C                      4 = XSMALL, 5 = YSMALL, 6 = XSMALL
C              D       REAL VARIABLE CONTAINING THE VALUE OF
C                      OFFSET DISTANCE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT077
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       FLOAT
C              REMAINDERING FUNCTION MOD
C              REAL FUNCTION       SIGN
C              LOGICAL FUNCTION    XVECT
C
      SUBROUTINE APT047 (RESULT,PL,MN,D)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4), PL(4)
      LOGICAL ZVECT
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
      EQUIVALENCE (S1,SC(1))
C
C...     TRANSFORM CANONICAL FORM TO LOCAL COORDINATE SYSTEM
C
      DATA ZLIT1,K59/3.5D0,59/
      CALL APT077(PL,0)
      IF (UNFLAG) GO TO 50
      UNFLAG =.NOT.ZVECT(L)
C
C...     CHECK WHICH SIDE NEW PLANE IS ON
C
      I= MOD(MN -K1,K3)
      DO 20 K=1,3
      DUMMY1 = MN
      S1 = L(I+1)*(ZLIT1-DUMMY1)
      IF (S1.NE.Z0) GO TO 30
C
C...     UNABLE TO DISTINGUISH PLANE, TRY NEXT DIMENSION
C
      I =MOD(I+K1,K3)
   20 IERROR = K59
C
C...     FORM DESIRED PLANE
C
   30 L(4)=L(4)+D*DSIGN(1.0D0,S1)
      CALL APT077 (L,KM1)
   40 CALL DEFEXT (RESULT)
      RETURN
   50 IERROR=K1
      GO TO 40
       END
**** SOURCE FILE : M0000798.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT048...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT048
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A PLANE
C              DEFINED AS PERPENDICULAR TO A GIVEN PLANE
C              AND PASSING THROUGH TWO GIVEN POINTS BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = PLANE/PERPTO, PL, PN1, PN2
C
C LINKAGE      CALL APT048 (RESULT, PL, PN1, PN2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING PLANE
C              PL      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT PLANE
C              PN1     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE FIRST INPUT POINT
C              PN2     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE SECOND INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT035
C              SUBROUTINE          APT073
C
      SUBROUTINE APT048 (RESULT,PL,PN1,PN2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PL(4),PN1(3),PN2(3)
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C
C...     DEFINE A VECTOR IN THE DESIRED PLANE
C
      CALL APT035 (LN1(2),PN2,PN1)
C
C...     DEFINE THE PLANE CONTAINING A POINT, THE DEFINED VECTOR, AND A
C...     NORMAL VECTOR TO THE ORIGINAL PLANE
C
      CALL APT073 (RESULT,PL,LN1(2),PN1)
      IF (PRNTON) CALL PRINT(3,RESULT,1)
      RETURN
       END
**** SOURCE FILE : M0000799.V02   ***
*
C.....FORTRAN SUBROUTINE             APT049...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT049
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CIRCLE
C              DEFINED WITH A GIVEN POINT AS ITS CENTER AND
C              HAVING A GIVEN RADIUS BY THE FOLLOWING APT
C              STATEMENT
C              RESULT = CIRCLE/CENTER, CNT, RADIUS, RAD
C
C LINKAGE      CALL APT049 (RESULT, CNT, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING CIRCLE
C              CNT     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              RAD     REAL VARIABLE CONTAINING THE VALUE
C                      OF THE DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT078
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT049 (RESULT,CNT,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),CNT(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     CONVERT AXIS TO BASE SYSTEM,SET CENTER AND RADIUS
C
      CALL APT078(R(4),KM1)
      DO 10 I=1,3
      R(I+3)=R(I)
   10 R(I)=CNT(I)
      R(7)=RAD
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000800.V02   ***
*
C.....FORTRAN SUBROUTINE             APT050...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT050
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A SPHERE
C              DEFINED AS HAVING A GIVEN CENTER POINT AND
C              A GIVEN RADIUS BY THE FOLLOWING APT STATEMENT
C              RESULT = SPHERE/CENTER, PN, RADIUS, R
C
C LINKAGE      CALL APT050 (RESULT, PN, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING SPHERE
C              PN      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              RAD     REAL VARIABLE CONTAINING THE VALUE
C                      OF THE DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          UNDEF
C
      SUBROUTINE APT050 (RESULT,PN,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PN(3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
      UNFLAG=CKDEF(PN)
      DO 10 I=1,3
   10 R(I)=PN(I)
      R(4)=RAD
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000801.V02   ***
*
C.....FORTRAN SUBROUTINE             APT051...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT051
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A SPHERE
C              DEFINED AS HAVING ITS CENTER AT A GIVEN POINT
C              AND PASSING THROUGH A GIVEN POINT BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = SPHERE/CENTER, PN1, PN2
C
C LINKAGE      CALL APT051 (RESULT, PN1, PN2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN CANONICAL FORM OF THE
C                      RESULTING SPHERE
C              PN1     ARRAY CONTAINING CANONICAL FORM OF THE
C                      INPUT POINT (CENTER)
C              PN2     ARRAY CONTAINING CANONICAL FORM OF THE
C                      INPUT POINT (ON SPHERE)
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT051 (RESULT,PN1,PN2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PN1(3),PN2(3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C...     COMPUTE RADIUS OF RESULT, MOVE PN1 TO CENTER
C
      DO 10 I=1,3
      R(I)=PN1(I)
   10 R(4)=R(4)+(R(I)-PN2(I))**2
      UNFLAG=CKDEF(R).OR.CKDEF(PN2)
C
      R(4)=DSQRT(R(4))
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000802.V02   ***
*
C.....FORTRAN SUBROUTINE             APT052...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT052
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A SPHERE
C              DEFINED AS HAVING ITS CENTER AT A GIVEN POINT
C              AND TANGENT TO A GIVEN PLANE BY THE FOLLOWING
C              APT STATEMENT
C              RESULT = SPHERE/CENTER, PN, TANTO, PL
C
C LINKAGE      CALL APT052 (RESULT, PN, PL)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING SPHERE
C              PN      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              PL      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT PLANE
C
C SUBSIDIARIES TYPE                ENTRY
C              REAL FUNCTION       ABS
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT052 (RESULT,PN,PL)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PN(3),PL(4)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C...     COMPUTE RADIUS OF RESULT, MOVE PN TO CENTER
C
      DO 10 I=1,3
      R(I)=PN(I)
   10 R(4)=R(4)+R(I)*PL(I)
      R(4)=DABS(R(4)-PL(4))
      UNFLAG=CKDEF(R).OR.CKDEF(PL)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000803.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT053...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT053
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A SPHERE
C              DEFINED AS PASSING THROUGH FOUR GIVEN POINTS
C              BY THE FOLLOWING APT STATEMENT
C              RESULT = SPHERE/PT1, PT2, PT3, PT4
C
C LINKAGE      CALL APT053 (RESULT, PT1, PT2, PT3, PT4)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING SPHERE
C              PT1     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE FIRST INPUT POINT
C              PT2     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE SECOND INPUT POINT
C              PT3     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE THIRD INPUT POINT
C              PT4     ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE FOURTH INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT075
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       SQRT
C
      SUBROUTINE APT053 (RESULT,PT1,PT2,PT3,PT4)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PT1(3),PT2(3),PT3(3),PT4(3),ST(3,3),PT(4,3)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (ST(1,1),SC(1)),(PT(1,1),P(1))
C
      DATA K57/57/
C...     MOVE INPUTS TO SCRATCH STORAGE, CHECK INPUT
C
      UNFLAG=CKDEF(PT4)
      DO 10 I=1,3
      ST(1,I) =PT1(I)
      ST(2,I) =PT2(I)
      ST(3,I) =PT3(I)
   10 UNFLAG =UNFLAG.OR.CKDEF(ST(I,1))
C
C...     FORM EQUATION COEFFICIENTS
C
      DO 30 I=1,3
      PT (4,I)=Z0
C
      DO 20 J=1,3
      PT(I,J) =ST(J,I) -PT4(I)
   20 PT(4,I) =PT(4,I) +ST(I,J)**2 -PT4(J)**2
   30 R(4)=R(4)+PT4(I)**2
C
C...     SOLVE FOR SPHERE EQUATION COEFFS.
C
      CALL APT075(R,PT)
C
C...     CHECK FOR COPLANAR POINTS
C
      IF (IERROR.GE. K1) IERROR = K57
C
C...     COMPUTE RADIUS TERM
C
      DO 40 I=1,3
      R(I)=R(I)/Z2
   40 R(4) =R(4) +R(I)*(R(I) -Z2*PT4(I))
      R(4)=DSQRT(R(4))
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000804.V02   ***
*
C.....FORTRAN SUBROUTINE             APT054...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT054
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CYLINDER
C              DEFINED AS HAVING A GIVEN POINT ON ITS AXIS,
C              THREE GIVEN COMPONENTS OF ITS AXIS VECTOR, AND
C              A GIVEN RADIUS, BY THE FOLLOWING APT STATEMENT
C              RESULT = CYLNDR/PN, AX, AY, AZ, R
C
C LINKAGE      CALL APT054 (RESULT, PN, AX, AY, AZ, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING CYLINDER
C              PN      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              AX      REAL VARIABLE CONTAINING THE VALUE
C                      OF X COMPONENT OF THE AXIS VECTOR
C              AY      REAL VARIABLE CONTAINING THE VALUE
C                      OF Y COMPONENT OF THE AXIS VECTOR
C              AZ      REAL VARIABLE CONTAINING THE VALUE
C                      OF Z COMPONENT OF THE AXIS VECTOR
C              RAD     REAL VARIABLE CONTAINING THE VALUE
C                      OF THE DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT055
C              SUBROUTINE          APT081
C
      SUBROUTINE APT054(RESULT,PN,AX,AY,AZ,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),PN(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
      R(1)=AX
      R(2)=AY
      R(3)=AZ
      CALL APT081(R,KM1)
      CALL APT055(RESULT,PN,R,RAD)
      RETURN
      END
**** SOURCE FILE : M0000805.V02   ***
*
C.....FORTRAN SUBROUTINE             APT055...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT055
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CYLINDER
C              DEFINED AS HAVING A GIVEN POINT ON ITS AXIS,
C              A GIVEN AXIS VECTOR AND A GIVEN RADIUS, BY
C              THE FOLLOWING APT STATEMENT
C              RESULT = CYLNDR/PN, VE, R
C
C LINKAGE      CALL APT055 (RESULT, PN, VE, RAD)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING CYLINDER
C              PN      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              VE      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT VECTOR
C              RAD     REAL VARIABLE CONTAINING THE VALUE
C                      OF THE DESIRED RADIUS
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT040
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C              LOGICAL FUNCTION    ZVECT
C
      SUBROUTINE APT055 (RESULT,PN,VE,RAD)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),PN(3),VE(3)
      LOGICAL CKDEF,ZVECT
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
      DATA K58/58/
C
C...     CHECK INPUT, MOVE ARGUMENTS
C
      DO 10 I=1,3
      R(I+3)=VE(I)
   10 R(I)=PN(I)
      UNFLAG=CKDEF(R)
C
C...     CHECK FOR ZERO VECTOR, NORMALIZE
C
      IF (.NOT. ZVECT(R(4))) IERROR = K58
      CALL APT040(R(4),R(4))
      R(7)=RAD
      CALL DEFEXT (RESULT)
      RETURN
       END
**** SOURCE FILE : M0000806.V02   ***
*
C.....FORTRAN SUBROUTINE             APT056...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT056
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CONE
C              DEFINED AS HAVING A GIVEN VERTEX POINT, A
C              GIVEN AXIS VECTOR, AND A GIVEN VALUE OF ITS
C              HALF ANGLE BY THE FOLLOWING APT STATEMENT
C              RESULT = CONE/PN, VE, BETA
C
C LINKAGE      CALL APT056 (RESULT, PN, VE, BETA)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING CONE
C              PN      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT POINT
C              VE      ARRAY CONTAINING THE CANONICAL FORM
C                      OF THE INPUT VECTOR
C              BETA    REAL VARIABLE CONTAINING THE VALUE
C                      OF THE DESIRED HALF ANGLE (DEGREES)
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT040
C              LOGICAL FUNCTION    CKDEF
C              REAL FUNCTION       COS
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          ERROR
C              LOGICAL FUNCTION    ZVECT
C
      SUBROUTINE APT056 (RESULT,PN,VE,BETA)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(7),PN(3),VE(3)
      LOGICAL CKDEF,ZVECT
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
C...     CHECK INPUT VALIDITY, STORE ARGUMENTS
C
      DO 10 I=1,3
      R(I)=PN(I)
   10 R(I+3)=VE(I)
      UNFLAG=CKDEF(R)
C
C...     CHECK HALF-ANGLE .LE. 90 DEGREES, VECTOR NON-ZERO
C
      IF (BETA.GT.Z90 ) IERROR=K48
      IF (.NOT.ZVECT(R(4))) IERROR=K47
C
C...     NORMALIZE VECTOR, TAKE COSINE OF BETA
C
      CALL APT040(R(4),R(4))
      R(7)=DCOS(BETA*DEGRAD)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000807.V02   ***
*
C.....FORTRAN SUBROUTINE             APT057...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT057
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF AN ELLIPSE DE-
C              FINED AS HAVING A GIVEN CENTER POINT, GIVEN LENGTHS
C              OF SEMI-MAJOR AND SEMI-MINOR AXES, AND A GIVEN
C              ANGLE BETWEEN THE MAJOR AXIS AND THE X AXIS BY
C              THE FOLLOWING APT STATEMENT
C              RESULT = ELLIPS/CENTER, PN, MA, MI, BETA
C
C LINKAGE      CALL APT057 (RESULT, PN, MA, MI, BETA)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING ELLIPSE
C              PN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C              MA      REAL VARIABLE CONTAINING THE LENGTH OF
C                      THE SEMI-MAJOR AXIS
C              MI      REAL VARIABLE CONTAINING THE LENGTH OF
C                      THE SEMI-MINOR AXIS
C              BETA    REAL VARIABLE CONTAINING THE VALUE OF
C                      THE ANGLE BETWEEN THE MAJOR AXIS AND
C                      THE X AXIS (DEGREES)
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT059
C
      SUBROUTINE APT057 (RESULT,PN,MA,MI,BETA)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(10),PN(3)
      DOUBLE PRECISION MA,MI
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'ZNUMBR.INC'
C
C
C
      CALL APT059(RESULT,PN,MA,MI,BETA,Z1)
      RETURN
       END
**** SOURCE FILE : M0000808.V02   ***
*
C.....FORTRAN SUBROUTINE             APT058...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT058
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A HYPERBOLA
C              DEFINED AS HAVING A GIVEN CENTER POINT, GIVEN
C              LENGTHS OF SEMI-TRANSVERSE AND SEMI-CONJUGATE
C              AXIS, AND A GIVEN ANGLE BETWEEN THE TRANSVERSE
C              AXIS AND THE X AXIS BY THE FOLLOWING APT STATEMENT
C              RESULT = HYPERB/CENTER, PN, STA, SCA, BETA
C
C LINKAGE      CALL APT058 (RESULT, PN, STA, SCA, BETA)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING HYPERBOLA
C              PN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C              STA     REAL VARIABLE CONTAINING THE LENGTH
C                      OF SEMI-TRANSVERSE AXIS
C              SCA     REAL VARIABLE CONTAINING THE LENGTH OF
C                      THE SEMI-CONJUGATE AXIS
C              BETA    REAL VARIABLE CONTAINING THE ANGLE
C                      BETWEEN THE TRANSVERSE AXIS AND THE
C                      X AXIS (DEGREES)
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT059
C
      SUBROUTINE APT058 (RESULT,PN,STA,SCA,BETA)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(10),PN(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'ZNUMBR.INC'
C
C
C
      CALL APT059(RESULT,PN,STA,SCA,BETA,ZM1)
      RETURN
       END
**** SOURCE FILE : M0002234.V05   ***
*
C
C.....FORTRAN SUBROUTINE             APT059...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT059
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF AN ELLIPSE OR
C              HYPERBOLA, GIVEN THE CENTER, ROTATION ANGLE,
C              AND MAJOR AND MINOR AXIS.
C
C LINKAGE      CALL APT059 (RESULT, PN, MA, MI, BETA, SGN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE SECOND DEGREE EQUATION
C              PN      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE CENTER POINT
C              MA      REAL VARIABLE CONTAINING THE LENGTH OF
C                      THE SEMI-MAJOR AXIS
C              MI      REAL VARIABLE CONTAINING THE LENGTH
C                      OF THE SEMI-MINOR AXIS
C              BETA    REAL VARIABLE CONTAINING THE VALUE OF
C                      THE ANGLE BETWEEN THE MAJOR AXIS AND THE
C                      X-AXIS
C              SGN     REAL VARIABLE CONTAINING THE SURFACE
C                      INDICATOR
C                           1 = ELLIPSE;   -1 = HYPERBOLA
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT079
C              SUBROUTINE          APT081
C              SUBROUTINE          DEFEXT
C              REAL FUNCTION       COS
C              REAL FUNCTION       SIN
C
      SUBROUTINE APT059 (RESULT,PN,MA,MI,BETA,SGN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(10),PN(3)
      DOUBLE PRECISION MA,MI
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1)),(S2,SC(2)),(S3,SC(3)),(S4,SC(4)),
     1            (S5,SC(5)),(S6,SC(6)),(S7,SC(7))
C
C
C...     TRANSFORM POINT TO LOCAL SYSTEM, CHECK VALIDITY
C
      CALL APT081(PN,K0)
      IF(MA.GT.MI) GO TO 10
      CALL ERROR(40,'APT059  ')
      SWOP=MA
      MA=MI
      MI=SWOP
      BETA=BETA+90
   10 S1=BETA*DEGRAD
      S2=DSIN(S1)
      S3=DCOS(S1)
      S4=S2**2
      S5=S3**2
      S6=SGN*MA**2
      S7=MI**2
      R(1)=S7*S5+S6*S4
      R(2)=S7*S4+S6*S5
      R(4)=S7*(P(1)*S3+P(2)*S2)**2
     1     +S6*(P(1)*S2-P(2)*S3)**2-S7*MA**2
      R(6)=Z0
      R(7)=S2*S3*(S7-S6)
      R(8)=-P(2)*R(7)-P(1)*R(1)
      R(9)=-P(1)*R(7)-P(2)*R(2)
      CALL APT079(R,KM1)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000810.V02   ***
*
C.....FORTRAN SUBROUTINE             APT060...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT060
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A GENERAL CONIC
C              IN THE XY PLANE DEFINED BY THE COEFFICIENTS OF
C              THE TERMS OF THE GENERAL EQUATION AX2 + BXY +
C              CY2 + DX + EY + F = O BY THE APT STATEMENT
C              RESULT = GCONIC/A,B,C,D,E,F
C
C LINKAGE      CALL APT060 (RESULT, AN, BN, CN, DN, EN, FN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING CONIC
C              AN      COEFFICIENT OF THE X2 TERM
C              BN      COEFFICIENT OF THE XY TERM
C              CN      COEFFICIENT OF THE Y2 TERM
C              DN      COEFFICIENT OF THE X TERM
C              EN      COEFFICIENT OF THE Y TERM
C              FN      CONSTANT TERM
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT079
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT060(RESULT,AN,BN,CN,DN,EN,FN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(10)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      R(1)=AN
      R(2)=CN
      R(4)=FN
      R(6)=Z0
      R(7)=BN/Z2
      R(8)=DN/Z2
      R(9)=EN/Z2
      CALL APT079(R,KM1)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000811.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT061...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT061
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A GENERAL
C              CONIC IN THE XY PLANE BY THE COEFFICIENTS OF
C              THE EXPRESSION OF ONE VARIABLE AS A FUNCTION OF
C              THE OTHER
C                Y = PX + Q + RX2 + SX + T OR
C                X = PY + Q + RY2 + SY + T
C              BY THE APT STATEMENTS
C                   RESULT = GCONIC/P,Q,RA,S,T OR
C                   RESULT = GCONIC/P,Q,RA,S,T, FUNOFY
C                            RESPECTIVELY.
C
C LINKAGE      CALL APT061 (RESULT, PM,Q,RA,SM,TM,MN,)
C
C ARGUMENTS    RESULTS ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING CONIC
C              PM      COEFFICIENT IN APPROPRIATE EQUATION
C                      ABOVE
C              Q       COEFFICIENT IN APPROPRIATE EQUATION
C                      ABOVE
C              RA      COEFFICIENT IN APPROPRIATE EQUATION
C                      ABOVE
C              SM      COEFFICIENT IN APPROPRIATE EQUATION
C                      ABOVE
C              TM      COEFFICIENT IN APPROPRIATE EQUATION
C                      ABOVE
C              MN      INTEGER EQUIVALENT OF MODIFIER
C                      1 IF NOT FUNOFY; 2 IF FUNOFY
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT079
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT061 (RESULT,PM,Q,RA,SM,TM,MN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(10)
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1)),(S2,SC(2))
C
C
      S1=PM
      S2=Q
      I=MN
      J=K3-I
      R(I) = S1**2-RA
      R(I+7) = S1*S2-SM/Z2
      R(J)=Z1
      R(J+7)=-S2
      R(4)=S2**2-TM
      R(6)=Z0
      R(7)=-S1
      CALL APT079(R,KM1)
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000812.V02   ***
*
C.....FORTRAN SUBROUTINE             APT062...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT062
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A QUADRIC
C              SURFACE DEFINED BY THE COEFFICIENTS OF THE
C              GENERAL EQUATION AX2+BY2+CZ2+D+FYZ+GXZ+HXY
C              +PX+QY+RZ = O
C              BY THE FOLLOWING APT STATEMENT
C                RESULT = QADRIC/A,B,C,F,G,H,P,Q,R,D
C
C LINKAGE      CALL APT062 (RESULT, AN,BN,C2,F,GN,H,PN,Q,RA,D)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING QUADRIC
C              AN      COEFFICIENT OF THE X2 TERM
C              BN      COEFFICIENT OF THE Y2 TERM
C              C2      COEFFICIENT OF THE Z2 TERM
C              F       COEFFICIENT OF THE YZ TERM
C              GN      COEFFICIENT OF THE XZ TERM
C              H       COEFFICIENT OF THE XY TERM
C              PN      COEFFICIENT OF THE X TERM
C              Q       COEFFICIENT OF THE Y TERM
C              RA      COEFFICIENT OF THE Z TERM
C              D       CONSTANT TERM
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT079
C              SUBROUTINE          DEFEXT
C
      SUBROUTINE APT062 (RESULT,AN,BN,C2,F,GN,H,PN,Q,RA,D)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(10)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
      R(1)=AN
      R(2)=BN
      R(3)=C2
      R(4)=D
      R(5)=F/Z2
      R(6)=GN/Z2
      R(7)=H/Z2
      R(8)=PN/Z2
      R(9)=Q/Z2
      R(10)=RA/Z2
C
C...     CONVERT FORM TO BASE SYSTEM
C
      CALL APT079(R,KM1)
C
C...     MOVE TO RESULT
C
      CALL DEFEXT(RESULT)
      RETURN
       END
**** SOURCE FILE : M0000813.V02   ***
*
C.....FORTRAN SUBROUTINE             APT063...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT063
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A TRANSLATION
C              MATRIX FROM THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/TRANSL, D1, D2, D3
C
C LINKAGE      CALL APT063 (RESULT, D1, D2, D3)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING MATRIX
C              D1      REAL VARIABLE CONTAINING THE AMOUNT OF
C                      TRANSLATION IN THE X DIRECTION
C              D2      REAL VARIABLE CONTAINING THE AMOUNT OF
C                      TRANSLATION IN THE Y DIRECTION
C              D3      REAL VARIABLE CONTAINING THE AMOUNT OF
C                      TRANSLATION IN THE Z DIRECTION
C
C SUBSIDIARIES NONE
C
      SUBROUTINE APT063 (RESULT,D1,D2,D3)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(12)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
C
C
C
C...     ROTATION MATRIX IS IDENTITY MATRIX
C
      RESULT(1) = Z1
      DO 10 I =2,10
   10 RESULT(I) =R(I)
      RESULT(11) =Z1
C
C...     ADD TRANSLATION PART OF MATRIX
C
      RESULT(4) = D1
      RESULT(8) = D2
      RESULT(12) = D3
      RETURN
       END
**** SOURCE FILE : M0000814.V03   ***
*
C.....FORTRAN SUBROUTINE  ....APT064         8/68                    RN
C.....FORTRAN SUBROUTINE             APT064...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT064
C
C PURPOSE      TO GENERATE A ROTATION MATRIX WITHIN A COORDINATE
C              PLANE FROM THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/****, BETA
C                **** = XYROT, YZROT, OR ZXROT
C
C LINKAGE      CALL APT064 (RESULT, MN, BETA)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING MATRIX
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      1 = XYROT     2 = YZROT    3 = ZXROT
C              BETA    REAL VARIABLE CONTAING THE VALUE OF
C                      ROTATION ANGLE
C
C SUBSIDIARIES TYPE                ENTRY
C              REAL FUNCTION       COS
C              REAL FUNCTION       SIN
C              REAL FUNCTION       MOD
C
      SUBROUTINE APT064 (RESULT,MN,BETA)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4,3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (S1,SC(1)),  (S2,SC(2))
C
C
      S1=BETA*DEGRAD
      S2=DCOS(S1)
      S1=DSIN(S1)
      IF (DABS(S2) .LT. Z1EM9) S2=Z0
      IF (DABS(S1) .LT. Z1EM9) S1=Z0
      DO 10 I=1,4
      DO 10 K=1,3
   10 RESULT(I,K) = Z0
C
C...     FORM ROTATION MATRIX
C
      J=MN
      K=MOD(J,K3)+K1
      I=MOD(K,K3)+K1
      RESULT(J,J) = S2
      RESULT(K,K) = S2
      RESULT(J,K) = S1
      RESULT(K,J) = -S1
      RESULT(I,I) = Z1
      RETURN
       END
**** SOURCE FILE : M0000815.V02   ***
*
C.....FORTRAN SUBROUTINE             APT065...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT065
C
C PURPOSE      TO GENERATE A MATRIX DEFINED AS A POINT AND TWO
C              VECTORS BY THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/PT,V1,V2
C
C LINKAGE      CALL APT065 (RESULT, PT, V1, V2)
C
C ARGUMENTS    RESULT ARRAY TO CONTAIN THE CANONICAL FORM OF
C                     THE RESULTING MATRIX
C              PT     ARRAY CONTAINING THE CANONICAL FORM OF
C                     THE INPUT POINT
C              V1     ARRAY CONTAINING THE CANONICAL FORM OF
C                     THE FIRST INPUT VECTOR
C              V2     ARRAY CONTAINING THE CANONICAL FORM OF
C                     THE SECOND INPUT VECTOR
C
C SUBSIDIARIES TYPE               ENTRY
C              SUBROUTINE         CROSS
C              SUBROUTINE         DOTF
C              SUBROUTINE         VNORM
C              LOGICAL FUNCTION   ZVECT
C              LOGICAL FUNCTION   CKDEF
C
      SUBROUTINE APT065 (RESULT,PT,V1,V2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(12),PT(3),V1(3),V2(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      LOGICAL CKDEF
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      UNFLAG=CKDEF(PT).OR.CKDEF(V1).OR.CKDEF(V2)
C
C...     CALCULATE A VECTOR DEFINING Z,Y,X-AXIS
C
      CALL CROSS(V1,V2,T1(9))
C
      CALL CROSS (T1(9),V1,T1(5))
      DO 10 J=1,3
   10 T1(J)=V1(J)
C
C...  CALCULATE DISTANCES FROM ORIGIN TO YZPLANE,ZXPLANE,AND XYPLANE
C
      DO 20 J=1,9,4
      CALL VNORM(T1(J),T1(J))
      CALL DOTF(T1(J+3),T1(J),PT)
   20 T1(J+3)=-T1(J+3)
C
C...     INVERSE MATRIX
C
      CALL APT067(RESULT,T1)
      RETURN
      END
**** SOURCE FILE : M0000816.V02   ***
*
C...  FORTRAN SUBROUTINE               APT066
C
C              FORTRAN SUBROUTINE APT066
C
C PURPOSE      TO GENERATE A MATRIX DEFINED AS THE PRODUCT OF
C              TWO MATRICES BY THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/M1, M2
C
C LINKAGE      CALL APT066(RESULT,M1,M2,MN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM
C                      OF THE RESULTING MATRIX
C              M1      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT MATRIX
C              M2      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT MATRIX
C              MN      INTEGER SET TO ONE IF APT III ORDER OF
C                      MULTIPLICATION FOR THIS CASE IS OPPOSITE TO
C                      APT IV ORDER
C
      SUBROUTINE APT066(RESULT,M1,M2,MN)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(12),M1(12),M2(12)
      DOUBLE PRECISION M1
      DOUBLE PRECISION M2
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      LOGICAL SWITCH
C
C        CHECK FOR APT III ORDER OF MATRIX MULTIPLICATION
C
      SWITCH=.FALSE.
      IF(ALTMLT .AND. (MN.EQ.1))SWITCH=.TRUE.
C
C...     MAKE MATRIX SQUARE,TRANSFER
C
      DO 10 I=1,3
C
      L11=4*(I-1)
      DO 10 J=1,4
      J11=L11+J
      IF(SWITCH)GO TO 5
      RESULT(J11)=M2(L11+1)*M1(J)+M2(L11+2)*M1(J+4)+M2(L11+3)*M1(J+8)
      IF(J.EQ.4) RESULT(J11)=RESULT(J11)+M2(L11+4)
      GO TO 10
    5 RESULT(J11)=M1(L11+1)*M2(J)+M1(L11+2)*M2(J+4)+M1(L11+3)*M2(J+8)
      IF(J.EQ.4)RESULT(J11)=RESULT(J11)+M1(L11+4)
   10 CONTINUE
      RETURN
       END
**** SOURCE FILE : M0000817.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT067...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT067
C
C PURPOSE      TO GENERATE A MATRIX DEFINED AS THE INVERSE OF
C              A GIVEN MATRIX OF ROTATION AND/OR TRANSLATION BY
C              THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/INVERS, MX
C
C LINKAGE      CALL APT067 (RESULT, MX)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING MATRIX
C              MX      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT MATRIX
C
C SUBSIDIARIES NONE
C
      SUBROUTINE APT067 (RESULT,MX)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4,3),ST(4,3),MX(4,3)
      DOUBLE PRECISION MX
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
C
C
      EQUIVALENCE (ST(1,1),SC(1))
C
      DO 10 I=1,3
      ST(4,I) = Z0
      DO 10 J=1,3
      ST(J,I) = MX(I,J)
   10 ST(4,I) = ST(4,I) -ST(J,I) *MX(4,J)
      DO 20 I=1,4
      DO 20 J=1,3
   20 RESULT(I,J)=ST(I,J)
      RETURN
       END
**** SOURCE FILE : M0000818.V03   ***
*
C
C.....FORTRAN SUBROUTINE             APT068...              3/1/68   GK
C
C              FORTRAN SUBROUTINE APT068
C
C PURPOSE      TO GENERATE A MATRIX DEFINED AS THREE PLANES BY
C              THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/PL1, PL2, PL3
C
C LINKAGE      CALL APT068 (RESULT, PL1, PL2, PL3)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING MATRIX
C              PL1     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT PLANE
C              PL2     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT PLANE
C              PL3     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE THIRD INPUT PLANE
C
C SUBSIDIARIES TYPE                ENTRY
C              LOGICAL FUNCTION    CKDEF
C
      SUBROUTINE APT068 (RESULT,PL1,PL2,PL3)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(12),PL1(4),PL2(4),PL3(4)
      LOGICAL CKDEF
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
C
      DIMENSION  T(12)
C
C
C
C
      DO 10 I=1,4
      T(I)=PL1(I)
      T(I+4)=PL2(I)
   10 T(I+8)=PL3(I)
      T(4)=-T(4)
      T(8)=-T(8)
      T(12)=-T(12)
      UNFLAG=CKDEF(R).OR.CKDEF(R(5)).OR.CKDEF(R(9))
      CALL APT067(RESULT,T)
C
      RETURN
       END
**** SOURCE FILE : M0000819.V03   ***
*
C.....FORTRAN SUBROUTINE  ....APT069         8/68                    RN
C.....FORTRAN SUBROUTINE              APT069
C
C              FORTRAN SUBROUTINE APT069
C
C PURPOSE      TO GENERATE A MATRIX OF ROTATION ABOUT
C              A POINT AND VECTOR BY THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/ PT1,VEC1, ANGLE
C
C LINKAGE      CALL APT069 (RESULT,PT,VT1,BETA)
C
C ARGUMENTS   RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING MATRIX
C              PT      ARRAY CONTAINING THE CANONICAL FORM OF
C                      INPUT POINT
C              VT1     ARRAY CONTAINING THE CANONICAL FORM OF
C                      INPUT VECTOR
C              BETA    REAL VARIABLE CONTAINING THE VALUE OF
C                      ROTATION ANGLE (DEGREES)
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          VNORM
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DOTF
C              REAL    FUNCTION    DCOS
C              REAL    FUNCTION    DSIN
C
      SUBROUTINE APT069(RESULT,PT,VT1,BETA)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION  RESULT(12),PT(3),VT1(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      LOGICAL CKDEF
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      EQUIVALENCE (SC(1),ALP,D1),(SC(2),COSA),(SC(3),SINA),(SC(4),OMC)
      UNFLAG=CKDEF(PT).OR.CKDEF(VT1)
      CALL VNORM(VT1,V)
      ALP=BETA*DEGRAD
      COSA=DCOS(ALP)
      SINA=DSIN(ALP)
      IF (DABS(COSA) .LT. Z1EM9) COSA=Z0
      IF (DABS(SINA) .LT. Z1EM9) SINA=Z0
      OMC =Z1-COSA
      RESULT( 1)=COSA
      RESULT( 2)=-V(3)*SINA
      RESULT( 3)=V(2)*SINA
      RESULT( 5)=V(3)*SINA
      RESULT( 6)=COSA
      RESULT( 7)=-V(1)*SINA
      RESULT( 9)=-V(2)*SINA
      RESULT(10)=V(1)*SINA
      RESULT(11)=COSA
      DO 10 J=1,3
      D1=V(J)
      RESULT(J)=V(1)*OMC*D1+RESULT(J)
      RESULT(J+4)=V(2)*OMC*D1+RESULT(J+4)
   10 RESULT(J+8)=V(3)*OMC*D1+RESULT(J+8)
      J=0
      DO 20 I=1,3
      CALL DOTF(RESULT(J+4),RESULT(J+1),PT(1))
      RESULT(J+4)=PT(I)-RESULT(J+4)
   20 J=J+4
      RETURN
      END
**** SOURCE FILE : M0002232.V06   ***
*
C
C.....FORTRAN SUBROUTINE  ....APT070         8/68                 HG,RN
C
C              FORTRAN SUBROUTINE APT070
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A LINE THRU
C              A POINT AND TANGENT OR NORMAL TO A TABCYL IN
C              THE XY PLANE DEFINED BY THE FOLLOWING APT
C              STATEMENT
C                RESULT = LINE/PT,TANTO,TAB,PT2
C                RESULT = LINE/PT,PERPTO,TAB,PT2
C
C LINKAGE      CALL APT070 (RESULT,PT,MM,TAB,PT2)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING LINE
C              PT      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C              MM      INTEGER EQUIVALENT OF THE MODIFIER
C                          1=TANTO    2=PERPTO
C              TAB     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT TABCYL
C              PT2     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          TRANRO
C              SUBROUTINE          POLYR
C              SUBROUTINE          APT094
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          SCHTB
C
C
C
      SUBROUTINE APT070(RESULT,PT,MM,TAB,PT2)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),PT(3),TAB(2),PT2(3)
      INCLUDE 'BLANKCOM.INC'
      DIMENSION D(COMSIZ),INE(3),AA(22)
      LOGICAL CKDEF
C
C...  VARIABLES XA,YA,RA,XB,YB,XC,YC,XD,YD,TOL,EQU2,SLOP,R1,RY,BORSLP,
C...  X11,Y11,EQ1,EQ2 & DELTA WERE ALL EQUIVALENCED TO SUCCESSIVE
C...  ELEMENTS OF SC.  AS THEIR USEAGE SEEMED TO BE LOCAL, THE
C...  EQUIVALENCE HAS BEEN REMOVED.
C
      EQUIVALENCE(CANON(1),D(1))
      DOUBLE PRECISION Q
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      SMAL(Q)=DSIGN(DMAX1(DABS(Q),Z1EM9),Q)
      CUBIC(X)=((AA(1)*X+AA(2))*X+AA(3))*X+AA(4)
C
      DO 10 I=1,2
      P(I)=PT2(I)
      V(I)=PT(I)
   10 C(I)=TAB(I)
      UNFLAG = CKDEF(P).OR.CKDEF(V).OR.CKDEF(C)
      IF (UNFLAG) GO TO 9998
C
C... RETRIEVE TABCYL EXTERNAL CANONICAL FORM. STORE CANON INDEX IN J11.
C
      CALL APT094(3,TAB(1),J11)
      IF(CKDEF(TAB(1))) GO TO 9998
C
C...  FIND PART OF TABCYL CLOSEST TO INPUT P,USING SCHTB
C
      CALL SCHTB(CANON(J11-1))
      IHU=CANON(J11+11)+Z1EM2
      ITRY=K0
      NT=(CANON(J11+10)-Z1)*7.0+21.1
      J11=J11-1
      IHU=IHU+J11-K1
      GO TO 2
C.....TRANSLATE AND ROTATE INTO COORDINATE SYSTEM OF THE SELECTED
C.....TABCYL INTERBAL
C
   12 IF(ITRY-7) 2,13,13
    2 XA=D(IHU+7)-D(IHU)
      IHUT=IHU
      IF(MM.NE.1) GO TO 412
  411 ITE=J11+NT-16
      IZT=J11+13
      GO TO 413
C.....EXTENSION INTERVALS ARE INCLUDED IN THE NORMAL LINE SEARCH.
  412 ITE=J11+NT-9
      IZT=J11+6
  413 IZ=1
      YA=D(IHU+8)-D(IHU+1)
      RA=-DATAN(YA/SMAL(XA))
      IF(XA)1000,1001,1001
 1000 RA=RA+PI
 1001 CALL TRANRO(XA,YA,XB,YB,RA,IZ)
      XC=V(1)-D(IHU)
      YC=V(2)-D(IHU+1)
      CALL TRANRO(XC,YC,XD,YD,RA,IZ)
C
C.... TEST TO SEE IF GIVEN POINT IS ON OR OFF TABCYL
C
      TOL=Z1EM5
      IF(XB+TOL-XD) 206,71,71
   71 IF(XD+TOL) 206,72,72
   72 EQU2=D(IHU+2)*(XD**3)+D(IHU+3)*(XD**2)-(D(IHU+2)*D(IHU+4)+D(IHU+3)
     C)*(D(IHU+4)*XD)
      IF(DABS(YD-EQU2)-TOL) 70,70,206
  206 IF(MM.NE.1) GO TO 207
      GO TO 73
   70 SLOP=Z3 *D(IHU+2)*XD**2+Z2*D(IHU+3)*XD-(D(IHU+2)*D(IHU+4)+D(IHU+3)
C---    CORRECTION FOR LINE/PT,PERPTO,TAB,REF
     1 )*D(IHU+4)
      IF(MM.EQ.2) GO TO 200
  290 IF(SLOP) 291,76,291
  291 IF(DABS(SLOP)-Z1) 76,74,74
   74 R1=XD-Z1/SLOP
      RY=YD-Z1
      GO TO 79
   76 R1=XD-Z1
      RY=YD-SLOP
      GO TO 79
  200 IF(DABS(SLOP)-Z1EM6) 201,202,202
  201 IF(SLOP) 203,204,204
  203 BORSLP=9999999.
      GO TO 205
  204 BORSLP=-9999999.
      GO TO 205
  202 BORSLP=-1.0/SLOP
  205 SLOP=BORSLP
      GO TO 290
C
C.....CALCULATE COEFFICIENTS OF THE CUBIC EQUATION AND SOLVE FOR
C     THE POINTS OF TANGENCY
C
   73 AA(1)=Z2*D(IHU+2)
      IF(DABS(AA(1))-1.0D-14) 1236,1237,1237
 1236 AA(1)=DSIGN(1.0D-14,AA(1))
 1237 AA(2)=D(IHU+3)-Z3*D(IHU+2)*XD
      AA(3)=-Z2*D(IHU+3)*XD
      AA(4)=YD+(D(IHU+2)*D(IHU+4)+D(IHU+3))*(D(IHU+4)*XD)
      DO 16 I=1,22
   16 T(I)=Z0
      IFALL=K0
      II=K3
      NN=K7
      GO TO 500
  540    CONTINUE
C
C.....TEST FOR ERRORS
C
   21 IF(IFALL.EQ.K0) GO TO 3
      IERROR=75
      GO TO 9999
C
C.....ROOTS FOUND OK, TEST THEIR POSITIONS WITH RESPECT TO THE
C.....BOUNDARY POINTS OF THE INTERVAL
C
    3 IT=-1
      LUCK=K0
      DO 24 I=1,3
      INE(I)=K0
      IT=IT+K2
      IF(T(IT+1)) 24,30,24
   30 IF(T(IT)+Z1EM6) 24,24,25
   25 IF(T(IT)*(XB-T(IT))) 24,26,26
   26 LUCK=LUCK+K1
      INE(I)=IT
   24 CONTINUE
      IF(LUCK-1) 27,28,4
C
C.....MULTIPLE TANGENCY POINTS IN THE INTERVAL
C
    4 XA = D(IHU+7)-D(IHU)
      YA=D(IHU+8)-D(IHU+1)
      RA=-DATAN(YA/SMAL(XA))
      IF(XA) 1002,1003,1003
 1002 RA=RA+PI
 1003 IT=-1
      IZ=-1
      DO 301 I=1,3
      IT=IT+K2
      IF(INE(I)) 299,301,299
  299 R1=T(IT)
      RY=D(IHU+2)*(R1**3)+D(IHU+3)*(R1**2)-(D(IHU+2)*D(IHU+4)+D(IHU+3))
     C *(D(IHU+4)*R1)
      CALL TRANRO (R1,RY,XA,YA,RA,IZ)
      R1=XA+D(IHU)
      RY=YA+D(IHU+1)
  301 CONTINUE
      IERROR=73
      GO TO 9999
C
C.....TEST FOR NORMAL LINE WHEN GIVEN POINT
C     IS NOT A POINT ON THE TABCYL
C     CALCULATE COEFFICIENTS FOR A FIFTH-ORDER EQUATION
C     WHICH DEFINES A POINT ON THE TABCYL INTERVAL (CUBIC EQUATION)
C     WHERE THE NORMAL TO THE INTERVAL PASSES THRU THE GIVEN POINT.
C
  207 T1(1)=Z3*(D(IHU+2)**2)
      T1(2)=Z5*D(IHU+2)*D(IHU+3)
      T1(3)=4.0*D(IHU+2)*(ZM1*(D(IHU+2)*D(IHU+4)+D(IHU+3))*D(IHU+4))
     C +Z2*(D(IHU+3)**2)
      T1(4)=Z3*D(IHU+3)*(-(D(IHU+2)*D(IHU+4)+D(IHU+3))*D(IHU+4))
     C -Z3*D(IHU+2)*YD
      T1(5)=(-(D(IHU+2)*D(IHU+4)+D(IHU+3))*D(IHU+4))**2
     C -Z2*D(IHU+3)*YD+Z1
      T1(6)=XD-YD*(D(IHU+2)*D(IHU+4)+D(IHU+3))*D(IHU+4)
      T1(7)=Z5*T1(1)
      T1(8)=4.0*T1(2)
      T1(9)=Z3*T1(3)
      T1(10)=Z2*T1(4)
      T1(11)=T1(5)
C.....(X11,Y11) IS THE END POINT OF THE INTERVAL BEING
C.....CONSIDERED THAT IS NEAREST TO THE SPECIFIED POINT.
      CALL TRANRO (D(NT),D(NT+1),X11,Y11,RA,IZ)
      IF(X11) 40,44,41
   40 X11=Z0
      GO TO 44
   41 IF(X11-Z5EM1*XB) 40,44,43
   43 X11=XB
C.....NEWTONS METHOD IS USED TO SOLVE THE FIFTH ORDER
C     EQUATION. X11 IS THE INITIAL ESTIMATE OF THE ROOT.
   44 DO 45 J=1,200
      EQ1=((((T1(1)*X11+T1(2))*X11+T1(3))*X11+T1(4))*X11+T1(5))*X11
     C     -T1(6)
      EQ2=(((T1(7)*X11+T1(8))*X11+T1(9))*X11+T1(10))*X11+T1(11)
      IF(Z1) 46,461,461
  461 CONTINUE
      DELTA=-EQ1/EQ2
      IF(DABS(DELTA)-3.0D-6) 47,46,46
   46 X11=X11+DELTA
   45 CONTINUE
      GO TO 27
   47 IF(X11+Z5EM6) 27,112,112
  112 IF((XB+Z5EM6)-X11) 27,113,113
  113 Y11= (D(IHU+2)*X11+D(IHU+3))*X11*X11-(D(IHU+2)*D(IHU+4)+D(IHU+3))
     C    *(D(IHU+4)*X11)
      R1=X11
      RY=Y11
      GO TO 79
C
C.....TANGENCY POINT NOT FOUND OR NOT IN INTERVAL,
C     SET UP FOR RE-TRY UNTIL 3 INTERVALS ON EACH SIDE OF THE INITIAL
C     INTERVAL HAVE BEEN TRIED------A TOTAL OF 7 INTERVALS.
C.....  (EXTENSION INTERVALS ARE INCLUDED FOR NORMAL LINE ONLY)
C
   27 ITRY=ITRY+1
      GO TO (29,900,904,905,906,907,13),ITRY
   29 IHU=IHU+7
  902 IF(IHU-ITE) 12,27,27
  900 IHU=IHU-14
  903 IF(IHU-IZT) 27,27,12
  904 IHU=IHU+21
      GO TO 902
  905 IHU=IHU-28
      GO TO 903
  906 IHU=IHU+35
      GO TO 902
  907 IHU=IHU-42
      GO TO 903
   13 IF(MM.NE.1) GO TO 408
      IERROR=74
      GO TO 9999
  408 IERROR=74
      GO TO 9999
C
C.....TANGENCY POINT FOUND, CALCULATE SECOND COORDINATE AND TRANSFORM
C     THE POINT BACK TO THE XY-PLANE
C
   28 DO 32 I=1,3
      IF(INE(I).NE.0) GO TO 33
   32 CONTINUE
   33 INZ=INE(I)
      R1=T(INZ)
    9 RY=(D(IHU+2)*R1+D(IHU+3))*R1**2
     C   -(D(IHU+2)*D(IHU+4)+D(IHU+3))*(D(IHU+4)*R1)
   79 IZ=-1
      XA=D(IHU+7)-D(IHU)
      YA=D(IHU+8)-D(IHU+1)
      RA=-DATAN(YA/SMAL(XA))
      IF(XA) 1004,1005,1005
 1004 RA=RA+PI
 1005 CALL TRANRO(R1,RY,XA,YA,RA,IZ)
      G(1)=D(IHU)+XA
      G(2)=D(IHU+1)+YA
      G(3)=Z0
C
C.....CALCULATE CANONICAL FORM OF A LINE THRU TWO POINTS IN
C     THE XY-PLANE
C
      V(3)=Z0
      CALL APT014 (RESULT,V(1),G(1))
  163 CONTINUE
      RETURN
 9998 IERROR=76
 9999 CALL DEFEXT(RESULT)
      GO TO 163
  500 A1=Z3*AA(1)
      B1=Z2*AA(2)
      CC=AA(3)
      SQROOT=D(IHU+4)
      SQ=B1**2-4.0*A1*CC
      IF(DABS(SQ).GE.Z1EM7) GO TO 501
      KX=K2
      T(2)=-B1/(Z2*A1)
      GO TO 504
  501 IF(SQ) 502,502,503
  502 KX=K0
      GO TO 504
  503 KX=K3
      SQ=-B1-DSIGN(DSQRT(SQ),B1)
      IF(SQ.LE.Z0) GO TO 502
      T(2)=Z2*CC/SQ
      IF(SQ.LE.Z0) GO TO 502
      T(3)=SQ/(Z2*A1)
      GO TO 521
  504 T(1)=Z5EM1*SQROOT
      GO TO 510
  521 DO 505 JJ=1,2
  505 T1(JJ)=CUBIC(T(JJ+1))
      IF(T1(1)*T1(2)) 506,507,507
  506 T(1)=(T(2)+T(3))*Z5EM1
      GO TO 510
  507 IF(DABS(T1(1))-DABS(T1(2))) 508,509,509
  508 T(1)=Z12EM1*T(3)-0.2*T(2)
      GO TO 510
  509 T(1)=Z12EM1*T(2)-0.2*T(3)
  510 T(1)=DMIN1(DMAX1(T(1),Z0),SQROOT)
      T1(1)=Z3*AA(1)
      T1(2)=Z2*AA(2)
      T1(3)=AA(3)
      DO 520 MX=1,100
      T1(4)=(T1(1)*T(1)+T1(2))*T(1)+T1(3)
      IF(DABS(T1(4))-1.0D-20) 511,512,512
  511 T(1)=T(1)+Z1EM6
      GO TO 520
  512 T1(4)=CUBIC(T(1))/T1(4)
      IF(DABS(T1(4)).LT.Z1EM6*DABS(T(1))) GO TO 530
      T(1)=T(1)-T1(4)
  520 CONTINUE
      IFALL=1
  530 T(2)=Z0
      A1=AA(1)
      B1=AA(1)*T(1)+AA(2)
      CC=B1*T(1)+AA(3)
      SQ=B1**2-4.0*A1*CC
      IF(DABS(SQ).GE.Z1EM7) GO TO 531
      T(3)=-B1/(Z2*A1)
      T(4)=Z0
      T(6)=Z1
      GO TO 539
  531 IF(SQ) 532,532,533
  532 T(4)=Z1
      T(6)=Z1
      GO TO 539
  533 SQ=-B1-DSIGN(DSQRT(SQ),B1)
      IF(SQ.LE.Z0) GO TO 532
      T(3)=Z2*CC/SQ
      IF(SQ.LE.Z0) GO TO 532
      T(5)=SQ/(Z2*A1)
      T(4)=Z0
      T(6)=Z0
  539 CONTINUE
      GO TO 540
      END
**** SOURCE FILE : M0003393.V02   ***
*
C.....FORTRAN SUBROUTINE              APT071
C
C              FORTRAN SUBROUTINE APT071
C
C PURPOSE      TO GENERATE A MATRIX FOR MIRRORING OF
C              A PLANE (LINE) BY THE FOLLOWING APT STATEMENT
C              RESULT = MATRIX/ MIRROR,PLN
C              RESULT = MATRIX/ MIRROR,LN
C
C LINKAGE      CALL APT071 (RESULT,PLN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING MATRIX
C              PLN     ARRAY CONTAINING THE CANONICAL FORM OF
C                      INPUT ARRAY
C
C SUBSIDIARY  TYPE                ENTRY
C             LOGICAL FUNCTION    CKDEF
C
      SUBROUTINE APT071 ( RESULT,PLN )
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4,3),PLN(4)
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'LDEF.INC'
C
      LOGICAL CKDEF
C
C
      IF ( CKDEF(PLN) ) GOTO 99
      PLN(4)=-PLN(4)
      SCC=PLN(1)**2+PLN(2)**2+PLN(3)**2
      DO 10 I=1,3
      DO 10 J=1,4
      RESULT(J,I)=-2.D0*PLN(I)*PLN(J)/SCC
      IF(I.EQ.J) RESULT(J,I)=RESULT(J,I)+1.D0
   10 CONTINUE
      PLN(4)=-PLN(4)
      IF ( PRNTON ) CALL PRINT(3,RESULT,1)
      RETURN
   99 CALL ERROR ( 1 ,'APT071  ')
      CALL UNDEF ( RESULT )
      RETURN
      END
**** SOURCE FILE : M0000822.V02   ***
*
C.....FORTRAN SUBROUTINE              APT072
C
C              FORTRAN SUBROUTINE APT072
C
C PURPOSE      TO GENERATE A MATRIX FOR MIRRORING BY THE
C              FOLLOWING APT STATEMENT
C              RESULT = MATRIX/ MIRROR, **, ** , **
C                **   = XYPLAN, YZPLAN, OR ZXPLAN
C
C LINKAGE      CALL APT072 (RESULT,MN1,MN2,MN3)
C
C ARGUMENT    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING MATRIX
C              MN1,MN2,MN3
C                      INTEGER EQUIVALENT OF THE MODIFIER
C                      0 = NOT INDICATED
C                      1 = XYPLAN 2 = YZPLAN 3 = ZXPLAN
C
C SUBSIDIARY NONE
C
      SUBROUTINE APT072 (RESULT,MN1,MN2,MN3)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(12)
      DIMENSION MN(3)
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
      MN(1)=MN1
      MN(2)=MN2
      MN(3)=MN3
C
C     INITIALIZE MATRIX VALUES
      RESULT(1) = Z1
      RESULT(12)=Z0
      DO 10 I=2,10
   10 RESULT(I) = R(I)
      RESULT(11)= Z1
C
C      TEST MODIFIER CODE
C
      DO 20 I=1,3
      IF(MN(I).EQ.1) RESULT(11)=-Z1
      IF(MN(I).EQ.2) RESULT(1 )=-Z1
      IF(MN(I).EQ.3) RESULT(6 )=-Z1
   20 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0000823.V02   ***
*
C.....FORTRAN SUBROUTINE             APT073...              3/1/68   GK
C                                                6/70      RW
C              FORTRAN SUBROUTINE APT073
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A PLANE DEFINED
C              AS CONTAINING TWO NON-PARALLEL VECTORS AND A POINT.
C
C LINKAGE      CALL APT073 (RESULT, VT1, VT2, PT)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF
C                      THE RESULTING PLANE
C              VT1     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE FIRST INPUT VECTOR
C              VT2     ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE SECOND INPUT VECTOR
C              PT      ARRAY CONTAINING THE CANONICAL FORM OF
C                      THE INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          CKDEF
C              SUBROUTINE          CROSS
C              SUBROUTINE          DOTF
C              LOGICAL FUNCTION    VNORM
C              LOGICAL FUNCTION    ZVECT
C
      SUBROUTINE APT073 (RESULT,VT1,VT2,PT)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION RESULT(4),VT1(3),VT2(3),PT(3)
      LOGICAL CKDEF,ZVECT
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'ISHR16.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
      UNFLAG = UNFLAG .OR. CKDEF(PT)
C
C...     CALCULATE VECTOR PERPENDICULAR TO VT1, VT2
C
      CALL CROSS(VT1,VT2,V)
      IF (.NOT.ZVECT(V)) IERROR=K51
      CALL VNORM(V,RESULT)
C
C...     DISTANCE TO PLANE IS DOT PRODUCT OF PT VECTOR AND UNIT NORMAL
C
      CALL DOTF(RESULT(4),RESULT,PT)
      RETURN
       END
**** SOURCE FILE : M0002803.V03   ***
*
C
C.....FORTRAN SUBROUTINE           APT074        2/69      SR
C
C              FORTRAN SUBROUTINE APT074
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A CONIC
C              DEFINED BY ONE OF THE FOLLOWING APT STATEMENTS
C              RESULT = LCONIC/5PT,P1,P2,P3,P4,P5
C              RESULT = LCONIC/5PT,X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5
C              RESULT = LCONIC/4PT1SL,P1,S1,P2,P3,P4
C              RESULT = LCONIC/4PT1SL,X1,Y1,S1,X2,Y2,X3,Y3,X4,Y4
C              RESULT = LCONIC/3PT2SL,P1,S1,P2,S2,P3
C              RESULT = LCONIC/3PT2SL,X1,Y1,S1,X2,Y2,S2,X3,Y3
C
C LINKAGE      CALL APT074(RESULT,MN,PP1,PP2,PP3,PP4,PP5)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING CONIC
C              MN      INTEGER EQUIVALENT OF THE MODIFIER
C                      5PT = 1   4PT1SL = 2   3PT2SL = 3
C              PP1     ARRAY CONTAINING THE CANONICAL FORM OF AN
C                      INPUT POINT
C              PP2     ARRAY CONTAINING THE CANONICAL FORM OF AN
C                      CANONICAL FORM OF AN INPUT POINT
C              PP3     ARRAY CONTAINING THE CANONICAL FORM OF AN
C                      INPUT POINT
C              PP4     ARRAY CONTAINING THE CANONICAL FORM OF AN
C                      CANONICAL FORM OF AN INPUT POINT
C              PP5     ARRAY CONTAINING THE CANONICAL FORM OF AN
C                      INPUT POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT079
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          ERROR
C              SUBROUTINE          TRANSF
C              REAL FUNCTION       DABS
C              REAL FUNCTION       DSQRT
C
      SUBROUTINE APT074(RESULT,MN,PP1,PP2,PP3,PP4,PP5)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(10),P1(3),P2(3),P3(3),P4(3),P5(3),
     /          PP1(3),PP2(3),PP3(3),PP4(3),PP5(3),
     /          SR(2),S(4),AA(4),BB(4),CC(4)
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'DSHAR3.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
      INCLUDE 'KNUMBR.INC'
C
      DO 700 I=1,4
      GO TO (100,200,300,400),I
  100 CALL TRANSF(P1,PP1,K2,K3,K0)
      IF(UNFLAG)GO TO 910
      CALL TRANSF(P3,PP3,K2,K3,K0)
      IF(UNFLAG)GO TO 910
      CALL TRANSF(P5,PP5,K2,K3,K0)
      IF(UNFLAG)GO TO 910
      IF(MN.NE.K1)GO TO 110
      CALL TRANSF(P2,PP2,K2,K3,K0)
      IF(UNFLAG)GO TO 910
      SR(1) = P2(2)-P1(2)
      SR(2) = P2(1)-P1(1)
      GO TO 500
C
C        4PT1SL OR 3PT2SL FORMAT
C        OBTAIN FIRST SLOPE FROM P2(1), SET P2 = P1
C
  110 S(I)=PP2(1)
      P2(1) = P1(1)
      P2(2) = P1(2)
      GO TO 600
  200 IF(MN.EQ.K3)GO TO 210
      CALL TRANSF(P4,PP4,K2,K3,K0)
      IF(UNFLAG)GO TO 910
      SR(1) = P5(2)-P4(2)
      SR(2) = P5(1)-P4(1)
      GO TO 500
C
C        3PT2SL FORMAT
C        OBTAIN SECOND SLOPE FROM P4(1), SET P4 = P5
C
  210 S(I)=PP4(1)
      DO 220 J=1,2
      P4(J)=P3(J)
      P3(J)=P5(J)
  220 P5(J)=P4(J)
      GO TO 600
  300 SR(1) = P4(2)-P1(2)
      SR(2) = P4(1)-P1(1)
      GO TO 500
  400 SR(1) = P5(2)-P2(2)
      SR(2) = P5(1)-P2(1)
C        COMPUTE THE I TH SLOPE, S(I)
C
  500 IF((SR(1).EQ.Z0).AND.(SR(2).EQ.Z0)) GO TO 900
      IF(DABS(SR(1)).GT.DABS(SR(2))*Z1E6) GO TO 510
      S(I) = SR(1)/SR(2)
      GO TO 600
  510 S(I) = (SR(1)/DABS(SR(1)))*Z1E6
C
C        COMPUTE COEFFICIENTS AA(I), BB(I), CC(I), OF THE EQUATION
C        OF THE I TH LINE
C
  600 DIV = Z1
      IF(DABS(S(I)).GT.Z1) DIV =  DSQRT(S(I)**2+Z1)
      AA(I) = S(I)/DIV
      BB(I) = ZM1/DIV
      IF(DABS(BB(I)).LT.Z1EM6) BB(I)=Z0
  620 IF((I.EQ.K2).OR.(I.EQ.K4))GO TO 630
      CC(I) = -AA(I)*P1(1)-BB(I)*P1(2)
      GO TO 700
  630 CC(I) = -AA(I)*P5(1)-BB(I)*P5(2)
  700 CONTINUE
C
C        COMPUTE COEFFICIENTS OF THE QUADRIC EQUATION
C
      SR(1) = (AA(3)*P3(1)+BB(3)*P3(2)+CC(3))
     /       *(AA(4)*P3(1)+BB(4)*P3(2)+CC(4))
      SR(2) =-(AA(1)*P3(1)+BB(1)*P3(2)+CC(1))
     /       *(AA(2)*P3(1)+BB(2)*P3(2)+CC(2))
      R(1) = SR(1)*AA(1)*AA(2)+SR(2)*AA(3)*AA(4)
      R(2) = SR(1)*BB(1)*BB(2)+SR(2)*BB(3)*BB(4)
      R(3) = Z0
      R(4) = SR(1)*CC(1)*CC(2)+SR(2)*CC(3)*CC(4)
      R(5) = Z0
      R(6) = Z0
      R(7) = Z5EM1*(SR(1)*(BB(1)*AA(2)+AA(1)*BB(2))+
     /              SR(2)*(BB(3)*AA(4)+AA(3)*BB(4)))
      R(8) = Z5EM1*(SR(1)*(CC(1)*AA(2)+AA(1)*CC(2))+
     /              SR(2)*(CC(3)*AA(4)+AA(3)*CC(4)))
      R(9) = Z5EM1*(SR(1)*(CC(1)*BB(2)+BB(1)*CC(2))+
     /              SR(2)*(CC(3)*BB(4)+BB(3)*CC(4)))
      R(10)= Z0
      DET = R(1)*R(2)*R(4)-R(2)*R(8)**2-R(4)*R(7)**2
     /     -R(1)*R(9)**2+2*R(7)*R(8)*R(9)
C
C        PRINT WARNING IF THIS IS A DEGENERATE CONIC
C
      IF(DABS(DET).LT.Z1EM9) CALL ERROR(71,'APT074  ')
      IF((DABS(DET/DMAX1(R(1),R(2),R(4),R(7),R(8),R(9))).LT.Z1EM9).AND.
     / (DABS(DET).GE.Z1EM9)) CALL ERROR(71,'APT074  ')
C
C        TRANSFORM TO BASE SYSTEM AND STORE ANSWER IN RESULT
C
      CALL APT079(R,KM1)
  800 CALL DEFEXT(RESULT)
      RETURN
C
C        ERROR - TWO INPUT POINTS COINCIDE
C
  900 IERROR = 70
      GO TO 800
C
C        ERROR - INPUT POINT IS UNDEFINED
C
  910 IERROR =69
      GO TO 800
      END
**** SOURCE FILE : M0002722.V08   ***
*
C.....FORTRAN SUBROUTINE  ....APT088         8/68                 HG,RN
C.....FORTRAN SUBROUTINE             APT088...              3/1/68   GK
C                      VECTOR USED IN THE XYZ CASE TO GENERATE A
C                      CANTED TABCYL PARALLEL TO VV
C              JJ      INTEGER TRANSFORMATION INDICATOR
C                      1 = TRANSFORMATION MATRIX DESIRED
C                      0 = NO TRANSFORMATION
C              DD      ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      TRANSFORMATION MATRIX
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT040
C              SUBROUTINE          APT087
C              SUBROUTINE          APT094
C              REAL FUNCTION       ATAN
C              REAL FUNCTION       ATAN2
C              LOGICAL FUNCTION    CKDEF
C              REAL FUNCTION       COS
C              SUBROUTINE          DOTF
C              SUBROUTINE          ERROR
C              REAL FUNCTION       MINO
C              REAL FUNCTION       SIN
C              REAL FUNCTION       SQRT
C              SUBROUTINE          TABTAP
C              LOGICAL FUNCTION    ZVECT
C
      SUBROUTINE APT088(A,MM,NN,KK,LL,JJ,DOTTAB)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION DOTTAB(*)
C
      INCLUDE 'BLANKCOM.INC'
      DOUBLE PRECISION TAB(SSIZ)
      EQUIVALENCE(COM(41),TAB(1))
C
      LOGICAL CKDEF,ZVECT
      DIMENSION A(2),VV(3),DD(12),ROTM(9),TABLE(8),IHOL(3),IPR(103)
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DSHAR6.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR17.INC'
      INCLUDE 'KNUMBR.INC'
C
C
      EQUIVALENCE  (TAB(2),ROTM(1))
C
      INTEGER FORM1,FORM2,FORM3,FORM4,FORM5,FORM6,FORM7,FORM8,FORM9
C
      DIMENSION FORM1(28),FORM2(23),FORM3(30),FORM4(7),FORM5(1),FORM6(4)
     1,         FORM7(4),FORM8(5),FORM9(25)
C
      EQUIVALENCE  (TEMP,SL2SQ,A1,GA,PHI,U), (TEM(1),DY1,A2,R,AL,CEN1,
     1SQ),(TEM(2),DY2,B1,TA,S1,CEN2,CENTER),(TEM(3),SL1SQ,B2,GA1,
     2TB,T1,CURVRG),(DX1,DCMAX,D1,CMIN),(X2,SE2,CURTI1,X),(Y2,DELTA,
     3CURTI2,Y,CMAX)
C        ARITHMETIC STATEMENT FUNCTIONS
      DOUBLE PRECISION DY1,DY2
      DOUBLE PRECISION A1,B1,A2,B2,SL1,SL2
      DATA K21,K14,ZLIT1 /21,14,.707D0/
      SMAL(Z1)=DSIGN(DMAX1(DABS(Z1),Z1EM9),Z1)
      SLOP(Z1,Z2)=(Z1*DY2+Z2*DY1)/SMAL(Z1*DX2+Z2*DX1)
      TAN(Z1)=DSIN(Z1)/SMAL(DCOS(Z1))
      CRVA(Z1,Z2,Z3)=-(4.*TAN(Z1)+2.*TAN(Z2))*DABS(DCOS(Z1))**3/Z3
      CURV(SL1,SL2) = CRVA(A2,B2,SL2)+CRVA(B1,A1,SL1)
C        INITIALIZATION AND DIAGNOSTICS
      UNFLAG=.FALSE.
      N = NN
      I=K7*N+K21
      DO 99 I1=1,I
   99 TAB(I1)=DOTTAB(I1)
C        TEST SLOPE OR NORMAL AT FIRST POINT
      K=KK
      B=TAB(1)
      IF (K.LT.K2)GO TO 100
      B=TAN((B-Z90 )*DEGRAD)
      K=K1
C        TEST SLOPE OR NORMAL AT SECOND POINT
  100 L=LL
      C=TAB(2)
      IF(L.LT.K2) GO TO 110
      C=TAN((C-Z90)*DEGRAD)
      L=K1
C        TEST TRANSFORMATION MATRIX
  110 J=JJ
      IF (J.EQ.K1)GO TO 130
      DO 120 I1=2,12
  120 D(I1)=Z0
      D(1)=Z1
      D(6)=Z1
      D(11)=Z1
      GO TO 150
  130 DO 140 I1=1,12
  140 D(I1)=TAB(I1+5)
  150 IF(.NOT.CKDEF(D)) GO TO 160
      UNFLAG = .TRUE.
      CALL ERROR(14,'APT088  ')
C        SET NUMBER OF POINT COORDINATES. IF XYZ, TEST AXIS VECTOR AND
C        OMISSION OF SLOPES
  160 M=MM
      INC=K2
      IF (M.LT.K6)GO TO 180
      INC=K3
      KKKKK=I
      CALL APT040(V,TAB(3))
      I=KKKKK
      IF (ZVECT(V)) GO TO 170
      UNFLAG = .TRUE.
      CALL ERROR(K32,'APT088  ')
  170 IF (K+L.EQ. 0) GO TO 180
      UNFLAG = .TRUE.
      CALL ERROR(35,'APT088  ')
C        TEST WHETHER POINTS DEFINED
  180 LIM =N*INC
      DO 190 I1 =1,LIM,INC
      IF(CKDEF(TAB(I1+17))) GO TO 200
  190 CONTINUE
      GO TO 210
  200 UNFLAG = .TRUE.
      CALL ERROR(K33,'APT088  ')
C        TEST FOR IDENTICAL CONSECUTIVE POINTS
  210 NM1=INC+1
      DO 230 I1=NM1,LIM,INC
      KP=I1+INC-K1
      DO 220 J1=I1,KP
      L1=J1-INC+17
      IF (TAB(J1+17).NE.TAB(L1)) GO TO 230
  220 CONTINUE
      CALL ERROR(K34,'APT088  ')
      GO TO 240
  230 CONTINUE
      IF ( .NOT. UNFLAG) GO TO 250
  240 CALL APT094(4,A(1),TAB(1))
      RETURN
C        MOVE POINTS AND INITIALIZE FIRST PORTION OF CANONICAL FORM
  250 DO 260 I1= 1,LIM
      J1=LIM+K18-I1
      KP= I+K1-I1
  260 TAB(KP)=TAB(J1)
      TAB(1) =I
      TAB(11)=N+K2
      TAB(12)=K14
C        DEFINE ROTATION MATRIX
      IF (M.LT.K6)GO TO 280
      DO 270 I1=1,3
  270 CALL DOTF (ROTM(I1+6),V,D(4*I1-3))
      I=KKKKK
      GO TO 300
  280 DO 290 I1=1,3
  290 ROTM(I1+6)=Z0
      KP=MIN0(M,K3)
      ROTM(KP+6)=Z1
  300 KP=K0
      D1=ZM1
      IF (DABS(ROTM(9)).LE.ZLIT1) GO TO 310
      KP=KM1
      D1=Z1
  310 ROTM(KP+6)=D1*DSQRT(Z1-ROTM(KP+9)**2)
      KKKKK=1
      TEMP =    ROTM(KP+9)/ROTM(KP+6)
      KKKKK=2
      ROTM(4)=-TEMP*ROTM(7)
      ROTM(KP+3)=Z0
      TEM(1)=D1/ROTM(KP+6)
      KP=-KP
C---    CORRECTION TO ROTATION MATRIX FOR SOME TABCYLS
      ROTM(KP+5)=D1*TEMP*ROTM(KP+8)*KM1**KP
      ROTM(KP+2)=-ROTM(7)*TEM(1)
      ROTM(1)=ROTM(KP+8)*TEM(1)
C        MOVE POINTS TO PROPER PLACE IN CANONICAL FORM
      KP=I+K1-LIM
      L1=K19
      DO 330 I1=1,N
      DO 320 J1=1,INC
      L1=L1+K1
      TAB(L1)=TAB(KP)
  320 KP=KP+K1
      DO 330 J1=INC,6
      L1=L1+K1
  330 TAB(L1)=Z0
C        ZERO BALANCE OF CANONICAL FORM
      DO 340 I1=13,19
  340 TAB(I1)=Z0
      TAB(I-1)=Z0
      TAB(I)=Z0
C        TRANSFORM AND ROTATE POINTS, USING D MATRIX
      I1=0
  350 I1=I1+K7
      GO TO (390,390,390,380,375,360),M
C        XYZ CASE
  360 DO 370 J1=1,3
      CALL DOTF(TEM(J1),D(4*J1-3),TAB(I1+13))
  370 TEM(J1)=TEM(J1)+D(4*J1)
      CALL DOTF (TAB(I1+13),ROTM,TEM)
      CALL DOTF (TAB(I1+14),ROTM(4),TEM)
      TAB(I1+15)=Z0
      GO TO 410
C        RTHETA AND THETAR CASES-FIRST TRANSFORM TO RECTANGULAR
C        THETAR CASE
  375 TEM(3)=TAB(I1+14)
      TAB(I1+14)=TAB(I1+13)
      TAB(I1+13)=TEM(3)
  380 TEM(1)=TAB(I1+13)
      TEM(2)=TAB(I1+14)*DEGRAD
      TAB(I1+13)=TEM(1)*DCOS(TEM(2))
      TAB(I1+14)=TEM(1)*DSIN(TEM(2))
C        NOX, NOY, NOZ, RTHETA,AND THETAR CASES- TRANSFORM COORDINATES
  390 X2=TAB(I1+13)
      Y2=TAB(I1+14)
      D1=Z1
      GO TO 460
C        STORE ONLY DESIRED COORDINATES
  400 TAB (I1+13)=TEM(1)
      TAB (I1+14)=-TEM(3)
  410 IF (I1.LT.7*N) GO TO 350
C        TRANSFORM AND ROTATE SLOPES- CONSIDER AS POINTS.
      IF (K.EQ.0 )GO TO 450
      I1=0
  420 Y2=B
  430 CONTINUE
      D1=Z0
      X2=Z1
      GO TO 460
  440 B = -TEM(3)/SMAL(TEM(1))
  450 IF (L.EQ.0 )GO TO 490
      I1=K1
      Y2=C
      GO TO 430
C        POINT ROTATION ROUTINE
  460 KP=MIN0(M,K3)
      L1=MOD(KP,K3)
      KP=MOD(KP+1,K3)
      DO 470 J1=1,3
      TEM(J1)=X2*D(L1+1)+Y2*D(KP+1)+D1*D(4*J1)
      KP=KP+K4
  470 L1=L1+K4
C        SAVE ONLY DESIRED COORDINATES
      IF (M.EQ.K1)TEM(1) =-TEM(2)
      IF(M.GT.K2) TEM(3)=-TEM(2)
      IF (I1-K1)440,480,400
C        ROTATE SECOND SLOPE
  480 C= -TEM(3)/SMAL(TEM(1))
C        COMPUTE SEGMENT LENGTHS, SLOPES, AND SLOPE OF AVERAGE
  490 NM1=K7*(N-K1)
      DO 500 I1=7,NM1,7
      DX2=(TAB(I1+20)-TAB(I1+13))
      DY2=TAB(I1+21)-TAB(I1+14)
      SL2SQ=DX2**2+DY2**2
      TAB(I1+17)=DSQRT(SL2SQ)
      TAB(I1+16)=DATAN2(DY2,DX2)
C        CALCULATE SLOPE OF CIRCLE THRU P(N-1),P(N),P(N+1)
      IF (I1.NE.K7) TAB(I1+15)=DATAN(SLOP (SL1SQ,SL2SQ) )
      DX1=DX2
      DY1=DY2
  500 SL1SQ=SL2SQ
C        CALCULATION OF ANGLES AND CURVATURE DIFFERENCES
      B1=TAB(29)-TAB(23)
      IF (K.EQ.0 )GO TO 510
      TAB(22)=DATAN(B)
      A1=TAB(22)-TAB(23)
      GO TO 520
  510 A1=      PI-B1
      TAB(22)=TAB(23)-B1
      IF(NM1.LT.21) GO TO 531
  520 DO 530 I1=21,NM1,7
      A2=TAB(I1+8)-TAB(I1+9)
      B2=TAB(I1+15)-TAB(I1+9)
      TAB(I1+11)=CURV(TAB(I1+3),TAB(I1+10))
      A1=A2
  530 B1=B2
C        CALCULATE TERMINAL SLOPE AND EXTERIOR ANGLE
  531 A2=TAB(I-13)-TAB(I-12)
      IF (L.EQ.0 )GO TO 540
      TAB(I-6)=DATAN(C)
      B2=TAB(I-6)-TAB(I-12)
      GO TO 550
  540 B2= PI-A2
      TAB(I-6) = TAB(I-12)+B2
  550 TAB(I-10)= CURV(TAB(I-18),TAB(I-11))
      CALL APT089 (A)
      RETURN
      END
**** SOURCE FILE : M0002233.V12   ***
*
C.....FORTRAN SUBROUTINE  ....APT089         8/68                 HG,RN
C.....FORTRAN SUBROUTINE             APT089...              3/1/68   GK
C          PART 2 OF APT088
C              FORTRAN SUBROUTINE APT089
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A TABULATED
C              CYLINDER DEFINED BY THE POINTS THROUGH WHICH IT
C              MUST PASS BY THE FOLLOWING APT STATEMENT
C                TABCYL/*, V, TRFORM, MI, P1, **, K1, P2,
C                   P3, ..., PN, ***, KN
C                * = NOX, NOY, NOZ, XYZ, RTHETA, OR THETAR
C                ** = SLOPE OR NORMAL
C                 *** = SLOPE OR NORMAL
C
C LINKAGE      CALL APT089 (A)
C
C
C ARGUMENTS    A       ARRAY CONTAINING THE INFORMATION NECESSARY
C                      TO PLACE THE TABCYL CANONICAL FORM ON TAPE
C                      AND LATER RETRIEVE IT FROM TAPE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT040
C              SUBROUTINE          APT087
C              SUBROUTINE          APT094
C              REAL FUNCTION       ATAN
C              REAL FUNCTION       ATAN2
C              LOGICAL FUNCTION    CKDEF
C              REAL FUNCTION       COS
C              SUBROUTINE          DOTF
C              SUBROUTINE          ERROR
C              REAL FUNCTION       MINO
C              REAL FUNCTION       SIN
C              REAL FUNCTION       SQRT
C              SUBROUTINE          TABTAP
C              LOGICAL FUNCTION    ZVECT
C
C        ADDITIONS FOR PRINT /TABPRT,ON OR OFF
C        TABPRT FLAG IS CHECKED  EACH TIME BEFORE PRINTING
C        FLAG IS SET IN PRINT ROUTINE AND INITIALIZED IN APT227
      SUBROUTINE APT089(A)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
C
      INCLUDE 'BLANKCOM.INC'
C
      LOGICAL CKDEF,ZVECT
      DOUBLE PRECISION TAB(SSIZ)
      EQUIVALENCE (COM(41),TAB(1))
      DIMENSION A(2),VV(3),DD(12),ROTM(9),TABLE(8)
      INCLUDE 'DARRAY.INC'
      DOUBLE PRECISION DY1,DY2
      DOUBLE PRECISION A1,B1,A2,B2,SL1,SL2
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DSHAR6.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR17.INC'
      INCLUDE 'KNUMBR.INC'
      INCLUDE 'XUNITS.INC'
C
C
      EQUIVALENCE (TAB(2),ROTM(1))
C
      CHARACTER FORM1*112,FORM2*92,FORM3*120,FORM4*28
      CHARACTER FORM5*4,FORM7*16,FORM9*100
C
      DATA FORM1/
     1' NUM        THETA        RADIUS         X-CORD         Y-CORD
     2      SEG LENGTH       SEG ANGLE      EXT ANGLE'/
      DATA FORM2/
     1' NUM     SLOPE        NORMAL      ALPHA   TANGENT A   TANGENT B
     2   CURVA    DELTA CURV     '/
      DATA FORM3/
     1'    CURVATURE    .+........................+.....................
     2...+........................+........................+.'/
      DATA FORM4/' EXTENSION INTERSECTION U=  '/
      DATA FORM5/' V= '/
      DATA FORM7/' ROTATION MATRIX'/
      DATA FORM9/
     1'0      U              V              A             B            L
     2ENGTH         MAX           MIN    '/
      DATA TABLE/0.05D0,.1D0,.2D0,.5D0,1.D0,2.D0,5.D0,10.D0/
      DATA ZLIT2,ZLIT3,ZLIT4,ZLIT6
     C    /1.D10,50.D0,52.5001D0,5.D-5/
C        ARITHMETIC STATEMENT FUNCTIONS
      SMAL(Z1)=DSIGN(DMAX1(DABS(Z1),Z1EM9),Z1)
      SLOP(Z1)=(DY2+DY1*Z1)/SMAL(DX2+DX1*Z1)
      TAN(Z1)=DSIN(Z1)/SMAL(DCOS(Z1))
      CRVA(Z1,Z2,Z3)=-(4.*TAN(Z1)+2.*TAN(Z2))*DABS(DCOS(Z1))**3/Z3
      CURV(SL1,SL2) = CRVA(A2,B2,SL2)+CRVA(B1,A1,SL1)
      L1=0
  560 DCMAX =Z0
      DO 570 I1=14,NM1,7
      IF (DABS(TAB(I1+18)).LT.DCMAX) GO TO 570
      DCMAX = DABS(TAB(I1+18))
      J1=I1
  570 CONTINUE
C        MINIMIZE MAXIMUM CURVATURE, USING NEWTON'S METHOD
      IF (DCMAX.LE.Z1EM3.OR.L1.GE.K4*I) GO TO 640
      A1= TAB(J1+8)-TAB(J1+9)
      A2= TAB(J1+15)-TAB(J1+16)
      B2= TAB(J1+22)-TAB(J1+16)
      DCP= -4.*(TAB(J1+10)+TAB(J1+17))/TAB(J1+10)/TAB(J1+17)
C        OBTAIN NEW APPROXIMATION FOR SLOPE AT P(J1), NEW CURVATURE
      DO 580 I1=1,4
      A2=DATAN(TAN(A2)-TAB(J1+18)/DCP)
      TAB(J1+15)= A2+ TAB(J1+16)
      B1 =TAB(J1+15)-TAB(J1+9)
      TAB(J1+18) =CURV(TAB(J1+10),TAB(J1+17))
      IF (DABS(TAB(J1+18)).LE.Z1EM3) GO TO 590
  580 CONTINUE
C        CHANGE IN A2 - CHANGE IN CURVATURE AT P(J1-1), P(J1+1)
C        AT START OR END OF TABCYL, REFLECT ANGLE
  590 X2=A2
      Y2=B2
      L1=L1+K1
      IF (J1+K-K15)620,630,600
  600 IF(J1+L-NM1) 610,601,630
  601 B2=PI-A2
      TAB(I-6)=TAB(I-12)+B2
      TAB(I-10)= CURV(TAB(I-18),TAB(I-11))
  610 A2= A1
      B2= B1
      A1= TAB(J1+1)-TAB(J1+2)
      B1= TAB(J1+8)-TAB(J1+2)
      TAB(J1+11) = CURV(TAB(J1+3),TAB(J1+10))
      GO TO 630
  620 A1= PI-B1
      TAB(22)=TAB(23)+A1
      TAB(32)=CURV(TAB(24),TAB(31))
  630 IF (J1.EQ.NM1) GO TO 560
      A1= X2
      B1= Y2
      A2= TAB(J1+22)-TAB(J1+23)
      B2= TAB(J1+29)-TAB(J1+23)
      TAB(J1+25) =CURV(TAB(J1+17),TAB(J1+24))
      GO TO 560
C        SAVE END SLOPES AND WRITE OUT DATA
  640 IF(L.NE.0) GO TO 642
      A1=TAB(I-20)-TAB(I-19)
      B1=TAB(I-13)-TAB(I-19)
      A2=TAB(I-13) - TAB(I-12)
      B2=PI-A2
      TAB(I-6)=TAB(I-12)+B2
      TAB(I-10)=CURV(TAB(I-18),TAB(I-11))
  642 SB=TAN(TAB(22))
      SE2= TAN(TAB(I-6))
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 643
C...     CALL PRINT TO OUTPUT ISN AND TABCYL IDENTIFICATION INFORMATION
      CALL PRINT(15,A,1)
C
      CALL CFORM(FORM1,DARRAY,1,112)
      CALL CPRINT(DARRAY)
  643 DO 672 I1=1,N
      J1=K7*I1
      CALL APT087(TEM,TAB(J1+13))
      TAB(J1+19)=TEM(2)
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 672
C        GA IS SEGMENT ANGLE, XA EXTERIOR ANGLE
      GA1 =GA
      IF (I1.EQ.N) GO TO 650
      GA=TAB(J1+16)/DEGRAD
      IF (I1.EQ.K1)GO TO 660
      XA= GA -GA1
      IF(DABS(XA).GT.Z2*Z90) XA=XA-DSIGN(360.0D0,XA)
      GO TO 670
C        NO SEGMENT ANGLE FOR LAST POINT
  650 GA=Z0
  660 XA=Z0
  670 CALL ICONV(I1,DARRAY,1,4)
      CALL FCONV(TEM(2),DARRAY,5,15,4)
      CALL FCONV(TEM(1),DARRAY,20,15,6)
      CALL FCONV(TAB(J1+13),DARRAY,35,15,6)
      CALL FCONV(TAB(J1+14),DARRAY,50,15,6)
      CALL FCONV(TAB(J1+17),DARRAY,65,15,6)
      CALL FCONV(GA,DARRAY,80,15,4)
      CALL FCONV(XA,DARRAY,95,15,4)
      CALL CPRINT(DARRAY)
  672 CONTINUE
C        WRITE MATCHED CURVATURES
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 674
      CALL CFORM('0',DARRAY,1,1)
      CALL CFORM(FORM2,DARRAY,2,92)
      CALL CPRINT(DARRAY)
  674 CMIN=ZLIT2
      CMAX=-ZLIT2
      DO 690 I1=1,N
      J1=K7*I1
      IF (I1.EQ.N) GO TO 675
      TA = TAB(J1+15)-TAB(J1+16)
      TB = TAB(J1+22)-TAB(J1+16)
      TEM(2)=CRVA(TA,TB,TAB(J1+17))
      GO TO 680
  675 TA=Z0
      TB = Z0
      TAB(25) =Z0
      TEM(2)=0.0
  680 TA=TAN(TA)
      TB=TAN(TB)
      TAB(J1+15) = TAN(TAB(J1+15))
      PHI=DATAN(ZM1/SMAL(TAB(J1+15)))/DEGRAD
      AL = PHI -TAB(J1+19)
      TAB(J1+19)=TEM(2)
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 685
      CALL ICONV(I1,DARRAY,1,4)
      CALL FCONV(TAB(J1+15),DARRAY,5,12,5)
      CALL FCONV(PHI,DARRAY,17,12,4)
      CALL FCONV(AL,DARRAY,29,12,4)
      CALL FCONV(TA,DARRAY,41,12,7)
      CALL FCONV(TB,DARRAY,53,12,7)
      CALL FCONV(TAB(J1+19),DARRAY,65,10,4)
      CALL FCONV(TAB(J1+18),DARRAY,75,13,4)
      CALL CPRINT(DARRAY)
C        PLOT CURVATURES
  685 TAB(J1+15)=TA
      TAB(J1+16)=TB
      CMIN=DMIN1(CMIN,TAB(J1+19))
  690 CMAX=DMAX1(CMAX,TAB(J1+19))
      CEN2=(CMAX-CMIN)/Z2
      DO 700 J1=1,7
      I1=J1
      IF (CEN2.LE.TABLE(J1)) GO TO 710
  700 CONTINUE
      I1=8
  710 CURVRG= TABLE(I1)
      CEN1=50.0/CURVRG
      CENTER= CEN2+CMIN
      IDUMY=CENTER*CEN1+DSIGN(Z5EM1,CENTER)
      CENTER=IDUMY
      CENTER=CENTER/CEN1
      CURTI1 =CENTER -CURVRG
      CURTI2=CENTER-Z5EM1*CURVRG
      TEMP=CENTER+Z5EM1*CURVRG
      TEM(1) =CENTER + CURVRG
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 732
      CALL CFORM('0',DARRAY,1,1)
      CALL FCONV(CURTI1,DARRAY,17,7,4)
      CALL FCONV(CURTI2,DARRAY,42,7,4)
      CALL FCONV(CENTER,DARRAY,67,7,4)
      CALL FCONV(TEMP,DARRAY,92,7,4)
      CALL FCONV(TEM(1),DARRAY,113,7,4)
      CALL CPRINT(DARRAY)
C
      CALL CFORM(FORM3,DARRAY,1,119)
      CALL CPRINT(DARRAY)
      KP=K7*N
      DO 730 I1=7,KP,7
      CALL CFORM('.',DARRAY,18,1)
      CALL CFORM('.',DARRAY,119,1)
      J1=ZLIT4-ZLIT3*CENTER/CURVRG
      J1=MIN0(MAX0(J1,2),102)+17
      CALL CFORM('.',DARRAY,J1,1)
      J1=ZLIT3*(TAB(I1+19)-CENTER)/CURVRG+ZLIT4
      J1=MIN0(MAX0(J1,2),102)+17
      CALL CFORM('*',DARRAY,J1,1)
      L1=I1/7
      CALL ICONV(L1,DARRAY,1,3)
      CALL FCONV(TAB(I1+19),DARRAY,4,12,6)
  730 CALL CPRINT(DARRAY)
      CALL CFORM(FORM3(17:),DARRAY,17,103)
      CALL CPRINT(DARRAY)
C        FIT CUBICS TO GIVEN SLOPES - TRANSLATE AND ROTATE TO ELIMINATE
C        CONSTANT TERM
  732 DO 771  I1=7,NM1,7
      TLENGT=TAB(I1+17)
      S1=TAB(I1+15)
      T1=TAB(I1+16)
C        COMPUTE COEFFICIENTS OF CUBIC, STORE IN TAB ARRAY
      TAB(I1+15) =(T1+S1)/TAB(I1+17)**2
      TAB(I1+16)= (-Z2*S1-T1)/TAB(I1+17)
      TAB(I1+17) =S1
C        COMPUTE MAXIMUM AND MINIMUM VALUES ON EACH CURVE
      IF (DABS(TAB(I1+15)).GT.Z1EM7) GO TO 750
      TAB(I1+19)= Z0
      TAB(I1+15)= Z0
      IF(DABS(TAB(I1+16)).GT.Z1EM7) GO TO 740
C        EQUATION IS LINEAR - MUST BE  Y = 0
      TAB(I1+16)= Z0
      TAB(I1+17)= Z0
      TAB(I1+18)= Z0
      GO TO 770
C        EQUATION IS QUADRATIC - EXTREMUM AT  -C/2B
  740 TAB(I1+18)= -TAB(I1+17)**2/(4.*TAB(I1+16))
      GO TO 760
C        EQUATION IS CUBIC - SOLVE FOR FIRST DERIVATIVE ZERO
  750 TEMP =TAB(I1+16)**2
      TEM1=3.*TAB(I1+15)*S1
      TEM3=(TEMP-TEM1)*DSQRT(TEMP-TEM1)*2.0
      TEM2=TAB(I1+16)*(2.*TEMP-3.*TEM1)
      TEM4=TEM2+DSIGN(TEM3,TEM2)
      TEM3=S1**2*(1.3333333*TEM1-TEMP)
      TEMP=TEM4/((TAB(I1+15)**2)*27.)
      IF(Z1) 760,760,755
  755 CONTINUE
      TEM1=TEM3/TEM4
      TAB(I1+18)=TEMP
      TAB(I1+19)=TEM1
C        TEST FOR MAX GREATER THAN MIN
  760 IF(TAB(I1+18).GE.TAB(I1+19)) GO TO 769
      TEMP =TAB(I1+18)
      TAB(I1+18)=TAB(I1+19)
      TAB(I1+19)=TEMP
C        MAX OR MIN MUST BE WITHIN INTERVAL
  769 IF(S1.LE.Z0.AND.T1.GE.Z0) TAB(I1+18)=Z0
      IF (S1.GE.Z0.AND.T1.LE.Z0) TAB(I1+19)  =Z0
  770 TAB(I1+18)=TAB(I1+18)/TLENGT
      TAB(I1+19)=TAB(I1+19)/TLENGT
      TAB(I1+17)=TLENGT
  771 CONTINUE
C        COMPUTE EXTENSION INTERVALS
C        EXTENSION EQUIVALENT TO  10 INCH. REGARDLESS OF UNITS
      DST = TABEXT
      DELTA = DST/DSQRT(Z1+SB**2)
      IF ((TAB(21)-TAB(28))*SB+TAB(20)-TAB(27).LT.Z0) DELTA= -DELTA
      TAB(13)=TAB(20)+ DELTA
      TAB(14)=TAB(21)+ DELTA*SB
      DELTA = DST/DSQRT(Z1+SE2**2)
      IF ((TAB(I-7)-TAB(I-14))*SE2+TAB(I-8)-TAB(I-15).LT.Z0)DELTA=-DELTA
      TAB(I-1)= TAB(I-8)+DELTA
      TAB(I) = TAB(I-7)+DELTA*SE2
      DO 780 I1=15,19
      TAB(I1) =Z0
      J1=K7*N +I1
  780 TAB(J1)=Z0
C        REDUCE EXTENSION IF NECESSARY
      IF (DABS(SB-SE2).LT.ZLIT6) GO TO 790
      X =(TAB(I-7)-TAB(14)+SB*TAB(13)-SE2*TAB(I-8))/(SB-SE2)
      A1=X-TAB(13)
      B1=SB*A1
      IF ( A1**2+B1**2.GT.DST**2 ) GO TO 790
      Y= B1+TAB(14)
      IF ( (X-TAB(I-8))**2+(Y-TAB(I-7))**2.GT.DST**2 ) GO TO 790
      IF ((X-TAB(20))*(TAB(27)-TAB(20))
     1  + (Y-TAB(21))*(TAB(28)-TAB(21)).GT.Z0) GO TO 790
      IF ((X-TAB(I-8))*(TAB(I-15)-TAB(I-8))
     1  + (Y-TAB(I-7))*(TAB(I-14)-TAB(I-7)).GT.Z0) GO TO 790
      TAB(13) =X-Z1EM2*(X-TAB(20))
      TAB(14) =Y-Z1EM2*(Y-TAB(21))
      TAB(I-1)=X-Z1EM2*(X-TAB(I-8))
      TAB(I)= Y -Z1EM2*(Y-TAB(I-7))
      CALL CFORM(FORM4,DARRAY,1,26)
      CALL FCONV(X,DARRAY,27,15,8)
      CALL CFORM(FORM5,DARRAY,46,3)
      CALL FCONV(Y,DARRAY,49,15,8)
      CALL CPRINT(DARRAY)
  790 TAB(17)=DSQRT((TAB(20)-TAB(13))**2+(TAB(21)-TAB(14))**2)
      TAB(I-4)=DSQRT((TAB(I)-TAB(I-7))**2+(TAB(I-1)-TAB(I-8))**2)
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 796
      CALL CFORM(FORM7,DARRAY,1,16)
      CALL CPRINT(DARRAY)
      L=1
      DO 791 I1=2,10
      CALL FCONV(TAB(I1),DARRAY,L,13,6)
  791 L=L+13
      CALL CPRINT(DARRAY)
      CALL CFORM(FORM9,DARRAY,1,100)
      CALL CPRINT(DARRAY)
      DO 9095 I1=13,I,7
      L=1
      DO 9096 J1=1,7
      L1=I1+J1-1
      IF(L1.GT.I) GO TO 9094
      CALL FCONV(TAB(L1),DARRAY,L,15,8)
 9096 L=L+15
 9094 CALL CPRINT(DARRAY)
 9095 CONTINUE
  796 A(2)=TAB(1)
      CALL APT094(1,A(1),TAB(1))
      RETURN
       END
**** SOURCE FILE : M0002774.V05   ***
*
C
C...  FORTRAN SUBROUTINE               APT090    3/69      SR
C
C              FORTRAN SUBROUTINE APT090
C
C PURPOSE      TO GENERATE THE EXTERNAL CANONICAL FORM FOR A SURFACE
C              DEFINED AS A PATERN  AND WRITE IT ON PERIPHERAL STORAGE
C
C LINKAGE      CALL APT090(MM,RESULT,KLL,ARG1,ARG2,ARG3,ARG4,ARG5)
C
C ARGUMENTS    MM      BCANON INDEX OF ARRAY IN WHICH GENERATED
C                      EXTERNAL CANONICAL FORM IS TO BE STORED
C              RESULT  ARRAY CONTAINING THE INTERNAL CANONICAL FORM OF
C                      THE SURFACE
C              KLL     PATERN  SUBTYPE CODE AND DEFINITION FORMAT
C                      INDICATOR, K = SUBTYPE CODE, LL = DEFINITION
C                      FORMAT NUMBER
C                      K=1,LINEAR,   =2,CIRCULAR,  =3,GRID,
C                       =4,RANDOM,   =5,PERIPHERAL
C              ARG1    ONE-TO-ONE REPRESENTATION IN E.L. EQUIVALENT
C              THROUGH OF PATERN DEFINITION STATEMENT AS SPECIFIED BY
C              ARG5    PART PROGRAM EXCEPT FOR RANDOM PATERN WHERE
C                      ARG1 = NUMBER OF POINTS AND/OR PATERNS SPECIFIED
C                      IN DEFINITION STATEMENT
C
C SUBSIDIARIES TYPE                ENTRY
C
C              SUBROUTINE          APT094
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          ERROR
C              SUBROUTINE          UNDEF
C              SUBROUTINE          VNORM
C
      SUBROUTINE APT090 (MM, RESULT, KLL, ARG1, ARG2, ARG3, ARG4, ARG5)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INCLUDE 'BLANKCOM.INC'
C
      DIMENSION ARG1(7),ARG2(3),ARG4(50),ARG5(50),BARG(110),DIRVEC(3),
     1           RESULT(2)
      LOGICAL  CKDEF
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'FXCOR.INC'
      INCLUDE 'IFXCOR.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'KNUMBR.INC'
C
      CHARACTER*8 AT,C,PAT,TEST
C
      DATA  AT, C/'AT      ','CLW     '/
      DATA PAT/'ZPATRN  '/
      DATA D360 / 360.D0/
C
C     BRANCH ON PATERN SUBTYPE CODE
      K=KLL/100
      GO TO (100,200,300,400,300),K
C
C     LINEAR PATERN , STORE SUBTYPE CODE
  100 BCANON(MM+1)=Z1
C
C     C.F. EXISTS FOR STARTING POINT
      IF (CKDEF(ARG1)) GO TO 1300
C     YES, STORE COORDS. OF STARTING POINT
      DO 101 I = 1,3
      LL = MM + 3 + I
  101 BCANON(LL) = ARG1(I)
C     BRANCH ON DEFINITION FORMAT NUMBER
      K=KLL-100
      GO TO (105, 110, 125), K
C     DEFN. BY STARTING,ENDING AND NO. OF PTS.,C.F. EXISTS FOR END PT.
  105 IF (CKDEF(ARG2)) GO TO 1300
C     YES, COMPUTE DIFFERENCE VECTOR,NORMALIZE AND STORE
      DO 106  I = 1,3
  106 DIRVEC(I) = ARG2(I) - ARG1(I)
      CALL VNORM (DIRVEC ,DIRVEC)
      GO TO 112
C     DEFN. BY POINT, VECTOR AND NO. OF PTS.,C.F. EXISTS FOR VECTOR
  110 IF (CKDEF(ARG2)) GO TO 1300
      CALL VNORM (ARG2 ,DIRVEC)
  112 IF (IER) 116,116,114
  114 CALL ERROR (65,'APT090  ')
      GO TO 1300
  116 DO 117  I = 1,3
      LL = MM+6+I
  117 BCANON(LL) = DIRVEC(I)
      IF (ARG3)    118,118,120
  118 CALL ERROR (66,'APT090  ')
      GO TO 1300
C     STORE NO.OF POINTS IN PATERN
  120 BCANON(MM+3)=ARG3
C     COMPUTE INCREMENTAL SPACING AND SET UP INCR LIST
C
      SINC=VTEM/(ARG3-Z1)
      IF(K.EQ.K2)SINC=VTEM
      NINC=BCANON(MM+3)+Z1EM5-Z1
      DO 122  I = 1,NINC
      LL=MM+9+I
  122 BCANON(LL) = SINC
C     SAVE FINAL BCANON INDEX
      NECF = LL
C     SIZE OF E.C.F.= FINAL BCANON INDEX MINUS INITIAL BCANON INDEX
C     STORE IN E.C.F. AND I.C.F.
      SIZE=NECF-MM
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
      GO TO 1200
C     DEFN. BY POINT, VECTOR AND INCR. LIST, C.F. EXISTS FOR VECTOR
  125 IF (CKDEF(ARG2)) GO TO 1300
      CALL VNORM (ARG2, DIRVEC)
  127 IF (IER)  130,130,128
  128 CALL ERROR(65,'APT090  ')
      GO TO 1300
C     STORE COMPONENTS OF NORMALIZED VECTOR AND PROCESS INCR LIST DATA
  130 DO 132  I = 1,3
      LL = MM+6+I
  132 BCANON(LL) = DIRVEC(I)
C
C     INITIALIZE BCANON INDEX FOR STORAGE OF INCREMENTS
      J = MM + K10
      GO TO 1010
C     RETURN FROM INCR LIST PROCESSING
C     COMPUTE AND STORE SIZE OF E.C.F. AND NO. OF PTS.
  135 SIZE=NECF-MM
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
      BCANON(MM+3)=SIZE-8.
      GO TO 1200
C     CIRCULAR PATERN, STORE SUBTYPE CODE
  200 BCANON(MM+1)=Z2
C     C.F. EXISTS FOR SPECIFIED CIRCLE
      IF (CKDEF(ARG1)) GO TO 1300
C     YES, STORE COORDS. OF CIRCLE CENTER AND CIRCLE RADIUS
      DO 202  I = 1,3
      LL= MM+3+I
  202 BCANON(LL) = ARG1(I)
      IF(ZFLAG)GO TO 201
      BCANON(MM+6)=Z0
      IF(REF(1,3).EQ.Z0)GO TO 201
      BCANON(MM+6)=(REF(1,4)-REF(1,1)*BCANON(MM+4)-REF(1,2)*
     /   BCANON(MM+5))/REF(1,3)
  201 BCANON(MM+7)=ARG1(7)
C
C     STORE STARTING ANGLE - IF GREATER THAN 360, REDUCE MOD 360,
C     IF NEGATIVE, CHANGE TO POSITIVE
C
      BCANON(MM+8) = ARG2(1)
      IF(DABS(BCANON(MM+8)).LT.D360)GO TO 206
  204 BCANON(MM+8)=DMOD(BCANON(MM+8),D360)
  206 IF (BCANON(MM+8)) 208,210,210
  208 BCANON(MM+8)=BCANON(MM+8)+D360
C
C     BRANCH ON DEFN FORMAT NUMBER
  210 K=KLL-200
      GO TO (215 ,250),K
C
C     DEFN BY STARTING AND ENDING ANGLES AND NUMBER OF PTS.
C     STORE DIRECTION OF GENERATION,  +1.0 FOR CCLW, -1.0 FOR CLW
C
  215 CALL HOLFRM(ARG4(1),TEST,1,8,NWD)
      IF (TEST .EQ. C) GO TO 217
C     ASSUME CCLW
      BCANON(MM+9)=Z1
      GO TO 218
  217 BCANON(MM+9)=ZM1
C
C     USE   SPECIFIED ENDING ANGLE AS EQUIV. POSITIVE ANGLE, MOD 360
  218 ENANG = ARG3
      IF(DABS(ENANG).LT.D360)GO TO 222
  220 ENANG=DMOD(ENANG,D360)
  222 IF (ENANG) 224,226,226
  224 ENANG=ENANG+D360
C
C     ADJUST COMPUTED DIFFERENCE BETWEEN ENDING AND STARTING ANGLES
C     TO BE COMPATIBLE WITH SPECIFIED DIRECTION OF GENERATION
C
  226 DIFF = ENANG - BCANON(MM+8)
      IF (DIFF) 228,232,234
  228 IF(BCANON(MM+9).EQ.Z1)GO TO 236
  230 DIFF=DABS(DIFF)
      GO TO 238
  232 DIFF=D360
      GO TO 238
  234 IF(BCANON(MM+9).EQ.Z1)GO TO 238
  236 DIFF=D360-DABS(DIFF)
C
  238 IF (ARG5(1)) 240,242,242
  240 CALL ERROR (66,'APT090  ')
      GO TO 1300
C     STORE NUMBER OF PTS. IN PATERN
  242 BCANON(MM+3)=ARG5(1)
C
C     COMPUTE INCREMENTAL SPACING AND SET UP INCR LIST
C
      SINC=DIFF/(ARG5(1)-Z1)
      NINC=BCANON(MM+3)+Z1EM5-Z1
      DO 244 I = 1,NINC
      LL = MM+9+I
  244 BCANON(LL) = SINC
C     SAVE FINAL BCANON INDEX
      NECF = LL
C     SIZE OF E.C.F. = FINAL INDEX MINUS INITIAL INDEX
C     STORE IN E.C.F. AND I.C.F.
      SIZE=NECF-MM
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
      GO TO 1200
C
C     DEFN BY STARTING ANGLE AND INCREMENT LIST
C     STORE DIRECTION OF GENERATION, +1.0 FOR CCLW, -1.0 FOR CLW
C
  250 CALL HOLFRM(ARG3,TEST,1,8,NWD)
      IF (TEST .EQ. C) GO TO 252
C     ASSUME CCLW
      BCANON(MM+9)=Z1
      GO TO 254
  252 BCANON(MM+9)=ZM1
C     INITIALIZE BCANON INDEX FOR STORAGE OF INCREMENTS
  254 J= MM + K10
      GO TO 1020
C
C     RETURN FROM INCR LIST PROCESSING
C     COMPUTE AND STORE SIZE OF E.C.F. AND NO. OF PTS.
  255 SIZE=NECF-MM
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
      BCANON(MM+3)=SIZE-8.
      GO TO 1200
C     GRID OR PERIPHERAL PATERN STORE RELATED SUBTYPE CODE
  300 BCANON(MM+1)=Z3
      IF(K.EQ.K5)BCANON(MM+1)=Z5
C
C     C.F. EXISTS FOR FIRST PATERN
  302 IF (CKDEF(ARG1)) GO TO 1300
C     YES, RETRIEVE E.C.F. AND STORE IN BCANON
C
      CALL APT094(2, ARG1, BCANON(MM+3))
C     RETRIEVAL O.K.
      IF (CKDEF(ARG1)) GO TO 1300
C
C     YES - PATERN IS LINEAR
      IF(BCANON(MM+4).EQ.Z1)GO TO 306
  304 CALL ERROR(67,'APT090  ')
      GO TO 1300
C     COMPUTE BCANON INDEX FOR STORAGE OF SECOND PATERN,INITIAL VALUE=M
  306 ICVT=BCANON(MM+6)+Z1EM5
      M=MM+ICVT+K12
C     BRANCH ON DEFINITION FORMAT INDICATOR
      I=KLL-(K*100)
      GO TO (310,320,340), I
C     DEFINITION BY TWO LINEAR PATERNS, C.F. EXISTS FOR SECOND PATERN
  310 IF (CKDEF(ARG2)) GO TO 1300
C     YES - RETRIEVE AND STORE IN BCANON
      SAVE=BCANON(M-1)
      CALL APT094(2,ARG2,BCANON(M-1))
      BCANON(M-1)=SAVE
      IF (CKDEF(ARG2)) GO TO 1300
C     IS THIS PATERN LINEAR
      IF(BCANON(M).EQ.Z1)GO TO 314
  312 CALL ERROR(67,'APT090  ')
      GO TO 1300
C     YES, TRANSLATE ORIGIN OF SECOND PATERN TO THAT OF FIRST PATERN
  314 DO 316  I = 1,3
      JJ = M+2+I
      LL = MM+6+I
  316 BCANON(JJ) = BCANON(LL)
C
C     COMPUTE AND STORE E.C.F. SIZE
      SIZE=BCANON(MM+6)+BCANON(M+2)+19.
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
      GO TO 357
C     DEFINITION BY PATERN,VECTOR, AND NO. OF ROWS OR COLUMNS
  320 IF (CKDEF(ARG2)) GO TO 1300
      CALL VNORM (ARG2 , DIRVEC)
      IF (IER) 324, 324, 322
  322 CALL ERROR(65,'APT090  ')
      GO TO 1300
C     SET SUBTYPE CODE = 1 FOR SECOND PATERN AND SET ORIGIN SAME AS
C     THAT OF FIRST PATERN, STORE COMPONENTS OF NORMALIZED VECTOR
  324 BCANON(M)=Z1
      DO 326  I = 1,3
      JJ = M+2+I
      LL = MM+6+I
  326 BCANON(JJ) = BCANON(LL)
      DO 328  I = 1,3
      JJ = M+5+I
  328 BCANON(JJ) = DIRVEC(I)
      IF (ARG3) 330,330,332
  330 CALL ERROR(63,'APT090  ')
      GO TO 1300
C     STORE NO. OF PTS. IN PATERN
  332 BCANON(M+2)=ARG3
C        COMPUTE AND STORE ECF SIZE FOR SECOND PATERN
      BCANON(M+1)=BCANON(M+2)+8.
C     COMPUTE INCREMENTAL SPACING AND SET UP INCR LIST
      SINC=VTEM
      NINC=BCANON(M+2)+Z1EM5-Z1
      DO 334  I = 1,NINC
      JJ = M+8+I
  334 BCANON(JJ) = SINC
C     SAVE FINAL BCANON INDEX
      NECF = JJ
C     COMPUTE AND STORE E.C.F. SIZE
      SIZE=NECF-MM
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
      GO TO 357
C     DEFN. BY PATERN, VECTOR, AND INCR LIST
  340 IF (CKDEF(ARG2)) GO TO 1300
      CALL VNORM (ARG2,DIRVEC)
      IF (IER) 344,344,342
  342 CALL ERROR(65,'APT090  ')
      GO TO 1300
C     STORE FOR SECOND PATERN - SUBTYPE CODE,COORDS. OF ORIGIN AND
C     COMPONENTS OF NORMALIZED VECTOR
  344 BCANON(M)=Z1
      DO 346 I = 1,3
      JJ = M+2+I
      LL = MM+6+I
  346 BCANON(JJ) = BCANON(LL)
      DO 348 I = 1,3
      JJ = M+5+I
  348 BCANON(JJ) = DIRVEC(I)
C     INITIALIZE BCANON INDEX FOR STORAGE OF INCREMENTS
      J = M + 9
      GO TO 1010
C     RETURN FROM INCR LIST PROCESSING - COMPUTE AND STORE NO. OF PTS.
C     AND SIZE OF SECOND PATERN
  355 SIZE=NECF-MM
      BCANON(M+2)=SIZE-BCANON(MM+6)-19.
      BCANON(M+1)=BCANON(M+2)+8.
C     STORE SIZE OF E.C.F.
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
C     COMPUTE NO. OF PTS.IN PATERN BEING DEFINED BASED ON
C     PATERN SUBTYPE
  357 IF(BCANON(MM+1).EQ.Z5)GO TO 359
C     PATERN IS GRID
      BCANON(MM+3)=BCANON(MM+6)*BCANON(M+2)
      GO TO 1200
C
C     PATERN IS PERIPHERAL
  359 BCANON(MM+3)=Z2*(BCANON(MM+6)+BCANON(M+2))-4.
      GO TO 1200
C
C     RANDOM PATERN, STORE SUBTYPE CODE
C
  400 BCANON(MM+1)=4.0
C        CHECK FOR DEFINITION OF REQUIRED POINTS AND PATTERNS
      IF(BCANON(MM).LT.0.0)GO TO 1300
C     INITIALIZE COUNTER FOR NUMBER OF PTS. IN RANDOM PATERN
      PNTCNT=Z0
C     INITIALIZE POINTER TO FIRST ELEMENT OF POINT OR PATERN DATA
C     BEING PROCESSED - THIS POINTER WILL BE ADVANCED IN SCANNING
C     THE RANDOM PATERN E.C.F. WHICH HAS BEEN STORED IN BCANON
      J = MM + K4
C
C     INITIALIZE DATA SET COUNTER
      I = K1
C
C     ARG1 IS NUMBER OF DATA SETS, THAT IS, NUMBER OF PTS. AND/OR
C     PATERNS SPECIFIED IN RANDOM PATERN DEFN STATEMENT
      ILIM = ARG1(1)
C     IS DATA FOR POINT OR PATERN
C
  405 CALL HOLFRM(BCANON(J),TEST,1,8,NWD)
      IF(TEST.EQ.PAT)GO TO 415
C        INCREMENT POINT COUNTER AND ADVANCE J TO NEXT DATA SET
      PNTCNT=PNTCNT+K1
      J = J + K4
      GO TO 420
C     UPDATE POINT COUNTER AND ADVANCE J TO NEXT DATA SET
  415 PNTCNT=PNTCNT+BCANON(J+3)
      ICVT=BCANON(J+2)+Z1EM5
      J=J+ICVT+K1
C
C     HAVE ALL DATA SETS BEEN PROCESSED
  420 IF (I .EQ. ILIM) GO TO 425
      I = I + K1
      GO TO 405
C
C     COMPUTE AND STORE E.C.F. SIZE AND NUMBER OF PTS. IN PATERN
  425 SIZE=J-K1-MM
      BCANON(MM+2)=SIZE
      RESULT(2)=SIZE+Z1
      BCANON(MM+3)=PNTCNT
      GO TO 1200
C     TRANSFER INCREMENT LIST TO LOCAL WORKING STORAGE
C     NDLIST IS INDEX FOR END OF INCREMENT LIST DATA
C
C     SET UP FOR LINEAR,GRID,OR PERIPHERAL
 1010 BARG(1) = ARG4(1)
      NDLIST = BARG(1)
      NDLIST = NDLIST+K1
      DO 1011 I = 2,NDLIST
 1011 BARG(I) = ARG4(I)
      GO TO 1099
C
C     SET UP FOR CIRCULAR
 1020 BARG(1) = ARG5(1)
      NDLIST = BARG(1)
      NDLIST = NDLIST+K1
      DO 1021 I = 2,NDLIST
 1021 BARG(I) = ARG5(I)
C
C     BEGIN PROCESSING INCR. LIST DATA - LOGIC ASSUMES MIN(NDLIST) = 3
C
 1099 I = 2
 1100 IF (BARG(I)) 1160,1160,1101
 1101 I = I+1
      IF (I - NDLIST) 1105,1145,1145
 1105 CALL HOLFRM(BARG(I),TEST,1,8,NWD)
      IF (TEST.NE.AT)GO TO 1135
C
 1110 I = I+1
      IF (BARG(I)) 1160,1160,1115
C
C     INCR. LIST DATA OF FORM - N AT I
C
 1115 NINC = BARG(I-2)
      MMM = J+ NINC - 1
      LL = J - 1
      DO 1120 JJ = J, MMM
      LL = LL + 1
 1120 BCANON(JJ) = BARG(I)
      J = LL
C     IS THAT ALL
      IF (I - NDLIST) 1130,1125,1125
C     YES - INCR LIST PROCESSING IS DONE, SAVE FINAL BCANON INDEX
 1125 NECF = J
      GO TO 1150
C     NO - CONTINUE LIST PROCESSING
 1130 I = I+1
      J = J+1
C
C     END INCR LIST PROCESSING NOW
      IF (I - NDLIST) 1100,1131,1131
 1131 IF (BARG(I)) 1160,1160,1132
 1132 BCANON(J) = BARG(I)
      NECF = J
      GO TO 1150
C     INCR LIST DATA OF FORM NUMBER,NUMBER,NUMBER OR NUMBER,NUMBER,AT
C
 1135 IF (BARG(I)) 1160,1160,1140
 1140 BCANON(J) = BARG(I-1)
      J = J+1
      GO TO 1101
C
C     END PROCESSING OF INCR LIST DATA OF FORM NUMBER,NUMBER
C     SAVE FINAL BCANON INDEX
 1145 BCANON(J) = BARG(I-1)
      BCANON(J+1) = BARG(I)
      NECF = J+1
C     COMPLETE  E.C.F. BASED ON KLL CODE
 1150 K=KLL/100
      GO TO (135, 255,355,1300,355),K
 1160 CALL ERROR(64,'APT090  ')
      GO TO 1300
C
C     WRITE E.C.F. ONTO PERIPHERAL STORAGE
C
 1200 CALL APT094(1,RESULT,BCANON(MM))
      GO TO 1310
 1300 CALL UNDEF (RESULT)
 1310 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0001150.V06   ***
*
      SUBROUTINE APT102(BOUNDN,SURFN,HSMOD,M)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'LDEF.INC'
C
C
      INCLUDE 'BLANKCOM.INC'
C
      COMMON/SSBOND/SBOND0,SBOND,MMODE,ICON,PTS,JAG
      DIMENSION BOUNDN(1),SURFN(1),X(1),HSMOD(3),COEF(10)
      DIMENSION SBOND(9),RESULT(10),PTS(20)
      DIMENSION RESUL0(2)
      EQUIVALENCE (RESUL0(2),RESULT(1))
      EQUIVALENCE (TTEST,IA)
     1    ,(COEF(1),A),(COEF(2),B),(COEF(3),C),(COEF(4),F),(COEF(5),G),
     2     (COEF(6),H),(COEF(7),P),(COEF(8),Q),(COEF(9),R),(COEF(10),D)
      LOGICAL IEFLG,ERR86,ERR85,ERRFLG,CKDEF
      CHARACTER*8 TEST,XPOSX,XPOSY,XNEGX,XNEGY,XIN,XOUT,XSEG
C
C                                                                   *CD*
      DATA XPOSX/'POSX    '/,XPOSY/'POSY    '/,XNEGX/'NEGX    '/
      DATA XNEGY/'NEGY    '/,XIN/'IN      '/,XOUT/'OUT     '/
      DATA XSEG/'SEG     '/
       HHH=SURFN(1)
      CALL HOLFRM(HHH,TEST,1,8,NWD)
      IF(TEST.EQ.XSEG) GO TO 400
      JJJ=4
      IF (BOUNDF) GO TO 1
       BOUNDF=.TRUE.
    1 IF (M .NE. 1) GO TO 2
      JAG=0
      IE=1
      N=0
      SBOND0=SURFN(N)
      ERR85=.FALSE.
      ERR86=.FALSE.
      DO 200 II=1,8
 200  SBOND(II)=SURFN(II)
      IZRO=0
      ICON=0
 2    HHH =HSMOD(1)
      CALL HOLFRM(HHH,TEST,1,8,NWD)
      JAG=JAG+1
      IF(TEST.EQ.XPOSX.OR.TEST.EQ.XOUT) IE=1
      IF(TEST.EQ.XPOSY) IE=2
      IF(TEST.EQ.XNEGX.OR.TEST.EQ.XIN) IE=4
      IF(TEST.EQ.XNEGY) IE=5
      CALL UNPACK(SURFN,MODE,ISIZE,ISUB)
      JJJ=1
      IF(M.EQ.1) MMODE=MODE
      IF(M.EQ.1) GO TO 97
      RESUL0(1)=19030000.0D0
      IF((MMODE.EQ.1).AND.(MODE.EQ.1)) GO TO 210
      IF((MMODE.EQ.4).AND.(MODE.EQ.1)) GO TO 220
      IF((MMODE.EQ.4).AND.(MODE.EQ.4)) GO TO 230
      IF((MMODE.EQ.1).AND.(MODE.EQ.4)) GO TO 240
      GO TO 97
 210  CALL APT003(RESULT,SBOND,SURFN)
      GO TO 300
 220  CALL APT004(RESULT,IE,SURFN,SBOND)
      GO TO 300
 230  CALL APT005(RESULT,IE,SBOND,SURFN)
      GO TO 300
 240  CALL APT004(RESULT,IE,SBOND,SURFN)
 300  JJJ=3
      PTS(ICON+1)=RESULT(1)
      PTS(ICON+2)=RESULT(2)
      PTS(ICON+3)=RESULT(3)
      ICON=ICON+3
      GO TO 97
  400 ITY=1
C  ABFRAGE OB KREISDEFINITION (MMODE=4)
      IF(MMODE.EQ.4) ITY=0
      CALL SYCURV(BOUNDN(1),PTS,SBOND,ITY)
 97    RETURN
      END
**** SOURCE FILE : M0002811.V05   ***
*
C...  FORTRAN SUBROUTINE APT103                  6/70      RW
C
C                          FORTRAN SUBROUTINE APT103
C
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A BOUNDED GEOMETRY
C              OBJECT DEFINED BY THE FOLLOWING APT STATEMENT.
C
C              OBJCTN=OBJECT/BOUND1,BOUND2,...,BOUNDI
C
C CALLING SEQUENCE  CALL APT103(OBJCTN,BOUNDN,M)
C
C ARGUMENTS    OBJCTN    ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                        BOUNDED GEOMETRY OBJECT
C
C              BOUNDN    ARRAY CONTAINING THE CANONICAL FORM OF THE
C                        BOUNDED SURFACE OR OBJECT IN \HE OPERAND LIST
C                        CURRENTLY BEING PROCESSED
C
C              M         INDICATOR IDENTIFYING THE POSITION OF BOUNDN
C                        IN THE OPERAND LIST
C
C                        TAKES THE FOLLOWING VALUES.
C                        3  IF BOUNDN IS THE LAST ARGUMENT
C
C                        2  IF BOUNDN IS ANYTHING BUT THE FIRST
C                           OR LAST ARGUMENT
C
C                        1  IF PROCESSING THE FIRST ARGUMENT OF A
C                           STATEMENT WITH TWO OR MORE ARGUMENTS
C
C                        0  IF PROCESSING THE FIRST ARGUMENT OF A
C                           STATEMENT WITH ONLY ONE ARGUMENT.
C
C CALLED BY    NONE
C
C SUBSIDIARIES TYPE              ENTRY
C
C              INTEGER FUNCTION  ADDRSS
C              SUBROUTINE        ERROR
C              SUBROUTINE        INCAN
C              SUBROUTINE        PRINT
C              SUBROUTINE        UNPACK
C
C RESTRICTIONS NONE
C
C DIAGNOSTICS  ERROR CODE  COMMENT
C              85          REFERENCED ELEMENT NOT PROPERLY DEFINED.
C
C              86          BOUNDED GEOMETRY ELEMENT HAS BEEN REDEFINED
C                          WITH A DIFFERENT NUMBER OF ARGUMENTS.
C
C
C
      SUBROUTINE APT103(OBJCTN,BOUNDN,M)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'IDEF.INC'
C
C
      INCLUDE 'BLANKCOM.INC'
C
      DIMENSION OBJCTN(1),BOUNDN(1)
      INTEGER ADDRSS
      LOGICAL ERR85,ERR86
      LOGICAL CKSTR
C
C                                                                   *CD*
      CHARACTER*1 TEST,DLR
      LOGICAL DLRTST(8)
      EQUIVALENCE (TTEST,DLRTST(1))
      DATA DLR/'$'/
C                                                                   *CD*
C
C
      IF (M .GT. 1) GO TO 2
      N=0
      ERR85=.FALSE.
      ERR86=.FALSE.
      CALL UNPACK(OBJCTN,MODE,IOBJSZ,ISUB)
      IF(M .EQ. 0)M=3
   2  N=N+2
C
C...  MAKE SURE OBJCTN IS NOT REDEFINED ERRONEOUSLY.
C
      IF (N .GT. IOBJSZ) GO TO 20
C
C...  MAKE SURE BOUNDN IS PROPERLY DEFINED.
C
      CALL UNPACK(BOUNDN,MODE,ISIZE,ISUB)
      IF (CKSTR(BOUNDN(1)) .OR. ISUB .NE. 0) GO TO 10
C
C        * STORE NAME IN CANONICAL FORM
      OBJCTN(N-1)=BOUNDN(ISIZE+1)
C
C...  IF BOUNDN IS AN UNASSIGNED NESTED ARGUMENT, GENERATE DIAGNOSTIC.
C
      TTEST = OBJCTN(N-1)
      CALL HOLFRM(DLRTST(1),TEST,1,1,NWD)
      IF (TEST .EQ. DLR) ERR85 = .TRUE.
C
C...  DETERMINE INDEX FOR BOUNDN
      IOBJN=(ADDRSS(BOUNDN)-ADDRSS(COM))/KWRDSZ+1
      IF (CANFLG) CALL INCAN(IOBJN)
      OBJCTN(N)=IOBJN-IBLK1
C
   5  IF (M .EQ. 3) GO TO 30
      RETURN
C
C...  ERROR 85:  REFERENCED ELEMENT NOT PROPERLY DEFINED.
C
   10 CALL UNDEF(OBJCTN(N-1))
      OBJCTN(  N)=0
      ERR85=.TRUE.
      GO TO 5
C
C...  ERROR 86:  BOUNDED GEOMETRY ELEMENT HAS BEEN REDEFINED WITH
C     A DIFFERENT NUMBER OF OPERANDS.
C
   20 ERR86=.TRUE.
      IF (M .NE. 3) GO TO 40
   30 IF (N .NE. IOBJSZ) ERR86=.TRUE.
C
      IF (PRNTON) CALL PRINT(3,OBJCTN,1)
      IF (ERR85) CALL ERROR(85,'APT103  ')
      IF (ERR86) CALL ERROR(86,'APT103  ')
      IF (ERR86 .OR. ERR85 ) BNDERR = .TRUE.
   40 RETURN
      END
**** SOURCE FILE : M0011441.V02   ***
*
C........  FORTRAN SUBROUTINE  APT105                   5/1/72     RN
C
      SUBROUTINE APT105(RESULT,M,SN,NT,RM)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
C
C  PURPOSE  TO RETRIEVE CL POINT OR VECTOR FROM CLTAPE AND STORE IT
C           IN RESULT ARRAY.
C
C  LINKAGE   CALL  APT105 (RESULT ,M,SN,NT,RM)
C
C  ARGUMENTS   RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE
C                      RESULTING POINT OR VECTOR DEFINED AS N TH POINT
C                      OR VECTOR OF A PREVIOUS MOTION STATEMENT.
C              M       INTEGER
C                        0   IF RESULT IS POINT
C                        1   IF RESULT IS VECTOR
C              SN      REAL NUMBER OF THE CLDAT SECTION
C              NT      INTEGER DATA TYPE
C                        1      2      3     4     5     6     7
C                        TP     TA     TV    PDS   NDS   PPS   NPS
C              RM      REAL VALUE N CORRESPONDING TO DESIRED POINT
C                      OR VECTOR.
C
C  IMPORTANT VARIABLES
C              IEE     ERROR INDICATOR TO BE SET BY ATAPER WHEN THE
C                      SPECIFIED CL POINT DOES NOT EXIST.
C              J       INDICATOR OF POINT OR VECTOR FOR TRANSF.
C              I       POINTER OF ARRAY P ACCORDING TO POINT OR VECTOR.
C              P       ARRAY TO CONTAIN X,Y,Z,I,J,K.
C              I       COUNTER TO PICK UP POINT OR VECTOR.
C              IERROR  COMMON VARIABLE TO CARRY ERROR CODE.
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'IDEF.INC'
C
C
      DIMENSION P(6),RESULT(3)
      N = RM
      ISC=SN
      NTP=NT
      CALL ATAPER(P,N,ISC,NTP,IEE)
      IF(IEE.EQ.0) GO TO 2
      IERROR = 93
      GO TO 3
    2 J = 2
      I = 1
      IF(M.EQ.1) I = 4
      IF(M.EQ.1) J = 3
      DO 1 L=1,3
      RESULT(L) = P(I)
    1 I = I + 1
      CALL TRANSF(P,RESULT,J,3,-1)
    3 CALL DEFEXT (RESULT)
      RETURN
      END
**** SOURCE FILE : M0000845.V03   ***
*
C...  FORTRAN SUBROUTINE     APT106    6/69      SR
C
C PURPOSE      TO COMPUTE AND STORE THE CANONICAL FORM
C              OF THE NTH POINT OF A PATERN
C
C LINKAGE      CALL APT106(RESULT,PAT,RN)
C
C ARGUMENTS    RESULT  ARRAY TO CONTAIN THE CANONICAL FORM OF THE POINT
C              PAT     ARRAY CONTAINING THE I.C.F. OF THE PATERN
C              RN      NUMBER OF THE DESIRED POINT
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT094
C              LOGICAL FUNCTION    CKDEF
C              SUBROUTINE          DEFEXT
C              SUBROUTINE          NPAT
C
      SUBROUTINE APT106(RESULT,PAT,RN)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
      DIMENSION RESULT(3),PAT(2)
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DEF.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'IDEF.INC'
C
C
      INCLUDE 'BLANKCOM.INC'
C
      LOGICAL CKDEF
C
      IF(CKDEF(PAT))GO TO 90
C
C              MOVE THE EXTERNAL CANONICAL FORM TO BCANON
C
      CALL APT094(2,PAT,BCANON)
      IF(CKDEF(PAT))GO TO 90
C
C              CHECK TO SEE THAT N IS LESS THAN OR EQUAL TO
C              THE NUMBER OF POINTS IN THIS PATERN
C
      IF(RN.GT.BCANON(4))GO TO 95
      N=RN+Z1EM5
C
C          DETERMINE AND STORE THE COORDINATES OF THE POINT
C
      CALL NPAT(R,N)
   10 CALL DEFEXT(RESULT)
C
      RETURN
C
C          REFERENCED PATERN HAS NOT BEEN PREVIOUSLY CORRECTLY DEFINED
C
   90 IERROR=37
      GO TO 10
C
C          THE NUMBER OF THE REQUESTED POINT IS GREATER THAN THE
C          NUMBER OF POINTS IN THE PATERN
C
   95 IERROR=38
      GO TO 10
      END
