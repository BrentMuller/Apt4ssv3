**** SOURCE FILE : DEVCAL.V01   ***
*
      SUBROUTINE DEVCAL(Q,TN,P0,P1,DEV)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION Q(3),TN(3),P0(3),P1(3),V(3),VQ(3),H(3)
      CHARACTER*20 BADMSG
C
      INCLUDE 'IBUGG.INC'
C
      DATA Z1EM10/1.0D-10/,Z1EM20/1.0D-20/,ZERO/0.0D0/
C
C.... COMPUTE (P1-P0) AND (Q-P0)
C
      DO 10 I=1,3
        V(I)=P1(I)-P0(I)
        VQ(I)=Q(I)-P0(I)
   10 CONTINUE
C
C.... COMPUTE LOCAL U WHERE MAX DEVIATION OCCURS
C
      CALL DOTF(A,V,VQ)
      CALL DOTF(B,V,V)
      IF (B.GT.Z1EM10) THEN
        U=A/B
      ELSE
        U=0.5
      ENDIF
C
C.... COMPUTE DEVIATION
C
      DO 20 I=1,3
        H(I)=Q(I)-P0(I)-U*V(I)
   20 CONTINUE
C
      CALL DOTF(H2,H,H)
C
C.... ADD SIGN TO INDICATE WHETHER TOWARDS OR AWAY FROM TOOL
C     POSITIVE TOWARDS TOOL, NEGATIVE AWAY FROM TOOL
C
      CALL DOTF(S,H,TN)
      S=SIGN(1.D0,S)
C
      IF (H2.GT.Z1EM20) THEN
        DEV=S*DSQRT(H2)
      ELSE
        DEV=ZERO
      ENDIF
C
      IF (IBUG.EQ.11) THEN
         BADMSG=' AFTER DEVCAL'
         CALL CPRINT(BADMSG)
         CALL BAD(3,1,'P0  ',P0)
         CALL BAD(-3,1,'P1  ',P1)
         CALL BAD(3,1,'Q   ',Q)
         CALL BAD(-3,1,'TN  ',TN)
         CALL BAD(3,1,'H   ',H)
         CALL BAD(1,1,'S   ',S)
         CALL BAD(-1,1,'DEV ',DEV)
      ENDIF
C
      END
**** SOURCE FILE : GCHK.V01   ***
*
      SUBROUTINE GCHK(SURF,SIDE,R ,TE ,TA ,NPAT ,UP ,VP ,
     +                          RL,TEL,TAL,NPATL,UPL,VPL,
     +                          TOLCOM,TOLI,TOLO,GFAC,IRET)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION SURF(*),R(32),TE(3),TA(3),RL(32),TEL(3),TAL(3)
      DIMENSION RM(32),TP(3),TPL(3),XTP(3),XTPL(3),DEV(3),TN(3)
C
      CHARACTER*20 BADMSG
C
      INCLUDE 'IBUGG.INC'
C
      DATA Z1EM10/1.0D-10/,ZERO/0.0D0/,ONE/1.0D0/
C
C.... COMPUTE PARAMETRIC MIDPINT
C
      CALL MIDPNT(SURF,NPAT,UP,VP,NPATL,UPL,VPL,RM)
C
C.... COMPUTE SURFACE CURVATURE AT MIDPOINT IN CHORD DIRECTION
C
      CALL MIDKUR(RM,R,RL,SIDE,SKRM)
C
C.... COMPUTE TOOL CONTACT POINT AT CURRENT AND LAST LOCATION
C     AND TOOL NORMAL AT MIDPOINT
C
      OFFSET=TOLCOM*SIDE
      DO 10 I=1,3
        TP(I)=R(I)+OFFSET*R(28+I)
        TPL(I)=RL(I)+OFFSET*RL(28+I)
        TN(I)=SIDE*RM(I+28)
   10 CONTINUE
C
C.... COMPUTE THE TWO TOOL POINTS, XTP AND XTPL THAT CORRESPOND
C     TO THE TOOL CONTACT POINT AT THE ALTERNATIVE TOOL LOCATION
C
      CALL XTPCAL(TP,TE,TA,TPL,TEL,TAL,XTP,XTPL)
C
C.... COMPUTE DEVIATION OF MIDPOINT FROM CHORD
C     BETWEEN TOOL CONTACT POINTS
C
      CALL DEVCAL(RM,TN,TP,TPL,DEV(1))
C
C.... COMPUTE DEVIATION OF MIDPOINT FROM CHORD
C     BETWEEN TOOL CONTACT POINT AND CORRESPONDING POINT (XTP OR XTPL)
C     FOR BOTH TOOL LOCATIONS
C
      CALL DEVCAL(RM,TN,TP,XTPL,DEV(2))
      CALL DEVCAL(RM,TN,TPL,XTP,DEV(3))
C
C.... COMPUTE MAXIMUM AND MINIMUM DEVIATION
C
      DEVMAX=ZERO
      DEVMIN=ZERO
      DO 20 I=1,3
        IF (DEV(I).GT.DEVMAX) DEVMAX=DEV(I)
        IF (DEV(I).LT.DEVMIN) DEVMIN=DEV(I)
  20  CONTINUE
C
C.... IS THE APPROPRIATE TOLERANCE BAND VIOLATED
C
      IF ( (SKRM.GT.ZERO).AND.(ABS(DEVMIN).GT.TOLO) ) THEN
C.... EXCESS MATERIAL WILL BE LEFT ON
        IRET=-1
C.... COMPUTE STEP REDUCTION FACTOR
        IF (TOLO.GT.Z1EM10) THEN
          GFAC=TOLO/ABS(DEVMIN)
          GFAC=MIN(GFAC,0.95D0)
        ELSE
          GFAC=0.75
        ENDIF
      ELSE IF ( (SKRM.LT.ZERO).AND.(DEVMAX.GT.TOLI) ) THEN
C.... GOUGING OF SURFACE WILL OCCUR
        IRET=1
C.... COMPUTE STEP REDUCTION FACTOR
        IF (TOLI.GT.Z1EM10) THEN
          GFAC=TOLI/DEVMAX
          GFAC=MIN(GFAC,0.95D0)
        ELSE
          GFAC=0.75
        ENDIF
      ELSE
        IRET=0
        GFAC=ONE
      ENDIF
C
      IF (IBUG.EQ.11) THEN
         BADMSG= ' AFTER GCHK'
         CALL CPRINT(BADMSG)
         CALL BAD(1,1,'SKRM',SKRM)
         CALL BAD(1,1,'TOLI',TOLI)
         CALL BAD(-1,1,'TOLO',TOLO)
         CALL BAD(1,1,'DVMX',DEVMAX)
         CALL BAD(1,1,'DVMN',DEVMIN)
         CALL BAD(1,0,'IRET',IRET)
         CALL BAD(-1,1,'GFAC',GFAC)
      ENDIF
C
      END
**** SOURCE FILE : MIDKUR.V01   ***
*
      SUBROUTINE MIDKUR(R,P0,P1,SIDE,SK)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION R(32),P0(3),P1(3),SX(24),CH(3),VEC(3)
      CHARACTER*20 BADMSG
C
      INCLUDE 'IBUGG.INC'
C
C.... COMPUTE PRINCIPLE CURVATURES ETC. AT MIDPOINT, R
C
      CALL KURSRF(R,SIDE,SX)
C
C.... COMPUTE CHORD DIRECTION
C
      DO 10 I=1,3
        CH(I)=P1(I)-P0(I)
   10 CONTINUE
      CALL VNORM(CH,CH)
C
C.... PROJECT CHORD VECTOR INTO SURFACE TANGENT PLANE
C
      CALL CROSS(R(29),CH,VEC)
      DO 20 I=1,3
        VEC(I)=SIDE*VEC(I)
   20 CONTINUE
C
      CALL CROSS(VEC,R(29),VEC)
      CALL VNORM(VEC,VEC)
C
C.... COMPUTE CURVATURE OF SURFACE IN DIRECTION OF CHORD
C
      CALL DOTF(XCOS,VEC,SX(5))
      CALL DOTF(XSIN,VEC,SX(9))
      SK=SX(1)*XCOS*XCOS+ SX(2)*XSIN*XSIN
C
      IF (IBUG.EQ.11) THEN
         BADMSG=' AFTER MIDKUR'
         CALL CPRINT(BADMSG)
         CALL BAD(-1,1,'SK  ',SK)
      ENDIF
C
      END
**** SOURCE FILE : MIDPNT.V01   ***
*
      SUBROUTINE MIDPNT(SURF,NPAT,UP,VP,NPATL,UPL,VPL,RM)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION SURF(*),RM(32),B(64),IFLAG(6),ITOP(6,4)
      CHARACTER*20 BADMSG
C
      INCLUDE 'IBUGG.INC'
C
C.... COMPUTE GLOBAL PARAMETERS FOR CURRENT AND PREVIOUS POINTS
C
      CALL MESCON(SURF,U1,V1,NPAT,UP,VP,2)
      CALL MESCON(SURF,U2,V2,NPATL,UPL,VPL,2)
C
C.... COMPUTE GLOBAL PARAMETERS OF MIDPOINT
C
      U=(U1+U2)/2.0
      V=(V1+V2)/2.0
C
C.... COMPUTE PATCH NUMBER AND LOCAL PARAMETERS FOR MIDPOINT
C
      CALL MESCON(SURF,U,V,NPATM,UM,VM,1)
C
C.... LOAD PATCH COEFFICIENTS
C
      CALL LODPCH(SURF,B,IFLAG,ITOP,NPATM,0)
C
C.... EVALUATE COORDINATES OF MIDPOINT
C
      CALL CNSURF(UM,VM,B,RM,IFLAG,1)
C
      IF (IBUG.EQ.11) THEN
         BADMSG=' AFTER MIDPNT'
         CALL CPRINT(BADMSG)
         CALL BAD(1,0,'NPAT',NPAT)
         CALL BAD(1,1,'UP  ',UP)
         CALL BAD(-1,1,'VP  ',VP)
         CALL BAD(1,0,'NPTL',NPATL)
         CALL BAD(1,1,'UPL ',UPL)
         CALL BAD(-1,1,'VPL ',VPL)
         CALL BAD(1,0,'NPTM',NPATM)
         CALL BAD(1,1,'UM  ',UM)
         CALL BAD(-1,1,'VM  ',VM)
         CALL BAD(-3,1,'RM  ',RM)
      ENDIF
C
      END
**** SOURCE FILE : XTPCAL.V01   ***
*
      SUBROUTINE XTPCAL(TP,TE,TA,TPL,TEL,TAL,XTP,XTPL)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION TP(3),TE(3),TA(3),TPL(3),TEL(3),TAL(3),XTP(3),XTPL(3)
      DIMENSION FWD(3),VN(3),VNL(3),TF(3),TFL(3),TPV(3),TPVL(3)
      CHARACTER*20 BADMSG
C
      INCLUDE 'IBUGG.INC'
C
C.... COMPUTE UNIT FORWARD VECTOR FROM TEL TO TE
C
      DO 10 I=1,3
        FWD(I)=TE(I)-TEL(I)
   10 CONTINUE
      CALL VNORM(FWD,FWD)
C
C.... COMPUTE TWO VECTORS NORMAL TO FWD AND EACH TA
C
      CALL CROSSV(TA,FWD,VN)
      CALL CROSSV(TAL,FWD,VNL)
C
C.... COMPUTE ORTHOGONAL VECTORS TF AND TFL
C
      CALL CROSSV(VN,TA,TF)
      CALL CROSSV(VNL,TAL,TFL)
C
C.... COMPUTE VECTORS FROM TOOL TIP TO SURFACE CONTACT POINT FOR
C     EACH CASE
C
      DO 20 I=1,3
        TPV(I)=TP(I)-TE(I)
        TPVL(I)=TPL(I)-TEL(I)
   20 CONTINUE
C
C.... PROJECT INTO LOCAL TOOL AXIS SYSTEM
C
      CALL DOTF(X,TPV,TF)
      CALL DOTF(Y,TPV,VN)
      CALL DOTF(Z,TPV,TA)
C
      CALL DOTF(XL,TPVL,TFL)
      CALL DOTF(YL,TPVL,VNL)
      CALL DOTF(ZL,TPVL,TAL)
C
C.... COMPUTE CORRESPONDING POINTS ON TOOL
C
      DO 30 I=1,3
        XTP(I)=TE(I)+XL*TF(I)+YL*VN(I)+ZL*TA(I)
        XTPL(I)=TEL(I)+X*TFL(I)+Y*VNL(I)+Z*TAL(I)
   30 CONTINUE
C
      IF (IBUG.EQ.11) THEN
         BADMSG=' AFTER XTPCAL'
         CALL CPRINT(BADMSG)
         CALL BAD(3,1,'TP  ',TP)
         CALL BAD(-3,1,'TPL ',TPL)
         CALL BAD(3,1,'TE  ',TE)
         CALL BAD(-3,1,'TEL ',TEL)
         CALL BAD(3,1,'TA  ',TA)
         CALL BAD(-3,1,'TAL ',TAL)
         CALL BAD(-3,1,'FWD ',FWD)
         CALL BAD(3,1,'VN  ',VN)
         CALL BAD(-3,1,'VNL ',VNL)
         CALL BAD(3,1,'TF  ',TF)
         CALL BAD(-3,1,'TFL ',TFL)
         CALL BAD(3,1,'TPV ',TPV)
         CALL BAD(-3,1,'TPVL',TPVL)
         CALL BAD(1,1,'X   ',X)
         CALL BAD(1,1,'Y   ',Y)
         CALL BAD(1,1,'Z   ',Z)
         CALL BAD(1,1,'XL  ',XL)
         CALL BAD(1,1,'YL  ',YL)
         CALL BAD(-1,1,'ZL  ',ZL)
         CALL BAD(3,1,'XTP ',XTP)
         CALL BAD(-3,1,'XTPL',XTPL)
      ENDIF
C
      END
