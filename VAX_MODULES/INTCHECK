**** SOURCE FILE : ALGO1.ORG   ***
*
      SUBROUTINE ALGO1(T,R,RN,RU,RV,DU,DV)
C
C     PURPOSE: CALCULATE DU,DV USING ALGORITHM 1
C
C              GIVEN A SURFACE POINT R AND SURFACE NORMAL RN
C              AND A POINT ON THE TOOL T WITH SAME NORMAL
C              CALCULATE POINT B WHERE THIS TOOL NORMAL INTERSECTS
C              THE TANGENT PLANE AT R.
C              THE INDUCED PARAMETERIZATION OF THE TANGENT PLANE
C              IS USED TO DETERINE DU AND DV
C
C
C     CALC. UVSTEP AS STEP ON TANGENT PLANE AT POINT R
C
      DOUBLE PRECISION T,R,RN,RU,RV,UVSTEP,A,V4,S,DU,DV
      DIMENSION T(3),R(3),RN(3),RU(3),RV(3),UVSTEP(3),V4(3)
C
      DO 100 I=1,3
        V4(I)=T(I)-R(I)
100   CONTINUE
      CALL DOTF(A,V4,RN)
      DO 200 I=1,3
        UVSTEP(I)=V4(I)-A*RN(I)
200   CONTINUE
C
C.... S IS STEP LENGTH
C
      CALL VECMOD(UVSTEP,S)
C
C.... COMPUTE DU,DV FROM INDUCED PARAMETERIZATION OF TANGENT PLANE
C
      CALL DEGSOL(UVSTEP,RU,RV,DU,DV,ISF)
C
      END
**** SOURCE FILE : ALGO2.ORG   ***
*
      SUBROUTINE ALGO2(TN,RU,RV,RUU,RUV,RVV,DU,DV,IOK)
C
C     PURPOSE: CALCULATE DU,DV USING ALGORITHM 2
C
C              GIVEN AN INITIAL SURFACE POINT, AND THE TOOL NORMAL TN
C              AT THE 'NEAREST' POINT ON THE TOOL,
C              USING  A LOCAL QUADRATIC APPROXIMATION TO THE SURFACE
C              DETERMINE DU,DV OF POINT S WITH SAME NORMAL TN
C
C     ARGUMENTS:
C
C            TN  - TOOL NORMAL AT 'NEAREST' POINT ON TOOL
C            RU,RV - FIRST DERIVATIVES AT R
C            RUU,RUV,RVV - SECOND DERIVATIVES AT R
C            DU,DV - ESTIMATED DU,DV USING ALGORITHM 2
C            IOK   - FLAG INDICATING THAT DU,DV HAVE BEEN CALCULATED
C
      DOUBLE PRECISION TN,RU,RV,RUU,RUV,RVV,DU,DV
      DIMENSION TN(3),RU(3),RV(3),RUU(3),RUV(3),RVV(3)
      LOGICAL IOK
C
C     LOCAL VARIABLES:
C
      DOUBLE PRECISION A,B,C,D,E,F,ETA6
C
      PARAMETER (ETA6=1.D-6)
C
C.... COMPUTE DETERMINANT OF SECOND FUNDAMENTAL MATRIX OF SURFACE AT R
C
      CALL DOTF(A,TN,RUU)
      CALL DOTF(B,TN,RUV)
      CALL DOTF(C,TN,RVV)
C
      F=B*B-A*C
C
      IF (ABS(F).LT.ETA6) THEN
C.... AT LEAST ONE CURVATURE IS ZERO, SURFACE IS LCALLY A RULED SURFACE
C     THEREFORE UNABLE TO COMPUTE DU,DV USING ALGORITHM 2
        IOK=.FALSE.
      ELSE
        IOK=.TRUE.
C
        CALL DOTF(D,TN,RU)
        CALL DOTF(E,TN,RV)
C
        DU=(D*C-B*E)/F
        DV=(A*E-B*D)/F
      ENDIF
C
      END
**** SOURCE FILE : AVCTRL.ORG   ***
*
      SUBROUTINE AVCTRL(DONOFF,DAVTP1,G,BMN,BMX,DAVTP2,DMX)
C
C     PURPOSE: TO PROCESS THE AVCTRL STATEMENT
C              SET FLAGS AND STORE PARAMETERS
C
C     ARGUMENTS:
C               DONOFF   D.P.   ON OR OFF
C                               INVOKES OR CANCELS AVOIDANCE CONTROL
C               DAVTP1   D.P.   TYPE1 AVOIDANCE CONTROL
C                               (MODIFICATION OF TOOL AXIS)
C                                 CUTANG - MODIFY PITCH ANGLE
C                                 NULL   - NO MODIFICATION OF TOOL AXIS
C               G        D.P.   CONSTANT TECHNOLOGICAL ANGLE (DEGREES)
C               BMN      D.P.   MINIMUM PITCH ANGLE (DEGREES)
C               BMX      D.P.   MAXIMUM PITCH ANGLE (DEGREES)
C               DAVTP2   D.P.   TYPE2 AVOIDANCE CONTROL (LIFT OFF)
C                                 NORMPS - LIFT OFF NORMAL TO PS
C                                 AXIS   - LIFT OFF PARLLEL TO TOOL AXIS
C                                 NULL   - NONE SPECIFIED (AXIS ASSUMED)
C               DMX      D.P.   MAXIMUM LIFT OFF DISTANCE
C
C     LOCAL VARIABLES:
C
C               ONOFF    C*6    CHARACTER VERSION OF DONOFF
C               AVTYP1   C*6        "        "    "  DAVTP1
C               AVTYP2   C*6        "        "    "  DAVTP2
C               NWD      I      NO OF INTEGER WORDS OCCUPIED BY
C                               ENCODED CHARACTER STRING
C               MSG      C*30   DEBUG PRINT MESSAGE
C
      DOUBLE PRECISION DONOFF,DAVTP1,DAVTP2,G,BMN,BMX,DMX
      CHARACTER*6       ONOFF,AVTYP1,AVTYP2
      INTEGER NWD
      CHARACTER*30 MSG
C
      INCLUDE 'RMFLGS.INC'
      INCLUDE 'AVCPRM.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'FXCOR.INC'
      INCLUDE 'IBUGG.INC'
C
      CALL HOLFRM(DONOFF,ONOFF,1,6,NWD)
      CALL HOLFRM(DAVTP1,AVTYP1,1,6,NWD)
      CALL HOLFRM(DAVTP2,AVTYP2,1,6,NWD)
C
C.... SET AVOIDANCE CONTROL FLAG
C
      IF (ONOFF.EQ.'ON') THEN
        LAVCTL=.TRUE.
      ELSE
        LAVCTL=.FALSE.
      ENDIF
C
C.... STORE PARAMETERS
C
      IF (AVTYP1.EQ.'NULL'.AND.AVTYP2.EQ.'NULL') THEN
C
C.... DO NOT ALTER PARAMETERS SINCE AVCTRL/ON OR AVCTRL/OFF
C
        CONTINUE
      ELSE
C
C.... TYPE 1 AVOIDANCE CONTROL
C
        IF (AVTYP1.EQ.'CUTANG') THEN
          LATYP1=.TRUE.
C.... CONVERT ANGLES TO RADIANS BEFORE STORING
          CTANG=G*DEGRAD
          BMIN=BMN*DEGRAD
          BMAX=BMX*DEGRAD
        ELSE
          LATYP1=.FALSE.
          CTANG=Z0
          BMIN=Z0
          BMAX=Z0
        ENDIF
C
C.... TYPE 2 AVOIDANCE CONTROL
C
        IF (AVTYP2.EQ.'NORMPS') THEN
          LANPS=.TRUE.
        ELSE
          LANPS=.FALSE.
        ENDIF
C
C.... LIFT OFF LIMIT
C
        IF (ABS(DMX-Z0).LT.Z1EM6) THEN
C.... NO LIMIT SPECIFIED - TAKE DPMAX AS DEFAULT
          DMAX=DPMAX
        ELSE
          DMAX=DMX
        ENDIF
      ENDIF
C
C.... DEBUG PRINT
C
      IF (IBUG.EQ.11) THEN
        CALL BAD(-1,0,' ',0)
        MSG='0 AVOIDANCE CONTROL PARAMETERS'
        CALL CPRINT(MSG)
        CALL BAD(1,1,'CANG',CTANG)
        CALL BAD(1,1,'BMIN',BMIN)
        CALL BAD(1,1,'BMAX',BMAX)
        CALL BAD(-1,1,'DMAX',DMAX)
        CALL BAD(1,0,'LTYP',LATYP1)
        CALL BAD(1,0,'LNPS',LANPS)
        CALL BAD(-1,0,'ALST',AVLIST)
      ENDIF
C
      END
**** SOURCE FILE : AVMSG.ORG   ***
*
      SUBROUTINE AVMSG(TE,TA,LANPS,B,TYPE,D)
C
C     PURPOSE: PRINT MESSAGE WHEN INTERFERENCE SUCCESSFULLY AVOIDED
C
C     ARGUMENTS:
C
C     TE    - TOOL END COORDINATES
C     TA    - TOOL AXIS VECTOR
C     LANPS - LIFT OFF DIRECTION VECTOR
C     B     - TILT ANGLE (IF ANY)
C     TYPE  - TYPE OF TILT (ROLL OR PITCH)
C     D     - LIFT OFF DISTANCE
C
      DOUBLE PRECISION TE,TA,B,D
      DIMENSION TE(3),TA(3)
      CHARACTER*5 TYPE
      LOGICAL LANPS
C
C     GLOBAL VARIABLES:
C
      INCLUDE 'ZNUMBR.INC'
C
C     LOCAL VARIABLES:
C
C       MSG   - PRINT BUFFER
C
      CHARACTER*120 MSG
C
      MSG=' '
      CALL CFORM('INTERFERENCE SUCCESSFULLY AVOIDED BY',MSG,2,36)
      IPOS=39
      IF (ABS(B-Z0).GT.Z1EM6) THEN
        CALL CFORM(TYPE,MSG,IPOS,5)
        IPOS=IPOS+4
        IF (TYPE.EQ.'PITCH') IPOS=IPOS+1
        CALL CFORM('ING THROUGH',MSG,IPOS,11)
        IPOS=IPOS+12
        BDEG=B/DEGRAD
        CALL FCONV(BDEG,MSG,IPOS,6,2)
        IPOS=IPOS+7
        CALL CFORM('DEGREES',MSG,IPOS,7)
        IPOS=IPOS+8
        IF (ABS(D-Z0).GT.Z1EM6) THEN
          CALL CFORM('AND',MSG,IPOS,3)
          IPOS=IPOS+4
        ENDIF
      ENDIF
      IF (ABS(D-Z0).GT.Z1EM6) THEN
        CALL CFORM('LIFTING OFF BY',MSG,IPOS,14)
        IPOS=IPOS+15
        CALL FCONV(D,MSG,IPOS,10,4)
        IPOS=IPOS+11
C
        IF (LANPS) THEN
          CALL CFORM('NORMAL TO PS',MSG,IPOS,12)
        ELSE
          CALL CFORM('PARALLEL TO TA',MSG,IPOS,14)
        ENDIF
C
      ENDIF
C
      CALL CPRINT(MSG)
C
      END
**** SOURCE FILE : AVOID.V01   ***
*
      SUBROUTINE AVOID(PSURF,IPSIZE,PSIDE,PTHICK,PTOLI,PTOLO,TOLCOM,FWD,
     +                 TUL,TE,TA,R,NPAT,UP,VP,INTLOC,LRET)
C
C     PURPOSE:   TO CARRY OUT AVOIDANCE STRATEGIES WHEN INTERFERENCE
C                HAS BEEN DETECTED
C
C     ARGUMENTS:
C
C     PSURF   -  CANONICAL FORM OF PART SURFACE
C     IPSIZE  -  SIZE OF PS CANONICAL FORM
C     PSIDE   -  1 OR -1 TO AJUST SURFACE NORMAL (RU X RV)
C     PTHICK  -  THICKNESS OFFSET FROM SURFACE
C     PTOLI, PTOLO - PS TOLERANCE
C     TOLCOM  -  TOLERANCE BAND COMPENSATION
C     FWD     -  DS FORWARD DIRECTION
C     TUL     -  TOOL GEOMETRY
C     TE      -  TOOL END COORDINATES
C     TA      -  TOOL AXIS VECTOR
C     R       -  SURFACE CONTACT POINT AND DERIVATIVES
C     NPAT    -  PATCH NUMBER FOR CONTACT POINT
C     UP,VP   -  U,V PARAMETERS OF CONTACT POINT
C     INTLOC  -  LOCATION INTERFERENCE TABLE OF WORST PENETRATION
C     LRET    -  RETURN FLAG
C                .TRUE.  IF INTERFERENCE AVOIDED
C                .FALSE. IF THERE IS STILL INTERFERENCE
C
      DOUBLE PRECISION PSURF,PTHICK,PTOLI,PTOLO,FWD,TUL,TE,TA,R,UP,VP
      DOUBLE PRECISION PSIDE
      INTEGER IPSIZE,NPAT,INTLOC
      LOGICAL LRET
C
      DIMENSION PSURF(IPSIZE),FWD(3),TUL(7),TE(3),TA(3),R(32)
C
C     GLOBAL VARIABLES
C
      INCLUDE 'AVCPRM.INC'
      INCLUDE 'INTERF.INC'
      INCLUDE 'ZNUMBR.INC'
C
C     LOCAL VARIABLES
C
C     B      - COMPUTED TILT ANGLE TO CLEAR INTERFERENCE
C     UL     - LOCAL AXIS IN FWD DIRECTION PERPTO TA
C     S      - SIGN OF TILT ANGLE  (+VE IN FWD DIRECTION)
C     TCCENT - CENTRE OF TOOL CONTACT SPHERE
C     TCRAD  - RADIUS OF TOOL CONTACT SPHERE
C     CX     - PRINCIPLE CURVATURES, DIRECTIONS AND COEFFICIENTS
C     RCMIN  - MINIMUM RADIUS OF CURVATURE OF SURFACE AT CONTACT POINT
C     NPS    - PART SURFACE NORMAL AT POINT OF CONTACT
C     VL     - LIFT OFF DIRECTION
C     D1,TEMP- LOCAL WORK VARIABLES
C     D      - LIFT OFF DISTANCE
C     E      - CURVATURE COMPENSATION
C     MSG    - PRINT BUFFER
C     MSG1,MSG2 - MESSAGES
C     IPOS   - LOCATION IN PRINT BUFFER
C     IRET   - INTCHK RETURN FLAG - .TRUE. IF INTERFERENCE DETECTED
C     JRET   - CALMXB RETURN FLAG - .TRUE. IF BETA CALC. OK
C     BDEG   - B IN DEGREES
C     TYPE   - TYPE OF TILT (ROLL OR PITCH)
C     OLDTE  - ORIGINAL TE
C     OLDTA  - ORIGINAL TA
C     MAXK   - MAXIMUM CURVATURE
C
      DOUBLE PRECISION B,UL,S,TCCENT,TCRAD,CX,RCMIN,NPS,V,VL,D1,D,E,TEMP
      DOUBLE PRECISION BDEG,OLDTE,OLDTA,MAXK
      DIMENSION UL(3),TCCENT(3),CX(24),NPS(3),VL(3),OLDTE(3),OLDTA(3)
      CHARACTER*5 TYPE
      CHARACTER*120 MSG,MSG1*52,MSG2*64
      INTEGER IPOS
      LOGICAL IRET,JRET
C
      DATA MSG1/'UNABLE TO AVOID INTERFERENCE WITH CURRENT PARAMETERS'/
      DATA MSG2/
     +'INTERFERENCE DIRECTION PERPENDICULAR TO SELECTED LIFT OFF VECTOR'
     +/
C
      LRET=.FALSE.
      B=Z0
      D=Z0
      MSG=' '
C
C.... DETERMINE SURFACE NORMAL POINTING TOWARDS TOOL AT CONTACT POINT
C
      CALL VSCALE(PSIDE,R(29),NPS)
C
C.... COMPUTE PRINCIPLE CURVATURES OF SURFACE AT POINT OF CONTACT
C
      CALL KURSRF(R,PSIDE,CX)
C
C.... DETERMINE MINIMUM RADIUS OF CURVATURE OF SURFACE AT CONTACT POINT
C
      MAXK=MAX(CX(1),CX(2))
      IF (ABS(MAXK).GT.Z1EM6) THEN
        RCMIN=Z1/MAXK
      ELSE
        RCMIN=Z1E6
      ENDIF
C
      IF (LATYP1) THEN
C
C.... FIRST TRY AVOIDING INTERFERENCE BY TILTING TOOL
C     IN THE MOST APPROPRIATE DIRECTION INDICATED BY TYPE AND UL
C
        CALL CALCB(TA,FWD,R,INTLOC,B,TYPE,UL)
C
C.... ADD CONSTANT TECHNOLOGICAL ANGLE (TO CLEAR SURFACE)
C
        S=SIGN(Z1,B)
        B=B+S*CTANG
C
C.... IS B WITHIN PERMITTED RANGE
C
        IF (B.LT.BMIN) THEN
          B=BMIN
        ELSE IF (B.GT.BMAX) THEN
          B=BMAX
        ENDIF
C
C.... COMPUTE NEW TA TILTED THROUGH B IN UL DIRECTION
C     SAVE OLD TE AND TA
C
        DO 10 I=1,3
          OLDTE(I)=TE(I)
          OLDTA(I)=TA(I)
          TA(I)=COS(B)*TA(I)+SIN(B)*UL(I)
   10   CONTINUE
C
C.... COMPUTE NEW TE
C
        CALL TECALC(R,TA,FWD,PSIDE,PTHICK,TOLCOM,TUL,TE)
C
C.... COMPUTE CENTRE AND RADIUS OF TOOL CONTACT SPHERE
C
        CALL TCSPHR(TE,TA,TUL,R,PSIDE,PTHICK,TCCENT,TCRAD)
C
C.... IS THERE LOCAL INTERFERENCE
C
        IF (TCRAD.GT.RCMIN) THEN
C.... YES
          IF ( (ABS(TCRAD-TUL(1)).GT.Z1EM6).AND.
     +         ((TUL(1)+TUL(3)).LT.RCMIN) ) THEN
C.... COMPUTE MAXIMUM TILT ANGLE TO FIT SURFACE
            CALL CALMXB(RCMIN,TUL,OLDTA,UL,NPS,B,JRET)
C.... HAS ANGLE BEEN COMPUTED SATISFACTORILY
C     AND IS ANGLE WITHIN PERMITTED RANGE
            IF ( JRET.AND.(B.GE.BMIN).AND.(B.LE.BMAX) ) THEN
C
C.... YES - COMPUTE NEW TA TILTED THROUGH B IN FWD (UL) DIRECTION
C
              DO 20 I=1,3
                TA(I)=COS(B)*OLDTA(I)+SIN(B)*UL(I)
   20         CONTINUE
C
C.... COMPUTE NEW TE
C
              CALL TECALC(R,TA,PSIDE,PTHICK,PTOLI,PTOLO,TUL,TE)
C
            ELSE
C
C.... NO - LIFTOFF
C
              B=Z0
C
              IF (AVLIST) THEN
                CALL CFORM('UNABLE TO FIND TOOL AXIS ORIENTATION',
     +                      MSG,2,36)
                CALL CFORM('WITHIN SELECTED RANGE',MSG,39,21)
                CALL CPRINT(MSG)
                CALL CFORM('WHERE TOOL CAN BE POSITIONED IN',MSG,2,31)
                CALL CFORM('NON-INTERFERING CONTACT WITH SURFACE',
     +                      MSG,36,36)
                CALL CPRINT(MSG)
                CALL BAD(3,1,'R   ',R(1))
                CALL BAD(1,0,'NPAT',NPAT)
                CALL BAD(1,1,'U   ',UP)
                CALL BAD(-1,1,'V   ',VP)
              ENDIF
C
C.... RESTORE OLD TE AND TA
C
              DO 25 I=1,3
                TE(I)=OLDTE(I)
                TA(I)=OLDTA(I)
   25         CONTINUE
C
              GOTO 100
            ENDIF
          ELSE
C
C.... RADIUS OF TOOL CONTACT SPHERE = TOOL CORNER RADIUS - LIFT OFF
C
            B=Z0
            IF (AVLIST) THEN
               MSG='TOOL RADIUS GT RADIUS OF CURVATURE AT'
              CALL CPRINT(MSG)
              CALL BAD(3,1,'R   ',R(1))
              CALL BAD(1,0,'NPAT',NPAT)
              CALL BAD(1,1,'U   ',UP)
              CALL BAD(-1,1,'V   ',VP)
            ENDIF
C
C.... RESTORE OLD TE AND TA
C
            DO 26 I=1,3
              TE(I)=OLDTE(I)
              TA(I)=OLDTA(I)
   26       CONTINUE
C
            GOTO 100
          ENDIF
        ENDIF
C
C.... CHECK NEW POSTION (TE,TA) FOR INTERFERENCE
C
C.... SAVE ORIGINAL INTERFERENCE DATA TO USE FOR START POINTS
C
        CALL RESET
        CALL INTCHK(PSURF,IPSIZE,PSIDE,PTHICK,PTOLI,TUL,
     +              TE,TA,R,NPAT,UP,VP,IRET,INTLOC)
C
        IF (.NOT.IRET) THEN
C.... AVOIDANCE SUCCESSFUL - RESTORE ORIGINAL INTERFERENCE DATA
          CALL RESTOR
          IF (AVLIST) CALL AVMSG(TE,TA,LANPS,B,TYPE,Z0)
          LRET=.TRUE.
          GOTO 999
        ENDIF
      ENDIF
C
C.... IF TILTING UNSUCCESSFUL OR LIFT OFF ONLY SELECTED
C
C.... TRY AVOIDING INTERFERENCE BY LIFTING THE TOOL OFF THE SURFACE
C     IN THE SPECIFIED DIRECTION
C
  100 CONTINUE
C
C.... COMPUTE LIFT OFF DISTANCE
C
C     VL - LIFT OFF DIRECTION
C
      DO 30 I=1,3
        IF (LANPS) THEN
          VL(I)=NPS(I)
        ELSE
          VL(I)=TA(I)
        ENDIF
   30 CONTINUE
C
      CALL VNORM(VL,VL)
C
      CALL DOTV(D1,SNINTR(1,INTLOC),VL)
      IF (ABS(D1).LT.Z1EM6) THEN
        IF (AVLIST) THEN
          CALL OUTMSG(MSG1)
          CALL OUTMSG(MSG2)
        ENDIF
      ELSE
C
C.... LIFT OFF IN DIRECTION VL
C
        D=DINTR(INTLOC)/D1
C
C.... COMPUTE CURVATURE COMPENSATION FOR CONCAVE SURFACE
C
        IF (RCMIN.GT.Z0) THEN
          TEMP=RCMIN*RCMIN - DINTR(I)*DINTR(I) + D*D
          IF (TEMP.GT.Z0) THEN
            E=SQRT(TEMP)-RCMIN
          ELSE
            E=Z0
          ENDIF
        ELSE
          E=Z0
        ENDIF
C
C.... LIFT OFF - COMPENSATED FOR CURVATURE, AND INCREASED BY OUTTOL
C
        D = D + E + PTOLO
C
        IF (ABS(D).LE.DMAX) THEN
C
C.... LIFTOFF WITHIN SPECIFIED LIMIT - COMPUTE NEW TE (TA UNCHANGED)
C
          DO 40 I=1,3
            TE(I)=TE(I)+D*VL(I)
   40     CONTINUE
C
          IF (LANPS) THEN
C.... IF LIFT OFF NORMAL TO PS CHECK FOR INTERFERENCE
            CALL RESET
            CALL INTCHK(PSURF,IPSIZE,PSIDE,PTHICK,PTOLI,TUL,
     +                  TE,TA,R,NPAT,UP,VP,IRET,INTLOC)
            IF (IRET) THEN
C... STILL INTERFERENCE
              IF (AVLIST) THEN
                CALL OUTMSG(MSG1)
                CALL INTMSG(TE,TA,INTLOC)
                CALL CFORM('ACTION ATTEMPTED -',MSG,1,18)
                IPOS=21
                IF (ABS(B-Z0).GT.Z1EM6) THEN
                  CALL CFORM(TYPE,MSG,IPOS,5)
                  IPOS=IPOS+6
                  CALL CFORM('THROUGH',MSG,IPOS,7)
                  IPOS=IPOS+8
                  BDEG=B/DEGRAD
                  CALL FCONV(BDEG,MSG,IPOS,6,2)
                  IPOS=IPOS+7
                  CALL CFORM('DEGREES AND',MSG,IPOS,11)
                  IPOS=IPOS+12
                ENDIF
                CALL CFORM('LIFTED OFF BY',MSG,IPOS,13)
                IPOS=IPOS+14
                CALL FCONV(D,MSG,IPOS,10,4)
                IPOS=IPOS+11
                CALL CFORM('NORMAL TO PS',MSG,IPOS,12)
                CALL CPRINT(MSG)
              ENDIF
              GOTO 999
            ENDIF
C
C.... RESTORE INTEFERENCE DATA FOR USE AS NEXT START VALUES
C
            CALL RESTOR
          ENDIF
C
C.... AVOIDANCE SUCCESSFUL
C
          IF (AVLIST) CALL AVMSG(TE,TA,LANPS,B,TYPE,D)
          LRET=.TRUE.
C
        ELSE
C
C.... COMPUTED LIFT OFF GREATER THAN LIMIT
C
          IF (AVLIST) THEN
            CALL OUTMSG(MSG1)
            CALL CFORM('LIFT OFF',MSG,2,8)
            CALL FCONV(D,MSG,11,10,4)
            IF (LANPS) THEN
              CALL CFORM('NORMAL TO PS',MSG,22,12)
            ELSE
              CALL CFORM('PARALLEL TO TA',MSG,22,14)
            ENDIF
            CALL CPRINT(MSG)
          ENDIF
C
        ENDIF
C
      ENDIF
C
  999 CONTINUE
C
      END
**** SOURCE FILE : BDAVCP.ORG   ***
*
      BLOCK DATA BDAVCP
C
C       INITIALIZATION OF AVOIDANCE CONTROL PARAMETERS
C
      INCLUDE 'AVCPRM.INC'
C
      DATA CTANG/0.D0/,BMIN/0.D0/,BMAX/0.D0/,DMAX/0.D0/
      DATA LATYP1/.FALSE./,LANPS/.FALSE./,AVLIST/.FALSE./
C
      END
**** SOURCE FILE : BDINID.ORG   ***
*
      BLOCK DATA BDINID
C
C.... INITIALIZE INTERFERENCE CHECKING INITIAL DATA
C
      INCLUDE 'INIDAT.INC'
C
      PARAMETER (MXNP24=24*MXNP)
      DATA CXHULL/MXNP24*0.D0/,DULIM/MXNP*0.D0/,DVLIM/MXNP*0.D0/
      DATA CURMAX/MXNP*0.D0/,CURMIN/MXNP*0.D0/
      DATA NCXHUL/MXNP*0.D0/,NGP/0/,ICURSF/0/
C
      END
**** SOURCE FILE : BDINT.ORG   ***
*
      BLOCK DATA BDINT
C
C.... INITIALIZE INTERFERENCE TABLE
C
      INCLUDE 'INTERF.INC'
C
      INTEGER MAXNP3
      PARAMETER (MAXNP3=3*MAXNP)
      DATA DINTR/MAXNP*0.D0/,UINTR/MAXNP*0.D0/,VINTR/MAXNP*0.D0/
      DATA LDINTR/MAXNP*0.D0/,LUINTR/MAXNP*0.D0/,LVINTR/MAXNP*0.D0/
      DATA TPINTR/MAXNP3*0.D0/,SPINTR/MAXNP3*0.D0/,SNINTR/MAXNP3*0.D0/
      DATA PINTR/MAXNP*0/,LPINTR/MAXNP*0/,ISEG/MAXNP*0/
      DATA NPINTR/0/,LNPINT/0/
C
      END
         
**** SOURCE FILE : CALCB.V01   ***
*
      SUBROUTINE CALCB(W,FWD,R,INTLOC,B,TYPE,TL)
C
C     PURPOSE:  TO COMPUTE TILT ANGLE B TO AVOID INTERFERENCE
C               AT WORST LOCATION (INTLOC)
C
C     ARGUMENTS:
C       W      - AXIS THROUGH CONTACT POINT PARLLEL TO TA
C       FWD    - DS FORWARD DIRECTION
C       R      - SURFACE CONTACT POINT AND DERIVATIVES
C       INTLOC - LOCATION IN INTERFERENCE TABLE OF WORST PENETRATION
C       B      - TILT ANGLE TO CLEAR INTERFERENCE
C       TYPE   - TYPE OF TILT (ROLL OR PITCH)
C       TL     - APPROP. LOCAL AXIS THAT DEFINES PLANE OF TILT WITH TA
C
      DOUBLE PRECISION W,FWD,R,B,TL
      DIMENSION W(3),FWD(3),R(32),TL(3)
      INTEGER INTLOC
      CHARACTER*5 TYPE
C
C     GLOBAL VARIABLES:
C
      INCLUDE 'INTERF.INC'
C
C     LOCAL VARIABLES:
C
C       U      - LOCAL AXIS IN FORWARD DIRECTION PERPTO W
C       V      - LOCAL AXIS ORTHOGONAL TO W AND U
C       S      - SPINTR AT INTLOC WRT LOCAL ORIGIN AT CONTACT POINT
C       T      - TPINTR AT INTLOC WRT LOCAL ORIGIN AT CONTACT POINT
C       SPA    - PROJECTION OF S ONTO WU PLANE
C       TPA    - PROJECTION OF T ONTO WU PLANE
C       CPHI   - COS(PHI)
C       PHI    - TILT ANGLE
C       A      - TPA X SPA
C       SI     - DIRECTION OF PHI (+VE IN FWD DIRECTION)
C       SU,SV  - PROJECTIONS OF S ONTO U AND V AXES
C       C      - WORK VARIABLE
C
      DOUBLE PRECISION U,V,S,T,SPA,TPA,CPHI,PHI,A,SI
      DIMENSION U(3),V(3),S(3),T(3),SPA(3),TPA(3),A(3)
      DOUBLE PRECISION SU,SV,C
C
      DOUBLE PRECISION ETA,BIG,ONE
      PARAMETER (ETA=1.D-6,BIG=1.D6,ONE=1.D0)
C
C.... COMPUTE LOCAL AXES AT CONTACT POINT
C
      CALL CROSSV(W,FWD,V)
      CALL CROSSV(V,W,U)
C
C.... COMPUTE S,T
C
      DO 10 I=1,3
        S(I)=SPINTR(I,INTLOC)-R(I)
        T(I)=TPINTR(I,INTLOC)-R(I)
   10 CONTINUE
C
C.... PROJECT S ONTO LOCAL UV PLANE
C
      CALL DOTF(SU,S,U)
      CALL DOTF(SV,S,V)
C
      IF (ABS(SV).LT.ETA) THEN
        C=BIG
      ELSE
        C=SU/SV
      ENDIF
C
C.... SELECT DIRECTION OF TILT
C
      IF (ABS(C).GE.ONE) THEN
C.... PITCH TOOL - TILT ABOUT V
        TYPE='PITCH'
        DO 20 I=1,3
          TL(I)=U(I)
  20    CONTINUE
      ELSE
C.... ROLL TOOL - TILT ABOUT U
        TYPE='ROLL'
        DO 30 I=1,3
          TL(I)=V(I)
  30    CONTINUE
      ENDIF
C
C.... PROJECT S,T ONTO LOCAL PLANE OF TILT
C
      IF (TYPE.EQ.'PITCH') THEN
        CALL DOTF(SPA(1),S,U)
        SPA(2)=0.D0
        CALL DOTF(TPA(1),T,U)
        TPA(2)=0.D0
      ELSE
        SPA(1)=0.D0
        CALL DOTF(SPA(2),S,V)
        TPA(1)=0.D0
        CALL DOTF(TPA(2),S,V)
      ENDIF
      CALL DOTF(SPA(3),S,W)
      CALL DOTF(TPA(3),T,W)
C
C.... COMPUTE TILT ANGLE PHI
C
      CALL VNORM(SPA,SPA)
      CALL VNORM(TPA,TPA)
      CALL DOTF(CPHI,SPA,TPA)
      PHI=ACOS(CPHI)
C
C.... DETERMINE DIRECTION OF PHI
C
      CALL CROSS(TPA,SPA,A)
      IF (TYPE.EQ.'PITCH') THEN
        CALL DOTF(SI,A,V)
      ELSE
        CALL DOTF(SI,A,U)
      ENDIF
      SI=SIGN(1.D0,SI)
C
C.... COMPUTE TILT ANGLE
C
      B=SI*PHI
C
      END
**** SOURCE FILE : CALCT.V01   ***
*
      SUBROUTINE CALCT(TUL,TOOLCE,TOOLAX,R,RN,PSIDE,T,LBASE)
C
C     PURPOSE: TO CALCULATE T, POINT ON TOOL WITH SAME NORMAL AS
C              SURFACE AT POINT R, RN
C
C     ARGUMENTS:
C         TUL     - TOOL GEOMETRY
C         TOOLCE  - TOOL CENTER POINT
C         TOOLAX  - TOOLAXIS VECTOR
C         R       - SURFACE POINT
C         RN      - SURFACE NORMAL
C         PSIDE   - TOOL SIDE OF SURFACE
C         T       - POINT ON TOOL WITH SAME NORMAL
C         LBASE   - FLAG INDICATING THAT T IS ON BASE FLAT OF CUTTER
C
      DOUBLE PRECISION TUL,TOOLCE,TOOLAX,R,RN,PSIDE,T
      DIMENSION TUL(7),TOOLCE(3),TOOLAX(3),R(3),RN(3),T(3)
      LOGICAL LBASE
C
C     LOCAL VARIABLES:
C
      DOUBLE PRECISION ETA6,V1,V2,A,A1,B,C,D,SN,ZERO,TCYLEN
      DIMENSION V1(3),V2(3),SN(3)
      PARAMETER (ETA6=1.D-6, ZERO=0.D0)
C
      LBASE=.FALSE.
C
C.... COMPUTE LENGTH OF TOOL CYLINDER
C
      TCYLEN=TUL(7)-TUL(4)+TUL(1)
C
C.... ADJUST DIRECTION OF SURFACE NORMAL
C
      DO 10 I=1,3
        SN(I)=PSIDE*RN(I)
  10  CONTINUE
C
C.... DIRECTION OF SURFACE NORMAL WRT TO TOOLAXIS
C
      CALL DOTF(A1,SN,TOOLAX)
C
      IF ((A1.LT.ZERO).AND.(ABS(A1).GT.ETA6)) THEN
C.... TAKE T AT TOP OF UPPER LINE SEGMENT
        DO 100 I=1,3
          V1(I)=R(I) - TOOLCE(I)
  100   CONTINUE
        CALL DOTF(A,V1,TOOLAX)
        DO 102 I=1,3
          V2(I)=V1(I) - A*TOOLAX(I)
  102   CONTINUE
        CALL VNORM(V2,V2)
        DO 104 I=1,3
          T(I)=TOOLCE(I) + TUL(2)*V2(I) + TCYLEN*TOOLAX(I)
  104   CONTINUE
      ELSE
C
C.... COMPUTATION DEPENDENT ON TYPE OF TOOL
C
C
        IF (ABS(TUL(1)-TUL(2)).LE.ETA6) THEN
C.... BALL-ENDED CUTTER
            DO 110 I=1,3
              V1(I)=R(I)-TOOLCE(I)
              T(I)=TOOLCE(I)-TUL(1)*SN(I)
110         CONTINUE
            CALL DOTF(A,V1,TOOLAX)
C.... LIMIT A TO VALID RANGE FOR TOOL CYLINDER
            IF (A.LT.ZERO) A=ZERO
            IF (A.GT.TCYLEN) A=TCYLEN
C
            IF (ABS(A1).LT.ETA6) THEN
C.... ON CYLINDER
                  DO 120 I=1,3
                    T(I)=T(I)+A*TOOLAX(I)
120               CONTINUE
            END IF
        ELSE
C
C     CORNER RADIUS CUTTER
C     FIND TOOL POINT T WITH SAME NORMAL
C
          IF (ABS(A1).LT.ETA6) THEN
C
C.... CYLINDER CASE
C
            DO 130 I=1,3
              V1(I)=R(I)-TOOLCE(I)
130         CONTINUE
            CALL DOTF(A,V1,TOOLAX)
C.... LIMIT A TO VALID RANGE FOR TOOL CYLINDER
            IF (A.LT.ZERO) A=ZERO
            IF (A.GT.TCYLEN) A=TCYLEN
C.... NOTE IN THIS CASE SN IS PERP. TO TA SO T WILL LIE ON CYLINDER
            DO 140 I=1,3
              T(I)=TOOLCE(I)+A*TOOLAX(I)-TUL(2)*SN(I)
140         CONTINUE
          ELSE IF ((1.D0-A1).LT.ETA6) THEN
C
C.... BOTTOM FLAT CASE
C
            DO 150 I=1,3
              V1(I)=TOOLCE(I)-R(I)
150         CONTINUE
            CALL DOTF(B,V1,TOOLAX)
            DO 155 I=1,3
             V1(I)=V1(I) - B*TOOLAX(I)
155         CONTINUE
            CALL NORMA(V1,V2,D)
            IF (D.GT.TUL(3)) D=TUL(3)
            C=TUL(4)+TUL(2)
            DO 160 I=1,3
              T(I)=TOOLCE(I) -  C*TOOLAX(I) - D*V2(I)
160         CONTINUE
C.... INDICATE T IS ON FLAT BASE OF CUTTER
            LBASE=.TRUE.
          ELSE
C.... CORNER RADIUS CASE
            DO 170 I=1,3
              V1(I)=SN(I)-A1*TOOLAX(I)
170         CONTINUE
            CALL VECMOD(V1,A)
            C=TUL(3)/A
            DO 180 I=1,3
              T(I)=TOOLCE(I)-C*V1(I)-TUL(1)*SN(I)
180         CONTINUE
C
          ENDIF
C
        ENDIF
C
      ENDIF
C
      END
**** SOURCE FILE : CALMXB.ORG   ***
*
      SUBROUTINE CALMXB(RS,TUL,W,U,SN,BETA,LRET)
C
C     PURPOSE: TO COMPUTE MAXIMUM TILT ANGLE WHERE TOOL WILL FIT
C              INTO CONCAVE SURFACE
C
C     ARGUMENTS:
C       RS     - MINIMUM RADIUS OF CURVATURE OF SURFACE AT CONTACT POINT
C       TUL    - TOOL GEOMETRY
C       W      - ORIGINAL TOOL AXIS
C       U      - LOCAL AXIS DIRECTION ORTHOGONAL TO W IN DIRECTION
C                OF POSITIVE TILT
C       SN     - SURFACE NORMAL AT POINT OF CONTACT (TOWARDS TOOL)
C       BETA   - TILT ANGLE
C                  VALUE ON INPUT WILL BE IDEAL TILT TO CLEAR SURFACE
C                  AND WILL BE USED TO DETERMINE WHICH OF THE
C                  TWO ALTERNATIVE IS TO BE RETURNED AS THE MAXIMUM
C       LRET   - RETURN FLAG = .TRUE. - COMPUTED OK, ELSE .FALSE.
C
      DOUBLE PRECISION RS,TUL,W,U,SN,BETA
      DIMENSION TUL(7),W(3),U(3),SN(3)
      LOGICAL LRET
C
C     GLOBAL VARIABLES:
C
      INCLUDE 'ZNUMBR.INC'
C
C     LOCAL VARIABLES:
C
C       SPHI     - SIN(PHI)   WHERE PHI IS ANGLE BETWEEN TA AND SN
C       CPHI     - COS(PHI)   WHEN TOOL AND SURFACE CURVATURES MATCH
C       A,B,C,D1 - WORK VARIABLES
C       DISC     - DISCRIMINANT OF QUADRATIC EQUATION
C       SB1,SB2  - TWO POSSIBLE VALUES FOR SIN(BETA)
C       B1,B2    - TWO POSSIBLE VALUES OF BETA
C       BNEW     - NEW VALUE OF BEAT
C
      DOUBLE PRECISION SPHI,CPHI,A,B,C,D1,DISC,SB1,SB2,B1,B2,BNEW
C
C.... COMPUTE SINE OF ANGLE BETWEEN TOOL AXIS (W) AND SN SUCH THAT
C     TOOL CURVATURE WILL FIT SURFACE CURVATURE AT POINT OF CONTACT
C
      SPHI=TUL(3)/(RS-TUL(1))
      A=Z1-SPHI*SPHI
      IF (ABS(A).LE.Z1EM6) THEN
        CPHI=Z1
      ELSE
        CPHI=SQRT(A)
      ENDIF
C
C.... BETA HAS TO SATISFY TWO EQUATIONS
C
C      TA = COS(BETA)*W + SIN(BETA)*U   (1)
C      TA.SN = COS(PHI)                 (2)
C
C      TAKING SN DOT (1) AND SUBSTITUTING FOR TA.SN, RESULTS IN
C
C      COS(PHI)=COS(BETA)*(W.SN)+SIN(BETA)*(U.SN)
C
C                                       2
C      SQUARING AND SUBSTITUTING FOR COS (BETA)
C      WILL GIVE A QUADRATIC IN SIN(BETA) - HENCE BETA
C
      CALL DOTF(A,W,SN)
      CALL DOTF(B,U,SN)
C
      D1=A*A+B*B
      DISC=D1-CPHI*CPHI
C
      IF ((DISC.GT.Z1EM6).AND.(D1.GT.Z1EM6)) THEN
C
        C=SQRT(DISC)
C
        SB1=(B*CPHI+A*C)/D1
        SB2=(B*CPHI-A*C)/D1
        B1=ASIN(SB1)
        B2=ASIN(SB2)
C
C.... SELECT APPROPRIATE SOLUTION DEPENDENT ON IDEAL BETA TO CLEAR SURF
C
        IF (BETA.GT.Z0) THEN
          BNEW=MAX(B1,B2)
          IF (BNEW.GT.Z0) THEN
            BETA=BNEW
            LRET=.TRUE.
          ELSE
            BETA=Z0
            LRET=.FALSE.
          ENDIF
        ELSE IF (BETA.LT.Z0) THEN
          BNEW=MIN(B1,B2)
          IF (BNEW.LT.Z0) THEN
            BETA=BNEW
            LRET=.TRUE.
          ELSE
            BETA=Z0
            LRET=.FALSE.
          ENDIF
        ELSE
          BETA=Z0
          LRET=.FALSE.
        ENDIF
      ELSE
C.... NO SOLUTION TO QUADRATIC
        BETA=Z0
        LRET=.FALSE.
      ENDIF
C
      END
**** SOURCE FILE : CHKSRF.ORG   ***
*
      SUBROUTINE CHKSRF(SURF,DONOFF)
C
C.... PROCESS CHKSRF STATEMENT
C
C     ARGUMENTS:
C
C        SURF = PS            CHECK FOR INTERFERENCE WITH PART SURFACE
C             = SURFACE_NAME  CHECK FOR INTERFERENCE WITH NAMED SURFACE
C
C                             NOTE: ONLY PS IMPLEMENTED
C
C      DONOFF = ON            SET INTERFERENCE CHECKING FLAG
C             = OFF           CANCEL INTERFERENCE CHECKING FLAG
C
      DOUBLE PRECISION SURF,DONOFF
C
      INCLUDE 'RMFLGS.INC'
C
      INTEGER NWD
      CHARACTER TEST*2
C
      CALL HOLFRM(SURF,TEST,1,2,NWD)
C
      IF (TEST.EQ.'PS') THEN
C.... CHKSRF/PS,...
        CALL HOLFRM(DONOFF,TEST,1,2,NWD)
        IF (TEST.EQ.'ON') THEN
          LINTCK=.TRUE.
        ELSE
          LINTCK=.FALSE.
        ENDIF
      ELSE
C.... CHKSRF/SURFACE_NAME,...
        CONTINUE
      ENDIF
C
      END
**** SOURCE FILE : CURCAL.V01   ***
*
      SUBROUTINE CURCAL(RU,RV,RUU,RUV,RVV,RNORM,SIDE,CURVE1,CURVE2)
C
C     PURPOSE: TO CALCULATE PRINCIPAL CURVATURES CURVE1,CURVE2
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION RU(3),RV(3),RUU(3),RUV(3),RVV(3),RNORM(3)
C.... WORKSPACE
      DIMENSION W(3)
C
      INCLUDE 'ZNUMBR.INC'
C
C     CALC. 1ST FUNDAMENTAL MATRIX G
      CALL DOTF(G11,RU,RU)
      CALL DOTF(G22,RV,RV)
      CALL DOTF(G12,RU,RV)
C
C     CALC. 2ND FUNDAMENTAL MATRIX D
C
C.... TAKE SURFACE NORMAL POINTING TOWARDS TOOL
C
      DO 10 I=1,3
        W(I)=SIDE*RNORM(I)
  10  CONTINUE
C
      CALL DOTF(D11,W,RUU)
      CALL DOTF(D12,W,RUV)
      CALL DOTF(D22,W,RVV)
C
C     CALC. COEFFS. FOR QUADRATIC IN CURVATURE
C
      A1=G11*G22-G12*G12
      A2=-G11*D22-G22*D11+2.D0*G12*D12
      A3=D11*D22-D12*D12
C
C     SOLVE FOR CURVATURES
C
      DISC=A2*A2-Z4*A1*A3
      DISC=MAX(ZERO,DISC)
      DISC=SQRT(DISC)
C
      DENOM=A1+A1
C
      CURVE1=(-A2+DISC)/DENOM
      CURVE2=(-A2-DISC)/DENOM
C
      END
**** SOURCE FILE : CURINT.V01   ***
*
      SUBROUTINE CURINT(PSURF,IPSIZE,PSIDE,PTHICK,TOLIN,TUL,TE,TOOLAX,
     +                  RC,NPATCH,UC,VC)
C
C     PURPOSE: TO TEST CURRENT PATCH
C     FOR BALL-ENDED AND CORNER RADIUS CUTTERS.
C     USES MIXED ALGORITHM METHOD (MIXAL)
C
C     GIVEN :-
C     NPATCH      CURRENT PATCH NUMBER
C     CUTTING POINT DATA (U, V, POSITION, NORMAL AND DERIVATIVES)
C     TOOL DATA, THEN:-
C
C     TEST SCHEDULE FOR CURRENT PATCH :-
C     1. TEST FOR PATCH CONVEX. IF TRUE, THEN NO LOCAL INTERFERENCE
C     2. CALCULATE THE CURVATURE CT OF THE MINIMUM SPHERICAL CONVEX
C        HULL FOR THE TOOL WITH THE CUTTING POINT AS A DIAMETRAL
C        POINT.OF CONTACT. TEST AGAINST THE SIGNED MINIMUM CURVATURE
C        OF THE PATCH CP. THEN IF CP > CT NO LOCAL INTERFERENCE CAN
C        OCCUR
C     3. USE MIXAL TO SEARCH FOR INTERFERENCE ON THE PATCH, USING A
C        A NUMBER OF STARTING POINTS ARRANGED IN A PATTERN ABOUT THE
C        CUTTING POINT. (THE CUTTING POINT CANNOT BE USED AS A
C        STARTING POINT FOR THESE SEARCHES, SINCE IT IS A SOLUTION)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C.... PATCH DATA
      DIMENSION PSURF(IPSIZE)
C.... CUTTING POINT DATA
      DIMENSION RC(32),RCNORM(3)
C.... SURFACE POINT AND DERIVATIVES
      DIMENSION R(3),RU(3),RV(3)
C.... SECOND DERIVATIVES
      DIMENSION RUU(3),RUV(3),RVV(3)
C.... NORMAL AT R
      DIMENSION RNORM(3)
C
C.... POINT OF MAX. PENETRATION FOUND.
C     NOT NECESSARILY THE FINAL POINT OF ITERATION.
C     IS TRUE (I.E. EVALUATED, NOT EXTRAPOLATED) SURFACE POINT.
      DIMENSION PPOINT(3)
C.... CORRESPONDING POINT ON TOOL
      DIMENSION TPOINT(3)
C.... NORMAL AT PPOINT
      DIMENSION PNORM(3)
C     PENMAX          PENETRATION (HIT +VE)
C     UPEN, VPEN      U,V VALUES
C
C.... TOOL GEOMETRY DATA
      DIMENSION TUL(7)
C.... ABS. TOOL TIP COORDS
      DIMENSION TE(3)
C.... TOOL AXES DIRN. COSINES
      DIMENSION TOOLAX(3)
C.... TOOL CENTRE
      DIMENSION TOOLCE(3)
C
      INCLUDE 'INIDAT.INC'
      INCLUDE 'INTERF.INC'
      INCLUDE 'IBUGG.INC'
C
C.... WORKSPACE
      DIMENSION V1(3),V2(3),V3(3)
      DIMENSION TCENT(3)
      DIMENSION HCENT(3)
      PARAMETER (ETA=1D-6,PI=3.141592653589793)
C
C     CUTTER DEFINITION FOR BALL-ENDED AND CORNER RADIUS CUTTERS
C
C     ITOOL IS CUTTER TYPE: 1 FOR BALL-ENDED, 2 FOR CORNER RADIUS
C     CUTRAD IS RADIUS OF CYLINDER
C     CYLENG IS LENGTH OF CYLINDER
C     CORRAD IS CORNER RADIUS
C     CUTR3  IS CUTRAD-CORRAD
C
      CORRAD=TUL(1)
      CUTRAD=TUL(2)
      CUTR3=TUL(3)
      TLEN=TUL(7)
      CYLENG=TUL(7)-TUL(4)+TUL(1)
      IF (ABS(TUL(1)-TUL(2)).LE.ETA) THEN
        ITOOL=1
      ELSE
        ITOOL=2
      ENDIF
C
C     CALC. CURVATURE TOLERANCE CURTOL
C
      IF (TOLIN.GT.ETA) THEN
        D1=2.D0*CUTRAD
        A=MAX(CYLENG,D1)
        CURTOL=2/(TOLIN+A*A/TOLIN)
      ELSE
        CURTOL=0.D0
      ENDIF
C
C.... ADJUST NORMAL AT CONTACT POINT TO POINT TO TOOL SIDE OF SURFACE
C
      DO 10 I=1,3
        RCNORM(I)=PSIDE*RC(I+28)
  10  CONTINUE
C
      IPEN=0
      IEDGE=0
C
C     TEST FOR PATCH CONVEX
C
      PATCUR=CURMAX(NPATCH)
      IF (PATCUR.GT.CURTOL) THEN
        DUMIN=DULIM(NPATCH)
        DUMIN2=2*DUMIN
        DVMIN=DVLIM(NPATCH)
        DVMIN2=2*DVMIN
C
C.... CALCULATE TOOL CENTRE
        DO 100 I=1,3
          TOOLCE(I)=TE(I)+(TUL(4)+TUL(1))*TOOLAX(I)
 100    CONTINUE
C
C     TEST AGAINST TOOL CONVEX HULL CURVATURE
        CALL TXHULL(RC,RCNORM,CUTRAD,CORRAD,CUTR3,TLEN,TOOLAX,
     1                  TE,TOOLCE,CT,HRAD,HCENT)
C
        IF (CT.LT.PATCUR) THEN
C
C     SEARCH FOR LOCAL INTERFERENCE
C     CALC. SEARCH DIRECTIONS IN TANGENT PLANE :-
          CALL CROSS(RCNORM,TOOLAX,V3)
          CALL VNORM(V3,V1)
          CALL CROSS(V1,RCNORM,V3)
          CALL VNORM(V3,V2)
C
C     V1 AND V2 ARE UNIT VECTORS IN TANGENT PLANE AT CUTTING POINT
C     V2 PERPENDICULAR TO TOOL AXIS, V1 PERPENDICULAR TO V2
C
C     SEARCH AT 5 START POINTS
C
C.... LOCATION IN INTERFERENCE TABLE FOR START OF LOCAL PATCH DATA
C
          ICUR=NPINTR
C.... NUMBER OF HITS ON LOCAL PATCH
          NHIT=0
C
          A=-.5*CUTRAD
          CALL DEGSOL(V1,RC(5),RC(9),DU1,DV1,I)
          DO 520 K=1,5
            IF (K.EQ.3) THEN
                CALL DEGSOL(V2,RC(5),RC(9),DU1,DV1,I)
            END IF
C
            IF (K.LT.5) THEN
                A=-A
            ELSE
                A=3*A
            END IF
C
            DU=A*DU1
            DV=A*DV1
            CALL JMPLT2(UC,VC,DU,DV,I)
            IF (ABS(DU).GE.DUMIN .OR. ABS(DV).GE.DVMIN) THEN
              U=UC+DU
              V=VC+DV
              PENMAX=-1D6
              IF (NITERA.GT.1) THEN
                PREVDU=DU1
                PREVDV=DV1
              END IF
C
              CALL MIXAL(NPATCH,IPSIZE,PSURF,PSIDE,PTHICK,TUL,
     +            TOOLCE,TOOLAX,U,V,DUMIN,DVMIN,UPEN,VPEN,PPOINT,TPOINT,
     +            PNORM,PENMAX,IPEN,IFLAG,IEDGE,NITERA)
C
C.... DEBUG PRINT
C
              IF (IBUG.EQ.11) THEN
                CALL BAD(-1,0,' ',0)
                CALL BAD(1,0,'NPAT',NPATCH)
                CALL BAD(1,0,'K   ',K)
                CALL BAD(1,0,'ITER',NITERA)
              ENDIF
C
              IF (PENMAX.GT.TOLIN) THEN
C.... PENETRATION DETECTED
                IF (NHIT.GT.0) THEN
                  IF (ABS(UC-UPEN).GT.DUMIN2 .OR.
     +                 ABS(VC-VPEN).GT.DVMIN2) THEN
C
                    DO 550 I=1,NHIT
                      IF (ABS(UINTR(ICUR+I)-UPEN).LE.DUMIN2 .AND.
     1                    ABS(VINTR(ICUR+I)-VPEN).LE.DVMIN2) GOTO 520
550                 CONTINUE
                  ENDIF
                ENDIF
C
C.... STORE IN INTERFERENCE TABLE
C
                NHIT=NHIT+1
                NPINTR=NPINTR+1
                UINTR(NPINTR)=UPEN
                VINTR(NPINTR)=VPEN
                PINTR(NPINTR)=NPATCH
                DINTR(NPINTR)=PENMAX
                ISEG(NPINTR)=IPEN
                DO 515 J=1,3
                  SPINTR(J,NPINTR)=PPOINT(J)
                  TPINTR(J,NPINTR)=TPOINT(J)
                  SNINTR(J,NPINTR)=PNORM(J)
 515            CONTINUE
C
              ENDIF
C
            ENDIF
C
520       CONTINUE
C
        ENDIF
      ELSE
C.... PATCH CONVEX OR PSEUDO CONVEX
        IFLAG=0
      END IF
      END
**** SOURCE FILE : DEGSOL.ORG   ***
*
      SUBROUTINE DEGSOL(V,V1,V2,A,B,IFLAG)
C     SOLVES DEGENERATE EQN. SYSTEM  A.V1 + B.V2 = V
C     WHERE V, V1, V2, 3-D VECTORS AND A,B SCALARS
C     FOR NO SOLUTION, IFLAG SET TO 1, ELSE ZERO
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION V1(3),V2(3),V(3)
C
      PARAMETER (ETA=1E-10)
C
      IFLAG=0
      A=0
C.... CHOOSE LARGEST ABS(DET)
      DO 10 J=1,2
        DO 10 K=J+1,3
          B=V1(J)*V2(K)-V1(K)*V2(J)
          IF (ABS(B).GT.ABS(A)) THEN
            A=B
            JA=J
            KA=K
          END IF
10    CONTINUE
C
      IF (ABS(A).LT.ETA .OR. JA.EQ.O) THEN
            IFLAG=1
      ELSE
            B=(V1(JA)*V(KA)-V1(KA)*V(JA))/A
            A=(V(JA)*V2(KA)-V(KA)*V2(JA))/A
      END IF
C
      END
**** SOURCE FILE : DIST2.ORG   ***
*
      DOUBLE PRECISION FUNCTION DIST2(A,B)
C
C.... COMPUTE THE SQUARE OF THE DISTANCE BETWEEN TWO POINTS
C
      DOUBLE PRECISION A(3),B(3)
C
      DIST2 = (A(1)-B(1))*(A(1)-B(1))
     +      + (A(2)-B(2))*(A(2)-B(2))
     +      + (A(3)-B(3))*(A(3)-B(3))
      END
**** SOURCE FILE : EVALSS.ORG   ***
*
      SUBROUTINE EVALSS(NPATCH,U,V,ISIZE,GEO,MODE,
     1                  R,RU,RV,RUU,RUV,RVV,RNORM,NORMOK)
C
C.... EVALUATE SURFACE
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION GEO(ISIZE)
      DIMENSION R(3),RU(3),RV(3),RUU(3),RUV(3),RVV(3),RNORM(3)
      DIMENSION B(64),IFLAG(4),ITOP(24),SPV(32)
C
      SAVE B,IFLAG,ITOP,ICPAT
C
      DATA ICPAT/0/
C
C.... HAS PATCH ALREADY BEEN LOADED
C
      IF (NPATCH.NE.ICPAT) THEN
C
C.... LOAD CURRENT PATCH DATA
C
        CALL LODPCH(GEO,B,IFLAG,ITOP,NPATCH,1)
C
        ICPAT=NPATCH
C
      ENDIF
C
C.... EVALUATE POINT AND DERIVATIVES
C
      MM=1
      CALL CNSURF(U,V,B,SPV,IFLAG,MM)
C
      DO 10 I=1,3
        R(I)=SPV(I)
        RU(I)=SPV(I+4)
        RV(I)=SPV(I+8)
        RUU(I)=SPV(I+12)
        RUV(I)=SPV(I+16)
        RVV(I)=SPV(I+20)
        RNORM(I)=SPV(I+28)
 10   CONTINUE
C
      NORMOK=NINT(SPV(32))
C
      END
**** SOURCE FILE : HULCUT.V01   ***
*
      SUBROUTINE HULCUT(TE,TA,TUL,SPHR,ISEG)
C
C     CALCS. PENETRATION OF CORNER RADIUS CUTTER INTO SPHERICAL CONVEX H
C     OF RADIUS RAD AND CENTRE CENT
C     IF NO PENETRATION OCCURS, THEN ISEG = -1, ELSE
C     ISEG   = 0      BOTTOM FLAT
C              1      CORNER RADIUS
C              2      CYLINDER
C     P IS PENETRATION, -VE FOR MISS
C
C     ARGUMENTS:
C
C     TE      - TOOL END
C     TA      - TOOL AXIS
C     TUL     - TOOL GEOMETRY
C     SPHR    - CENTRE AND RADIUS OF TEST SPHERE
C
      DOUBLE PRECISION TE,TA,TUL,SPHR
      DIMENSION TE(3),TA(3),TUL(7),SPHR(4)
C
C.... LOCAL VARIABLES
C
      DOUBLE PRECISION V,A,B,C,P
      DIMENSION V(3)
C
      ISEG=-1
      DO 10 I=1,3
        V(I)=TE(I)+(TUL(4)+TUL(1))*TA(I)-SPHR(I)
10    CONTINUE
      CALL VECMOD(V,B)
      CALL DOTF(A,V,TA)
      C=SQRT(B*B-A*A)
C
      IF (A.GT.0) THEN
C.... CYLINDER CASE
            P=SPHR(4)+TUL(2)-C
C.... P -VE FOR MISS
            IF (P.GT.0) ISEG=2
C
      ELSE IF (C.LE.TUL(3)) THEN
C.... BOTTOM FLAT CASE
            P=TUL(1)+TUL(4)+SPHR(4)-A
C.... P -VE FOR MISS
            IF (P.GT.0) ISEG=0
C
      ELSE
C.... CORNER RADIUS CASE
            D=C-TUL(3)
            P=TUL(1)+SPHR(4)-SQRT(D*D+A*A)
C.... P -VE FOR MISS
            IF (P.GT.0) ISEG=1
      END IF
C
      END
**** SOURCE FILE : INEX.ORG   ***
*
      SUBROUTINE INEX(GEO,SIDE,TOLI,TOLO)
C
C     INTERFERENCE CHECKING INITIALISATION PROCEDURE
C
C     CALCULATES: MAXIMUM AND MINIMUM CURVATURES      CURMAX,CURMIN
C                 ITERATION LIMITS                    DULIM, DVLIM
C                 CONVEX HULLS                        CXHULL
C
C     ARGUMENTS:
C            GEO   SURFACE CANONICAL FORM
C            SIDE  TOOL SIDE OF SURFACE W.R.T. SURFACE NORMAL
C            TOLI  SURFACE INTOL
C            TOLO  SURFACE OUTTOL
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      INCLUDE 'INIDAT.INC'
C
      DIMENSION GEO(*)
C
      DIMENSION R(3),RU(3),RV(3),RUU(3),RUV(3),RVV(3),RNORM(3)
C.... MESH DIMENSION
      PARAMETER (NGRID=5)
C.... MESH POINTS
      DIMENSION RNET(NGRID*NGRID,3)
C.... PATCH CORNER POINTS
      DIMENSION NCOR(4)
      DIMENSION RCORN1(4,3),RCORN2(4,3)
C.... PATCH CORNER VECTORS
      DIMENSION CV1(4,3),CV2(4,3)
C.... POINTERS FOR ABOVE
      DIMENSION M1(4),M2(4)
      DIMENSION CENT(3),SCENT(4,3)
      DIMENSION SRAD(4)
      DIMENSION NFLAGS(4)
      DIMENSION V1(4,3),V2(6,3)
      DIMENSION W(3),W1(3)
C
C     CXHULL(I,J,K)   RETURNS CONVEX HULL DATA FOR K TH PATCH
C     I = 1 TO 3      CENTRE COORDINATES
C     I = 4           RADIUS
C     WHERE HULLS ARE CALCULATED, LOADED IN J-ORDER:-
C     MINIMUM ENCLOSING SPHERE
C     UP TO 4 "EDGE" SPHERES
C     "LID" SPHERE
C     NCXHUL(K)       NUMBER OF HULLS FOR THE K TH PATCH
C
      DATA M1/1,2,4,3/M2/4,1,3,2/
C
C.... CHECK IF THIS SURFACE HAS ALREADY BEEN PROCESSED BY INEX
C
C.... EXTERNAL LDA FILE RECORD NUMBER FOR THIS SURFACE
C
      IREC=NINT(GEO(1))
C
      IF ( (ICURSF.EQ.0).OR.(IREC.NE.ICURSF) ) THEN
C.... CURRENT SURFACE NOT PREVIOUSLY PROCESSED BY INEX
C
        ICURSF=IREC
C.... NUMBER OF PATCHES
        NGP=NINT(GEO(4))
C.... SIZE OF CANONICAL FORM
        ISIZE=NINT(GEO(8))
C
        N3=3
        N4=4
C
C     TO SET UP MESH PARAMETERS
C
C.... NUMBER OF MESH POINTS
        NNGRID=NGRID*NGRID
        N=NGRID-1
C.... MESH SIZE
        AMESH=FLOAT(1)/FLOAT(N)
        NCOR(1)=1
        NCOR(2)=NGRID
        NCOR(4)=NNGRID
        NCOR(3)=NCOR(4)-NGRID+1
C.... ALL DERIVATIVES FROM EVALUATOR
        MODE=3
C.... DISTANCE TOLERANCE
        TOLIN=(TOLI+TOLO)*0.5D0
C
C.... FOR ALL PATCHES
        DO 1000 NPATCH=1,NGP
          CRVMIN=1D6
          CRVMAX=-1.D6
          M=1
C     CALC. MESH U,V
          DO 500 K=0,N
            U=K*AMESH
            DO 400 J=0,N
              V=J*AMESH
              L=5*K+J+1
C
              CALL EVALSS(NPATCH,U,V,ISIZE,GEO,MODE,
     1                  R,RU,RV,RUU,RUV,RVV,RNORM,NORMOK)
              DO 20 I=1,3
                RNET(L,I)=R(I)
20            CONTINUE
C     IF CORNER, STORE CORNER POINTS AND EDGE VECTORS
              IF (L.EQ.NCOR(M)) THEN
                DO 30 I=1,3
                  RCORN1(M1(M),I)=R(I)
                  RCORN2(M2(M),I)=R(I)
C
                  IF (M.EQ.1 .OR. M.EQ.4) THEN
                    CV1(M1(M),I)=RV(I)
                    CV2(M2(M),I)=RU(I)
                  ELSE
                    CV1(M1(M),I)=RU(I)
                    CV2(M2(M),I)=RV(I)
                  END IF
C
30              CONTINUE
                M=M+1
              END IF
C
C     CALC. PRINCIPAL CURVATURES
C
              CALL CURCAL(RU,RV,RUU,RUV,RVV,RNORM,SIDE,CURVE1,CURVE2)
C
              CRVMAX=MAX(CRVMAX,CURVE1,CURVE2)
              CRVMIN=MIN(CRVMIN,CURVE1,CURVE2)
400         CONTINUE
500       CONTINUE
C
C     TO STORE MAXIMUM AND MINIMUM CURVATURE
          CURMAX(NPATCH)=CRVMAX
          CURMIN(NPATCH)=CRVMIN
C
C     TO CALCULATE DULIM, DVLIM
C.... A IS SUM OF U-DISTANCES BETWEEN CORNER POINTS
          A=0.D0
C.... B IS SUM OF V-DISTANCES BETWEEN CORNER POINTS
          B=0.D0
          DO 150 I=1,3
            DO 100 J=1,4
              C=RCORN1(J,I)-RCORN2(J,I)
              IF (J.EQ.1 .OR. J.EQ.3) THEN
                B=B+C*C
              ELSE
                A=A+C*C
              END IF
100         CONTINUE
150       CONTINUE
C
          DULIM(NPATCH)=TOLIN/SQRT(A)
          DVLIM(NPATCH)=TOLIN/SQRT(B)
C     DU, DV LIMITS CALCULATED
C
C     TO CALCULATE SPHERICAL CONVEX HULLS
          NHULL=0
          CALL SHELLA(RCORN1,RNET,NNGRID,N3,W,RAD)
          IF (RAD.GT.TOLIN) THEN
            NHULL=NHULL+1
            DO 200 I=1,3
              CXHULL(I,NHULL,NPATCH)=W(I)
200         CONTINUE
            CXHULL(4,NHULL,NPATCH)=RAD
          END IF
C
          CALL SHELLB(NNGRID,N3,N4,RCORN1,RCORN2,CV1,CV2,RNET,
     1              SCENT,SRAD,NFLAGS)
          DO 210 K=1,4
            IF (NFLAGS(K).EQ.1) THEN
              NHULL=NHULL+1
              DO 220 I=1,3
                CXHULL(I,NHULL,NPATCH)=SCENT(K,I)
220           CONTINUE
              CXHULL(4,NHULL,NPATCH)=SRAD(K)
            END IF
210       CONTINUE
          NCXHUL(NPATCH)=NHULL
C
1000    CONTINUE
C
      ENDIF
C
      END
**** SOURCE FILE : INTCHK.ORG   ***
*
      SUBROUTINE INTCHK(PSURF,IPSIZE,PSIDE,PTHICK,TOLIN,TUL,
     +                  TE,TA,R,NPAT,UP,VP,LRET,INTLOC)
C
C     PURPOSE : TO PERFORM INTERFERENCE CHECKING
C
C     ARGUMENTS:
C
C     PSURF   -  CANONICAL FORM OF PART SURFACE (SSURF)
C     IPSIZE  -  SIZE OF CANONICAL FORM
C     PSIDE   -  1 OR -1 TO AJUST SURFACE NORMAL (RU X RV)
C     PTHICK  -  THICKNESS OFFSET FROM SURFACE
C     TOLIN   -  TOLERANCE (PS INTOL)
C     TUL     -  TOOL GEOMETRY
C     TE      -  TOOL END COORDINATES
C     TA      -  TOOL AXIS VECTOR
C     R       -  SURFACE CONTACT POINT AND DERIVATIVES
C     NPAT    -  PATCH NUMBER FOR CONTACT POINT
C     UP,VP   -  U AND V PARAMETERS FOR CONTACT POINT
C     LRET    -  RETURN FLAG = .TRUE.  IF INTERFERENCE OCCURS
C                            = .FALSE. IF NO INTERFERENCE
C     INTLOC  -  LOCATION IN INTERFERENCE TABLE OF LARGEST INTERFERENCE
C
      DOUBLE PRECISION PSURF,PSIDE,PTHICK,TUL,TOLIN,TE,TA,R,UP,VP
      INTEGER IPSIZE,NPAT,INTLOC
      LOGICAL LRET
C
      DIMENSION PSURF(IPSIZE),TUL(7),TE(3),TA(3),R(32)
C
C.... LOCAL VARIABLES
C
C     LSUSP   -  LIST OF SUSPECT PATCHES
C     NSUSP   -  NUMBER OF SUSPECT PATCHES
C
      INTEGER NSUSP,LSUSP,MXSUSP
      PARAMETER (MXSUSP=1000)
C
      DIMENSION LSUSP(MXSUSP)
C
      INCLUDE 'INTERF.INC'
      INCLUDE 'IBUGG.INC'
C
      CHARACTER MSG*120
C
      LRET=.FALSE.
      INTLOC=0
C
C.... DEBUG PRINT
C
      IF (IBUG.EQ.11) THEN
        CALL BAD(-1,0,' ',0)
        MSG='0ENTER INTCHK'
        CALL CPRINT(MSG)
        CALL BAD(3,1,'TE  ',TE)
        CALL BAD(-3,1,'TA  ',TA)
      ENDIF
C
C.... TEST REMOTE (NON-CURRENT) PATCHES FOR POSSIBLE INTERFERENCE
C
      CALL REMSCN(TE,TA,TUL,R,PSIDE,PTHICK,TOLIN,NPAT,LSUSP,NSUSP)
C
      IF (NSUSP.GT.0) THEN
C.... DEBUG PRINT
        IF (IBUG.EQ.11) THEN
          MSG=' POSSIBLE REMOTE INTERFERENCE'
          CALL CPRINT(MSG)
          N=-NSUSP
          CALL BAD(N,0,'SUSP',LSUSP)
        ENDIF
C
C.... CHECK OUT SUSPECT REMOTE PATCHES AND STORE ANY PENETRATION DATA
C     IN INTERFERENCE TABLE
C
        CALL REMINT(TE,TA,TUL,PSURF,IPSIZE,PSIDE,PTHICK,TOLIN,
     +              LSUSP,NSUSP)
      ENDIF
C
C.... CHECK CURRENT PATCH AND STORE ANY PENETRATION DATA
C     IN INTERFERENCE TABLE
C
      CALL CURINT(PSURF,IPSIZE,PSIDE,PTHICK,TOLIN,TUL,TE,TA,
     +            R,NPAT,UP,VP)
C
C.... HAS ANY INTERFERENCE BEEN DETECTED
C
      IF (NPINTR.GT.0) THEN
C
        LRET=.TRUE.
        INTLOC=1
        DO 100 I=1,NPINTR
C.... FIND AND SAVE LOCATION OF LARGEST PENETRATION
          IF (DINTR(I).GT.DINTR(INTLOC)) INTLOC=I
C
C.... DEBUG PRINT OF INTERFERENCE TABLE
C
          IF (IBUG.EQ.11) THEN
            CALL BAD(-1,0,' ',0)
            CALL BAD(1,0,'PAT ',PINTR(I))
            CALL BAD(1,1,'U   ',UINTR(I))
            CALL BAD(1,1,'V   ',VINTR(I))
            CALL BAD(1,1,'PEN ',DINTR(I))
            CALL BAD(-1,1,'ISEG',ISEG(I))
            CALL BAD(3,1,'TP  ',TPINTR(1,I))
            CALL BAD(3,1,'SP  ',SPINTR(1,I))
            CALL BAD(-3,1,'SN  ',SNINTR(1,I))
          ENDIF
 100    CONTINUE
C
      ENDIF
C
      END
**** SOURCE FILE : INTMSG.ORG   ***
*
      SUBROUTINE INTMSG(TE,TA,INTLOC)
C
C     PURPOSE: TO PRINT MESSAGE AND RELEVANT DATA IF INTERFERENCE
C              HAS BEEN DETECTED
C
C     ARGUMENTS:
C
C     TE      -  TOOL END COORDINATES
C     TA      -  TOOL AXIS VECTOR
C     INTLOC  -  LOCATION INTERFERENCE TABLE OF WORST PENETRATION
C
      DOUBLE PRECISION TE,TA
      INTEGER INTLOC
      CHARACTER MSG*120
C
      DIMENSION TE(3),TA(3)
C
      INCLUDE 'INTERF.INC'
C
C..... PRINT MESSAGE
C
      MSG='0INTERFERENCE DETECTED'
      CALL CPRINT(MSG)
      CALL CFORM(' TE =',MSG,1,5)
      CALL FCONV(TE(1),MSG,7,13,6)
      CALL FCONV(TE(2),MSG,21,13,6)
      CALL FCONV(TE(3),MSG,35,13,6)
      CALL CFORM('TA =',MSG,52,4)
      CALL FCONV(TA(1),MSG,57,13,6)
      CALL FCONV(TA(2),MSG,71,13,6)
      CALL FCONV(TA(3),MSG,85,13,6)
      CALL CPRINT(MSG)
C
      CALL CFORM(' WORST PENETRATION =',MSG,1,20)
      CALL FCONV(DINTR(INTLOC),MSG,22,13,6)
      CALL CFORM('AT PATCH =',MSG,37,10)
      CALL ICONV(PINTR(INTLOC),MSG,48,4)
      CALL CFORM('U =',MSG,53,3)
      CALL FCONV(UINTR(INTLOC),MSG,57,9,6)
      CALL CFORM('V =',MSG,67,3)
      CALL FCONV(VINTR(INTLOC),MSG,71,9,6)
      CALL CPRINT(MSG)
C
      END
**** SOURCE FILE : JMPLT2.ORG   ***
*
      SUBROUTINE JMPLT2(U,V,DU,DV,IEDGE)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C     LIMITS JUMP DU,DV TO KEEP U,V IN RANGE 0-1
C     DIRECTION OF LIMITED JUMP SAME AS ORIGINAL,UNLESS EITHER U OR V
C     ARE ALREADY AT LIMIT
C     U, V UNCHANGED
C     IEDGE = 0      NOT LIMITED
C             1      LIMITED
C
C
      INCLUDE 'ZNUMBR.INC'
C
      IEDGE=0
C
C     TEST DU, MODIFY DU,DV
C
      IF ( (ABS(DU-Z0).LE.Z1EM9).OR.
     +     (ABS(U-Z1).LE.Z1EM9 .AND. DU.GT.0).OR.
     +     (ABS(U-Z0).LE.Z1EM9 .AND. DU.LT.0) ) THEN
            IEDGE=1
            DU=Z0
      ELSE IF (U+DU.GT.Z1) THEN
            IEDGE=1
            C=Z1-U
            DV=DV*C/DU
            DU=C
      ELSE IF (U+DU.LT.Z0) THEN
            IEDGE=1
            DV=-DV*U/DU
            DU=-U
      END IF
C
C     TEST DV, MODIFY DU,DV
C
      IF ( (ABS(DV-Z0).LE.Z1EM9).OR.
     +     (ABS(V-Z1).LE.Z1EM9 .AND. DV.GT.0).OR.
     +     (ABS(V-Z0).LE.Z1EM9 .AND. DV.LT.0) ) THEN
            IEDGE=1
            DV=Z0
      ELSE IF (V+DV.GT.Z1) THEN
            IEDGE=1
            C=Z1-V
            DU=DU*C/DV
            DV=C
      ELSE IF (V+DV.LT.Z0) THEN
            IEDGE=1
            DU=-DU*V/DV
            DV=-V
      END IF
C
      END
**** SOURCE FILE : MIXAL.ORG   ***
*
      SUBROUTINE MIXAL(NPATCH,ISIZE,GEO,PSIDE,PTHICK,TUL,
     1      TOOLCE,TA,U,V,DUMIN,DVMIN,UPEN,VPEN,PPOINT,TPOINT,
     1      PNORM,PENMAX,IPEN,IFLAG,IEDGE,NITERA)
C
C     PURPOSE: INTERFERENCE SEARCH USING MIXED ALGORITHMS
C
C     METHOD:
C
C     FOR INITIAL ESTIMATE U, V ON PATCH NPATCH
C     EVALUATES SURFACE POINT R, DERIVATIVES, AND NORMAL AT U,V
C     CALCULATES POINT T ON TOOL WITH SAME NORMAL
C     CALCULATES ASSOCIATED POINT P ON TOOL, AND TOOL NORMAL PN AT P
C     ESTIMATES DU,DV TO GIVE A BETTER ESTIMATE OF PENETRATION POINT
C     USING VALUES COMPUTED BY BOTH ALGO1 (DU1,DV1) AND ALGO2 (DU2,DV2)
C     WHERE POSSIBLE OTHERWISE RESULTS OF EITHER ALGO1 OR ALGO2 ARE USED
C
C          DU1*DU2             DV1*DV2
C     DU = -------        DV = -------
C          DU1+DU2             DV1+DV2
C
C     ARGUMENTS:
C         ISIZE  - DIMENSION OF GEO
C         PSIDE  - TOOL SIDE OF SURFACE
C         PTHICK - THICK ALLOWANCE REQUIRED
C         TUL    - TOOL GEOMETRY
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION GEO(ISIZE)
      DIMENSION TOOLCE(3),TA(3),TUL(7)
      DIMENSION R(3),RU(3),RV(3),RUU(3),RUV(3),RVV(3)
      DIMENSION RN(3)
C
C     LOCAL VARIABLES :
C
      DIMENSION P(3),T(3)
C.... TOOL NORMAL AT P
      DIMENSION PN(3)
C.... WORKSPACE
      DIMENSION V1(3),V2(3),V3(3),V4(3)
      DIMENSION UVSTEP(3)
C
      LOGICAL LBASE,IOK
C
C.... STORAGE FOR DATA FROM LAST FOUR ITERATIONS IF CONVERGENCE
C     NOT ACHIEVED BY NITLIM
C
      DIMENSION SP(3,4),TP(3,4),TN(3,4),UP(4),VP(4),PEN(4)
      DIMENSION JPEN(4),IEDG(4)
C
C     RETURNS:-
C.... MAXIMUM PENETRATION FOUND, FOR UPEN, VPEN
      DIMENSION PPOINT(3)
C     MAY NOT BE FINAL POINT IN ITERATION, BUT IS FOR TRUE (EVALUATED, N
C     EXTRAPOLATED) SURFACE POINT
C.... CORRESPONDING TOOL POINT
      DIMENSION TPOINT(3)
C.... COMMON NORMAL AT PPOINT, TPOINT
      DIMENSION PNORM(3)
C
C     PENMAX      PENETRATION (+VE FOR HIT)
C
C     IFLAG = -1  NO CONVERGENCE
C              0  CONVERGENCE
C
C     IPEN  =  0  CONVERGENCE ON BOTTOM FLAT OF CRC
C              1  CONVERGENCE ON SPHERE FOR BE CUTTER, ON CR FOR CRC
C              2  CONVERGENCE ON SHANK
C
C     IEDGE =  0  LAST DU, DV NOT LIMITED
C              1  LAST DU,DV LIMITED
C
C
      INCLUDE 'IBUGG.INC'
C
      CHARACTER MSG*120
C
      PARAMETER (ETA6=1D-6,ETA8=1D-8,NITLIM=20)
      UCON=1
      VCON=1
      IALGO=0
      USTART=U
      VSTART=V
C
      IFLAG=0
C.... 1ST AND 2ND DERIVATIVES FROM EVALUATOR
      MODE=2
C.... ITERATION COUNT
      NITERA=0
      IEXT=0
      DU=0
      DV=0
      PENMAX=-1E6
C.... LOOP START
10    CONTINUE
      NITERA=NITERA+1
C
      IOLD=IALGO
      PREVDU=DU
      PREVDV=DV
      IALGO=0
      IOK=.TRUE.
C
      CALL EVALSS(NPATCH,U,V,ISIZE,GEO,MODE,
     1      R,RU,RV,RUU,RUV,RVV,RN,NORMOK)
C
      CALL PENCUT(R,RN,TOOLCE,TA,TUL,PSIDE,PTHICK,
     1      P,PN,PENMAX,IPEN)
C
C.... CALCULATE POINT T ON TOOL CORRESPONDING TO SURFACE NORMAL RN
C
      CALL CALCT(TUL,TOOLCE,TA,R,RN,PSIDE,T,LBASE)
      IF (LBASE) THEN
C.... T ON BASE FLAT OF TOOL - FORCE ALGORITHM 2 WHERE POSSIBLE
        IALGO=2
      ENDIF
C
C.... ESTIMATE DU AND DV USING ALGORITHM 1
C
      CALL ALGO1(T,R,RN,RU,RV,DU1,DV1)
C
C.... ESTIMATE DU AND DV USING ALGORITHM 2
C
      CALL ALGO2(PN,RU,RV,RUU,RUV,RVV,DU2,DV2,IOK)
      IF (.NOT.IOK) THEN
C.... UNABLE TO COMPUTE DU,DV USING ALGORITHM 2, FORCE USE OF DU1,DV1
C
        IALGO=1
      ENDIF
C
C.... SELECT DU,DV
C
      IF (IALGO.EQ.1) THEN
        DU=DU1
        DV=DV1
      ELSE IF (IALGO.EQ.2) THEN
        DU=DU2
        DV=DV2
      ELSE
C.... MIX ALGORITHMS
        IF ( (ABS(DU1+DU2).LE.ETA6).OR.(ABS(DU2).LE.ETA6) ) THEN
          DU=DU1
        ELSE IF (ABS(DU1).LE.ETA6) THEN
          DU=DU2
        ELSE
          DU=(DU1*DU2)/(DU1+DU2)
        ENDIF
        IF ( (ABS(DV1+DV2).LE.ETA6).OR.(ABS(DV2).LE.ETA6) ) THEN
          DV=DV1
        ELSE IF (ABS(DV1).LE.ETA6) THEN
          DV=DV2
        ELSE
          DV=(DV1*DV2)/(DV1+DV2)
        ENDIF
      ENDIF
C
C.... SAVE PREVIOUS SETTING OF IEDGE BEFORE CALLING JMPLT2
      IEDGP=IEDGE
C
      CALL JMPLT2(U,V,DU,DV,IEDGE)
C
C.... COMPUTE COSINE OF ANGLE BETWEEN TOOL AND SURFACE NORMALS
C
      CALL DOTF(CA,PN,RN)
      DIFCA=1.D0-PSIDE*CA
C
      IF ( (ABS(DU).LT.DUMIN .AND. ABS(DV).LT.DVMIN).OR.
     +      DIFCA.LT.ETA8 ) THEN
C.... CONVERGENCE
        CONTINUE
      ELSE
        IF (NITERA.GE.NITLIM) THEN
C.... NO CONVERGENCE AFTER NITLIM ITERATIONS
C     CARRY OUT THREE MORE ITERATIONS AND INTERROGATE PENETRATION VALUES
          IF (NITERA.LE.(NITLIM+3)) THEN
            IEXT=IEXT+1
C.... SAVE VALUES FOR SUBSEQUENT INTERROGATION
            DO 12 I=1,3
              SP(I,IEXT)=R(I)
              TP(I,IEXT)=P(I)
              TN(I,IEXT)=PN(I)
   12       CONTINUE
            UP(IEXT)=U
            VP(IEXT)=V
            PEN(IEXT)=PENMAX
            JPEN(IEXT)=IPEN
            IEDG(IEXT)=IEDGP
            IF (NITERA.LT.(NITLIM+3)) THEN
C.... TRY AGAIN
              U=U+DU
              V=V+DV
              GOTO 10
            ELSE
              IF (IBUG.EQ.11) THEN
C
C.... DEBUG PRINT
C
                CALL BAD(-1,0,' ',0)
                MSG=' NO CONVERGENCE IN MIXAL - LAST FOUR ITERATIONS'
                CALL CPRINT(MSG)
                DO 13 I=1,4
                  CALL BAD(1,0,'IEXT',I)
                  CALL BAD(1,1,'UP  ',UP(I))
                  CALL BAD(1,1,'VP  ',VP(I))
                  CALL BAD(1,1,'PEN ',PEN(I))
                  CALL BAD(1,0,'JPEN',JPEN(I))
                  CALL BAD(-1,0,'IEDG',IEDG(I))
                  CALL BAD(3,1,'SP  ',SP(1,I))
                  CALL BAD(3,1,'TP  ',TP(1,I))
                  CALL BAD(-3,1,'TN  ',TN(1,I))
   13           CONTINUE
              ENDIF
C.... THREE MORE ITERATIONS COMPLETED - INTERROGATE PENETRATIONS
              IT=1
              PENMAX=PEN(IT)
              DO 14 I=2,4
                IF (PEN(I).GT.PENMAX) THEN
                  PENMAX=PEN(I)
                  IT=I
                ENDIF
   14         CONTINUE
C.... RETURN WORST CASE (I.E. LARGEST PENETRATION)
              DO 16 I=1,3
                R(I)=SP(I,IT)
                P(I)=TP(I,IT)
                PN(I)=TN(I,IT)
   16         CONTINUE
              U=UP(IT)
              V=VP(IT)
              IPEN=JPEN(IT)
              IEDGE=IEDG(IT)
C
              IF (PENMAX.GT.0.D0) THEN
C.... PENETRATION WITHOUT CONVERGENCE
                IFLAG=-1
                MSG='0PENETRATION DETECTED WITHOUT CONVERGENCE'
                CALL CPRINT(MSG)
                CALL CFORM(' PENMAX =',MSG,1,9)
                CALL FCONV(PENMAX,MSG,11,13,6)
                CALL CPRINT(MSG)
              ELSE
C.... NO CONVERGENCE AND NO OBSERVED PENETRATION
                IFLAG=0
              ENDIF
            ENDIF
          ENDIF
        ELSE
C.... TRY AGAIN
          U=U+DU
          V=V+DV
          GOTO 10
        END IF
C
      ENDIF
C
C.... STORE SURFACE POINT, TOOL POINT AND NORMAL AT CONVERGENCE
C     OR FINAL ATTEMPT AT CONVERGENCE
      DO 20 I=1,3
        PPOINT(I)=R(I)
        TPOINT(I)=P(I)
        PNORM(I)=PN(I)
20    CONTINUE
C... STORE U,V OF SURFACE POINT
      UPEN=U
      VPEN=V
C
      END
**** SOURCE FILE : NORMA.ORG   ***
*
      SUBROUTINE NORMA(X,XNORM,XMOD)
C
C     GIVEN 3-D VECTOR X, CALCULATES NORMALISED (UNIT) VECTOR XNORM
C     AND MODULUS OF X AS XMOD
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(3),XNORM(3)
C
      CALL VECMOD(X,XMOD)
C
      IF (XMOD.LT.1E-10) THEN
         A=0
      ELSE
         A=1/XMOD
      END IF
C
      DO 10 K=1,3
        XNORM(K)=A*X(K)
10    CONTINUE
C
      END
**** SOURCE FILE : PENCUT.V01   ***
*
      SUBROUTINE PENCUT(R,RN,TOOLCE,TOOLAX,TUL,PSIDE,PTHICK,
     1      T,TN,PEN,ISEG)
C
C     CALCS. PENETRATION OF POINT R INTO CUTTER
C
C
C     T            NEAREST POINT ON TOOL TO R
C     TN           TOOL NORMAL AT T
C     ISEG  =  0   T ON:-   BOTTOM FLAT
C              1            BALL OR CORNER RADIUS
C              2            CYLINDRICAL SHANK
C     PEN      = PENETRATION: DISTANCE R-T (+VE FOR HIT)
C     PSIDE    = TOOL SIDE OF SURFACE
C     PTHICK   = PART SURFACE THICKNESS
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C.... SURFACE POINT AND NORMAL
      DIMENSION R(3),RN(3)
C.... TOOL AXIS
      DIMENSION TOOLAX(3)
C.... TOOLCENTRE
      DIMENSION TOOLCE(3)
C.... CUTTER GEOMETRY
      DIMENSION TUL(7)
C
C.... WORKSPACE
      DIMENSION V(3),V1(3),W(3)
C.... ASSOCIATED CORNER RADIUS CENTER
      DIMENSION XR(3)
C.... ASSOCIATED POINT ON TOOL AND TOOL NORMAL
      DIMENSION T(3)
      DIMENSION TN(3)
C
      DOUBLE PRECISION ETA6
      PARAMETER (ETA6=1.D-6)
C
C.... CALCULATE HEIGHT,A OF POINT R ABOVE TOOL CENTER
C
      DO 10 K=1,3
        V(K)=R(K)-TOOLCE(K)
10    CONTINUE
      CALL DOTF(A,V,TOOLAX)
C
C.... CALCULATE RADIAL DIRECTION,W AND DISTANCE,B FROM TOOL AXIS
C
      DO 20 K=1,3
        V1(K)=V(K)-A*TOOLAX(K)
20    CONTINUE
      CALL NORMA(V1,W,B)
C
C.... COMPUTE SURFACE SIDE OF TOOL
C
      IF (B.GT.TUL(2)) THEN
        S=-PSIDE
      ELSE
        CALL DOTF(S,RN,W)
        S=S*PSIDE
        S=SIGN(1.D0,S)
      ENDIF
C
C.... COMPUTATION OF ASSOCIATED POINT, TOOL NORMAL AND PENETRATION
C     WILL DEPEND ON RELATIVE LOCATION OF SURFACE POINT TO TOOL CENTER
C
      IF (A.GE.0.D0) THEN
C.... CYLINDER CASES
        IF (B.GE.TUL(3)) THEN
C.... 'OUTER' CYLINDER CASE
          ISEG=2
          PEN=TUL(2) + S*B + PTHICK
          DO 30 K=1,3
            TN(K)=S*W(K)
            T(K)=TOOLCE(K) - TUL(2)*TN(K) + A*TOOLAX(K)
30        CONTINUE
C
        ELSE
C.... 'INNER' CYLINDER CASE
          DO 40 K=1,3
            XR(K)=TOOLCE(K) - S*TUL(3)*W(K)
            V1(K)=R(K)-XR(K)
40        CONTINUE
          CALL NORMA(V1,TN,X)
          ISEG=1
          PEN=X + TUL(1) + PTHICK
          DO 50 K=1,3
            T(K)=XR(K) - TUL(1)*TN(K)
50        CONTINUE
        ENDIF
C
      ELSE
C.... CORNER RADIUS OR BASE
        IF (B.LE.TUL(3)) THEN
C     BOTTOM FLAT CASE
          ISEG=0
          PEN=TUL(4)+TUL(1) + A + PTHICK
          DO 60 K=1,3
            TN(K)=TOOLAX(K)
            T(K)=TOOLCE(K) + V1(K)-(TUL(4)+TUL(1))*TOOLAX(K)
60        CONTINUE
        ELSE
C     CORNER RADIUS
          ISEG=1
          DO 70 K=1,3
            XR(K)=TOOLCE(K)+TUL(3)*W(K)
70        CONTINUE
C
          DO 80 K=1,3
            V1(K)=XR(K)-R(K)
80        CONTINUE
          CALL NORMA(V1,TN,X)
C
          PEN=TUL(1) - X + PTHICK
C
          DO 90 K=1,3
            T(K)=XR(K)-TUL(1)*TN(K)
90        CONTINUE
C
        ENDIF
C
      ENDIF
C
      END
**** SOURCE FILE : REMINT.ORG   ***
*
      SUBROUTINE REMINT(TE,TA,TUL,PSURF,IPSIZE,PSIDE,PTHICK,TOLIN,
     +                  LSUSP,NSUSP)
C
C     PURPOSE : TO CHECK OUT SUSPECT REMOTE PATCHES AND IF ANY
C               PENETRATION DETECTED STORE THE WORST PENETRATION
C               FOR EACH PATCH IN THE INTERFERENCE TABLE
C
C     ARGUMENTS:
C
C     TE      -  TOOL END COORDINATES
C     TA      -  TOOL AXIS VECTOR
C     TUL     -  TOOL GEOMETRY
C     PSURF   -  CANONICAL FORM OF PART SURFACE (SSURF)
C     IPSIZE  -  SIZE OF CANONICAL FORM
C     PSIDE   -  1 OR -1 TO AJUST SURFACE NORMAL (RU X RV)
C     PTHICK  -  THICKNESS OFFSET FROM SURFACE
C     TOLIN   -  TOLERANCE (PS INTOL)
C     LSUSP   -  LIST OF SUSPECT PATCHES
C     NSUSP   -  NUMBER OF SUSPECT PATCHES
C
      DOUBLE PRECISION TE,TA,TUL,PSURF,PSIDE,PTHICK,TOLIN
      INTEGER IPSIZE
      LOGICAL LRET
C
      DIMENSION PSURF(IPSIZE),TUL(7),TE(3),TA(3)
C
      INTEGER NSUSP,LSUSP
C
      DIMENSION LSUSP(NSUSP)
C
      INCLUDE 'INIDAT.INC'
      INCLUDE 'INTERF.INC'
      INCLUDE 'IBUGG.INC'
C
C     LOCAL VARIABLES
C
      INTEGER NPAT,IPEN,IFLAG,IEDGE,NITERA
      DOUBLE PRECISION TOOLCE,UPEN,VPEN,PPOINT,TPOINT,PNORM,PENMAX
      DOUBLE PRECISION USTART,VSTART
      DIMENSION TOOLCE(3),PPOINT(3),TPOINT(3),PNORM(3)
C
C.... CALCULATE 'TOOL CENTER' FOR SIMPLE BE AND CRC CUTTERS
C
      DO 50 I=1,3
        TOOLCE(I)=TE(I)+(TUL(4)+TUL(1))*TA(I)
  50  CONTINUE
C
      NPINTR=0
C
C.... FOR EACH SUSPECT PATCH
C
      DO 400 I=1,NSUSP
         NPAT=LSUSP(I)
         IF (LNPINT.NE.0) THEN
C
C.... THERE WAS AT LEAST ONE INTERFERENCE DETECTED AT PREVIOUS TOOL
C     POSITION - CHECK IF ANY PENETRATION WITH THIS PATCH
C
           DO 100 J=1,LNPINT
             IF (NPAT.EQ.LPINTR(J)) THEN
C.... TAKE U,V OF PREVIOUS INTERSECTION AS START VALUES
               USTART=LUINTR(J)
               VSTART=LVINTR(J)
               GOTO 200
             ENDIF
  100      CONTINUE
         ENDIF
C.... OTHERWISE TAKE PARAMETRIC MID POINT AS START
         USTART=0.5
         VSTART=0.5
  200    CONTINUE
C
C.... SEARCH THIS PATCH FOR INTERFERENCE
C
         CALL MIXAL(NPAT,IPSIZE,PSURF,PSIDE,PTHICK,TUL,TOOLCE,TA,
     +              USTART,VSTART,DULIM(NPAT),DVLIM(NPAT),UPEN,VPEN,
     +              PPOINT,TPOINT,PNORM,PENMAX,IPEN,IFLAG,IEDGE,NITERA)
C
C.... DEBUG PRINT
C
         IF (IBUG.EQ.11) THEN
           CALL BAD(-1,0,' ',0)
           CALL BAD(1,0,'NPAT',NPAT)
           CALL BAD(1,0,'ITER',NITERA)
         ENDIF
C
         IF (IFLAG.EQ.0) THEN
           IF (PENMAX.GT.TOLIN) THEN
C.... STORE IN INTERFERENCE TABLE
             NPINTR=NPINTR+1
             DINTR(NPINTR)=PENMAX
             UINTR(NPINTR)=UPEN
             VINTR(NPINTR)=VPEN
             PINTR(NPINTR)=NPAT
             DO 300 J=1,3
               SPINTR(J,NPINTR)=PPOINT(J)
               TPINTR(J,NPINTR)=TPOINT(J)
               SNINTR(J,NPINTR)=PNORM(J)
 300         CONTINUE
             ISEG(NPINTR)=IPEN
C
           ENDIF
C
         ENDIF
 400  CONTINUE
C
      END
**** SOURCE FILE : REMSCN.ORG   ***
*
      SUBROUTINE REMSCN(TE,TA,TUL,R,PSIDE,PTHICK,TOLIN,NPAT,LSUSP,NSUSP)
C
C     PURPOSE: TO TEST ALL REMOTE (NON-CURRENT) PATCHES FOR POSSIBLE
C              INTEFERENCE
C
C     ARGUMENTS:
C
C     TE      -  TOOL END COORDINATES
C     TA      -  TOOL AXIS VECTOR
C     TUL     -  TOOL GEOMETRY
C     R       -  SURFACE CONTACT POINT AND DERIVATIVES
C     PSIDE   -  1 OR -1 TO AJUST SURFACE NORMAL (RU X RV)
C     PTHICK  -  THICKNESS OFFSET FROM SURFACE
C     TOLIN   -  TOLERANCE (PS INTOL)
C     NPAT    -  PATCH NUMBER FOR CONTACT POINT
C     LSUSP   -  SUSPECT PATCHES
C     NSUSP   -  NUMBER OF SUSPECT PATCHES
C
      DOUBLE PRECISION TE,TA,TUL,R,PSIDE,PTHICK,TOLIN
      INTEGER IPSIZE,NPAT
C
      DIMENSION TE(3),TA(3),TUL(7),R(32)
C
      INTEGER NSUSP,LSUSP,MXSUSP
      PARAMETER (MXSUSP=1000)
C
      DIMENSION LSUSP(MXSUSP)
C
      DOUBLE PRECISION BIG5,ETA6
C
      PARAMETER (BIG5=1D5,ETA6=1D-6)
C
C.... LOCAL VARIABLES
C
C     TCCENT  -  CENTRE OF TOOL CONTACT SPHERE
C     TCRAD   -  RADIUS OF TOOL CONTACT SPHERE
C     TLCENT  -  CENTRE OF LARGE SHALLOW SPHERE THROUGH TE, RADIUS BIG5
C     TCENT   -  CENTRE OF TIGHT SPHERE ENVELOPING TOOL, RADIUS=TUL(2)
C     BALL    -  CUTTER TYPE FLAG = .TRUE. IF CUTTER IS BALLENDED
C                                 = .FALSE. OTHERWISE
C     ISEG    -  INDICATES SEGMENT OF TOOL THAT PENETRATES
C                         = -1 IF NO PENETRATION
C                         =  0   BOTTOM FLAT
C                         =  1   CORNER RADIUS
C                         =  2   CYLINDER
C     V1      -  VECTOR FROM TOOL TIP TO CENTRE OF PATCH SPHERE
C     V2      -  V1 X TA
C     D       -  MINIMUM DISTANCE BETWEEN CENTRE OF PATCH SPHERE
C                AND TOOL AXIS
C     D2      -  SQUARE OF DISTANCE BETWEEN TWO SPHERE CENTRES
C     A       -  MINIMUM DISTANCE BETWEEN SPHERE CENTRES TO AVOID
C                INTERFERENCE
C
      DOUBLE PRECISION TCCENT,TCRAD,TLCENT,TCENT
      DIMENSION TCCENT(3),TLCENT(3),TCENT(3)
C
      LOGICAL BALL,INTF
C
      DOUBLE PRECISION V1,V2,D,D2,A
      DIMENSION V1(3),V2(3)
C
      INCLUDE 'INIDAT.INC'
C
C.... CALCULATE TOOL CONTACT SPHERE FOR CURRENT TOOL POSITION
C
      CALL TCSPHR(TE,TA,TUL,R,PSIDE,PTHICK,TCCENT,TCRAD)
C
C.... CALCULATE CENTRE OF LARGE SHALLOW SPHERE THROUGH TE
C     AND CENTRE OF TIGHT SPHERE ENVELOPING TOOL
C
      DO 10 I=1,3
        TLCENT(I) = TE(I) + BIG5*TA(I)
        TCENT(I)  = TE(I) + TUL(2)*TA(I)
  10  CONTINUE
C
C.... SET FLAG INDICATING CUTTER TYPE
C
      IF ( ABS(TUL(1)-TUL(2)).LE.ETA6 ) THEN
C.... BALL-ENDED
        BALL=.TRUE.
      ELSE
        BALL=.FALSE.
      ENDIF
C
C.... TEST NON-CURRENT PATCHES FOR POSSIBLE INTERFERENCE
C
      NSUSP=0
      DO 1000 K=1,NGP
        IF (K.NE.NPAT) THEN
C
C.... TEST FOR INTERFERENCE OF INFINITE TOOL CYLINDER WITH
C     MINIMUM PATCH SPHERE
C
          DO 100 I=1,3
            V1(I)=CXHULL(I,1,K)-TE(I)
  100     CONTINUE
          CALL CROSS(V1,TA,V2)
          CALL VECMOD(V2,D)
          IF (D.GE.(CXHULL(4,1,K)+PTHICK+TUL(2)-TOLIN)) GOTO 1000
C
C.... STILL POSSIBLE INTERFERENCE WITH THIS PATCH
C
C.... TEST FOR INTERFERENCE OF TIGHT TOOL SPHERE
C     WITH ALL PATCH CONVEX HULL SPHERES
C
          DO 200 J=1,NCXHUL(K)
            D2=DIST2(CXHULL(1,J,K),TCENT)
            A=CXHULL(4,J,K)+PTHICK+TUL(2)-TOLIN
            IF (D.GE.A*A) GOTO 1000
  200     CONTINUE
C
C.... STILL POSSIBLE INTERFERENCE WITH THIS PATCH
C
C.... TEST FOR INTERFERENCE OF SHALLOW TOOL SPHERE
C     WITH ALL PATCH CONVEX HULL SPHERES
C
          DO 300 J=1,NCXHUL(K)
            D2=DIST2(CXHULL(1,J,K),TLCENT)
            A=CXHULL(4,J,K)+PTHICK+BIG5-TOLIN
            IF (D.GE.A*A) GOTO 1000
  300     CONTINUE
C
C.... STILL POSSIBLE INTERFERENCE WITH THIS PATCH
C
C.... TEST FOR INTERFERENCE OF TOOL CONTACT SPHERE
C     WITH ALL PATCH CONVEX HULL SPHERES
C
          DO 400 J=1,NCXHUL(K)
            D2=DIST2(CXHULL(1,J,K),TCCENT)
            A=CXHULL(4,J,K)+PTHICK+TCRAD-TOLIN
            IF (D.GE.A*A) GOTO 1000
  400     CONTINUE
C
C.... STILL POSSIBLE INTERFERENCE WITH THIS PATCH
C
C.... TEST FOR INTERFERENCE OF ACTUAL TOOL
C     WITH ALL PATCH CONVEX HULL SPHERES
C     UNLESS CUTTER IS BALL-ENDED
C
          IF (.NOT.BALL) THEN
            DO 500 J=1,NCXHUL(K)
              CALL HULCUT (TE,TA,TUL,CXHULL(1,J,K),IRET)
              IF (IRET.LT.0) GOTO 1000
  500       CONTINUE
          ENDIF
C
C.... PATCH NOT CLEARED - ADD TO SUSPECT LIST
C
          NSUSP=NSUSP+1
          LSUSP(NSUSP)=K
        ENDIF
 1000 CONTINUE
C
      END
**** SOURCE FILE : RESET.ORG   ***
*
      SUBROUTINE RESET
C
C     PURPOSE: TO RESET INTERFERENCE TABLE FOR NEXT POINT
C
      INCLUDE 'INTERF.INC'
C
C
      DO 200 I=1,NPINTR
C
        LDINTR(I)=DINTR(I)
        LPINTR(I)=PINTR(I)
        LUINTR(I)=UINTR(I)
        LVINTR(I)=VINTR(I)
C
        DINTR(I)=0.D0
        PINTR(I)=0
        UINTR(I)=0.D0
        VINTR(I)=0.D0
C
        ISEG(I)=0
        DO 100 J=1,3
          TPINTR(J,I)=0.D0
          SPINTR(J,I)=0.D0
          SNINTR(J,I)=0.D0
  100   CONTINUE
C
  200 CONTINUE
C
      LNPINT=NPINTR
      NPINTR=0
C
      END
**** SOURCE FILE : RESTOR.ORG   ***
*
      SUBROUTINE RESTOR
C
C     PURPOSE: TO RESTORE INTERFERENCE TABLE FOR USE AS START VALUES
C              FOR NEXT INTEFERENCE CHECK AFTER AVOIDING INTERFERENCE
C
      INCLUDE 'INTERF.INC'
C
C
      DO 200 I=1,LNPINT
C
        DINTR(I)=LDINTR(I)
        PINTR(I)=LPINTR(I)
        UINTR(I)=LUINTR(I)
        VINTR(I)=LVINTR(I)
C
  200 CONTINUE
C
      NPINTR=LNPINT
C
      END
**** SOURCE FILE : SHELLA.ORG   ***
*
      SUBROUTINE SHELLA(P,PHULL,NP,N3,C,R)
C
C     CALCULATES CENTER C AND RADIUS R OF THE SMALLEST SPHERE WHICH
C     ENCLOSES THE FOUR POINTS P (THE CORNER POINTS OF PATCH).
C     THREE CASES, TESTED IN ORDER:-
C     1. ONE PAIR OF POINTS DEFINE DIAMETER OF SPHERE ENCLOSING ALL
C        FOUR CORNER POINTS. CHOOSE PAIR OF POINTS WITH GREATEST
C        SEPARATION, CHECK THAT OTHER TWO POINTS ARE INSIDE THIS SPHERE
C     2. THREE POINTS DEFINE EQUATOR OF SPHERE ENCLOSING ALL FOUR
C        POINTS. TRY ALL FOUR COMBINATIONS OF THREE POINTS, CHOOSE
C        SMALLEST SPHERE ENCLOSING FOUR POINTS
C     3. MINIMUM SPHERE DEFINED BY ALL FOUR POINTS
C
C     CHECKS THAT SPHERE FOUND ENCLOSES POLYGONAL CONVEX HALL PHULL
C     ADJUSTS RADIUS OF SPHERE BY UP TO 10% TO INCLUDE PHULL
C     IF NO SPHERE FOUND, THEN RETURN WITH R=0
C
C     ON ENTRY, NP, N3 ARE DIMENSIONS OF PHULL
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION P(4,3),C(3)
      DIMENSION PHULL(NP,N3)
C
C.... COEFF. MATRIX AND WORKSPACE FOR CASE 3
      DIMENSION H(3,3),WA(3,3)
C.... CENTRE OF TRIAL SPHERE
      DIMENSION CC(3)
      DIMENSION V1(3),V2(3)
      DIMENSION V3(3),V4(3)
      DIMENSION V5(3),VN(3)
C
C.... TEMP FOR TEST ONLY
      DIMENSION X1(3),X2(3)
C
C.... TOLERANCE
      TOL=1D-3
      HALF=1.D0
      HALF=HALF/2.D0
C
C     CASE 1.      TWO POINTS AS DIAMETER
      NCASE=1
C.... INITIALISE RADIUS SQUARED
      R2=0.D0
      DO 10 J=1,3
        DO 15 K=J+1,4
          RT2=0.D0
          DO 20 I=1,3
            A1=P(J,I)
            A2=P(K,I)
C.... CENTRE OF TRIAL SPHERE
            CC(I)=HALF*(A1+A2)
            A1=HALF*(A1-A2)
            RT2=RT2+A1*A1
20        CONTINUE
C
C     RT2 IS SQUARE OF RADIUS OF TRIAL SPHERE
C.... TEST TRIAL SPHERE
          IF (R2.EQ.0.D0 .OR. RT2.LE.R2) THEN
            DO 40 L=1,4
              IF (L.EQ.J .OR. L.EQ.K) GOTO 40
              A=0.D0
              DO 50 I=1,3
                A1=ABS(P(L,I)-CC(I))-TOL
                A=A+A1*A1
50            CONTINUE
C.... POINT OUTSIDE - REJECT
              IF (A.GT.RT2) GOTO 10
40          CONTINUE
C           SPHERE BEST SO FAR: STORE
            R2=RT2
            DO 60 I=1,3
              C(I)=CC(I)
60          CONTINUE
          END IF
15      CONTINUE
10    CONTINUE
C.... ENCLOSING SPHERE FOUND - EXIT
      IF (R2.GT.0.D0) GOTO 300
C
C     CASE 2.      THREE POINTS ON DIAMETRAL PLANE
C
      NCASE=2
      DO 180 J=1,2
        DO 170 K=J+1,3
C.... FOR POINTS J, K, AND L
          DO 160 L=K+1,4
C.... CALC. CIRCUMCIRCLE
            DO 110 I=1,3
              V1(I)=P(K,I)-P(J,I)
              V2(I)=P(L,I)-P(J,I)
              V5(I)=V2(I)-V1(I)
110         CONTINUE
C.... VN IS NORMAL TO PLANE OF THREE POINTS
            CALL CROSS(V1,V2,VN)
            CALL CROSS(V1,VN,V3)
            CALL CROSS(VN,V2,V4)
C
            CALL DEGSOL(V5,V3,V4,A,B,I)
C
            RT2=0.D0
            DO 120 I=1,3
              A1=HALF*(V1(I)+A*V3(I))
C.... CC IS CENTRE OF TRIAL SPHERE
              CC(I)=P(J,I)+A1
C.... RT2 IS SQUARE OF RADIUS OF TRIAL SPHERE
              RT2=RT2+A1*A1
120         CONTINUE
C
C.... TEST TRIAL SPHERE
            IF (R2.EQ.0.D0 .OR. RT2.LE.R2) THEN
              DO 130 KK=1,4
                A=0.D0
                DO 140 I=1,3
                  A1=ABS(P(KK,I)-CC(I))-TOL
                  A=A+A1*A1
140             CONTINUE
C.... POINT OUTSIDE - REJECT
                IF (A.GT.RT2) GOTO 160
130           CONTINUE
C           SPHERE BEST SO FAR: STORE
              R2=RT2
              DO 150 I=1,3
                C(I)=CC(I)
150           CONTINUE
            END IF
160       CONTINUE
170     CONTINUE
180   CONTINUE
C.... ENCLOSING SPHERE FOUND - EXIT
      IF (R2.GT.0.D0) GOTO 300
C
C     CASE 3.      FOUR POINT SPHERE
      NCASE=3
C.... CALC. COEFFS H(K,I), V1(I)
      A=0.D0
      DO 200 K=1,3
        A1=P(4,K)
        A=A+A1*A1
200   CONTINUE
      B=0.D0
      DO 210 K=1,3
        B=A
        DO 220 J=1,3
          A1=P(K,J)
          B=B-A1*A1
          H(K,J)=P(4,J)-P(K,J)
220     CONTINUE
        V1(K)=HALF*B
210   CONTINUE
C
      N3=3
      NN3=3
      NNN3=3
      K=0
C
C     SOLVE 3 X 3 EQNS. FOR CENTRE C
C
      CALL SOLVE3(H,V1,C,K)
C
C.... NO SOLUTION
      IF (K.EQ.1) GOTO 300
      R2=0.D0
C.... NOW CALC. RADIUS
      DO 230 K=1,3
        A1=P(1,K)-C(K)
C.... R2 IS RADIUS SQUARED
        R2=R2+A1*A1
230   CONTINUE
C
C.... R IS RADIUS
300   R=SQRT(R2)
C     CHECK AGAINST CONVEX POLYGON
C
      AMAX=0.D0
      DO 310 K=1,NP
        A=0
        DO 320 I=1,3
          A1=PHULL(K,I)-C(I)
          A=A+A1*A1
320     CONTINUE
        IF (A.GT.R2 .AND. A.GT.AMAX) AMAX=A
310   CONTINUE
C.... ACCEPT RADIUS
      IF (AMAX.EQ.0.D0) GOTO 330
      A1=SQRT(AMAX)
C     A1 IS MAXIMUM DISTANCE OF HULL POINT FROM CENTRE
C     IF A1 SUCH THAT R < A1 < 1.1*R, THEN USE A1 AS RADIUS
      IF (A1.GT.R .AND. A1.LE.(1.1D0*R)) THEN
            R=A1
C.... NO SPHERE FOUND
      ELSE
            R=0.D0
      END IF
330   CONTINUE
C
      END
**** SOURCE FILE : SHELLB.ORG   ***
*
      SUBROUTINE SHELLB(NN,N3,N4,RCORN1,RCORN2,CV1,CV2,RNET,
     1      SCENT,SRAD,NFLAGS)
C
C     CALCULATES THE FOUR "EDGE" SHELLS FOR A PATCH SPECIFIED BY RNET, E
C     ON CALL:-
C     N3=3
C     N4=4
C     NN      FIRST DIMENSION OF RNET ARRAY
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
C.... CORNER POINTS
      DIMENSION RCORN1(N4,N3),RCORN2(N4,N3)
C.... CORNER VECTORS
      DIMENSION CV1(N4,N3),CV2(N4,N3)
C.... NET OF POINTS
      DIMENSION RNET(NN,N3)
C
      DIMENSION V1(3),V2(3)
C
      DIMENSION D(3),E(3),F(3),AB(3),CD(3),DE(3),EA(3),EB(3),EF(3)
C
C.... SPHERE CENTRES
      DIMENSION SCENT(N4,N3)
C.... SPHERE RADII
      DIMENSION SRAD(N4)
C.... SET TO 1 IF SPHERE CALCULATED, ELSE 0
      DIMENSION NFLAGS(N4)
C
      PARAMETER (TOL=1D-3,ETA6=1D-6,BIG8=1D8,RMAX=1D5)
C
      JEDGE=2
C
C.... MAIN LOOP
      DO 10 K=1,4
        IF (K.EQ.3) JEDGE=-JEDGE
        NFLAGS(K)=0
        JJ=K+JEDGE
C
C     CONSTRUCT VECTORS:-
        DO 20 I=1,3
          E(I)=(RCORN1(K,I)+RCORN2(K,I))/FLOAT(2)
          AB(I)=RCORN2(K,I)-RCORN1(K,I)
          EA(I)=RCORN1(K,I)-E(I)
          D(I)=RCORN1(JJ,I)
          CD(I)=D(I)-RCORN2(JJ,I)
          DE(I)=E(I)-D(I)
20      CONTINUE
        CALL VECMOD(AB,ABMOD)
        IF (ABMOD.LT.TOL) THEN
C.... PATCH EDGE DEGENERATED TO NEAR POINT
            SRAD(K)=0.D0
C                         NO SHELL CALCULATED
            GOTO 10
        END IF
C
        CALL DOTF(A1,DE,AB)
        CALL DOTF(A2,AB,CD)
        AL=A1/A2
        DO 30 I=1,3
          V1(I)=CV1(K,I)
          V2(I)=CV2(K,I)
          F(I)=D(I)+AL*CD(I)
          EF(I)=F(I)-E(I)
30      CONTINUE
C
        CALL DOTF(A1,EA,V1)
        CALL DOTF(A2,EF,V1)
        IF (ABS(A2).LT.ETA6) THEN
            AM1=BIG8
        ELSE
            AM1=A1/A2
        END IF
        CALL DOTF(A1,EB,V2)
        CALL DOTF(A2,EF,V2)
        IF (ABS(A2).LT.ETA6) THEN
            AM2=BIG8
        ELSE
            AM2=A1/A2
        END IF
        IF (AM1.GT.0.D0 .AND. AM2.GT.0.D0 .AND. AM2.LT.AM1) THEN
            AM1=AM2
        ELSE IF (AM2.GT.0.D0 .AND. AM1.LE.0.D0) THEN
            AM1=AM2
        END IF
C
        CALL VECMOD(EF,EFMOD)
C
        A2=ABMOD*ABMOD/4.D0
        IF (AM1.LE.0.D0) THEN
            AR=RMAX
        ELSE
            A1=AM1*EFMOD
            AR=SQRT(A1*A1+A2)
        END IF
C
        IF (AR.GE.RMAX) THEN
            AR=RMAX
            AM1=SQRT(AR*AR-A2)/EFMOD
        END IF
C
C
        SRAD(K)=AR
        DO 60 I=1,3
          SCENT(K,I)=E(I)+AM1*EF(I)
60      CONTINUE
C
        NCOUNT=0
100     CONTINUE
        NCOUNT=NCOUNT+1
C     SPHERE ENCLOSES V1 AND V2. NOW TEST THAT RNET POINTS ARE INCLUDED
        AMAX=0
        DO 110 J=1,25
          A1=0
          DO 120 I=1,3
            A2=RNET(J,I)-SCENT(K,I)
            A1=A1+A2*A2
120       CONTINUE
          IF (A1.GT.AMAX) AMAX=A1
110     CONTINUE
C.... A IS DIST. FROM CENTRE TO FURTHEST POINT OF RNET
        A=SQRT(AMAX)
        A1=A-AR
C.... HULL POINTS INSIDE SPHERE
        IF (A1.LE.TOL) THEN
C.... CONVEX HULL FOUND - SET FLAG
            NFLAGS(K)=1
            GOTO 10
        END IF
        IF (A1.LE.(1.1*ABMOD)) THEN
C.... INCREASE RADIUS
            AR=A
            SRAD(K)=A
C.... TRY FOR FIT
            IF (NCOUNT.LE.2) GOTO 100
        ELSE
            SRAD(K)=0
        END IF
C
10    CONTINUE
C
      END
**** SOURCE FILE : SOLVE3.ORG   ***
*
      SUBROUTINE SOLVE3(A,B,X,IFLAG)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C     GIVEN A, B, SOLVES AX=B
      DIMENSION A(3,3),B(3),X(3)
C
C
      D=A(1,1)*(A(2,2)*A(3,3)-A(2,3)*A(3,2))
     1       -A(1,2)*(A(2,1)*A(3,3)-A(2,3)*A(3,1))
     1       +A(1,3)*(A(2,1)*A(3,2)-A(2,2)*A(3,1))
      IF (ABS(D).LT.1D-8) THEN
            IFLAG=1
            GOTO 100
      END IF
C
      IFLAG=0
      D=1.D0/D
C
      E=B(1)*(A(2,2)*A(3,3)-A(2,3)*A(3,2))
     1       -A(1,2)*(B(2)*A(3,3)-A(2,3)*B(3))
     1       +A(1,3)*(B(2)*A(3,2)-A(2,2)*B(3))
      X(1)=E*D
C
      E=A(1,1)*(B(2)*A(3,3)-A(2,3)*B(3))
     1       -B(1)*(A(2,1)*A(3,3)-A(2,3)*A(3,1))
     1       +A(1,3)*(A(2,1)*B(3)-B(2)*A(3,1))
      X(2)=E*D
C
      E=A(1,1)*(A(2,2)*B(3)-B(2)*A(3,2))
     1       -A(1,2)*(A(2,1)*B(3)-B(2)*A(3,1))
     1       +B(1)*(A(2,1)*A(3,2)-A(2,2)*A(3,1))
      X(3)=E*D
C
100   CONTINUE
C
      END
**** SOURCE FILE : TCSPHR.V01   ***
*
      SUBROUTINE TCSPHR(TE,TA,TUL,R,PSIDE,PTHICK,TCCENT,TCRAD)
C
C     PURPOSE: COMPUTE THE CENTRE AND RADIUS OF THE TOOL CONTACT SPHERE
C
C
C     ARGUMENTS:
C
C     TE      -  TOOL END COORDINATES
C     TA      -  TOOL AXIS VECTOR
C     TUL     -  TOOL GEOMETRY
C     R       -  SURFACE CONTACT POINT AND DERIVATIVES
C     PSIDE   -  1 OR -1 TO AJUST SURFACE NORMAL (RU X RV)
C     PTHICK  -  THICKNESS OFFSET FROM SURFACE
C     TCCENT  -  CENTRE OF TOOL CONTACT SPHERE
C     TCRAD   -  RADIUS OF TOOL CONTACT SPHERE
C
      DOUBLE PRECISION TE,TA,TUL,R,PSIDE,PTHICK,TCCENT,TCRAD
C
      DIMENSION TE(3),TA(3),TUL(7),R(32),TCCENT(3)
C
      DOUBLE PRECISION BIG5,ETA6,ONE
C
      PARAMETER (BIG5=1D5,ETA6=1D-6,ONE=1D0)
C
C.... LOCAL VARIABLES
C
C     COSA    -  COSINE OF ANGLE BETWEEN SURFACE NORMAL AND TOOL AXIS
C     SINA    -  SINE             (DITTO)
C     OFFSET  -  POSITION OF CENTRE ALONG TA FROM TE
C
      DOUBLE PRECISION COSA,SINA,OFFSET
C
      CALL DOTF(COSA,R(29),TA)
C
      IF (ABS(ONE-COSA).LE.ETA6) THEN
C
C.... SN PARALLEL TO TA
C
        DO 10 I=1,3
          TCCENT(I)=TE(I)+BIG5*TA(I)
   10   CONTINUE
        TCRAD=BIG5
C
      ELSE
        SINA=SQRT(1-COSA*COSA)
C
C.... RADIUS = E/SINA + R
C
        TCRAD=TUL(3)/SINA + TUL(1)
C
C.... POSITION OF CENTRE ALONG TA FROM TE
C
C            = F + (TCRAD-R)*COSA
C
        OFFSET=TUL(4)+TUL(1) + (TCRAD-TUL(1))*COSA
        DO 20 I=1,3
          TCCENT(I)=TE(I) + OFFSET*TA(I)
   20   CONTINUE
C
      ENDIF
C
      END
**** SOURCE FILE : TECALC.ORG   ***
*
      SUBROUTINE TECALC(R,TA,U,PSIDE,PTHICK,TOLCOM,TUL,TE)
C
C     PURPOSE: COMPUTE TE GIVEN CURRENT CONTACT POINT R AND TA
C
C
C     ARGUMENTS:
C      R      - INPUT SURFACE CONTACT POINT/DERIVATIVES(SEE CNSURF)
C      TA     - INPUT TOOL AXIS
C      U      - LOCAL FORWARD DIRECTION
C      PSIDE  - INPUT 1 OR -1, DEFINES CUTTER SIDE OF SURFACE
C      PTHICK - PART GEOMETRY THICK SPECIFICATION
C      TOLCOM - TOLERANCE BAND COMPENSATION
C      TUL    - CUTTER PARAMETERS
C      TE     - OUTPUT TOOL END
C
      DOUBLE PRECISION R,TA,U,PSIDE,PTHICK,TOLCOM,TUL,TE
      DIMENSION R(32),TA(3),U(3),TUL(7),TE(3)
C
C     GLOBAL VARIABLES:
C
      INCLUDE 'TLLDAT.INC'
      INCLUDE 'DARRAY.INC'
C
C     LOCAL VARIABLES:
C
C       OFFSET - TOOL OFFSET FROM SURFACE
C       VEC    - TOOL RADIAL AXIS
C       VLEN2  - LENGTH OF VEC SQUARED
C       V,VN   - WORK VECTORS
C       CANG   - COS(ANGLE BETWEEN TOOL NORMAL AND TOOL RADIAL AXES)
C       SANG   - SINE OF SAME ANGLE
C       TANG   - TANGENT OF SAME ANGLE
C       BADMSG - DIAGNOSTIC MESSAGE
C
      DOUBLE PRECISION OFFSET,VEC,VLEN2,V,VN,CANG,SANG,TANG
      DIMENSION VEC(3),V(3),VN(3)
      CHARACTER BADMSG*20
C
C     GENERAL CASE,TOOL OFFSET FROM SURFACE
      OFFSET=PSIDE*(PTHICK+TOLCOM)
C     COMPUTE TOOL RADIAL AXIS
      CALL CROSS(TA,R(29),VEC)
C...IF TA IS PARALLEL TO SN USE U (FWD) TO DETERMINE TOOL RADIAL AXIS
      VLEN2=VEC(1)*VEC(1)+VEC(2)*VEC(2)+VEC(3)*VEC(3)
      IF (VLEN2.LT.1.0D-12) THEN
        CALL CROSSV(TA,U,VEC)
      ELSE
        DO 20 I=1,3
          VEC(I)=PSIDE*VEC(I)
   20   CONTINUE
      ENDIF
      CALL CROSSV(VEC,TA,VEC)
C...COMPUTE TANGENT OF ANGLE BETWEEN TOOL NORMAL AND TOOL RADIAL AXIS
      CALL DOTV(CANG,VEC,R(29))
      CALL CROSS(VEC,R(29),V)
      CALL VNORM(V,VN)
      CALL DOTV(SANG,V,VN)
      IF (ABS(CANG).GT.1.D-15) THEN
        TANG=SANG/CANG
      ELSE
        TANG=SIGN(1.D0,SANG)*1.D15
      ENDIF
C...IS ANGLE VALID FOR SEGMENTS 3,4,5 OF CUTTER
C   I.E. CORNER RADIUS AND ADJACENT POINT CIRCLE SEGMENTS
      DO 30 I=3,5
        IF ((TCONT(I).GT.0).AND.
     1     ((TANG-TANLO(I))*(TANG-TANHI(I)).LE.0.D0)) THEN
C...COMPUTE TOOL END COORDS
          DO 25 K=1,3
            TE(K)=R(K)+(OFFSET+PSIDE*CORRAD(I))*R(28+K)
     1           +RI(I)*VEC(K)-TLHITE(I)*TA(K)
   25     CONTINUE
          GOTO 999
        ENDIF
   30 CONTINUE
C...NO - IS ANGLE VALID FOR TOOL TIP
      IF ( (TCONT(1).GT.0).AND.
     1   ( (TANG-TANLO(1))*(TANG-TANHI(1)).LE.0.D0) ) THEN
C...YES - OUTPUT WARNING
        CALL CFORM(' *** WARNING - CUTTING ON TOOL TIP ***',DARRAY,1,38)
        CALL CPRINT(DARRAY)
        DO 40 K=1,3
          TE(K)=R(K)+OFFSET*R(28+K)
   40   CONTINUE
C...NO - IS ANGLE VALID FOR TOP OF UPPER LINE SEGMENT
      ELSE IF ( (TCONT(7).GT.0).AND.
     1        ( (TANG-TANLO(7))*(TANG-TANHI(7)).LE.0.D0) ) THEN
C...YES - OUTPUT WARNING
        CALL CFORM(' *** WARNING - CUTTING ON POINT CIRCLE AT TOP OF UPP
     1ER LINE SEGMENT ***',DARRAY,1,71)
        CALL CPRINT(DARRAY)
        DO 50 K=1,3
          TE(K)=R(K)+OFFSET*R(28+K)+RI(7)*VEC(K)-TLHITE(7)*TA(K)
   50   CONTINUE
C...NO - INVALID ANGLE FOR THIS CUTTER
      ELSE
        CALL CFORM(' *** WARNING - UNABLE TO POSITION 7 SEGMENT CUTTER A
     1T CURRENT SURFACE POINT - SPHERICAL CUTTER ASSUMED',DARRAY,1,101)
        CALL CPRINT(DARRAY)
C
      ENDIF
999   CONTINUE
      IF(IBUG.NE.11) GO TO 1999
      CALL BAD(-1,0,' ',0)
      BADMSG=' AFTER TECALC'
      CALL CPRINT(BADMSG)
      CALL BAD(-1,1,'TCOM',TOLCOM)
      CALL BAD(3,1,'TE  ',TE)
      CALL BAD(-3,1,'TA  ',TA)
      CALL BAD(-3,1,'TBEF',TBEF)
 1999 CONTINUE
C
      END
**** SOURCE FILE : TXHULL.V01   ***
*
      SUBROUTINE TXHULL(RC,RCNORM,R1,R2,R3,TLEN,TOOLAX,TOOLTP,
     1      TOOLCE,CT,HRAD,HCENT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION RC(3),RCNORM(3)
      DIMENSION TOOLAX(3),TOOLCE(3),TOOLTP(3)
C.... HULL CENTRE
      DIMENSION HCENT(3)
      DIMENSION W1(3),W2(3)
C
      PARAMETER (AMEG5=1D5,ETA6=1D-6,HALF=0.5)
C
C     CALCULATE RADIUS OF MINIMUM ENCLOSING SPHERE
      RR1=R1*R1
      DO 10 I=1,3
        W1(I)=TOOLCE(I)-RC(I)
10    CONTINUE
      CALL DOTF(B,W1,TOOLAX)
      CALL VECMOD(W1,C)
      RA=SQRT(C*C-B*B)
      IF ((RA+ETA6).GE.R1 .OR. RA.LE.R3) THEN
        HRAD=AMEG5
      ELSE
C
C     CALC RADIUS OF SPHERE ON R AND ON POINT ON TOP OF TOOL OPPOSITE TO
        A=RA+R1
        B=TLEN-R2+B
C.... HRAD IS RADIUS
        HRAD=.5*SQRT(A*A+B*B)
        IF (HRAD.GT.AMEG5) THEN
          HRAD=AMEG5
        ELSE
C
C     CALC. MAXIMUM RADIUS OF CURVATURE OF TOOL AT R AS TR
          CALL DOTF(A,RCNORM,TOOLAX)
          IF ( A.LT.ETA6 .OR.( (ABS(A)-1.D0).LT.ETA6) ) THEN
            HRAD=AMEG5
          ELSE
            TR=R2+R3/SQRT(1-A*A)
            IF (TR.GT.AMEG5) THEN
              HRAD=AMEG5
            ELSE
              HRAD=MAX(HRAD,TR)
            ENDIF
          ENDIF
        ENDIF
      ENDIF
C.... CT IS CURVATURE OF ENCLOSING SPHERE ON R
      CT=1/HRAD
C
      DO 40 I=1,3
        HCENT(I)=RC(I)+HRAD*RCNORM(I)
40    CONTINUE
C
      END
**** SOURCE FILE : VECMOD.ORG   ***
*
      SUBROUTINE VECMOD(X,XMOD)
C
C     GIVEN 3-D VECTOR X, CALCULATES MODULUS XMOD
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION X(3)
C
      XMOD=SQRT(X(1)*X(1)+X(2)*X(2)+X(3)*X(3))
C
      END
