cat afile92  02.5
      FL(2,NX)=UNX                                                      00004600
      FL(3,NX)=ONE/A                                                    00004700
      FL(4,NX)=-B/(A**3)                                                00004800
C                                                                       00004900
C---     CALCULATE THE MID PT BETWEEN UNOW AND UNX AND CHECK FOR        00005000
C---     TOLERANCE BETWEEN TOTAL ARC AND SUM OF SUBARCS.                00005100
  100 CONTINUE                                                          00005200
      UCHECK=(UNOW+UNX)*HALF                                            00005300
      CALL CNCURV(UCHECK,C,CV,1)                                        00005400
C---     DETERMINE RATES OF CHANGE AT THIS POINT                        00005500
      A=DSQRT(CV(5)**2+CV(6)**2+CV(7)**2)+VSMAL                         00005600
      B=(CV(5)*CV(9)+CV(6)*CV(10)+CV(7)*CV(11))/A                       00005700
C---     LOAD THE KEY VALUES                                            00005800
      FL(2,NX+1)=UCHECK                                                 00005900
      FL(3,NX+1)=ONE/A                                                  00006000
      FL(4,NX+1)=-B/(A**3)                                              00006100
C---     COMPARE UNOW,UNX  UNOW,UCHECK  UCHECK,UNX                      00006200
      DO 110 I=1,3                                                      00006300
      IA=NOW                                                            00006400
      IB=NX                                                             00006500
      IF(I.EQ.3) IA=IA+2                                                00006600
      IF(I.EQ.2) IB=IB+1                                                00006700
C---     COMPUTE ARC LENGTH BY SPECIAL SPLINE FUNCTION FORMULA.         00006800
      SARC(I)=3.*(FL(2,IB)-FL(2,IA))*(FL(4,IB)+FL(4,IA))                00006900
      A=FL(4,IB)*(2.*FL(3,IA)+FL(3,IB))+FL(4,IA)*(FL(3,IA)+2.*FL(3,IB)) 00007000
      IF(DABS(A).LT.VSMAL) GOTO 109                                     00007100
      SARC(I)=SARC(I)/A                                                 00007200
      GOTO 110                                                          00007250
C---     SPECIAL PATH WHEN SECOND DERIVATIVE IS ZERO                    00007300
  109 CONTINUE                                                          00007350
      D1=ZERO                                                           00007400
      IF(DABS(FL(3,IA)).GT.VSMAL*SMAL) D1=ONE/FL(3,IA)                  00007450
      IF(DABS(FL(3,IB)).GT.VSMAL*SMAL) D1=D1+ONE/FL(3,IB)               00007500
      IRR=23                                                            00007530
      IF(D1.EQ.ZERO) GOTO 999                                           00007550
      SARC(I)=(FL(2,IB)-FL(2,IA))*D1/2.D0                               00007570
  110 CONTINUE                                                          00007600
C                                                                       00007700
      ERR=(SARC(1)-SARC(2)-SARC(3))/(SARC(1)+VSMAL)                     00007800
      IF(IBUG.NE.11) GO TO 23                                           00007900
      CALL BAD(-1,0,' ',0)                                              00008000
      NX1=NX+1                                                          00008050
      DO 24 III=NOW,NX1                                                 00008100
      CALL BAD(-4,1,'FL  ',FL(1,III))                                   00008200
   24 CONTINUE                                                          00008300
      CALL BAD(3,1,'SARC',SARC)                                         00008400
      CALL BAD(-1,1,'ERR ',ERR)                                         00008500
   23 CONTINUE                                                          00008600
      IF(DABS(ERR).GT.TOLR) GO TO 150                                   00008700
C---     ACCURACY IS OKAY, NOW CHECK IF SPLINE IS INCREASING            00008800
      IF(FL(2,NOW).GE.FL(2,NOW+1)) GO TO 150                            00008900
      IF(FL(3,NOW).LE.ZERO) GO TO 150                                   00009000
      IF(FL(3,NX).LE.ZERO) GO TO 150                                    00009100
C---     NOW CHECK FOR A MAX OR MIN WITHIN THE INTERVAL                 00009200
      A=FL(3,NOW)*SARC(1)                                               00009300
      B=FL(3,NX)*SARC(1)                                                00009400
      AA=3.D0*(B+A-2.D0*(FL(2,NX)-FL(2,NOW)))                           00009500
      IF(DABS(AA).LT.VSMAL) AA=VSMAL                                    00009550
      BB=2.*(3.*(FL(2,NX)-FL(2,NOW))-2.*A-B)                            00009600
      CC=A                                                              00009700
      DISC=BB*BB-4.*AA*CC                                               00009800
      IF(DISC.LT.ZERO) GO TO 140                                        00009900
      DISC=DSQRT(DISC)                                                  00010000
      R=(-BB-DISC)/(2.*AA)                                              00010100
      IF(DABS(R-HALF).LT.HALF) GO TO 150                                00010200
      R=(-BB+DISC)/(2.*AA)                                              00010300
      IF(DABS(R-HALF).LT.HALF) GO TO 150                                00010400
  140 CONTINUE                                                          00010500
C---     FUNCTION MEETS ALL CONDITIONS, NOW CONSOLIDATE AND TRY         00010600
C---     TO FIT NEXT SUBARC.                                            00010700
      FL(1,NX)=SARC(1)+ARCLEN                                           00010800
      ARCLEN=ARCLEN+SARC(1)                                             00010900
C---     UPDATE POINTER AND TRY TO FIT NEXT SUBARC                      00011000
      NOW=NOW+1                                                         00011100
      UDEL=UNX-UNOW                                                     00011200
      UNOW=UNX                                                          00011300
      UNX=UNOW+4.0*UDEL                                                 00011400
      UNX=DMIN1(ONE,UNX)                                                00011500
      IF(UNOW.GE.ONE-VSMAL) GO TO 500                                   00011600
      IRR=22                                                            00011610
      IF(NOW.GT.NUMAX-2) GOTO 999                                       00011620
      GO TO 50                                                          00011700
C---     CUT SUBARC IN HALF AND TRY TO FIT AGAIN                        00011800
  150 CONTINUE                                                          00011900
      UNX=UCHECK                                                        00012000
      ICHK=ICHK+1                                                       00012100
      IRR=1                                                             00012200
      IF(ICHK.GT.10) GO TO 999                                          00012300
      GO TO 60                                                          00012400
C---     PROPER END OF PROCESSING                                       00012500
  500 CONTINUE                                                          00012600
      IRR=0                                                             00012700
  999 CONTINUE                                                          00012800
      NUM=NOW                                                           00012900
      RETURN                                                            00013000
      END                                                               00013100
**** SOURCE FILE : M0000600.V02   ***
*
C                                                                       00000010
      SUBROUTINE BEZIER(BIN,OUT,IRR)                                    00000020
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000040
      DIMENSION BIN(3,4,4),OUT(49),BOUT(3,4,4)                          00000060
      IRR=0                                                             00000080
      DATA SMAL/1.0D-10/                                                00000100
      DATA ZERO/0.0D0/                                                  00000102
      ICASE=1                                                           00000120
C------ BEZIER INPUT IS FOUR PARALLEL STRINGS OF FOUR POINTS EACH       00000140
C-----EACH OF THESE FOUR POINT STRING DEFINES A CHARACTERISTIC POLYGON  00000160
C------ UNDER CERTAIN CONDITIONS, THIS INPUT WILL DEFAULT TO A ZERO     00000180
C------ TWIST PATCH (ICASE=2) OR A RULED PATCH(ICASE=3)                 00000200
      ICASE=1                                                           00000220
C------ FIRST CHECK INPUT TO DETECT A ZERO TWIST DEFAULT                00000240
      DO 10 IA=2,3                                                      00000260
      DO 10 IB=2,3                                                      00000280
      DO 10 JA=2,3                                                      00000300
      DO 10 JB=2,3                                                      00000320
      D=0.                                                              00000340
      DO 20 K=1,3                                                       00000360
   20 D=D+(BIN(K,IA,IB)-BIN(K,JA,JB))**2                                00000380
C------ IF THE FOUR INTERIOR POINTS ARE IDENTICAL, SETUP ZERO TWISTS    00000400
      IF(D.GT.SMAL) GO TO 100                                           00000420
   10 CONTINUE                                                          00000440
      ICASE=2                                                           00000460
C------CHECK FURTHER FOR A RULED CONDITION                              00000480
      DO 30 IA=1,4,3                                                    00000500
      DO 30 IB=2,3                                                      00000520
      DO 30 JA=1,4,3                                                    00000540
      DO 30 JB=2,3                                                      00000560
      D=0.0                                                             00000580
      DO 40 K=1,3                                                       00000600
   40 D=D+(BIN(K,IA,IB)-BIN(K,JA,JB))**2                                00000620
      IF(D.GT.SMAL) GO TO 100                                           00000640
   30 CONTINUE                                                          00000660
C------ 5TH THRY 12TH POINTS ARE IDENTICAL HENCE PATCG IS RULED         00000680
      ICASE=3                                                           00000700
  100 CONTINUE                                                          00000720
C------ NOW CREATE COONS CANONICAL FORM FOR PATCH                       00000740
      DO 120 I=1,3                                                      00000760
C------ FIRST LOAD CORNER POINTS INTO COONS MATRIX (BOUT)               00000780
      BOUT(I,1,1)=BIN(I,1,1)                                            00000800
      BOUT(I,2,1)=BIN(I,4,1)                                            00000820
      BOUT(I,1,2)=BIN(I,1,4)                                            00000840
      BOUT(I,2,2)=BIN(I,4,4)                                            00000860
C------ NOW LOAD FIRST DIRECTION (FD) TANGENTS INTO BOUT                00000880
      BOUT(I,3,1)=3.0*(BIN(I,2,1)-BIN(I,1,1))                           00000900
      BOUT(I,4,1)=3.0*(BIN(I,4,1)-BIN(I,3,1))                           00000920
      BOUT(I,3,2)=3.0*(BIN(I,2,4)-BIN(I,1,4))                           00000940
      BOUT(I,4,2)=3.0*(BIN(I,4,4)-BIN(I,3,4))                           00000960
      IF(ICASE.EQ.3) GO TO 200                                          00000980
C------ SETUP SECOND DIRECTION TANGENTS (SD) INTO COONS MATRIX(BOUT)    00001000
      BOUT(I,1,3)=3.0*(BIN(I,1,2)-BIN(I,1,1))                           00001020
      BOUT(I,2,3)=3.0*(BIN(I,4,2)-BIN(I,4,1))                           00001040
      BOUT(I,1,4)=3.0*(BIN(I,1,4)-BIN(I,1,3))                           00001060
      BOUT(I,2,4)=3.0*(BIN(I,4,4)-BIN(I,4,3))                           00001080
      IF(ICASE.EQ.2) GO TO 130                                          00001100
C------ FINALLY LOAD TWIST VECTORS                                      00001120
      BOUT(I,3,3)=9.0*(BIN(I,2,2)-BIN(I,1,2)-BIN(I,2,1)+BIN(I,1,1))     00001140
      BOUT(I,4,3)=9.0*(BIN(I,4,2)-BIN(I,3,2)-BIN(I,4,1)+BIN(I,3,1))     00001160
      BOUT(I,3,4)=9.0*(BIN(I,2,4)-BIN(I,1,4)-BIN(I,2,3)+BIN(I,1,3))     00001180
      BOUT(I,4,4)=9.0*(BIN(I,4,4)-BIN(I,3,4)-BIN(I,4,3)+BIN(I,3,3))     00001200
      GO TO 120                                                         00001220
C------ THE CASE OF ZERO TWISTS                                         00001240
  130 DO 140 J=3,4                                                      00001260
      DO 140 K=3,4                                                      00001280
  140 BOUT(I,J,K)=0.0                                                   00001300
      GO TO 120                                                         00001320
  200 BOUT(I,1,3)=BIN(I,1,4)-BIN(I,1,1)                                 00001340
      BOUT(I,1,4)=BOUT(I,1,3)                                           00001360
      BOUT(I,2,3)=BIN(I,4,4)-BIN(I,4,1)                                 00001380
      BOUT(I,2,4)=BOUT(I,2,3)                                           00001400
      BOUT(I,3,3)=BOUT(I,3,2)-BOUT(I,3,1)                               00001420
      BOUT(I,3,4)=BOUT(I,3,3)                                           00001440
      BOUT(I,4,3)=BOUT(I,4,2)-BOUT(I,4,1)                               00001460
      BOUT(I,4,4)=BOUT(I,4,3)                                           00001480
  120 CONTINUE                                                          00001500
      DO 220 I=1,3                                                      00001520
      DO 220 K=1,4                                                      00001540
      DO 220 J=1,4                                                      00001560
      IN=(I-1)*16+(K-1)*4+J                                             00001580
      OUT(IN)=BOUT(I,J,K)                                               00001600
      W=OUT(IN)                                                         00001601
      W=DABS(W)                                                         00001602
      IF(W.LT.SMAL) OUT(IN)=ZERO                                        00001603
  220 CONTINUE                                                          00001620
      RETURN                                                            00001640
      END                                                               00001660
**** SOURCE FILE : M0000601.V01   ***
*
      SUBROUTINE BIQUAD(A,B,C,D,E,RTS,NZ)                               00000020
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000040
C------THIS PROGRAM SOLVES FOR THE REAL ROOTS OF A BIQUADRATIC          00000060
C------A*X**4+B*X**3+C*X**2+D*X+E=0.  THE ROOTS ARE THEN LOADED         00000080
C------INTO THE ARRAY RTS.  NZ GIVES THE TOTAL NUMBER OF ROOTS.         00000100
      DIMENSION RTS(4),TEMP(3)                                          00000120
      DATA ZERO,SMAL/0.0D0,1.0D-14/                                     00000140
      RTS(1)=9999.0                                                     00000160
      RTS(2)=9999.0                                                     00000180
      RTS(3)=9999.0                                                     00000200
      RTS(4)=9999.0                                                     00000220
      IF(DABS(A).LT.SMAL) GO TO 100                                     00000240
C------ TRANSFORM THE POLYNOM BY THE EQUATION X=Y-B/4A TO ELIM-         00000260
C------ INATE THE CUBIC TERM.  THEN UNITIZE THE COEFFICIENT             00000280
C------ OF THE RESULTING QUARTIC EQUATION                               00000300
      TR=B/(4.0*A)                                                      00000320
      TRSQ=TR*TR                                                        00000340
      TRCB=TR*TRSQ                                                      00000360
      A1=1.0                                                            00000380
      B1=0.0                                                            00000400
      C1=6.0*TRSQ+(-3.0*B*TR+C)/A                                       00000420
      D1=-4.0*TRCB+(3.0*B*TRSQ-2.0*C*TR+D)/A                            00000440
      E1=TRSQ*TRSQ+(-B*TRCB+C*TRSQ-D*TR+E)/A                            00000460
C------ SETUP AND SOLVE THE RESOLVENT CUBIC(HALL KNIGHT,SEC 583)        00000480
      P=1.0                                                             00000500
      Q=C1+C1                                                           00000520
      R=C1*C1-4.0*E1                                                    00000540
      S=-D1*D1                                                          00000560
      CALL GCUBIC(P,Q,R,S,TEMP,NTEM)                                    00000580
      RES=-1.0                                                          00000600
      DO 20 I=1,NTEM                                                    00000620
      RES=TEMP(I)                                                       00000640
      IF(RES.GT.ZERO) GO TO 30                                          00000660
   20 CONTINUE                                                          00000680
      NZ=0                                                              00000700
      RETURN                                                            00000720
   30 AK=DSQRT(RES)                                                     00000740
      AM=0.5*(RES+C1+D1/AK)                                             00000760
      AL=0.5*(RES+C1-D1/AK)                                             00000780
C------ NOW THE BIQUADRATIC RESOLVES INTO TWO QUADRATICS                00000800
C------THE FIRST QUADRATIC IS Y**2+AK*Y+AL=0  OTHER IS Y**2-AK*Y+AM=0   00000820
      DISC=AK*AK-4.0*AL                                                 00000840
      NZ=0                                                              00000860
      IF(DISC.LT.ZERO) GO TO 40                                         00000880
      NZ=2                                                              00000900
      DD=DSQRT(DISC)                                                    00000920
      RTS(1)=(-AK+DD)/2.0-TR                                            00000940
      RTS(2)=(-AK-DD)/2.0-TR                                            00000960
   40 DISC=AK*AK-4.0*AM                                                 00000980
      IF(DISC.LT.ZERO) GO TO 50                                         00001000
      DD=DSQRT(DISC)                                                    00001020
      RTS(NZ+1)=(AK+DD)/2.0-TR                                          00001040
      RTS(NZ+2)=(AK-DD)/2.0-TR                                          00001060
      NZ=NZ+2                                                           00001080
   50 CONTINUE                                                          00001100
      RETURN                                                            00001120
  100 CONTINUE                                                          00001140
      CALL GCUBIC(B,C,D,E,RTS,NZ)                                       00001160
      RETURN                                                            00001180
      END                                                               00001200
**** SOURCE FILE : M0001049.V04   ***
*
      SUBROUTINE CHDSEG(C,FL,TOLR,NUM,NUMAX,IRR,P,D,V)                  00000100
C---     SUBROUTINE PURPOSE IS TO PARAMETERIZE A RATIONAL CUBIC         00000200
C---     ARC IN TERMS OF A PROJECTION IN DIRECTION V UPON AN            00000300
C---     ARBITRARY LINE IN SPACE DETERMINED BY A POINT P AND            00000400
C---      A DIRECTION VECTOR D                                          00000500
C---     INPUT  C IS A RATIONAL PARAMETRIC CUBIC CURVE C                00000600
C---     INPUT  NUMAX IS THE MAXIMUM NUMBER OF ARCS WHICH CAN           00000700
C---            BE GENERATED(DUE TO BUFFER SPACE)                       00000800
C---    INPUT  TOLR THE TOLERANCE TO BE USED IN FITTING(.001 NORMAL)    00000900
C---    OUTPUT IRR ERROR FLAG, ZERO IS CORRECT, NONZERO IS ERROR.       00001000
C---     OUTPUT IS A SET OF FLOW FUNCTIONS FL(4,NUM) WHERE              00001100
C---     FL(1,) IS ACCUMULATED CHORD LENGTH                             00001200
C---     FL(2,) IS CORRESPONDING COONS PARAMETER                        00001300
C---     FL(3,) IS RATE OF CHANGE OF PARAMETER                          00001400
C---     FL(4,) IS SECOND DERIVATIVE.                                   00001500
C---  OUTPUT  NUM IS USUALLY NUMBER OF SEGMENTS, NEGATIVE IS ERROR.     00001600
C                                                                       00001700
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00001800
      DIMENSION C(16),FL(4,1),P(3),V(3),D(3)                            00001900
      DIMENSION T(3),CV(16)                                             00002000
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00002200
      DATA ZERO,ONE,SMAL,VSMAL,HALF/0.0D0,1.0D0,1.0D-6,1.0D-30,0.5D0/   00002280
C                                                                       00002300
C---     METHOD IS TO SPLIT ARC INTO SMALLER AND SMALLER SUBARCS        00002400
C---     UNTIL WHOLE ARC HAS BEEN FIT TO ACCEPTABLE ACCURACY.           00002500
C---     BEGIN BY DEVELOPING VECTOR CONSTANTS                           00002600
C                                                                       00002700
      A=DSQRT(V(1)*V(1)+V(2)*V(2)+V(3)*V(3))                            00002800
      IRR=2                                                             00002900
      IF(A.LT.VSMAL) GO TO 999                                          00003000
      T(1)=V(1)/A                                                       00003100
      T(2)=V(2)/A                                                       00003200
      T(3)=V(3)/A                                                       00003300
C                                                                       00003400
      IF(IBUG.NE.11) GO TO 2                                            00003500
      CALL BAD(3,1,'P   ',P)                                            00003600
      CALL BAD(3,1,'D   ',D)                                            00003700
      CALL BAD(3,1,'V   ',V)                                            00003800
      CALL BAD(-3,1,'T   ',T)                                           00003900
    2 CONTINUE                                                          00004000
C                                                                       00004100
      IRR=3                                                             00004200
      DT=D(1)*T(1)+D(2)*T(2)+D(3)*T(3)                                  00004300
      IF(DABS(DT).LT.VSMAL) GO TO 999                                   00004400
      NOW=1                                                             00004500
      CHDLEN=ZERO                                                       00004600
      UNOW=ZERO                                                         00004700
      CALL CNCURV(UNOW,C,CV,1)                                          00004800
C---     CHECK FOR VALIDITY OF PROJECTION                               00004900
      TEMP=CV(13)*T(1)+CV(14)*T(2)+CV(15)*T(3)                          00005000
      IF(TEMP.GT.SMAL) GO TO 5                                          00005100
      IRR=4                                                             00005200
      IF(DABS(TEMP).LT.SMAL) GO TO 999                                  00005300
C---     REVERSE THE DIRECTION OF T                                     00005400
      DO 6 I=1,3                                                        00005500
    6 T(I)=-T(I)                                                        00005600
      DT=-DT                                                            00005700
    5 CONTINUE                                                          00005800
      IF(DT.GT.ZERO) GO TO 8                                            00005900
      DO 7 I=1,3                                                        00006000
    7 D(I)=-D(I)                                                        00006100
      DT=-DT                                                            00006200
    8 CONTINUE                                                          00006300
C                                                                       00006400
C---     DETERMINE PROJECTION VALUE AND DERIVATIVES                     00006500
      FL(1,NOW)=(CV(1)-P(1))*T(1)+(CV(2)-P(2))*T(2)+(CV(3)-P(3))*T(3)   00006600
      FL(1,NOW)=FL(1,NOW)/DT                                            00006700
      A=(CV(5)*T(1)+CV(6)*T(2)+CV(7)*T(3))/DT+VSMAL                     00006800
      B=(CV(9)*T(1)+CV(10)*T(2)+CV(11)*T(3))/DT                         00006900
      FL(2,NOW)=UNOW                                                    00007000
      FL(3,NOW)=ONE/A                                                   00007100
      FL(4,NOW)=-B/(A**3)                                               00007200
      CNOW=FL(1,NOW)                                                    00007300
      UNX=.76                                                           00007400
C                                                                       00007500
   40 CONTINUE                                                          00007600
      ICHK=1                                                            00007700
   50 CONTINUE                                                          00007800
      CALL CNCURV(UNX,C,CV,1)                                           00007900
      NX=NOW+1                                                          00008000
C---     CHECK FOR VALIDITY OF PROJECTION                               00008100
      TEMP=CV(13)*T(1)+CV(14)*T(2)+CV(15)*T(3)                          00008200
C---     ERROR IF CURVE IS MOVING IN OPPOSITE DIRECTION TO CHORD        00008300
      IRR=5                                                             00008400
      IF(TEMP.LT.SMAL) GO TO 999                                        00008500
C---     DETERMINE PROJECTION VALUE AND DERIVATIVES                     00008600
      FL(1,NX)=((CV(1)-P(1))*T(1)+(CV(2)-P(2))*T(2)+(CV(3)-P(3))*T(3))  00008700
      FL(1,NX)=FL(1,NX)/DT                                              00008800
      A=(CV(5)*T(1)+CV(6)*T(2)+CV(7)*T(3))/DT+VSMAL                     00008900
      B=(CV(9)*T(1)+CV(10)*T(2)+CV(11)*T(3))/DT                         00009000
      FL(2,NX)=UNX                                                      00009100
      FL(3,NX)=ONE/A                                                    00009200
      FL(4,NX)=-B/(A**3)                                                00009300
C---     FIRST CHECK ACCURACY OF SPLINE REPRESENTATION                  00009400
      DEL1=FL(1,NX)-CNOW                                                00009500
      DEL2=3.*(FL(2,NX)-FL(2,NOW))*(FL(4,NX)+FL(4,NOW))                 00009600
      DV=FL(4,NX)*(2.*FL(3,NOW)+FL(3,NX))+FL(4,NOW)*(FL(3,NOW)+2.*      00009700
     X   FL(3,NX))                                                      00009800
      IF(DABS(DV).LT.VSMAL) GO TO 59                                    00009810
      DEL2=DEL2/DV                                                      00009900
C---     IF SECOND DERIVATIVES VANISH, ANOTHER FORMULA IS NEEDED        00010000
      GO TO 60                                                          00010100
   59 CONTINUE                                                          00010110
      DEL2=ZERO                                                         00010200
      IF(DABS(FL(3,NOW)).GT.VSMAL*SMAL) DEL2=ONE/FL(3,NOW)              00010300
      IF(DABS(FL(3,NX)).GT.VSMAL*SMAL) DEL2=DEL2+ONE/FL(3,NX)           00010310
      IRR=4                                                             00010320
      IF(DEL2.EQ.ZERO) GO TO 999                                        00010330
   60 CONTINUE                                                          00010400
C                                                                       00010500
C---     COMPARE ACCURACY OF ACTUAL AND ESTIMATED CHORD LENGTH.         00010600
C                                                                       00010700
      DIF=(DEL2-DEL1)/DEL1                                              00011400
      IF(IBUG.NE.11) GO TO 22                                           00011410
      CALL BAD(-4,1,'FLNW',FL(1,NOW))                                   00011420
      CALL BAD(-4,1,'FLNX',FL(1,NX))                                    00011430
      CALL BAD(1,1,'DEL1',DEL1)                                         00011440
      CALL BAD(1,1,'DEL2',DEL2)                                         00011450
      CALL BAD(-1,1,'DIF ',DIF)                                         00011460
   22 CONTINUE                                                          00011470
      IF(DABS(DIF).GT.TOLR) GO TO 100                                   00011500
C---     ACCURACY IS ACCEPTABLE, IS SPLINE ALSO INCREASING THO.         00011600
      IF(FL(2,NX).LE.FL(2,NOW)) GO TO 100                               00011700
      IF(FL(3,NOW).LT.ZERO) GO TO 100                                   00011800
      IF(FL(3,NX).LT.ZERO) GO TO 100                                    00011900
C---     NOW CHECK FOR A MAX OR MIN WITHIN THE INTERVAL                 00012000
      A=FL(3,NOW)*DEL1                                                  00012100
      B=FL(3,NX)*DEL1                                                   00012200
      AA=3.*(B+A-2.*(FL(2,NX)-FL(2,NOW)))+VSMAL                         00012300
      BB=2.*(3.*(FL(2,NX)-FL(2,NOW))-2.*A-B)                            00012400
      CC=A                                                              00012500
      DISC=BB*BB-4.*AA*CC                                               00012600
      IF(IBUG.NE.11) GO TO 33                                           00012700
      CALL BAD(-1,0,' ',0)                                              00012800
      CALL BAD(1,1,'AA  ',AA)                                           00013200
      CALL BAD(1,1,'BB  ',BB)                                           00013300
      CALL BAD(1,1,'CC  ',CC)                                           00013400
      CALL BAD(-1,1,'DISC',DISC)                                        00013500
   33 CONTINUE                                                          00013600
      IF(DISC.LT.ZERO) GO TO 90                                         00013700
      DISC=DSQRT(DISC)                                                  00013800
      R=(-BB-DISC)/(2.*AA)                                              00013900
      IF(DABS(R-HALF).LT.HALF) GO TO 100                                00014000
      R=(-BB+DISC)/(2.*AA)                                              00014100
      IF(DABS(R-HALF).LT.HALF) GO TO 100                                00014200
   90 CONTINUE                                                          00014300
C---     FUNCTION MEETS ALL CRITERIA, SO GO AFTER THE NXT ARC           00014400
      NOW=NOW+1                                                         00014500
      CNOW=FL(1,NOW)                                                    00014600
      FL(1,NOW)=DEL2+CHDLEN                                             00014700
      CHDLEN=CHDLEN+DEL2                                                00014800
      UDEL=UNX-UNOW                                                     00014900
      UNOW=UNX                                                          00015000
      UNX=UNOW+4.0*UDEL                                                 00015100
      UNX=DMIN1(ONE,UNX)                                                00015200
      IF(UNOW.GT.ONE-SMAL) GO TO 500                                    00015300
      IRR=6                                                             00015400
      IF(NOW.GT.NUMAX-2) GO TO 999                                      00015500
      GO TO 40                                                          00015600
C                                                                       00015700
C---     DECREASE UNX AND TRY AGAIN                                     00015800
  100 CONTINUE                                                          00015900
      UNX=(UNOW+UNX)*HALF                                               00016000
      ICHK=ICHK+1                                                       00016100
      IRR=7                                                             00016200
      IF(ICHK.GT.10) GO TO 999                                          00016300
      GO TO 50                                                          00016400
C                                                                       00016500
  500 CONTINUE                                                          00016600
      IRR=0                                                             00016700
      FL(2,NOW)=ONE                                                     00016800
C---     TRANSLATE FLOW RATES TO ORIGIN                                 00016900
      FL(1,1)=ZERO                                                      00017000
  999 CONTINUE                                                          00017100
      NUM=NOW                                                           00017200
      RETURN                                                            00017300
      END                                                               00017400
**** SOURCE FILE : M0000613.V01   ***
*
      SUBROUTINE CLOCUB(AX,AY,BX,BY,GX,GY,HX,HY,CA,CB,ALPH,BETA,IRR)    00000040
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000060
C------THIS SUBROUTINE ACCEPTS AS INPUT TWO END POINTS AX,AY $ BX,BY    00000080
C------TWO END DIRECTION VECTORS GX,GY $ HX,HY AND TWO END CURVATURES   00000100
C------CA,CB(SIGNED BY DR X DDR).  GX,GY AND HX,HY ARE CONVERTED TO     00000120
C------UNIT TANGENT VECTORS FOR THE PLANAR PARAMETRIC CUBIC             00000140
C------ OUTPUT CONSISTS OF SCALARS ALPH AND BETA WHICH ARE MULTIPLIERS  00000160
C------SATISFIES END CONDITIONS OF POINTS,DIRECTION AND CURVATURE       00000180
      DIMENSION RTS(4)                                                  00000200
      IDIAG=19000                                                       00000220
      Z1EM7=0.0000001                                                   00000240
      ZERO=0.0                                                          00000260
      ONE=1.0                                                           00000280
      W=GX*GX+GY*GY                                                     00000300
      IRR=IDIAG+1                                                       00000320
      IF(W.LT.Z1EM7) RETURN                                             00000340
      GX=GX/DSQRT(W)                                                    00000360
      GY=GY/DSQRT(W)                                                    00000380
      W=HX*HX+HY*HY                                                     00000400
      IRR=IDIAG+2                                                       00000420
      IF(W.LT.Z1EM7) RETURN                                             00000440
      HX=HX/DSQRT(W)                                                    00000460
      HY=HY/DSQRT(W)                                                    00000480
      DX=BX-AX                                                          00000500
      DY=BY-AY                                                          00000520
      P=GX*DY-GY*DX                                                     00000540
      Q=GX*HY-GY*HX                                                     00000560
      R=DX*HY-DY*HX                                                     00000580
C------THE FOLLOWING SETS UP A SOLUTION TO TWO SIMULTANEOUS IN ALPH,    00000600
C------BETA WHICH ARE THE DESIRED TANGENT MULTIPLIERS                   00000620
C------3GXD-BETAGXH=SGN(ALPH)*ALPH**2*CA/2                              00000640
C------3DXH-ALPH*GXH=SGN(BETA)*BETA**2*CB/2                             00000660
      NCT=0                                                             00000680
      ICHK=0                                                            00000700
      HCA=CA/2                                                          00000720
      HCB=CB/2                                                          00000740
      A=HCA*HCB**2                                                      00000760
      B=0.                                                              00000780
      C=-6*HCA*HCB*R                                                    00000800
      D=Q**3                                                            00000820
      E=-3*P*Q**2 + 9*HCA*R**2                                          00000840
      CALL BIQUAD(A,B,C,D,E,RTS,NZ)                                     00000860
      IF(NZ.EQ.0) IRR=1                                                 00000861
      IF(IRR.NE.0) GO TO 200                                            00000880
C------ NOW CHECK FOR A VALID ALPH,BETA PAIR                            00000900
      DO 10 L=1,NZ                                                      00000920
      BETA=RTS(L)                                                       00000940
      IF ( BETA.LT.0.0 ) GO TO 10                                       00000960
      ALPH=(3*R-HCB*BETA**2)/Q                                          00000980
      IF ( ALPH.LT.0.0 ) GO TO 10                                       00001000
      RPP0X = 2*( 3*DX - 2*GX*ALPH - BETA*HX )                          00001020
      RPP0Y = 2*( 3*DY - 2*GY*ALPH - BETA*HY )                          00001040
      RPP1X = 2*( -3*DX + GX*ALPH + 2*BETA*HX )                         00001060
      RPP1Y = 2*( -3*DY + GY*ALPH + 2*BETA*HY )                         00001080
      E = ( GX*RPP0Y - GY*RPP0X )/ALPH**2                               00001100
      F = ( HX*RPP1Y - HY*RPP1X )/BETA**2                               00001120
      E1= E-CA                                                          00001140
      F1= F-CB                                                          00001160
      E1=E1/CA                                                          00001180
      F1=F1/CB                                                          00001200
      IF(DABS(E1).GT.0.01D0.OR.DABS(F1).GT.0.01D0) GO TO 10             00001220
      ICHK=1                                                            00001240
      AT=ALPH                                                           00001260
      BT=BETA                                                           00001280
   10 CONTINUE                                                          00001300
  200 CONTINUE                                                          00001320
      IRR=IDIAG+3                                                       00001340
      IF(ICHK.EQ.0) RETURN                                              00001360
      ALPH=AT                                                           00001380
      BETA=BT                                                           00001400
      IRR=0                                                             00001420
      RETURN                                                            00001440
      END                                                               00001460
**** SOURCE FILE : M0004285.V01   ***
*
C                                                                       00000020
      SUBROUTINE COMPTW(BCN,P,U,V,IRR)                                  00000040
        IMPLICIT DOUBLE PRECISION(A-H,O-Z)                              00000060
C------THIS SUBROUTINE ACCEPTS AS INPUT A PARTIALLY DEFINED COONS       00000080
C------MATRIX ( TWIST VECTORS ARE STILL UNKNOWN ) AND FOUR SPACE        00000100
C------POINTS P(4,) EACH WITH ASSOCIATED U,V VALUES.                    00000120
C------AFTER EXECUTION THE ROUTINE RETURNS WITH FOUR TWIST VECTORS      00000140
C------WHICH ARE LOADED INTO APPROPRIATE POSITIONS OF THE BCN MATRIX    00000160
C------ THE COONS MATRIX PASSES THRU THE FOUR INPUT POINTS              00000180
C------AT THE INPUT U,V PARAMETER VALUES                                00000200
      DIMENSION BCN(3,4,4),P(4,3),U(4),V(4)                             00000220
      DIMENSION RH(4,3), AM(4,4)                                        00000240
      IDIAG=5395                                                        00000260
C------SET UP A 4 X 4 SYSTEM OF EQUATIONS AND SOLVE BY CALL TO GELG     00000280
      DO 100 I=1,4                                                      00000300
C------EVALUATE COONS BLENDING FUNCTIONS FOR U(I) AND V(I)              00000320
      A2 = U(I)**2                                                      00000340
      A3 = A2*U(I)                                                      00000360
      D  = A3 - A2                                                      00000380
      A  = D + D - A2 + 1                                               00000400
      B  = -A + 1                                                       00000420
      C  = D - A2 + U(I)                                                00000440
      A2 = V(I)**2                                                      00000460
      A3 = A2*V(I)                                                      00000480
      H  = A3 - A2                                                      00000500
      E  = H + H - A2 + 1                                               00000520
      F  = -E + 1                                                       00000540
      G  = H - A2 + V(I)                                                00000560
C------NOW GENERATE THE I TH COEFFICIENT ROW                            00000580
      AM(I,1) = C*G                                                     00000600
      AM(I,2) = C*H                                                     00000620
      AM(I,3) = D*G                                                     00000640
      AM(I,4) = D*H                                                     00000660
C------NOW GENERATE THE VECTOR COMPONENTS OF THE RIGHT HAND SIDE        00000680
      DO 100 L = 1, 3                                                   00000700
      WA = ( BCN(L,1,1)*E + BCN(L,1,2)*F + BCN(L,1,3)*G                 00000720
     1     + BCN(L,1,4)*H )*A                                           00000740
      WB = ( BCN(L,2,1)*E + BCN(L,2,2)*F + BCN(L,2,3)*G                 00000760
     1     + BCN(L,2,4)*H )*B                                           00000780
      WC = ( BCN(L,3,1)*E + BCN(L,3,2)*F )*C                            00000800
      WD = ( BCN(L,4,1)*E + BCN(L,4,2)*F )*D                            00000820
C------RH IS THE DESIRED COEEFICIENT                                    00000840
      RH(I,L) = P(I,L) - WA - WB - WC - WD                              00000860
  100 CONTINUE                                                          00000880
      EPS=1.0D-13                                                       00000900
      CALL GELG(RH,AM,EPS,4,3,IER)                                      00000920
      IRR = IDIAG + 1                                                   00000940
      IF (IER .NE. 0) RETURN                                            00000960
C------RH NOW CONTAINS THE VECTOR SOLUTION SET (TWIST VECTORS)          00000980
C------FINALLY LOAD THESE INTO BCN MATRIX                               00001000
      DO 200 I = 1, 4                                                   00001020
      IR = 3                                                            00001040
      IC = 3                                                            00001060
      IF ( MOD(I,2) .EQ. 0 ) IC = 4                                     00001080
      IF ( I .GT. 2 ) IR = 4                                            00001100
      DO 200 L = 1, 3                                                   00001120
      BCN(L,IR,IC) = RH(I,L)                                            00001140
  200 CONTINUE                                                          00001160
      IRR = 0                                                           00001180
      RETURN                                                            00001200
      END                                                               00001220
**** SOURCE FILE : M0001014.W01   ***
*
      BLOCK DATA BDIZEL                                                 00000001
      COMMON/IZEILL/IZEIL                                               00000002
      INTEGER IZEIL                                                     00000003
      DATA IZEIL/1/                                                     00000004
      END                                                               00000005
C   ROUTINES FOR ASA CARRIAGE CONTROLLED OUTPUT OF VERIFICATION LISTINGS00000010
C    FROM ZSCPICT AND ZSSPICT                                           00000020
      SUBROUTINE CPRIN1 (A)                                             00000030
      COMMON/IZEILL/IZEIL                                               00000035
      CHARACTER A*120,SV,EZ,ZZ                                          00000040
      INTEGER IZEIL                                                     00000041
      DATA SV/'1'/,EZ/' '/,ZZ/'0'/                                      00000043
C                                                                       00000050
      IF(A(1:1).NE.SV)GOTO 1                                            00000060
      IZEIL=1                                                           00000070
      GOTO 5                                                            00000080
    1 IF(A(1:1).NE.EZ)GOTO 2                                            00000090
      IZEIL=IZEIL+1                                                     00000100
      GOTO5                                                             00000110
    2 IF(A(1:1).NE.ZZ) GOTO 5                                           00000120
      IZEIL=IZEIL+2                                                     00000130
    5 CALL CPRINT(A)                                                    00000140
      RETURN                                                            00000150
      END                                                               00000156
C                                                                       00000158
C                                                                       00000160
      SUBROUTINE VORSCH (I,A)                                           00000170
      COMMON/IZEILL/IZEIL                                               00000171
      INTEGER IZEIL,I,J                                                 00000173
      CHARACTER A*120,B*120,SV                                          00000174
      DATA SV/'1'/                                                      00000178
C                                                                       00000179
      IF(IZEIL+I.LT.67)RETURN                                           00000180
      DO 6 J=1,120                                                      00000190
    6 B(J:J)=A(J:J)                                                     00000200
      B(1:1)=SV                                                         00000210
      IZEIL=1                                                           00000220
      CALL CPRINT(B)                                                    00000230
      RETURN                                                            00000240
      END                                                               00000250
**** SOURCE FILE : M0000621.V02   ***
*
      SUBROUTINE CRSFIT(SA,SB,SC,SD,IERROR)                             00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---     PURPOSE IS TO FILL OUT ALL CROSS SLOPE VECTORS IN              00000300
C---     THE CURVES SA,SB GIVEN THAT SA,SB  AND SC,SD FORM              00000400
C---     OPPOSITE PAIRS OF A FOUR SIDED PATCH.  ALL CURVES              00000500
C---     ARE SINGLE SEGMENT FLOW CURVES.                                00000600
C---     IF AN ERROR IS ENCOUNTERED, IERROR IS NOT ZERO ON RETURN       00000700
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00000800
      DIMENSION SA(*),SB(*),SC(*),SD(*)                                 00000900
      DIMENSION VEC(3),VA(3),VB(3),CV(16)                               00001000
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-10/                           00001100
C                                                                       00001200
C---     MAKE TWO PASSES, ONE FOR THE CURVE SA, THE OTHER FOR SB        00001300
C                                                                       00001400
      DATA ICT/0/                                                       00001500
C                                                                       00001600
      IENT=IERROR                                                       00001700
      IERROR=0                                                          00001800
C                                                                       00001900
      ICT=ICT+10                                                        00002000
      IF(IBUG.EQ.11) CALL SCDUMP(ICT,SA)                                00002100
      IF(IBUG.EQ.11) CALL SCDUMP(2,SB)                                  00002200
      IF(IBUG.EQ.11) CALL SCDUMP(3,SC)                                  00002300
      IF(IBUG.EQ.11) CALL SCDUMP(4,SD)                                  00002400
      DO 10 IPASS=1,2                                                   00002500
      U=IPASS-1                                                         00002600
C---     PICK UP CROSS VECTORS AT ENDS FROM SC AND SD                   00002700
      CALL CURFLO(U,SC,CV,1,1)                                          00002800
      DO 20 L=1,3                                                       00002900
   20 VA(L)=CV(L+4)                                                     00003000
      CALL CURFLO(U,SD,CV,1,1)                                          00003100
      DO 30 L=1,3                                                       00003200
   30 VB(L)=CV(L+4)                                                     00003300
C                                                                       00003400
C---     STORE THESE VECTORS INTO THE ENDS OF CURVE SA OR SB            00003500
      IF(IPASS.EQ.2) GO TO 350                                          00003600
C                                                                       00003700
      N1=16                                                             00003800
      N2=(SA(2)+SA(4)-ONE)*24.+16.                                      00003900
      DO 310 L=1,3                                                      00004000
      SA(N1+L)=VA(L)                                                    00004100
  310 SA(N2+L)=VB(L)                                                    00004200
      SA(N1+4)=ONE                                                      00004300
      SA(N2+4)=ONE                                                      00004400
      GO TO 390                                                         00004500
C                                                                       00004600
  350 CONTINUE                                                          00004700
      N1=16                                                             00004800
      N2=(SB(2)+SB(4)-ONE)*24.+16.                                      00004900
      DO 320 L=1,3                                                      00005000
      SB(N1+L)=VA(L)                                                    00005100
  320 SB(N2+L)=VB(L)                                                    00005200
      SB(N1+4)=ONE                                                      00005300
      SB(N2+4)=ONE                                                      00005400
  390 CONTINUE                                                          00005500
C                                                                       00005600
C---      SKIP OTHER CALCULATIONS IF IENT IS -11                        00005700
      IF(IENT.EQ.-11) GO TO 10                                          00005800
C                                                                       00005900
C---     DETERMINE N1,N2 THE STARTING AND ENDING ARC JUNCTIONS          00006000
      N1=0                                                              00006100
      IF(IPASS.EQ.2) GO TO 40                                           00006200
      NARCRW=SA(7)                                                      00006300
      NSEGRW=SA(9)                                                      00006400
      N2=SA(NSEGRW+1)+N1                                                00006500
      GO TO 50                                                          00006600
   40 CONTINUE                                                          00006700
      NARCRW=SB(7)                                                      00006800
      NSEGRW=SB(9)                                                      00006900
      N2=SB(NSEGRW+1)+N1                                                00007000
   50 CONTINUE                                                          00007100
C                                                                       00007200
C---     NLO,NHI REPRESENT JUNCTION PT LIMITS TO BE TESTED AND          00007300
C---     IF NECESSARY TO RECEIVE CROSS SLOPE VECTORS                    00007400
      NLO=N1+1                                                          00007500
      NHI=N2-1                                                          00007600
      IF(NHI.LT.NLO) GO TO 10                                           00007700
C                                                                       00007800
      DO 60 K=NLO,NHI                                                   00007900
      NROW=NARCRW+K*4                                                   00008000
C                                                                       00008100
C---     DETERMINE FLOW VALUE OF THIS JUNCTION POINT                    00008200
      IF(IPASS.EQ.2) GO TO 70                                           00008300
      NROW=SA(NROW)                                                     00008400
      FLOVAL=SA(NROW)                                                   00008500
      GO TO 80                                                          00008600
   70 CONTINUE                                                          00008700
      NROW=SB(NROW)                                                     00008800
      FLOVAL=SB(NROW)                                                   00008900
   80 CONTINUE                                                          00009000
C---     DETERMINE THE BLEND OF END VECTORS BASED ON FLOVAL             00009100
      CALL BLENDF(FLOVAL,CV)                                            00009200
      DO 90 L=1,3                                                       00009300
   90 VEC(L)=CV(1)*VA(L)+CV(2)*VB(L)                                    00009400
      WA=DSQRT(VEC(1)*VEC(1)+VEC(2)*VEC(2)+VEC(3)*VEC(3))               00009500
C                                                                       00009600
C---     NOW CHECK THIS JUNCTION FOR CONSTRAINT DATA ALREADY THERE      00009700
      J=K*24+16                                                         00009800
      IF(IPASS.EQ.1) TEMP=SA(J+4)                                       00009900
      IF(IPASS.EQ.2) TEMP=SB(J+4)                                       00010000
      IF(DABS(TEMP-ONE).GT.SMAL) GO TO 100                              00010100
C                                                                       00010200
C---     A CROSS VECTOR IS ALREADY PRESENT, MODIFY ITS LENGTH TO WA     00010300
      IF(IPASS.EQ.2) GO TO 110                                          00010400
      WB=DSQRT(SA(J+1)**2+SA(J+2)**2+SA(J+3)**2)                        00010500
      IF(WB.LT.SMAL) GO TO 140                                          00010600
      WB=WA/WB                                                          00010700
      DO 120 L=1,3                                                      00010800
  120 SA(J+L)=WB*SA(J+L)                                                00010900
      GO TO 60                                                          00011000
  110 CONTINUE                                                          00011100
      WB=DSQRT(SB(J+1)**2+SB(J+2)**2+SB(J+3)**2)                        00011200
      IF(WB.LT.SMAL) GO TO 140                                          00011300
      WB=WA/WB                                                          00011400
      DO 130 L=1,3                                                      00011500
  130 SB(J+L)=WB*SB(J+L)                                                00011600
      GO TO 60                                                          00011700
C                                                                       00011800
  100 CONTINUE                                                          00011900
      IF(IPASS.EQ.1) TEMP=SA(J+8)                                       00012000
      IF(IPASS.EQ.2) TEMP=SB(J+8)                                       00012100
      IF(DABS(TEMP-ONE).GT.SMAL) GO TO 140                              00012200
C                                                                       00012300
C---     A SURFACE NORMAL CONSTRAINT IS PRESENT, PROJECT VEC            00012400
C---     INTO THE PLANE OF THIS NORMAL AND ASSIGN WA AS LENGTH          00012500
      IF(IPASS.EQ.2) GO TO 150                                          00012600
      WB=DSQRT(SA(J+5)**2+SA(J+6)**2+SA(J+7)**2)                        00012700
      IF(WB.LT.SMAL) GO TO 140                                          00012800
      PROJ=(VEC(1)*SA(J+5)+VEC(2)*SA(J+6)+VEC(3)*SA(J+7))/WB            00012900
      SUM=ZERO                                                          00013000
      DO 160 L=1,3                                                      00013100
      VEC(L)=VEC(L)-PROJ*SA(J+4+L)/WB                                   00013200
  160 SUM=SUM+VEC(L)**2                                                 00013300
      SUM=DSQRT(SUM)                                                    00013400
      IF(SUM.LT.SMAL) GO TO 140                                         00013500
      WB=WA/SUM                                                         00013600
      DO 170 L=1,3                                                      00013700
  170 SA(J+L)=WB*VEC(L)                                                 00013800
      GO TO 60                                                          00013900
C                                                                       00014000
  150 CONTINUE                                                          00014100
      WB=DSQRT(SB(J+5)**2+SB(J+6)**2+SB(J+7)**2)                        00014200
      IF(WB.LT.SMAL) GO TO 140                                          00014300
      PROJ=(VEC(1)*SB(J+5)+VEC(2)*SB(J+6)+VEC(3)*SB(J+7))/WB            00014400
      SUM=ZERO                                                          00014500
      DO 180 L=1,3                                                      00014600
      VEC(L)=VEC(L)-PROJ*SB(J+4+L)/WB                                   00014700
  180 SUM=SUM+VEC(L)**2                                                 00014800
      SUM=DSQRT(SUM)                                                    00014900
      IF(SUM.LT.SMAL) GO TO 140                                         00015000
      WB=WA/SUM                                                         00015100
      DO 190 L=1,3                                                      00015200
  190 SB(J+L)=WB*VEC(L)                                                 00015300
      GO TO 60                                                          00015400
C                                                                       00015500
  140 CONTINUE                                                          00015600
C---     USE VEC TO DETERMINE THE CROSS CONSTRAINT AT JUNCTION J        00015700
      IF(IPASS.EQ.2) GO TO 200                                          00015800
      DO 210 L=1,3                                                      00015900
  210 SA(J+L)=VEC(L)                                                    00016000
      SA(J+4)=ONE                                                       00016100
      GO TO 60                                                          00016200
  200 CONTINUE                                                          00016300
      DO 220 L=1,3                                                      00016400
  220 SB(J+L)=VEC(L)                                                    00016500
      SB(J+4)=ONE                                                       00016600
C                                                                       00016700
   60 CONTINUE                                                          00016800
C                                                                       00016900
   10 CONTINUE                                                          00017000
C                                                                       00017100
      IF(IBUG.EQ.11) CALL SCDUMP(5,SA)                                  00017200
      IF(IBUG.EQ.11) CALL SCDUMP(6,SB)                                  00017300
C                                                                       00017400
      IERROR=0                                                          00017500
      RETURN                                                            00017600
      END                                                               00017700
**** SOURCE FILE : M0004287.V03   ***
*
      SUBROUTINE CRVLEN(PA,PB,TA,TB,A,B,NUMINT,MXCT,CTOLR,ILEVEL)       00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---MAIN ROUTINE TO DETERMINE OPTIMUM VECTOR LENGTHS FOR TANGENT        00000300
C---VECTORS OF A CUBIC.  INPUT CONSTRAINTS INCLUDE                      00000400
C--- PA,PB  START AND END POINTS OF PARAMETRIC CUBIC                    00000500
C--- TA,TB  START AND END UNIT TANGENT VECTORS                          00000600
C--- NUMINT IS NUMBER OF SIMPSON INTERVALS FOR DETERMINING AREA         00000700
C--- MXCT IS THE MAXIMUM NUMBER OF NEWTON-RHAPSON ITERATIONS            00000800
C--- CTOLR IS THE RATIO OF CHANGE FOR TERMINATION OF ITERATIONS         00000900
C--- ILEVEL CONTROLS THE LEVEL OF CALCULATION FOR A,B                   00001000
C--- =1 CHORD LENGTH, =2 MINIMIZE DDR, =3 NEWTON RHAPSON                00001100
C--- A,B ARE THE OUTPUT LENGTHS OF TANGENTS.                            00001200
C--- A,B ARE SELECTED TO MINIMZE INTEGRAL OF K*K*DS OVER 0,1            00001300
C--- METHOD IS NEWTON-RHAPSON WITH ITERATIONS AND                       00001400
C--- SIMPSONS RULE TO DETERMINE APPROXIMATE AREA                        00001500
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00001600
      DIMENSION PA(3),PB(3),TA(3),TB(3)                                 00001700
      DIMENSION SUM(6),AREA(6),DIF(3)                                   00001800
      CHARACTER*20 BADMSG                                               00001810
C                                                                       00001900
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-15/                           00002000
C                                                                       00002100
      DO 5 I=1,3                                                        00002200
    5 DIF(I)=PB(I)-PA(I)                                                00002300
      CALL VNORM(TA,TA)                                                 00002400
      CALL VNORM(TB,TB)                                                 00002500
      ISTART=1                                                          00002600
      IEND=2*NUMINT+1                                                   00002700
      H=1./(2.*NUMINT)                                                  00002800
      H3=H/3.                                                           00002900
      W=H+H                                                             00003000
C                                                                       00003100
C---      INITIAL ESTIMATE OF A,B IS FROM CHORD LENGTH                  00003200
      CALL DOTF(A,DIF,DIF)                                              00003300
      A=DSQRT(A)                                                        00003400
      B=A                                                               00003500
      IF(ILEVEL.LE.1) GO TO 70                                          00003600
C---      A SECOND INITIAL ESTIMATE IS FROM MINIMIZE DDR AT ENDS        00003700
      CALL DOTF(X1,TA,DIF)                                              00003800
      CALL DOTF(X2,TB,DIF)                                              00003900
      CALL DOTF(X3,TA,TB)                                               00004000
      TEMP=3./(4.-X3**2)                                                00004100
      A1=(2.*X1-X3*X2)*TEMP                                             00004200
      B1=(2.*X2-X3*X1)*TEMP                                             00004300
C---      IF A1 OR B1 IS NEGATIVE, IGNORE THESE VALUES                  00004400
      IF(A1.LT.SMAL.OR.B1.LT.SMAL) GO TO 7                              00004500
      A=A1                                                              00004600
      B=B1                                                              00004700
    7 CONTINUE                                                          00004800
C---      NOW SAVE THESE A,B ESTIMATES AS A BACKUP                      00004900
      ASAVE=A                                                           00005000
      BSAVE=B                                                           00005100
C                                                                       00005200
      IF(ILEVEL.LE.2) GO TO 70                                          00005300
      ICT=0                                                             00005400
C                                                                       00005500
   10 CONTINUE                                                          00005600
C---      ICT IS THE COUNT OF THE NUMBER OF NEWTON RHAPSON ITERATIONS   00005700
      IF(ICT.GT.MXCT) GO TO 70                                          00005800
      DO 20 I=1,6                                                       00005900
   20 AREA(I)=ZERO                                                      00006000
C                                                                       00006100
C---      PERFORM INTEGRATION TO OBTAIN ESTIMATES OF TENSION AND DERIVS.00006200
      DO 30 I=ISTART,IEND                                               00006300
      SIMFAC=4.                                                         00006400
      IF(MOD(I,2).EQ.1) SIMFAC=2.                                       00006500
      IF(I.EQ.ISTART.OR.I.EQ.IEND) SIMFAC=1.                            00006600
      SIMFAC=SIMFAC*H3                                                  00006700
      MODE=0                                                            00006800
      IF(I.EQ.ISTART) MODE=1                                            00006900
      U=(I-1.)*H                                                        00007000
C                                                                       00007100
      CALL ADER(DIF,TA,TB,A,B,U,MODE,SUM)                               00007200
C                                                                       00007300
      IF(IBUG.EQ.11) CALL BAD(-6,1,'SUM ',SUM)                          00007400
      DO 40 J=1,6                                                       00007500
   40 AREA(J)=SIMFAC*SUM(J)+AREA(J)                                     00007600
C                                                                       00007700
   30 CONTINUE                                                          00007800
C                                                                       00007900
      IF(IBUG.EQ.11) CALL BAD(-6,1,'AREA',AREA)                         00008000
C                                                                       00008100
C---      ESTIMATE CHANGE DA,DB IN A,B TO REDUCE TENSION IN CURVE       00008200
      DET=AREA(4)*AREA(6)-AREA(5)**2                                    00008300
      IF(DABS(DET).GT.SMAL) GO TO 50                                    00008400
C---      USE THE PREVIOUS VALUES FOR A,B                               00008500
      A=ASAVE                                                           00008600
      B=BSAVE                                                           00008700
      GO TO 70                                                          00008800
C                                                                       00008900
   50 CONTINUE                                                          00009000
C                                                                       00009100
      DA=(-AREA(2)*AREA(6)+AREA(3)*AREA(5))/DET                         00009200
      DB=(-AREA(4)*AREA(3)+AREA(5)*AREA(2))/DET                         00009300
C                                                                       00009400
      RATIO=DSQRT(DA**2+DB**2)/DSQRT(A**2+B**2)                         00009500
      IF(IBUG.NE.11) GO TO 93                                           00009600
      CALL BAD(-1,0,' ',0)                                              00009700
      BADMSG=' ENTRY TO CRVLEN'                                         00009710
      CALL CPRINT(BADMSG)                                               00009720
      CALL BAD(1,1,'A   ',A)                                            00009800
      CALL BAD(1,1,'B   ',B)                                            00009900
      CALL BAD(1,1,'DA  ',DA)                                           00010000
      CALL BAD(1,1,'DB  ',DB)                                           00010100
      CALL BAD(-1,1,'RATI',RATIO)                                       00010200
   93 CONTINUE                                                          00010300
      A=A+DA                                                            00010400
      B=B+DB                                                            00010500
      IF(RATIO.LT.CTOLR) GO TO 70                                       00010600
C                                                                       00010700
      ICT=ICT+1                                                         00010800
      GO TO 10                                                          00010900
C                                                                       00011000
   70 CONTINUE                                                          00011100
C---      A NEGATIVE A OR B IS NOT ACCEPTABLE SO USE THE BACKUP         00011200
C---      VALUES IF A OR B ARE NEGATIVE                                 00011300
      IF(A.GT.ZERO.AND.B.GT.ZERO) GO TO 999                             00011400
      A=ASAVE                                                           00011500
      B=BSAVE                                                           00011600
  999 CONTINUE                                                          00011700
      IF(IBUG.NE.11) GO TO 998                                          00011800
      CALL BAD(-1,0,' ',0)                                              00011900
      BADMSG=' EXIT FROM CRVLEN'                                        00011910
      CALL CPRINT(BADMSG)                                               00011920
      CALL BAD(1,1,'A   ',A)                                            00012000
      CALL BAD(1,1,'B   ',B)                                            00012100
      CALL BAD(1,1,'ASAV',ASAVE)                                        00012200
      CALL BAD(-1,1,'BSAV',BSAVE)                                       00012300
      CALL BAD(-1,0,' ',0)                                              00012400
  998 CONTINUE                                                          00012500
C                                                                       00012600
      RETURN                                                            00012700
      END                                                               00012800
**** SOURCE FILE : M0001059.V06   ***
*
      SUBROUTINE CTRANS(PROFIL,CROS,KCASE,MAXSRF,SURF,IRR)              00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---      PROFIL =INPUT SYNTHETIC PROFILE CURVE                         00000300
C---      CROS = INPUT SYNTHETIC CROSS COMMAND CURVE                    00000400
C---      KCASE =INPUT  TYPE OF CROSS TRANSFORMATION TO USE             00000500
C---         =1 GIVES TRANSL, =2 GIVES XYROT, =3 GIVES YZROT            00000600
C---         =4 GIVES ZXROT, =5 GIVES SCALE                             00000700
C---      MAXSRF =INPUT IS THE MAXIMUM SPACE AVAILABLE FOR SURF         00000800
C---      SURF IS THE OUTPUT ARRAY WHICH CONTAINS THE SURFACE           00000900
C---      (LESS TOPOLOGY TABLE)                                         00001000
C---      IRR =OUTPUT, IF NON ZERO ON RETURN INDICATES ERROR.           00001100
C---      THIS SUBROUTINE ACCEPTS AN INPUT OF A PROFILE CURVE           00001200
C---      PROFIL OF N ARCS AND A CROSS CURVE CROS OF K ARCS.            00001300
C---      A MESH-LIKE SURFACE OF N*K RATIONAL BICUBIC PATCHES           00001400
C---      IS CONSTRUCTED BY TRANSFORMING EACH OF THE PROFILE ARCS       00001500
C---      BY THE CROSS COMMAND CURVE ARCS.  THE IMPLIED SPLINE          00001600
C---      DIRECTION IS DETERMINED BY THE PROFILE CURVE AND              00001700
C---      THE CROSS DIRECTION BY THE CROSS COMMAND CURVE.               00001800
C                                                                       00001900
      DIMENSION PROFIL(*),CROS(*),SURF(*)                               00002000
C                                                                       00002100
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00002200
C                                                                       00002300
C---      THE FOLLOWING ARRAYS ARE USED TO HOLD THE SELECTOR            00002320
C---      MATRIX BSEL AND BOTH INTERIM AND FINAL RATIONAL BICUBIC       00002330
C---      PATCH MATRICES BMAT.                                          00002340
      DIMENSION BSEL(16,4),BMAT(16,4),TRN(16)                           00002350
C---                                                                    00002360
C---      THE FOLLOWING ARRAYS HOLD INFORMATION NECESSARY TO            00002400
C---      GENERATE SELECTOR MATRICES BASED ON THE CASE(KCASE)           00002500
      DIMENSION IB(89),BX(2)                                            00002600
      DATA IB/                                                          00002700
     X 101,4,1,13,1,102,8,1,14,1,103,12,1,15,1,104,16,1,9999,           00002800
     X 201,1,1,6,2,202,2,1,5,1,203,12,1,15,1,204,16,1,9999,             00002900
     X 301,4,1,13,1,302,6,1,11,1,303,7,1,10,1,304,16,1,9999,            00003000
     X 401,3,2,9,1,402,8,1,14,1,403,1,1,11,1,404,16,1,9999,             00003100
     X 501,1,1,502,6,1,503,11,1,504,16,1,9999/                          00003200
      DATA IBMAX/89/                                                    00003300
      DATA IEND/9999/                                                   00003400
C---     THE FOLLOWING ARRAY HOLDS REAL VALUES WHICH IB POINTS TO.      00003500
      DATA NBX/2/                                                       00003600
      DATA BX/1.0D0,-1.0D0/                                             00003700
      DATA ZERO,ONE/0.0D0,1.0D0/                                        00004300
C                                                                       00004400
C---     THE SIZE OF THE HEADER TABLE AND NUMBER OF ARCS FOR BOTH CURVES00004500
      NHDPRO=PROFIL(2)                                                  00004600
      NARCP=PROFIL(4)                                                   00004700
      NHDCRS=CROS(2)                                                    00004800
      NARCC=CROS(4)                                                     00004900
C***      CHECK FOR ENOUGH ROOM FOR SURFACE                             00005000
      IRR=1                                                             00005100
      NPAT=NARCP*NARCC                                                  00005200
      IF(10+NPAT*74.GT.MAXSRF) GO TO 990                                00005300
C---     SET UP THE BSEL MATRIX FOR THIS KCASE(LOGIC IS USED            00005400
C---     TO PREVENT STORING MANY COMPLETE BSEL-S)                       00005500
      DO 101 L=1,4                                                      00005600
      DO 101 K=1,16                                                     00005700
  101 BSEL(K,L)=ZERO                                                    00005800
C---      NOW SKIM THRU THE IB ARRAY TO PICK UP NONZERO BSEL VALUES     00005900
      I=1                                                               00006000
  201 CONTINUE                                                          00006100
C***     ERROR IN IB SET-UP                                             00006200
      IRR=2                                                             00006300
      IF(I.GT.IBMAX) GO TO 990                                          00006400
      IF(IB(I)/100.EQ.KCASE) GO TO 203                                  00006500
      I=I+1                                                             00006600
      GO TO 201                                                         00006700
  203 CONTINUE                                                          00006800
      IF(IB(I).EQ.IEND) GO TO 210                                       00006900
      IF(IB(I).LT.100) GO TO 205                                        00007000
      JMAT=MOD(IB(I),100)                                               00007100
      I=I+1                                                             00007200
      GO TO 203                                                         00007300
  205 CONTINUE                                                          00007400
      JVAL=IB(I+1)                                                      00007500
      IVAL=IB(I)                                                        00007600
C***     INVALID INDEX, SYSTEM ERROR                                    00007700
      IRR=3                                                             00007800
      IF(IVAL.LT.1.OR.IVAL.GT.16) GO TO 990                             00007900
      IF(JMAT.LT.1.OR.JMAT.GT.4) GO TO 990                              00008000
      IF(JVAL.LT.1.OR.JVAL.GT.NBX) GO TO 990                            00008100
C                                                                       00008200
      BSEL(IVAL,JMAT)=BX(JVAL)                                          00008300
      I=I+2                                                             00008400
      GO TO 203                                                         00008500
  210 CONTINUE                                                          00008600
C                                                                       00008700
      IF(IBUG.NE.11) GO TO 212                                          00008800
      DO 213 L=1,4                                                      00008900
      DO 213 K=1,4                                                      00009000
      KK=(K-1)*4+1                                                      00009100
      CALL BAD(-4,1,'BSEL',BSEL(KK,L))                                  00009200
  213 CONTINUE                                                          00009300
  212 CONTINUE                                                          00009400
C                                                                       00009500
C---      FIRST INITIALIZE SURFACE HEADER DATA                          00009600
      SURF(1)=ZERO                                                      00009700
      APAT=NPAT                                                         00009800
      SURF(2)=APAT*64.                                                  00009900
      SURF(3)=APAT*4.                                                   00010000
      SURF(4)=APAT                                                      00010100
      SURF(5)=2.                                                        00010200
      SURF(6)=5.                                                        00010300
      SURF(7)=ONE                                                       00010400
      SURF(8)=APAT*74.+10.                                              00010500
      SURF(9)=NARCC+1                                                   00010600
      SURF(10)=NARCP+1                                                  00010700
C---     SET UP PATCH HEADER TABLE                                      00010800
      AFX=10.+APAT*6.+1.                                                00010900
      ILOC=10                                                           00011000
      DO 310 L=1,NPAT                                                   00011100
      DO 320 K=1,4                                                      00011200
  320 SURF(ILOC+K)=4.                                                   00011300
      SURF(ILOC+5)=AFX                                                  00011400
      SURF(ILOC+6)=ZERO                                                 00011500
      ILOC=ILOC+6                                                       00011600
      AFX=AFX+64.                                                       00011700
  310 CONTINUE                                                          00011800
C                                                                       00011900
C---     MAIN LOOP  COMPUTE EACH RATIONAL PATCH AND PLACE IN SURF       00012000
      DO 301 IC=1,NARCC                                                 00012100
      LOCC=(NHDCRS+IC-1)*24+1                                           00012200
      IF(IBUG.EQ.11) CALL BAD(-16,1,'CROS',CROS(LOCC))                  00012300
      DO 301 IP=1,NARCP                                                 00012400
      LOCP=(NHDPRO+IP-1)*24+1                                           00012500
C                                                                       00012600
C---     TRANSPOSE THE PROFILE MATRIX                                   00012700
      IF(IBUG.EQ.11) CALL BAD(-16,1,'PROF',PROFIL(LOCP))                00012800
      CALL TRANSP(PROFIL(LOCP),TRN,4)                                   00012900
      IF(IBUG.EQ.11) CALL BAD(-16,1,'TRN ',TRN)                         00013000
C                                                                       00013100
      DO 302 J=1,4                                                      00013200
C---     NOTE THAT SMMULT(A,B,C) GIVES C=B*A                            00013300
      CALL SMMULT(4,4,4,3,CROS(LOCC),BSEL(1,J),BMAT(1,J))               00013400
C---      BMAT=BSEL*CROS, THEN BMAT=BMAT*TRN                            00013500
      CALL SMMULT(4,4,4,3,BMAT(1,J),TRN,BMAT(1,J))                      00013600
C---     NOW BACK TRANSPOSE THE BMAT RESULT                             00013700
      CALL TRANSP(BMAT(1,J),BMAT(1,J),4)                                00013800
      IF(IBUG.NE.11) GO TO 314                                          00013900
      DO 315 L=1,4                                                      00014000
      LL=(L-1)*4+1                                                      00014100
      CALL BAD(-4,1,'BMAT',BMAT(LL,J))                                  00014200
  315 CONTINUE                                                          00014300
  314 CONTINUE                                                          00014400
  302 CONTINUE                                                          00014500
C---      NOW TRANSFER THE RATIONAL MATRIX BMAT TO SURF                 00014600
      IPAT=(IC-1)*NARCP+IP                                              00014700
      LOC=10+IPAT*6-1                                                   00014800
      LOC=SURF(LOC)                                                     00014900
      DO 303 JJ=1,4                                                     00015000
      DO 303 KK=1,16                                                    00015100
      SURF(LOC)=BMAT(KK,JJ)                                             00015200
      LOC=LOC+1                                                         00015300
  303 CONTINUE                                                          00015400
C                                                                       00015500
  301 CONTINUE                                                          00015600
C                                                                       00015700
  980 CONTINUE                                                          00015800
      IRR=0                                                             00015900
      GO TO 999                                                         00016000
C                                                                       00016100
  990 CONTINUE                                                          00016200
      CALL BAD(-1,0,'CTRN',IRR)                                         00016300
      GO TO 999                                                         00016400
C                                                                       00016500
  999 CONTINUE                                                          00016600
C                                                                       00016700
      IF(IBUG.NE.11) GO TO 998                                          00016800
      NN=NPAT*74+10                                                     00016900
      CALL BAD(-NN,1,'SURF',SURF)                                       00017000
  998 CONTINUE                                                          00017100
C                                                                       00017200
      RETURN                                                            00017300
      END                                                               00017400
**** SOURCE FILE : M0000623.V01   ***
*
      SUBROUTINE CURFIT( PA, PB, PC, PD, TA, TD, KTYP, IRR )            00000020
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000040
      DIMENSION PA(3),PB(3),PC(3),PD(3),TA(3),TD(3)                     00000060
      DIMENSION CCOEF(3,4), RP(3), RDN(3)                               00000080
      IDIAG = 27000                                                     00000100
      IRR = 0                                                           00000120
C------INPUT IS FOUR POINTS PA,PB,PC,PD IN LINEAR ORDER                 00000140
C------OUTPUT IS TANGENT VECTORS TA,TD OF A SMOOTH CUBIC CURVE          00000160
C------WHICH PASSES THRU THE INPUT POINTS.  IF IRR.NE.0 , THEN          00000180
C------THERE IS POTENTIAL TROUBLE IN THE INPUT POINTS                   00000200
C------THE FIRST STEP IS A CHECK FOR EQUALITY OF PB AND PC              00000220
C------KTYP IS OUTPUT CURVE TYPE. 1=NULL CURVE,                         00000240
C------2=STRAIGHT SEGMENT, 3= THREE POINT CURVE, 4= FOUR PT CURVE       00000260
      D1=DSQRT((PB(1)-PA(1))**2+(PB(2)-PA(2))**2+(PB(3)-PA(3))**2)      00000280
      D2=DSQRT((PC(1)-PB(1))**2+(PC(2)-PB(2))**2+(PC(3)-PB(3))**2)      00000300
      D3=DSQRT((PD(1)-PC(1))**2+(PD(2)-PC(2))**2+(PD(3)-PC(3))**2)      00000320
      DT = D1 + D2 + D3                                                 00000340
C------VARIOUS CHECKS ARE MADE ON THE INPUT TO DETECT DEGENERATE CASES  00000360
C------FOR EXAMPLE PA=PB=PC.NE.PD WILL INDICATE A SRAIGHT LINE THRU     00000380
C------PA AND PD.                                                       00000400
      CRIT = 0.00001                                                    00000420
      IF( DT .GT. CRIT ) GO TO 100                                      00000440
C------THIS IS CASE OF A ZERO CURVE                                     00000460
      DO 10 I = 1, 3                                                    00000480
      TA(I) = 0.                                                        00000500
   10 TD(I) = 0.                                                        00000520
      KTYP = 1                                                          00000540
      GO TO 999                                                         00000560
  100 CONTINUE                                                          00000580
      IF ( D1 .GT. CRIT .AND. D2 .GT. CRIT ) GO TO 200                  00000600
      IF ( D1 .GT. CRIT .AND. D3 .GT. CRIT ) GO TO 200                  00000620
      IF ( D2 .GT. CRIT .AND. D3 .GT. CRIT ) GO TO 200                  00000640
C------THE STRAIGHT LINE CASE                                           00000660
      DO 120 I = 1, 3                                                   00000680
      TA(I) = PD(I) - PA(I)                                             00000700
  120 TD(I) = TA(I)                                                     00000720
      KTYP = 2                                                          00000740
      GO TO 999                                                         00000760
C------FINALLY CHECK FOR THREE POINT DEGENERACY                         00000780
  200 CONTINUE                                                          00000800
      IF ( D1 .LT. CRIT ) GO TO 400                                     00000820
      IF ( D2 .LT. CRIT ) GO TO 400                                     00000840
      IF ( D3 .LT. CRIT ) GO TO 400                                     00000860
C------THE NON TRIVIAL FOUR POINT CURVE FOLLOWS                         00000880
      CALL FORCUB ( PA, PB, PC, PD, TA, TD, IRR )                       00000900
      IF ( IRR .EQ. 0 ) GO TO 310                                       00000920
C------TRY A MORE RUDIMENTARY ESTIMATE OF TA AND TD                     00000940
      DO 320 I = 1, 3                                                   00000960
      TA(I) = ( PB(I) - PA(I) )*DT/D1                                   00000980
      TD(I) = ( PD(I) - PC(I) )*DT/D3                                   00001000
  320 CONTINUE                                                          00001020
  310 CONTINUE                                                          00001040
C------NOW PROJECT PB AND PC ONTO THE INITIAL ESTIMATED CURVE           00001060
      DO 330 I = 1, 3                                                   00001080
      CCOEF(I,1) = PA(I)                                                00001100
      CCOEF(I,2) = PD(I)                                                00001120
      CCOEF(I,3) = TA(I)                                                00001140
  330 CCOEF(I,4) = TD(I)                                                00001160
      DF1=PD(1)-PA(1)                                                   00001242
      DF2=PD(2)-PA(2)                                                   00001243
      DF3=PD(3)-PA(3)                                                   00001244
      DDF=DF1*DF1+DF2*DF2+DF3*DF3+1.0D-30                               00001245
      B=((PB(1)-PA(1))*DF1+(PB(2)-PA(2))*DF2+(PB(3)-PA(3))*DF3)/DDF     00001247
      C=((PC(1)-PA(1))*DF1+(PC(2)-PA(2))*DF2+(PC(3)-PA(3))*DF3)/DDF     00001248
      CALL PARMPT ( PA, PD, PB, B, PC, C, TA, TD, IRR)                  00001260
      KTYP = 4                                                          00001280
      GO TO 999                                                         00001300
C------THE THREE POINT DEGENERATE CASE FOLLOWS                          00001320
  400 CONTINUE                                                          00001340
C------PB SHOULD BE THE NONTRIVIAL THIRD POINT                          00001360
      IF ( D1 .GT. CRIT ) GO TO 410                                     00001380
      DO 420 I = 1, 3                                                   00001400
  420 PB(I) = PC(I)                                                     00001420
  410 CONTINUE                                                          00001440
      CALL PARINT ( PA, PB, PD, TA, R, 1, IRR)                          00001460
      IF ( IRR .NE. 0) GO TO 430                                        00001480
      CALL PARINT ( PA, PB, PD, TD, R, 3, IRR)                          00001500
      GO TO 450                                                         00001520
  430 CONTINUE                                                          00001540
      IRR=0                                                             00001560
      DO 440 I = 1, 3                                                   00001580
      TA(I) = ( PB(I) - PA(I) )/DMAX1(D1,D2)                            00001600
      TD(I) = ( PD(I) - PB(I) )/DMAX1(D2,D3)                            00001620
  440 CONTINUE                                                          00001640
  450 CONTINUE                                                          00001660
C------NOW PROJECT THE PB ONTO THE INITIAL CURVE                        00001680
      DF1=PD(1)-PA(1)                                                   00001700
      DF2=PD(2)-PA(2)                                                   00001720
      DF3=PD(3)-PA(3)                                                   00001740
      DDF=DF1*DF1+DF2*DF2+DF3*DF3+1.0D-12                               00001760
      B=((PB(1)-PA(1))*DF1+(PB(2)-PA(2))*DF2+(PB(3)-PA(3))*DF3)/DDF     00001780
C------DETERMINE A SCALAR X SUCH THAT THE VECTORS X*TA AND X*TD         00001840
C------MAKE A CLOSEST APPROACH TO THE POINT PB AT THE PARAMETER         00001860
C------VALUE B.                                                         00001880
      BSQ  = B*B                                                        00001900
      BCB  = B*BSQ                                                      00001920
      SUMA = 0.                                                         00001940
      SUMB = 0.                                                         00001960
      DO 470 I = 1, 3                                                   00001980
      DEL = PD(I) - PA(I)                                               00002000
      R   = PA(I) + DEL*( 3*BSQ - 2*BCB )                               00002020
      S   = TA(I)*( B - BSQ - BSQ + BCB ) + TD(I)*( -BSQ + BCB )        00002040
C------MINIMIZE THE FORM (R+ X*S - PB)**2 WITH RESPECT TO X             00002060
      R   = R - PB(I)                                                   00002080
      SUMA = SUMA + R*S                                                 00002100
      SUMB = SUMB + S*S                                                 00002120
  470 CONTINUE                                                          00002140
      IF ( DABS(SUMB) .LT. 1.0D-8 ) X = 1.0                             00002160
      IF ( DABS(SUMB) .GE. 1.0D-8 ) X = -SUMA/SUMB                      00002180
      DO 480 I = 1, 3                                                   00002200
      TA(I) = X*TA(I)                                                   00002220
  480 TD(I) = X*TD(I)                                                   00002240
      KTYP = 3                                                          00002260
      IRR = 0                                                           00002280
  999 RETURN                                                            00002300
      END                                                               00002320
**** SOURCE FILE : M0000626.V02   ***
*
      SUBROUTINE DISEG(ISEG,CIN,COUT,MXOUT,IERROR)                      00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---     PURPOSE IS TO EXTRACT A SINGLE SEGMENT FROM AN S-CURV          00000300
C---     AND TO CONVERT IT INTO A COMPLETE SYNTHETIC CURVE WITH         00000400
C---     A SINGLE FLOW SEGMENT                                          00000500
C---     INPUT ISEG REFERS TO A VALID CURVE SEGMENT FOR A FLOW          00000600
C---     TYPE ARC.  IF THE ARC IS A SIMPLE NON FLOW TYPE ISEG           00000700
C---     DEFAULTS TO AN ARC REFERENCE.  FINALLY A NEGATIVE ISEG         00000800
C---     ALWAYS REFERS TO AN ARC.                                       00000900
C---     CIN IS THE INPUT CURVE STRUCTURE                               00001000
C---     COUT IS THE OUTPUT SINGLE SEGMENT STRUCTURE                    00001100
C---     MXOUT IS THE MAXIMUM SPACE AVAILABLE FOR AN OUTPUT CURVE       00001200
C---     IERROR NOT ZERO ON RETURN INDICATES AN ERROR                   00001300
C                                                                       00001400
      DIMENSION CIN(*),COUT(*)                                          00001500
      DATA ONE,ZERO,SMAL/1.0D0,0.0D0,1.0D-7/                            00001600
C                                                                       00001700
C---     BRANCH TO ARC CALCULATION IF ISEG IS NEGATIVE                  00001800
      IF(ISEG.LT.0) GO TO 300                                           00001900
      NSEG=CIN(8)                                                       00002000
      IF(NSEG.EQ.0) GO TO 300                                           00002100
C****    INPUT SEGMENT NUMBER IS INVALID                                00002200
C---    DETERMINE ARCS WHICH MAKE UP THIS SEGMENT REFERENCE             00002300
      IERROR=01                                                         00002400
      IF(ISEG.LT.1.OR.ISEG.GT.NSEG) GO TO 9998                          00002500
      NSEGRW=CIN(9)+(ISEG-1)*4                                          00002600
      NARC1=CIN(NSEGRW)*4.+CIN(7)                                       00002700
      NARC2=NARC1+(CIN(NSEGRW+1)-ONE)*4.                                00002800
      NFLOW1=CIN(NARC1)                                                 00002900
      NFLOW2=CIN(NARC2)+CIN(NARC2+1)*4.-ONE                             00003000
C---     ARC NUMBERS                                                    00003100
      N1=CIN(NSEGRW)+ONE                                                00003200
      N2=N1+CIN(NSEGRW+1)-ONE                                           00003300
C---     SET UP HEADER TABLE FIRST                                      00003400
      COUT( 1)=ZERO                                                     00003500
      COUT( 2)=ONE                                                      00003600
      COUT( 3)=10.                                                      00003700
      COUT( 4)=(NARC2-NARC1)/4+1                                        00003800
      COUT( 5)=COUT(2)*24.+ONE                                          00003900
      COUT( 6)=COUT(4)                                                  00004000
      COUT( 7)=COUT(5)+COUT(4)*24.                                      00004100
      COUT( 8)=ONE                                                      00004200
      COUT( 9)=COUT(7)+COUT(6)*4.                                       00004300
      COUT(10)=(NFLOW2-NFLOW1+1)/4                                      00004400
      COUT(11)=COUT(9)+4.*COUT(8)                                       00004500
      COUT(12)=COUT(11)+COUT(10)*4.-ONE                                 00004600
      COUT(13)=ONE                                                      00004700
      NARC=COUT(4)                                                      00004800
      NSIZE=COUT(12)                                                    00004900
C****    CURVE TOO LARGE FOR BUFFER AREA                                00005000
      IERROR=02                                                         00005100
      IF(NSIZE.GT.MXOUT) GO TO 9998                                     00005200
C---     ZERO OUT REMAINDER OF CANON AREA                               00005300
      DO 100 I=14,NSIZE                                                 00005400
  100 COUT(I)=ZERO                                                      00005500
      NARC=COUT(4)                                                      00005600
C---     NOW MOVE CUBIC ARC DATA                                        00005700
      KO=COUT(5)-9.                                                     00005800
      KI=CIN(5)-8.+(N1-1)*24                                            00005900
      NN=KI+COUT(4)*24.+7                                               00006000
      DO 110 I=KI,NN                                                    00006100
      KO=KO+1                                                           00006200
      COUT(KO)=CIN(I)                                                   00006300
  110 CONTINUE                                                          00006400
C                                                                       00006500
C---     NOW MOVE ARC FLOW SUMMARY BLOCKS                               00006600
      KO=COUT(7)-ONE                                                    00006700
      KI=NARC1-1                                                        00006800
      ABIAS=CIN(KI+1)-COUT(11)                                          00006900
      DO 140 I=1,NARC                                                   00007000
      KOX=KO+(I-1)*4                                                    00007100
      KIX=KI+(I-1)*4                                                    00007200
      DO 150 J=2,4                                                      00007300
  150 COUT(KOX+J)=CIN(KIX+J)                                            00007400
      COUT(KOX+1)=CIN(KIX+1)-ABIAS                                      00007500
  140 CONTINUE                                                          00007600
C---     MOVE SEGMENT DATA                                              00007700
      KI=CIN(9)-ONE+(ISEG-1)*4                                          00007800
      KO=COUT(9)-ONE                                                    00007900
      COUT(KO+1)=ZERO                                                   00008000
      COUT(KO+2)=CIN(KI+2)                                              00008100
      COUT(KO+3)=CIN(KI+3)                                              00008200
      COUT(KO+4)=CIN(KI+4)                                              00008300
C---    FINALLY TRANSFER ALL PERTINENT FLOW BLOCKS                      00008400
      KI=CIN(NSEGRW)*4.+CIN(7)                                          00008500
      KI=CIN(KI)-ONE                                                    00008600
      KO=COUT(11)-ONE                                                   00008700
      NFLOW=COUT(10)*4.                                                 00008800
      DO 160 I=1,NFLOW                                                  00008900
  160 COUT(KO+I)=CIN(KI+I)                                              00009000
C---                                                                    00009100
      GO TO 9997                                                        00009200
C                                                                       00009300
C                                                                       00009400
C---     SURFACE IS OF SIMPLE NON-FLOW TYPE. ISEG IS THEN AN            00009500
C---     ARC-TYPE REFERENCE                                             00009600
  300 CONTINUE                                                          00009700
      IARC=IABS(ISEG)                                                   00009800
      NSIZE=48                                                          00009900
C****    THERE IS NOT ENOUGH ROOM TO DECOMPOSE ARC                      00010000
      IERROR=03                                                         00010100
      IF(NSIZE.GT.MXOUT) GO TO 9998                                     00010200
      DO 310 I=1,48                                                     00010300
  310 COUT(I)=ZERO                                                      00010400
      COUT(2)=ONE                                                       00010500
      COUT(3)=2.                                                        00010600
      COUT(4)=ONE                                                       00010700
      COUT(12)=48.                                                      00010800
      NSEG=CIN(4)                                                       00010900
C****    ARC REFERENCE IS OUT OF RANGE                                  00011000
      IERROR=04                                                         00011100
      IF(IARC.LT.1.OR.IARC.GT.NSEG) GO TO 9998                          00011200
      NBASI=CIN(2)*24.+(IARC-1)*24-8.                                   00011300
      NBASO=COUT(2)*24.-8.                                              00011400
      DO 320 I=1,32                                                     00011500
  320 COUT(I+NBASO)=CIN(I+NBASI)                                        00011600
      GO TO 9997                                                        00011700
C                                                                       00011800
 9997 CONTINUE                                                          00011900
      IERROR=0                                                          00012000
      GO TO 9999                                                        00012100
 9998 CONTINUE                                                          00012200
C---    ERROR EXIT PATH                                                 00012300
      GO TO 9999                                                        00012400
C                                                                       00012500
 9999 CONTINUE                                                          00012600
      RETURN                                                            00012700
      END                                                               00012800
**** SOURCE FILE : M0000627.V02   ***
*
      SUBROUTINE FLOINV(U,SC,FLO,ISEG)                                  00000100
C---     PURPOSE IS TO CONVERT A COONS PARAMETER U                      00000200
C---     INTO A FLOW VALUE FLO AND SEGMENT NUMBER ISEG                  00000300
C---     ON A GIVEN FLOW CURVE SC.                                      00000400
C---     PRESENT ROUTINE ONLY WORKS FOR INTEGRAL U                      00000500
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000600
      DIMENSION SC(*)                                                   00000700
C                                                                       00000800
      NUMSEG=SC(8)                                                      00000900
      IF(NUMSEG.GT.0) GO TO 10                                          00001000
C---     CURVE HAS NO FLOW STRUCTURE, SET FLO TO U                      00001100
      U=FLO                                                             00001200
      ISEG=0                                                            00001300
      GO TO 999                                                         00001400
C                                                                       00001500
   10 CONTINUE                                                          00001600
      LOCSEG=SC(9)-5.                                                   00001700
C---     FIRST SEARCH FOR A SEGMENT NUMBER                              00001800
      ISEG=1                                                            00001900
   20 CONTINUE                                                          00002000
      IF(ISEG.GE.NUMSEG)GO TO 40                                        00002100
      LOCSEG=LOCSEG+4                                                   00002200
      IF(U.LT.SC(LOCSEG+1)) GO TO 40                                    00002300
      IF(U.LE.SC(LOCSEG+2)) GO TO 40                                    00002400
      ISEG=ISEG+1                                                       00002500
      GO TO 20                                                          00002600
C                                                                       00002700
   40 CONTINUE                                                          00002800
C---     NOW DETERMINE THE FLOW VALUE WITHIN THIS SEGMENT               00002900
      JUNC=U                                                            00003000
      NUMARC=SC(4)                                                      00003100
      IARC=JUNC+1                                                       00003200
      IF(JUNC.GE.NUMARC) IARC=NUMARC                                    00003300
      LOCARC=SC(7)+(IARC-1)*4                                           00003400
      NN=1                                                              00003500
      LOCFLO=SC(LOCARC)                                                 00003600
      IF(JUNC.GE.NUMARC) NN=SC(LOCARC+1)                                00003700
      LOCFLO=LOCFLO+(NN-1)*4                                            00003800
      FLO=SC(LOCFLO)                                                    00003900
  999 CONTINUE                                                          00004000
      RETURN                                                            00004100
      END                                                               00004200
**** SOURCE FILE : M0004340.V09   ***
*
      SUBROUTINE FLOSEG(NSIZE,NSZSAV,MODE,IFLSEG,IRR)                   00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C                                                                       00000310
      INCLUDE 'BLANKCOM.INC'                                            00000320
C                                                                       00000330
      INCLUDE 'SSPAD.INC'                                               00000410
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000500
      DIMENSION ST(4,ISCN/4)                                            00000800
      EQUIVALENCE (SCAN(1),ST(1,1))                                     00000900
      LOGICAL IFLOW,ISEG                                                00001000
      DIMENSION STEMP(4,100)                                            00001300
      DIMENSION PP(4,3)                                                 00001400
C                                                                       00001500
      DOUBLE PRECISION LIMIT,NORMAL                                     00001600
C---     THE FOLLOWING ARRAY, DARRAY, IS SHARED FOR PRINTING            00001700
      INCLUDE 'DARRAY.INC'                                              00001810
      INTEGER IZAL2(3),IZAL3(6),IZAL4(3),IZAL5(3)                       00001820
      CHARACTER*8 RNAM1,RNAM2,RNAM3,RNAM4,RNAM5,RNAMA,RNAME             00001830
      CHARACTER*8 SEG,ARC,PARAM,CHORD,FLOW,LENGTH,ANGLE,TEST            00001840
C                                                                       00001890
      DATA MAXNOP/30/                                                   00001900
      DATA NHD/1/                                                       00002000
      DATA POINT /19./                                                  00002100
      DATA VECTOR/20./                                                  00002200
      DATA AREAL /21./                                                  00002300
      DATA AFLOW,ASEG/149.0D0,150.0D0/                                  00002900
C---      LSTEMX IS THE MAXIMUM NUMBER OF ROWS IN STEMP                 00002910
      DATA MAXSC,LSTEMX/96,100/                                         00002920
      DATA SEG/'SEG     '/                                              00003300
      DATA ARC/'ARC     '/                                              00003400
      DATA PARAM/'PARAM   '/                                            00003500
      DATA CHORD/'CHORD   '/                                            00003600
      DATA FLOW/'FLOW    '/                                             00003700
      DATA LENGTH/'LENGTH  '/                                           00003800
      DATA ANGLE/'ANGLE   '/                                            00003900
      DATA ZERO,ONE,SMAL,BIG/0.0D0, 1.0D0, 1.0D-7, 99999999.0D0/        00004200
      DATA TOLR/0.005D0/                                                00004400
      DATA    RNAM1   /'FLOSEG  '/,RNAM2   /'ANGSEG  '/,                00004410
     *          RNAM3   /'CHDSEG  '/,RNAM4   /'ARCSEG  '/,              00004420
     *          RNAM5   /'ANGDER  '/,                                   00004430
     *          RNAMA   /'FLOSEG??'/,RNAME   /'        '/               00004440
      DATA IMAX2/ 3/,IZAL2                                              00004450
     *                  / 5508, 5509, 5510/                             00004460
      DATA IMAX3/ 6/,IZAL3                                              00004470
     *                  / 5502, 5503, 5504, 5505, 5506, 5507/           00004480
      DATA IMAX4/ 3/,IZAL4                                              00004490
     *                  / 5501, 5522, 5523/                             00004492
      DATA IMAX5/ 3/,IZAL5                                              00004494
     *                  / 5519, 5511, 5512/                             00004496
C                                                                       00004500
C                                                                       00004600
      NP=0                                                              00004700
      NH=41                                                             00004800
      ANH=NH                                                            00004900
      NHD1=NHD+1                                                        00005000
      NS=NH+8                                                           00005400
C--- MODE=2 MEANS PROCESS FLOW COMMANDS PREVIOUSLY STORED               00005500
C---      IN STEMP                                                      00005600
C--- MODE=1 MEANS PERFORM PRELIMINARY SCAN OF SCURV INPUT-STREAM        00005700
C---      AND STORE FLOW DATA, IF ANY, IN STEMP.                        00005800
      IF(MODE.EQ.2) GO TO 2000                                          00005900
C                                                                       00006000
C---     PERFORM A PRELIMINARY SCAN OF DATA TO LOCATE FLOW              00006100
C---     AND SEGMENT INFORMATION IN THE DEFINITION                      00006200
C---     LSTEMP IS THE POINTER TO THE LAST USED ROW IN STEMP            00006300
C---     IFLOW IS TRUE ONLY WHILE PROCESSING FLOW BLOCKS                00006400
C---     ISEG IS TRUE ONLY WHILE PROCESSING SEGMENT BLOCKS              00006500
C---     NSEGST POINTS TO THE STARTING ROW FOR SEGMENT INFORMATION      00006600
C---     NFLOST POINTS TO THE STARTING ROW FOR FLOW INFORMATION         00006700
      IFLOW=.FALSE.                                                     00006800
      ISEG=.FALSE.                                                      00006900
      NFLOST=0                                                          00007000
      NSEGST=0                                                          00007100
      LSTEMP=0                                                          00007200
      NUMSEG=0                                                          00007300
      IFLSEG=0                                                          00007500
C                                                                       00007600
C---     SEARCH FOR FLOW AND SEGMENT BLOCKS AND TRANSFER                00007700
C---     INFORMATION IN EDITED FORM INTO THE STEMP ARRAY                00007800
C                                                                       00007900
      NLOC=NS                                                           00008000
   34 CONTINUE                                                          00008100
      IF(NLOC.GE.NSIZE) GO TO 1034                                      00008200
C                                                                       00008300
C---     NLOC POINTS TO THE STARTING LOCATION OF THE CURRENT            00008400
C---     SUBSTRING BEING EXAMINED. IT IS UPDATED TO THE NEXT SUBSTRING  00008500
C---     AT THE TERMINATION OF CODE FOR EACH SUBSTRING.                 00008600
      T=CANON(NLOC)                                                     00008700
      CALL HOLFRM(T,TEST,1,8,NWD)                                       00008790
      IF(TEST.EQ.FLOW) GO TO 40                                         00008800
      IF(TEST.EQ.SEG) GO TO 50                                          00008900
      CALL HOLFRM(CANON(NLOC+1),TEST,1,8,NWD)                           00008990
      IF(TEST.EQ.SEG) GO TO 51                                          00009000
C---     IF FLOW OR SEG HAVE NOT BEEN FOUND, CONTINUE SEARCH            00009100
      IF(.NOT.IFLOW.AND..NOT.ISEG) NLOC=NLOC+1                          00009200
      IF(.NOT.IFLOW.AND..NOT.ISEG) GO TO 31                             00009300
      IF(IFLOW) GO TO 60                                                00009400
C---     ISEG MUST BE TRUE SO CHECK FOR SEGMENT BLOCKS                  00009500
      T=CANON(NLOC+1)                                                   00009600
      CALL HOLFRM(T,TEST,1,8,NWD)                                       00009690
      IF(TEST.EQ.LENGTH.OR.TEST.EQ.PARAM) GO TO 35                      00009700
C****    PROPER MINOR WORD DID NOT FOLLOW HERE.                         00009800
      IRR=1                                                             00009900
      GO TO 30                                                          00010000
   35 CONTINUE                                                          00010100
      LSTEMP=LSTEMP+1                                                   00010200
      IF(LSTEMP.LE.LSTEMX) GO TO 36                                     00010300
C****    NO ROOM AVAILABLE IN BUFFER FOR FLOW/SEG DATA                  00010400
      IRR=2                                                             00010500
      GO TO 30                                                          00010600
   36 CONTINUE                                                          00010700
      STEMP(1,LSTEMP)=T                                                 00010800
      IF(CANON(NLOC+2).EQ.AREAL.AND.CANON(NLOC+4).EQ.AREAL) GO TO 38    00010900
C****    AT LEAST TWO SCALARS SHOULD FOLLOW                             00011000
      IRR=3                                                             00011100
      GO TO 30                                                          00011200
   38 CONTINUE                                                          00011300
      STEMP(2,LSTEMP)=CANON(NLOC+3)                                     00011400
      STEMP(3,LSTEMP)=CANON(NLOC+5)                                     00011500
      STEMP(4,LSTEMP)=ONE                                               00011600
      NLOC=NLOC+6                                                       00011700
      NUMSEG=NUMSEG+1                                                   00011800
      GO TO 31                                                          00011900
C                                                                       00012000
C---     CHECK FOR PROPER WORDS FOR FLOW INFORMATION                    00012100
   60 CONTINUE                                                          00012200
      T=CANON(NLOC+1)                                                   00012300
      MSIZE=1                                                           00012400
      CALL HOLFRM(T,TEST,1,8,NWD)                                       00012490
      IF(TEST.EQ.ARC.OR.TEST.EQ.PARAM) GO TO 65                         00012500
      MSIZE=4                                                           00012600
      IF(TEST.EQ.CHORD) GO TO 65                                        00012700
      MSIZE=4                                                           00012800
      IF(TEST.EQ.ANGLE) GO TO 65                                        00012900
C****   NONE OF THE REQUIRED KEYWORDS HAS FOLLOWED                      00013000
      MSIZE=0                                                           00013100
      IRR=4                                                             00013200
      GO TO 30                                                          00013300
C                                                                       00013400
   65 CONTINUE                                                          00013500
      ASIZE=MSIZE                                                       00013600
      IF(CANON(NLOC+2).EQ.AREAL.AND.CANON(NLOC+4).EQ.AREAL) GO TO 70    00013700
C****    AT LEAST TWO SCALARS SHOULD FOLLOW                             00013800
      IRR=5                                                             00013900
      GO TO 30                                                          00014000
   70 CONTINUE                                                          00014100
      LSTEMP=LSTEMP+1                                                   00014200
      IF(LSTEMP+MSIZE-1.LE.LSTEMX) GO TO 75                             00014300
C****    NO ROOM TO BUFFER ARC/FLOW DATA                                00014400
      IRR=6                                                             00014500
      GO TO 30                                                          00014600
   75 CONTINUE                                                          00014700
      STEMP(1,LSTEMP)=T                                                 00014800
      STEMP(2,LSTEMP)=CANON(NLOC+3)                                     00014900
      STEMP(3,LSTEMP)=CANON(NLOC+5)                                     00015000
      STEMP(4,LSTEMP)=ASIZE+TOLR                                        00015100
      NLOC=NLOC+6                                                       00015200
      IF(CANON(NLOC).NE.AREAL) GO TO 76                                 00015300
C---     LOAD A USER SUPPLIED TOLERANCE , IF ACCEPTABLE                 00015400
      T=CANON(NLOC+1)                                                   00015500
      IF(T.GT.SMAL.AND.T.LT.ONE) STEMP(4,LSTEMP)=ASIZE+T                00015600
      NLOC=NLOC+2                                                       00015700
   76 CONTINUE                                                          00015800
      IF(MSIZE.LT.2) GO TO 89                                           00015900
C---     SCAN FOR MODIFYING POINTS AND VECTORS FOR FLOW SPECIFICATION   00016000
      MM=MSIZE-1                                                        00016100
      DO 80 L=1,MM                                                      00016200
      DO 80 K=1,4                                                       00016300
      STEMP(K,L+LSTEMP)=ZERO                                            00016400
   80 CONTINUE                                                          00016500
      T=CANON(NLOC)                                                     00016600
      IF(T.NE.POINT.OR.MSIZE.LT.2) GO TO 83                             00016700
      DO 81 L=1,3                                                       00016800
      STEMP(L,LSTEMP+1)=CANON(NLOC+L)                                   00016900
   81 CONTINUE                                                          00017000
      STEMP(4,LSTEMP+1)=ONE                                             00017100
      NLOC=NLOC+4                                                       00017200
      T=CANON(NLOC)                                                     00017300
   83 CONTINUE                                                          00017400
      IF(T.NE.POINT.OR.MSIZE.LT.3) GO TO 87                             00017500
      DO 86 L=1,3                                                       00017600
      STEMP(L,LSTEMP+2)=CANON(NLOC+L)                                   00017700
   86 CONTINUE                                                          00017800
      STEMP(4,LSTEMP+2)=ONE                                             00017900
      NLOC=NLOC+4                                                       00018000
      T=CANON(NLOC)                                                     00018100
   87 CONTINUE                                                          00018200
      IF(T.NE.VECTOR.OR.MSIZE.LT.4) GO TO 89                            00018300
      DO 88 L=1,3                                                       00018400
      STEMP(L,LSTEMP+3)=CANON(NLOC+L)                                   00018500
   88 CONTINUE                                                          00018600
      STEMP(4,LSTEMP+3)=ONE                                             00018700
      NLOC=NLOC+4                                                       00018800
   89 CONTINUE                                                          00018900
C---     UPDATE FLOW BLOCK POINTER TO NEXT AVAILABLE SPACE.             00019000
C---     NSEGST FINALLY POINTS TO START OF SEGMENT INFORMATION          00019100
      LSTEMP=LSTEMP+MSIZE-1                                             00019200
      GO TO 31                                                          00019300
C                                                                       00019400
C---     INITIALIZE DATA FOR FLOW INFORMATION                           00019500
   40 CONTINUE                                                          00019600
      IRR=7                                                             00019700
C****    NEITHER FLOW NOR SEG SHOULD HAVE BEEN ENCOUNTERED              00019800
      NLOC=NLOC+1                                                       00019900
      IF(CANON(NLOC-2).NE.AFLOW) GO TO 31                               00020000
      IF(IFLOW.OR.ISEG) GO TO 30                                        00020100
      IF(NSEGST.GT.0.OR.NFLOST.GT.0) GO TO 30                           00020200
      IFLOW=.TRUE.                                                      00020300
      NFLOST=1                                                          00020400
C---     STORE THE DATA SIZE OF INPUT UP TO THE FIRST FLOW COMMAND      00020500
      NSZSAV=NLOC-3                                                     00020600
      GO TO 31                                                          00020700
C---     INITIALIZE DATA FOR SEGMENT INFORMATION.                       00020800
   51 CONTINUE                                                          00020900
      NLOC=NLOC+1                                                       00021000
   50 CONTINUE                                                          00021100
      NLOC=NLOC+1                                                       00021200
      IRR=8                                                             00021300
C****    FLOW SHOULD HAVE BEEN ENCOUNTERED BUT NOT SEG                  00021400
      IF(CANON(NLOC-2).NE.ASEG) GO TO 31                                00021500
      IF(.NOT.IFLOW.OR.ISEG) GO TO 30                                   00021600
      IF(NSEGST.GT.0.OR.NFLOST.LE.0) GO TO 30                           00021700
      IFLOW=.FALSE.                                                     00021800
      ISEG=.TRUE.                                                       00021900
      NSEGST=LSTEMP+1                                                   00022000
      GO TO 31                                                          00022100
C                                                                       00022200
   31 CONTINUE                                                          00022300
C                                                                       00022400
      IRR=0                                                             00022500
   32 CONTINUE                                                          00022600
C---     END OF LOOP TO SCAN FOR SEGMENT/FLOW BLOCKS                    00022700
      GO TO 34                                                          00022800
C                                                                       00022900
 1034 CONTINUE                                                          00023000
C                                                                       00023100
C                                                                       00023200
      IF(IBUG.NE.11) GO TO 33                                           00023300
      CALL BAD(-54,1,'STEM',STEMP)                                      00023400
   33 CONTINUE                                                          00023500
C                                                                       00023600
      IF (IRR.EQ.0) GO TO 90                                            00023700
C                                                                       00023800
C---     ERROR PATH, UNDEFINE CANON FORM AND QUIT                       00023900
   30 CONTINUE                                                          00024000
C---     WRITE OUT INFORMATION FOR DIAGNOSING PROBLEM                   00024100
      NDIF=NSIZE-NS+1                                                   00024200
      CALL BAD(-NDIF,1,'CAN ',CANON(NS))                                00024300
      NLOC=NLOC-NS+1                                                    00024400
      CALL BAD(-1,0,'NLOC',NLOC)                                        00024500
      CALL BAD(1,0,'NSEG',NSEGST)                                       00024600
      CALL BAD(1,0,'I   ',I)                                            00024700
      CALL BAD(1,0,'M   ',M)                                            00024800
      CALL BAD(1,1,'AN1 ',AN1)                                          00024900
      CALL BAD(1,1,'AN2 ',AN2)                                          00025000
      CALL BAD(-1,1,'BPNT',BPNTS)                                       00025100
C                                                                       00025200
      IERROR=5500+IABS(IRR)                                             00025300
      CALL ERROR(IERROR,RNAM1)                                          00025400
C                                                                       00025500
   90 CONTINUE                                                          00025600
      IF(IFLOW.OR.ISEG) IFLSEG=1                                        00025700
      GO TO 999                                                         00025800
C                                                                       00025900
C----------------------------------------------------------             00026000
 2000 CONTINUE                                                          00026100
C                                                                       00026200
C                                                                       00026300
C---     FLOW INFORMATION IS AVAILABLE, SO START FLOW PROCESSING        00026400
C---     FIRST SCAN THE FLOW AND SEGMENT BLOCKS AND CHECK FOR           00026500
C---     INPUT CONSISTENCY.                                             00026600
C                                                                       00026700
      ANPTS=CANON(NH+3)+ONE                                             00026900
      NPTS=ANPTS                                                        00027000
      BPNTS=ANPTS-ONE                                                   00027100
C---     INCREMENT CURVE TYPE BY 10 TO INDICATE FLOW PRESENCE.          00027200
      CANON(NH+2)=CANON(NH+2)+10.                                       00027300
C                                                                       00027400
C---     I IS CURRENT ROW, M INCREMENT TO NEXT, N2 LAST POINT           00027500
      I=0                                                               00027600
      M=1                                                               00027700
      AN2=ZERO                                                          00027800
 1010 I=I+M                                                             00027900
      IF(I.GE.NSEGST) GO TO 1080                                        00028000
      AN1=STEMP(2,I)                                                    00028100
      IF(DABS(AN2-AN1).LT.SMAL) GO TO 1020                              00028200
C****    PREVIOUS POINT AND PRESENT SHOULD BE EQUAL                     00028300
      IRR=13                                                            00028400
      GO TO 30                                                          00028500
 1020 CONTINUE                                                          00028600
      AN2=STEMP(3,I)                                                    00028700
      M=STEMP(4,I)                                                      00028800
      IF(AN1+SMAL.LT.AN2.AND.AN2.LT.BPNTS+SMAL) GO TO 1010              00028900
C****    REFERENCES TO CURVE POINTS ARE INVALID.                        00029000
      IRR=14                                                            00029100
      GO TO 30                                                          00029200
 1080 CONTINUE                                                          00029300
      IF(DABS(AN2-BPNTS).LT.SMAL) GO TO 1090                            00029400
C****    LAST POINT REFERENCE SHOULD EQUAL LAST PT OF CURVE             00029500
      IRR=15                                                            00029600
      GO TO 30                                                          00029700
 1090 CONTINUE                                                          00029800
C                                                                       00029900
C---    NOW SCAN SEGMENT DATA AND CHECK FOR CONSISTENCY                 00030000
C                                                                       00030100
      I=NSEGST-1                                                        00030200
      M=1                                                               00030300
      AN2=ZERO                                                          00030400
 1110 I=I+M                                                             00030500
      IF(I.GT.LSTEMP) GO TO 1180                                        00030600
      AN1=STEMP(2,I)                                                    00030700
      IF(DABS(AN1-AN2).LT.SMAL) GO TO 1120                              00030800
C****    AN1,AN2 HAVE INVALID RELATION                                  00030900
      IRR=16                                                            00031000
      GO TO 30                                                          00031100
 1120 CONTINUE                                                          00031200
      AN2=STEMP(3,I)                                                    00031300
      IF(AN1.LT.AN2+SMAL.AND.AN2.LT.BPNTS+SMAL) GO TO 1110              00031400
C****    CURRENT TWO SCALARS HAVE INCONSISTENT RELATION                 00031500
      IRR=17                                                            00031600
      GO TO 30                                                          00031700
 1180 IF(DABS(AN2-BPNTS).LT.SMAL) GO TO 1190                            00031800
C****    LAST SEGMENT MUST TERMINATE IN LAST POINT                      00031900
      IRR=18                                                            00032000
      GO TO 30                                                          00032100
 1190 CONTINUE                                                          00032200
C------------------------------------------------                       00032300
C---     CONSISTENCY CHECKING COMPLETED ON FLOW/SEGMENT INPUT           00032400
C                                                                       00032500
C---     MAJOR FLOW PROCESSING, ALL FLOW COMMAND INFORMATION            00032600
C---     IS STORED IN THE STEMP ARRAY WHOSE ROWS WILL BE INDEXED        00032700
C---     BY IST.  FLOW INFORMATION, INCLUDING ARC SUMMARY BLOCKS        00032800
C---     AND FLOW RATE SPLINES ARE CONTAINED IN THE ARRAY ST            00032900
C---     SUMMARY INFORMATION IS INDEXED BY IST AND SPLINE               00033000
C---     FUNCTIONS ARE INDEXED BY IFLAVL                                00033100
C                                                                       00033200
C---     SAVE STARTING VALUES FOR  FLOW AND SEGMENT SUMMARY             00033300
C---     BLOCKS                                                         00033400
      IFLOST=1                                                          00033500
      ISEGST=NPTS                                                       00033600
      ISPLST=ISEGST+NUMSEG                                              00033700
C---     INITIALIZE INDICES TO AVAILABLE SPACE                          00033800
      IST=IFLOST                                                        00033900
      ISPL=ISPLST                                                       00034000
      ISTMAX=MAXSC*6                                                    00034100
C---     ARRAY ST (=SC) WILL BE USED TO BUFFER AND ACCUMULATE           00034200
C---     FLOW AND SEGMENT SUMMARY INFORMATION.  THIS DATA               00034300
C---     WILL THEN BE EXAMINED FOR ERRORS AND LATER BE                  00034400
C---     CONSOLIDATED WITH THE REMAINING DEFINED CURVE CANON            00034500
C---     FORM, PROVIDED NO ERRORS HAVE OCCURRED.                        00034600
C                                                                       00034700
      ISTEM=0                                                           00034800
      INCTEM=1                                                          00034900
      IRCT=0                                                            00035000
C                                                                       00035100
 1200 CONTINUE                                                          00035200
      ISTEM=ISTEM+INCTEM                                                00035300
      IF(ISTEM.GE.NSEGST) GO TO 1300                                    00035400
      I1=STEMP(2,ISTEM)+ONE                                             00035500
      I2=STEMP(3,ISTEM)                                                 00035600
      INCTEM=STEMP(4,ISTEM)                                             00035700
      TOL=STEMP(4,ISTEM)-INCTEM                                         00035800
C---     EXECUTE THIS FLOW PROCESSING FOR EACH CURVE FROM I1 TO I2      00035900
C                                                                       00036000
      DO 1210 J=I1,I2                                                   00036100
      ST(1,IST)=ISPL                                                    00036200
      ISPMX=ISTMAX-ISPL                                                 00036300
      ST(3,IST)=STEMP(1,IST)                                            00036400
C---     COMPUTE INDEX TO CURRENT CURVE                                 00036500
      NCURV=(CANON(NH+1)+J-1)*24+NH                                     00036600
C                                                                       00036700
      IF(IBUG.NE.11) GO TO 1219                                         00036800
      CALL BAD(1,0,'NCUR',NCURV)                                        00036900
      CALL BAD(-1,0,'J   ',J)                                           00037000
      CALL BAD(24,1,'CAN ',CANON(NCURV))                                00037100
      CALL BAD(1,1,'TOL ',TOL)                                          00037200
      CALL BAD(-1,0,'ISPM',ISPMX)                                       00037300
 1219 CONTINUE                                                          00037400
C                                                                       00037500
C---     BRANCH TO AREA FOR INDIVIDUAL FLOW PROCESSING                  00037600
      CALL HOLFRM(STEMP(1,ISTEM),TEST,1,8,NWD)                          00037690
      IF(TEST.EQ.ARC) GO TO 1320                                        00037700
      IF(TEST.EQ.ANGLE) GO TO 1340                                      00037800
      IF(TEST.EQ.CHORD) GO TO 1360                                      00037900
      IF(TEST.EQ.PARAM) GO TO 1380                                      00038000
C****    INVALID SPECIFICATION FOR FLOW                                 00038100
      IR=20                                                             00038200
      GO TO 1290                                                        00038300
C                                                                       00038400
C---     FLOW PROCESSING FOR ONE CUBIC ARC BY ARC LENGTH.               00038500
 1320 CONTINUE                                                          00038600
      CALL ARCSEG(CANON(NCURV),ST(1,ISPL),TOL,NUM,ISPMX,IR)             00038700
      GO TO 1290                                                        00038800
C---     FLOW PROCESSING FOR ONE CUBIC ARC BY ANGLE.                    00038900
 1340 CONTINUE                                                          00039000
      CALL ANGSEG(CANON(NCURV),ST(1,ISPL),TOL,NUM,ISPMX,IR,             00039100
     X STEMP(1,ISTEM+1),STEMP(1,ISTEM+3))                               00039200
      GO TO 1290                                                        00039300
C---     FLOW PROCESSING FOR ONE CUBIC ARC BY CHORD PROJECTION          00039400
 1360 CONTINUE                                                          00039500
C                                                                       00039600
C---     THE SET UP OF CHORDAL PARAMETERS MAY BE IMPLIED                00039700
C---     SO BEGIN BY SETTING THEM UP FIRST.                             00039800
      DO 1361 II=1,3                                                    00039900
      DO 1361 JJ=1,3                                                    00040000
      PP(II,JJ)=STEMP(II,ISTEM+JJ)                                      00040100
 1361 CONTINUE                                                          00040200
C---     DEFAULT, CHORD IS DEFINED BY END POINTS OF COMBINED SEGMENT    00040300
      IF(STEMP(4,ISTEM+1).GT.SMAL) GO TO 1362                           00040400
C                                                                       00040500
      NN=(CANON(NH+1)+I1-1)*24+NH                                       00040600
      CALL CNCURV(ZERO,CANON(NN),PP(1,1),0)                             00040700
 1362 CONTINUE                                                          00040800
      IF(STEMP(4,ISTEM+2).GT.SMAL) GO TO 1363                           00040900
      NN=(CANON(NH+1)+I2-1)*24+NH                                       00041000
      CALL CNCURV(ONE,CANON(NN),PP(1,2),0)                              00041100
 1363 CONTINUE                                                          00041200
      SZ=ZERO                                                           00041300
      DO 1364 JJ=1,3                                                    00041400
      PP(JJ,2)=PP(JJ,2)-PP(JJ,1)                                        00041500
      SZ=SZ+PP(JJ,2)**2                                                 00041600
 1364 CONTINUE                                                          00041700
      SZ=DSQRT(SZ)                                                      00041800
C****    TWO POINTS TOO CLOSE FOR PROPER CHORD                          00041900
      IR=21                                                             00042000
      IF(SZ.LT.SMAL) GO TO 1290                                         00042100
      IR=0                                                              00042200
      DO 1365 JJ=1,3                                                    00042300
      PP(JJ,2)=PP(JJ,2)/SZ                                              00042400
 1365 CONTINUE                                                          00042500
      IF(STEMP(4,ISTEM+3).GT.SMAL) GO TO 1366                           00042600
 1370 CONTINUE                                                          00042700
C---     IF A VECTOR NORMAL TO THE PROJECTION PLANES HAS NOT BENN       00042800
C---     SUPPLIED BY THE USER, THEN THE AXIS OF THE CHORD IS CHOSEN     00042900
C---     AS A DEFAULT NORMAL VECTOR TO THESE PLANES                     00043000
      PP(1,3)=PP(1,2)                                                   00043100
      PP(2,3)=PP(2,2)                                                   00043200
      PP(3,3)=PP(3,2)                                                   00043300
 1366 CONTINUE                                                          00043400
      CALL CHDSEG(CANON(NCURV),ST(1,ISPL),TOL,NUM,ISPMX,IR,             00043500
     X            PP(1,1),PP(1,2),PP(1,3))                              00043600
      GO TO 1290                                                        00043700
C---     DIRECT IDENTITY PARAMETERIZATION                               00043800
 1380 CONTINUE                                                          00043900
      IR=22                                                             00044000
      NUM=2                                                             00044100
      IF(ISPL+NUM.GT.ISPMX) GO TO 1290                                  00044200
      IR=0                                                              00044300
C---     SET UP A SPLINE IDENTITY FUNCTION                              00044400
      ST(1,ISPL)=ZERO                                                   00044500
      ST(2,ISPL)=ZERO                                                   00044600
      ST(3,ISPL)=ONE                                                    00044700
      ST(4,ISPL)=ZERO                                                   00044800
      ST(1,ISPL+1)=ONE                                                  00044900
      ST(2,ISPL+1)=ONE                                                  00045000
      ST(3,ISPL+1)=ONE                                                  00045100
      ST(4,ISPL+1)=ZERO                                                 00045200
      GO TO 1290                                                        00045300
C                                                                       00045400
 1290 CONTINUE                                                          00045500
      IF(IR.EQ.0) GO TO 1220                                            00045600
C****    ERROR PATH, INCREMENT ERROR COUNT AND RESET VALUES             00045700
      IRCT=IRCT+1                                                       00045800
      ST(1,IST)=-IR                                                     00046000
      ST(2,IST)=NUM                                                     00046100
      ST(4,IST)=ZERO                                                    00046200
      IR=0                                                              00046300
      NUM=0                                                             00046400
      IF(IBUG.EQ.11) CALL BAD(-4,1,'ERR=',ST(1,IST))                    00046500
      IST=IST+1                                                         00046600
      GO TO 1210                                                        00046700
C---     NORMAL COMPLETION OF FLOW RATE FOR ONE ARC.                    00046800
 1220 CONTINUE                                                          00046900
C---     STORE SUMMARY DATA FOR FLOW SPLINES LOCATION,NUMBER,           00047000
C---     TYPE OF FLOW AND TOTAL SPAN                                    00047100
      ST(1,IST)=ISPL                                                    00047200
      ST(2,IST)=NUM                                                     00047300
C---     SAVE TYPE FLOW AND TOLERANCE IN 3RD LOCATION                   00047400
      CALL HOLFRM(STEMP(1,ISTEM),TEST,1,8,NWD)                          00047490
      IF(TEST.EQ.ARC)   ST(3,IST)=1.+TOL                                00047500
      IF(TEST.EQ.ANGLE) ST(3,IST)=2.+TOL                                00047600
      IF(TEST.EQ.CHORD) ST(3,IST)=3.+TOL                                00047700
      IF(TEST.EQ.PARAM) ST(3,IST)=4.+TOL                                00047800
      ST(4,IST)=ST(1,ISPL+NUM-1)-ST(1,ISPL)                             00047900
      ISPL=ISPL+NUM                                                     00048000
      IST=IST+1                                                         00048100
      NUM=0                                                             00048200
 1210 CONTINUE                                                          00048300
C                                                                       00048400
      GO TO 1200                                                        00048500
 1300 CONTINUE                                                          00048600
C                                                                       00048700
      IF(IRCT.EQ.0.AND.IBUG.NE.11) GO TO 1401                           00048800
C****    DUMP CURV INFORMATION TO DOCUMENT FAILURES                     00048900
      CALL CFORM('0 ***ERRORS WHILE PROCESSING FLOW DATA FOR CURVE',    00049000
     X DARRAY,1,48)                                                     00049100
      CALL CPRINT (DARRAY)                                              00049200
      JTOP=ISPL-1                                                       00049300
      DO 1310 JJ=1,JTOP                                                 00049400
      JJ1=IFLOST+JJ-1                                                   00049410
      IF(JJ1.GE.IST)GO TO 1305                                          00049420
      IF(ST(1,JJ1).GE.0.D0)GO TO 1305                                   00049430
      IR=-ST(1,JJ1)                                                     00049440
      CALL BAD(-1,0,'IRR ',IR+5500)                                     00049450
 1305 CONTINUE                                                          00049460
      CALL BAD(-4,1,'CURV',ST(1,IFLOST+JJ-1))                           00049500
 1310 CONTINUE                                                          00049600
      IF(IRCT.EQ.0) GO TO 1401                                          00049700
C****    ERROR IN FLOW PROCESSING                                       00049800
      IRR=IR+5500                                                       00049900
      RNAME=RNAMA                                                       00049910
      DO 8002 IL2=1,IMAX2                                               00049920
 8002 IF (IRR.EQ.IZAL2(IL2)) RNAME=RNAM2                                00049930
      DO 8003 IL3=1,IMAX3                                               00049940
 8003 IF (IRR.EQ.IZAL3(IL3)) RNAME=RNAM3                                00049950
      DO 8004 IL4=1,IMAX4                                               00049960
 8004 IF (IRR.EQ.IZAL4(IL4)) RNAME=RNAM4                                00049970
      DO 8005 IL5=1,IMAX5                                               00049980
 8005 IF (IRR.EQ.IZAL5(IL5)) RNAME=RNAM5                                00049990
      CALL ERROR(IRR,RNAME)                                             00050000
      GO TO 999                                                         00050100
C                                                                       00050200
C---------------------------------------------------------              00050300
C---    FLOW SPLINES HAVE BEEN CREATED FOR EACH ARC, NOW                00050400
C---     SET UP SEGMENT DATA.                                           00050500
 1401 CONTINUE                                                          00050600
C---    NOW PROCESS CURVE SEGMENT INFORMATION                           00050700
      ISTEM=NSEGST-1                                                    00050900
      INCTEM=1                                                          00051000
 1400 CONTINUE                                                          00051100
      ISTEM=ISTEM+INCTEM                                                00051200
      IF(ISTEM.GT.LSTEMP) GO TO 1490                                    00051300
C---    PROCESS CURVE SEGMENTS, ONE AT A TIME                           00051400
      ST(3,IST)=STEMP(1,ISTEM)                                          00051500
      ST(1,IST)=STEMP(2,ISTEM)                                          00051600
      ST(2,IST)=STEMP(3,ISTEM)                                          00051700
      ST(4,IST)=ZERO                                                    00051800
      IF(DABS(ST(1,IST)-ST(2,IST)).LT.SMAL) GO TO 1410                  00051900
C---    IN CASE OF LENGTH TOTAL SPAN IS BASED ON TOTAL FLOW LENGTH      00052000
      I1=ST(1,IST)+ONE                                                  00052100
      I2=ST(2,IST)                                                      00052200
      TOTLEN=ZERO                                                       00052300
      DO 1440 II=I1,I2                                                  00052400
      TOTLEN=TOTLEN+ST(4,II)                                            00052500
 1440 CONTINUE                                                          00052600
C---    STORE TOTAL LENGTH IN SEGMENT BLOCK                             00052700
      ST(4,IST)=TOTLEN                                                  00052800
C---     TOTLEN=NUMBER OF ARCS IN SEGMENT IN CASE OF PARAM              00052900
      CALL HOLFRM(ST(3,IST),TEST,1,8,NWD)                               00052990
      IF(TEST.EQ.PARAM) TOTLEN=ST(2,IST)-ST(1,IST)                      00053000
C---     NOW CHANGE PARAMETER FLOW ON EACH SEGMENT, ARC BY ARC,         00053100
C---     SO THAT THE TOTAL FLOW IS FROM ZERO TO ONE FOR THE             00053200
C---     COMPLETE SEGMENT                                               00053300
      SUM=ZERO                                                          00053400
      DO 1450 J=I1,I2                                                   00053500
C---     DETERMINE THE FACTOR FOR RESETTING FLOW FOR ARC J              00053600
      SPAN=ST(4,J)                                                      00053700
      FACTOR=ONE/TOTLEN                                                 00053800
      CALL HOLFRM(ST(3,IST),TEST,1,8,NWD)                               00053890
      IF(TEST.EQ.PARAM) FACTOR=ONE/(TOTLEN*SPAN)                        00053900
C---     NOW MODIFY ALL FLOW SPLINE FUNCTIONS FOR ARC J TO              00054000
C---     CHANGE THE FLOW SCALE                                          00054100
      NLOC=ST(1,J)                                                      00054200
      NN=ST(1,J)+ST(2,J)-ONE                                            00054300
      DO 1460 JJ=NLOC,NN                                                00054400
      ST(1,JJ)=ST(1,JJ)*FACTOR+SUM                                      00054500
      ST(3,JJ)=ST(3,JJ)/FACTOR                                          00054600
 1460 CONTINUE                                                          00054700
C                                                                       00054800
      ST(4,NLOC)=SUM                                                    00054900
      TSUM=SUM+SUM                                                      00055000
      NLOC1=NLOC+1                                                      00055100
      DO 1465 JJ=NLOC1,NN                                               00055200
      ST(4,JJ)=ST(1,JJ)-ST(1,JJ-1)+TSUM                                 00055300
 1465 CONTINUE                                                          00055400
C                                                                       00055500
      CALL HOLFRM(ST(3,IST),TEST,1,8,NWD)                               00055590
      IF(TEST.EQ.PARAM) SUM=SUM+ONE/TOTLEN                              00055600
      IF(TEST.EQ.LENGTH) SUM=SUM+SPAN*FACTOR                            00055700
 1450 CONTINUE                                                          00055800
C                                                                       00055900
      ST(2,IST)=ST(2,IST)-ST(1,IST)                                     00056000
C---     CONVERT ALPHANUMERIC DATA TO NUMBER CODE                       00056100
      CALL HOLFRM(ST(3,IST),TEST,1,8,NWD)                               00056190
      IF(TEST.EQ.PARAM) ST(3,IST)=1.0                                   00056200
      IF(TEST.EQ.LENGTH) ST(3,IST)=2.0                                  00056300
 1410 CONTINUE                                                          00056400
C                                                                       00056500
      IF(IBUG.NE.11) GO TO 1413                                         00056600
      CALL BAD(1,0,'IST ',IST)                                          00056700
      CALL BAD(4,1,'ST  ',ST(1,IST))                                    00056800
 1413 CONTINUE                                                          00056900
C                                                                       00057000
      IST=IST+1                                                         00057100
      GO TO 1400                                                        00057200
C---     PROCESSING OF SEGMENT DATA FINISHED                            00057300
 1490 CONTINUE                                                          00057400
C                                                                       00057500
C-----------------------------------------------------------            00057600
C---     NOW MERGE THE ST ARRAY AND FLOW/SEGMENT INFORMATION            00057700
C---     AND RECORD REQUIRED POINTERS IN THE SCURV HEADER               00057800
C---     TABLE                                                          00057900
C---     NLOC POINTS JUST TO THE END OF THE CUBIC CURVE BLOCKS          00058000
      ANST=(CANON(NH+1)+ANPTS-ONE)*24.+ONE                              00058100
      NCT=ANST-ONE+ANH-ONE                                              00058200
      DO 1500 II=1,ISPL                                                 00058300
      DO 1500 JJ=1,4                                                    00058400
      NCT=NCT+1                                                         00058500
C---     CONVERT ADDRESSES FROM ROW NOTATION TO SEQUENTIAL NOTATION     00058600
      IF(II.LT.NPTS) ST(1,II)=(ST(1,II)-ONE)*4.+ANST                    00058700
      CANON(NCT)=ST(JJ,II)                                              00058800
 1500 CONTINUE                                                          00058900
C---     NOW PLACE LOCATION POINTERS IN TO HEADER TABLE                 00059000
C---     LOCATION OF POINT BLOCKS                                       00059100
      CANON(NH+4)=CANON(NH+1)*24.+ONE                                   00059200
C---     NUMBER OF FLOW BLOCKS (IF ANY) AND LOCATION                    00059300
      CANON(NH+5)=CANON(NH+3)                                           00059400
      CANON(NH+6)=CANON(NH+4)+(ANPTS-ONE)*24.                           00059500
C---     NUMBER OF SEGMENT BLOCKS AND STARTING LOCATION                 00059600
      CANON(NH+7)=NUMSEG                                                00059700
      CANON(NH+8)=CANON(NH+6)+CANON(NH+5)*4.0                           00059800
C---     NUMBER OF FLOW BLOCKS AND STARTING LOCATION                    00059900
      CANON(NH+9)=ISPL-NUMSEG-NPTS                                      00060000
      CANON(NH+10)=CANON(NH+8)+CANON(NH+7)*4.0                          00060100
C---     FINALLY SETUP THE TOTAL SIZE OF THE STRUCTURE                  00060200
      CANON(NH+11)=CANON(NH+10)+4.*CANON(NH+9)-ONE                      00060300
      CANON(NH+12)=ONE                                                  00060400
C                                                                       00060500
      IF(IBUG.NE.11) GO TO 4322                                         00060600
      NNNN=CANON(NH+11)/4.+.1                                           00060700
      MMMM=-3                                                           00060800
      DO 4321 KKK=1,NNNN                                                00060900
      MMMM=MMMM+4                                                       00061000
      CALL BAD(4,1,'FCAN',CANON(NH-1+MMMM))                             00061100
      CALL BAD(-1,0,'INDX',MMMM)                                        00061200
 4321 CONTINUE                                                          00061300
 4322 CONTINUE                                                          00061400
      IRR=0                                                             00061500
C                                                                       00061600
C-------------------------------------------------                      00061700
C---     THE PROCESSING OF FLOW FUNCTIONS ACROSS THE CURVE IS COMPLETE. 00061800
C                                                                       00061900
  999 CONTINUE                                                          00062000
C                                                                       00062100
      RETURN                                                            00062200
      END                                                               00062300
**** SOURCE FILE : M0000629.V01   ***
*
      SUBROUTINE FORCUB(PA,PB,PC,PD,TA,TD,IRR)                          00000020
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000040
C------INPUT IS FOUR SPACE POINTS PA,PB,PC,PD.   OUTPUT TA, TD DEFINES  00000060
C------A PARAMETRIC CUBIC CURVE WITH END POINTS PA,PD AND END TANGENT   00000080
C------VECTORS TA,TD  WHICH APPROXIMATES SMOOTHLY THE POINTS PB AND PC  00000100
C------THIS IS A COMPLETELY MODULAR APT SCULPTURED SURFACE ROUTINE      00000120
C------ WRITTEN AT IITRI APRIL 1970 --- JKH                             00000140
      DIMENSION TA(3),TD(3),PA(3),PB(3),PC(3),PD(3),QA(3),QB(3),QC(3),  00000160
     1 QD(3),T1(3),T2(3),PAV(3),CN(3),DX(3),DY(3),DIF(3),VNULL(3)       00000180
      ONE=1.0                                                           00000200
      IDIAG=18000                                                       00000220
C------AVERAGE INTERIOR POINTS PB,PC INTO PAV                           00000240
      DO 10 I=1,3                                                       00000260
      DIF(I)=PD(I)-PA(I)                                                00000280
   10 PAV(I)=(PB(I) + PC(I))/2.0                                        00000300
      DIFL=DSQRT(DIF(1)**2+DIF(2)**2+DIF(3)**2)                         00000320
      IRR=IDIAG+1                                                       00000340
      IF(DIFL.LT.1.0D-10) RETURN                                        00000360
C------CONSTRUCT THE AVERAGED NORMAL TO PA,PAV,PD                       00000380
      CALL NORML3(PA,PAV,PD,CN,IRR)                                     00000400
      IF(IRR.NE.0) CALL NORML3(PA,PB,PD,CN,IRR)                         00000420
      IF(IRR.NE.0) CALL NORML3(PA,PC,PD,CN,IRR)                         00000440
      IF(IRR.EQ.0) GO TO 20                                             00000460
C------STRAIGHT LINE CASE                                               00000480
      DO 30 I=1,3                                                       00000500
      TA(I)=DIF(I)                                                      00000520
   30 TD(I)=DIF(I)                                                      00000540
      IRR=0                                                             00000560
      RETURN                                                            00000580
   20 CONTINUE                                                          00000600
C------CONSIDER THE COMMON PLANE THROUGH PA,PB WITH NORMAL CN           00000620
C------CONSTRUCT ORTHOGONAL COORDINATE VECTORS DX AND DY IN THIS PLANE  00000640
      DO 40 I=1,3                                                       00000660
   40 DX(I)=DIF(I)/DIFL                                                 00000680
      DO 50 I=1,3                                                       00000700
   50 VNULL(I)=0.0                                                      00000720
      CALL NORML3(VNULL,CN,DX,DY,IRR)                                   00000740
C------NOW PROJECT ALL POINTS PA,PB,PC,PD ONTO THE AVERAGED PLANE.      00000760
C------CALL THE PROJECTIONS BY QA,QB,QC,QD                              00000780
      QA(1)=0.                                                          00000800
      QA(2)=0.                                                          00000820
      QA(3)=0.                                                          00000840
      QD(1)=DIFL                                                        00000860
      QD(2)=0.                                                          00000880
      QD(3)=0.                                                          00000900
      DO 300 J=1,3                                                      00000920
      QB(J)=0.                                                          00000940
  300 QC(J)=0.                                                          00000960
      DO 310 I=1,3                                                      00000980
      QB(1)=QB(1) + (PB(I)-PA(I))*DX(I)                                 00001000
      QB(2)=QB(2) + (PB(I)-PA(I))*DY(I)                                 00001020
      QC(1)=QC(1) + (PC(I)-PA(I))*DX(I)                                 00001040
      QC(2)=QC(2) + (PC(I)-PA(I))*DY(I)                                 00001060
  310 CONTINUE                                                          00001080
C------NOW INTERPOLATE TANGENT VECTORS AND RADII AT EACH END OF THE     00001100
C------CURVE (USING A PARABOLIC APPROXIMATION)                          00001120
      CALL PARINT(PA,PB,PC,T1,RA,1,IRR)                                 00001140
C------ADJUST THE SIGN OF THE RADIUS                                    00001160
      TEMP=QB(1)*QC(2)-QB(2)*QC(1)                                      00001180
      RA=DABS(RA)*DSIGN(ONE,TEMP)                                       00001200
C------CONVERT FROM RADIUS TO CURVATURE                                 00001220
      IF(RA.GT.1.0D+8) RA=1.0D-8                                        00001240
      IF(RA.LE.1.0D+8) RA=1.0/RA                                        00001260
      CALL PARINT(PD,PC,PB,T2,RD,1,IRR)                                 00001280
      DO 60 I=1,3                                                       00001300
   60 T2(I)=-T2(I)                                                      00001320
      TEMP=TEMP-DIFL*(QC(2)-QB(2))                                      00001340
      RD=DABS(RD)*DSIGN(ONE,TEMP)                                       00001360
C------CONVERT FROM RADIUS TO CURVATURE                                 00001380
      IF(RD.LE.1.0D+8) RD=1.0/RD                                        00001400
      IF(RD.GT.1.0D+8) RD=1.0D-8                                        00001420
C------NOW END TANGENTS AND END RADII HAVE BEEN APPROXIMATED IN THE     00001440
C------AVERAGED PLANE                                                   00001460
C------NOW OBTAIN COMPONENTS OF THE INTERPOLATED TANGENTS T1 AND T2 IN  00001480
C------THE AVERAGED PLANE                                               00001500
      GX=T1(1)*DX(1) + T1(2)*DX(2) + T1(3)*DX(3)                        00001520
      GY=T1(1)*DY(1) + T1(2)*DY(2) + T1(3)*DY(3)                        00001540
      HX=T2(1)*DX(1) + T2(2)*DX(2) + T2(3)*DX(3)                        00001560
      HY=T2(1)*DY(1) + T2(2)*DY(2) + T2(3)*DY(3)                        00001580
      GL=DSQRT(GX*GX + GY*GY)                                           00001600
      HL=DSQRT(HX*HX + HY*HY)                                           00001620
C------MODIFY THE SPACE CURVATURES RA AND RD BY THEIR PROJECTIONS ON THE00001640
C------AVERAGED PLANE                                                   00001660
      COSA=CN(1)*T1(1) + CN(2)*T1(2) + CN(3)*T1(3)                      00001680
      TEMP=DABS(ONE-COSA*COSA)                                          00001700
      SINA=DSQRT(TEMP)                                                  00001720
      COSD=CN(1)*T2(1) + CN(2)*T2(2) + CN(3)*T2(3)                      00001740
      TEMP=DABS(ONE-COSD*COSD)                                          00001760
      SIND=DSQRT(TEMP)                                                  00001780
      RA=RA/SINA                                                        00001800
      RD=RD/SIND                                                        00001820
C------NOW SOLVE IN THE AVERAGED PLANE FOR A PARAMETRIC PLANAR CUBIC    00001840
C------WITH END POINTS QA,QD AND END TANGENTS GX,GY AND HX,HY , AND     00001860
C------WITH END CURVATURE RA AND RB                                     00001880
C------THE OUTPUT ALPH,BETA GIVES THE SIGNED MULTIPLIERS OF THE INPUT   00001900
C------VECTORS GX ,GY AND HX,HY.                                        00001920
      CALL CLOCUB(QA(1),QA(2),QD(1),QD(2),GX,GY,HX,HY,RA,RD,ALPH,BETA,  00001940
     1 IRR)                                                             00001960
      IF(IRR.NE.0) RETURN                                               00001980
C------PROJECT THE PLANAR SOLUTIONS ONTO THE INTERPOLATED SPACE         00002000
C------TANGENTS FOR A FINAL ANSWER                                      00002020
      DO 200 I=1,3                                                      00002040
      TA(I)=ALPH*T1(I)/GL                                               00002060
  200 TD(I)=BETA*T2(I)/HL                                               00002080
      IRR=0                                                             00002100
      RETURN                                                            00002120
      END                                                               00002140
**** SOURCE FILE : M0000631.V02   ***
*
      SUBROUTINE GELG(R,A,EPS,M,N,IER)                                  00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION A(*),R(*)                                               00000300
      IF(M) 230,230,10                                                  00000400
   10 IER=0                                                             00000500
      PIV=0.                                                            00000600
      MM=M*M                                                            00000700
      NM=N*M                                                            00000800
      DO 30  L=1,MM                                                     00000900
      TB=DABS(A(L))                                                     00001000
      IF(TB-PIV) 30,30,20                                               00001100
   20 PIV=TB                                                            00001200
      I=L                                                               00001300
   30 CONTINUE                                                          00001400
      TOL=EPS*PIV                                                       00001500
      LST=1                                                             00001600
      DO 170 K=1,M                                                      00001700
      IF(PIV)   230,230,40                                              00001800
   40 IF(IER) 70,50,70                                                  00001900
   50 IF(PIV-TOL)  60,60,70                                             00002000
   60 IER=K-1                                                           00002100
   70 PIVI=1./A(I)                                                      00002200
      J=(I-1)/M                                                         00002300
      I=I-J*M-K                                                         00002400
      J=J+1-K                                                           00002500
      DO 80 L=K,NM,M                                                    00002600
      LL=L+I                                                            00002700
      TB=PIVI*R(LL)                                                     00002800
      R(LL)=R(L)                                                        00002900
   80  R(L)=TB                                                          00003000
      IF (K-M)  90,180,180                                              00003100
   90 LEND=LST+M-K                                                      00003200
      IF(J)  120,120,100                                                00003300
  100 II=J*M                                                            00003400
      DO 110 L=LST,LEND                                                 00003500
      TB=A(L)                                                           00003600
      LL=L+II                                                           00003700
      A(L)=A(LL)                                                        00003800
  110 A(LL)=TB                                                          00003900
  120 DO 130 L=LST,MM,M                                                 00004000
      LL=L+I                                                            00004100
      TB=PIVI*A(LL)                                                     00004200
      A(LL)=A(L)                                                        00004300
  130 A(L)=TB                                                           00004400
      A(LST)=J                                                          00004500
      PIV=0.                                                            00004600
      LST=LST+1                                                         00004700
      J=0                                                               00004800
      DO 160 II=LST,LEND                                                00004900
      PIVI=-A(II)                                                       00005000
      IST=II+M                                                          00005100
      J=J+1                                                             00005200
      DO 150 LX=IST,MM,M                                                00005300
      LL=LX-J                                                           00005400
      A(LX)=A(LX)+PIVI*A(LL)                                            00005500
      TB=DABS(A(LX))                                                    00005600
      IF(TB-PIV) 150,150,140                                            00005700
  140 PIV=TB                                                            00005800
      I=LX                                                              00005900
  150 CONTINUE                                                          00006000
      DO 165 L=K,NM,M                                                   00006100
      LL=L+J                                                            00006200
  165 R(LL)=R(LL)+PIVI*R(L)                                             00006300
  160 CONTINUE                                                          00006400
  170 LST=LST+M                                                         00006500
  180 IF(M-1)  230,220,190                                              00006600
  190 IST=MM+M                                                          00006700
      LST=M+1                                                           00006800
      DO 210 I=2,M                                                      00006900
      II=LST-I                                                          00007000
      IST=IST-LST                                                       00007100
      L=IST-M                                                           00007200
      L=A(L)+.5                                                         00007300
      DO  210  J=II,NM,M                                                00007400
      TB=R(J)                                                           00007500
      LL=J                                                              00007600
      DO 200 K=IST,MM,M                                                 00007700
      LL=LL+1                                                           00007800
  200 TB=TB-A(K)*R(LL)                                                  00007900
      K=J+L                                                             00008000
      R(J)=R(K)                                                         00008100
  210 R(K)=TB                                                           00008200
  220 GO TO 240                                                         00008300
  230 IER=-1                                                            00008400
  240 RETURN                                                            00008500
      END                                                               00008600
**** SOURCE FILE : M0001505.V08   ***
*
      SUBROUTINE GENCRV(A,CONCHK,AVERG,TYPE,IERROR)                     00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---     MAIN SUBROUTINE FOR CREATING GENCUR SURFACE                    00000300
C---     INPUT CANONICAL FORM A(2) FOR SURFACE TO BE DEFINED            00000400
C---     CONCHK,AVERG,TYPE ARE 3 ARGUMENTS PASSED TO APT107             00000500
C---     PART PROGRAMMER INPUT STREAM IS IN CANON(41 ON)                00000600
C---     SURFACE UP TO BUT NOT INCLUDING TOPOLOGY TABLE IS              00000700
C---     DEFINED IN CANON(41) ON.  SSPAD IS USED AS A SCRATCH           00000800
C---     AREA FOR READING CURVES AND MANIPULATING THEM.                 00000900
C---     OUTPUT IERROR IS NOT ZERO FOR AN ERROR                         00001000
C---     MAIN OUTPUT IS IN CANON(41 ON)                                 00001100
C                                                                       00001200
C---     BLANK COMMON CAN CONTAINS THE PART PROGRAMMERS INPUT           00001300
C---     THIS IS TRANSFERRED TO THE ARRAY SCAN AND THEN CAN IS          00001400
C---     USED TO BUILD UP THE CANON FORM OF THE GENCUR SURFACE          00001500
C---     THE AVAILABLE SIZE OF CAN IS HELD IN MAXLDA                    00001600
C                                                                       00001710
      INCLUDE 'BLANKCOM.INC'                                            00001720
C                                                                       00001730
      COMMON/MAXLDA/MAXLDA                                              00001800
C                                                                       00001900
C---     THE SCAN ARRAY IS USED AS A WORKING BUFFER OF TEMPORARY        00002000
C---     DATA.  IT HOLDS THE PP INPUT AND VARIOUS INPUT CURVES.         00002100
C---     NSCNMX IS THE MAXIMUM SPACE IN SCAN AND ISCAN POINTS           00002200
C---     TO THE LAST USED LOCATION IN SCAN.                             00002300
      INCLUDE 'SSPAD.INC'                                               00002410
C                                                                       00002500
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00002600
      LOGICAL CKDEF                                                     00002700
      LOGICAL CR                                                        00002800
      CHARACTER*8 CRASS                                                 00002802
      CHARACTER*8 TEST                                                  00002804
      DIMENSION NLOC(100)                                               00002810
      DIMENSION VECA(3),VECB(3),PP(3),CV(32)                            00002820
C---     NLOC HOLDS POINTERS TO THE LOCATIONS OF SPLINE AND             00003000
C---     CROSS CURVES HELD IN THE SCAN ARRAY. NC IS THE LAST            00003100
C---     USED LOCATION IN NLOC AND NCMAX IS THE SIZE OF NLOC            00003200
      DATA NLOC/100*0/,NCMAX/100/                                       00003400
      DATA CRASS/'CROSS   '/                                            00003412
C                                                                       00003500
C                                                                       00003700
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,0.000001D0/                        00003800
C                                                                       00003900
C---     INITIALIZE VARIOUS POINTERS AND COUNTERS                       00004000
C---     CR IS TRUE IF CROSS SPLINE CURVES ARE ENTERED                  00004100
      CR=.FALSE.                                                        00004200
C---     NUMSPL IS THE TOTAL NUMBER OF INPUT SPLINE CURVES              00004300
      NUMSPL=0                                                          00004400
C---     NUMCRS IS THE TOTAL NUMBER OF INPUT CROSS CURVES               00004500
      NUMCRS=0                                                          00004600
C---     ISCAN IS THE POINTER TO THE LAST USED SPACE IN SCAN ARRAY      00004700
      ISCAN=0                                                           00004800
C---     NSEG IS THE TOTAL NUMBER OF SEGMENTS PER INPUT CURVE           00004900
      NSEG=0                                                            00005000
C---     NC IS THE POINTER TO THE LAST USED SPACE IN NLOC               00005100
      NC=0                                                              00005200
C---     NLEN IS THE TOTAL LENGTH OF PART PROGRAMMER INPUT DATA         00005300
      NLEN=CAN(5)                                                       00005400
C---     TRANSFER PART PROGRAMMERS INPUT TO THE SCAN ARRAY              00005500
      DO 10 I=1,NLEN                                                    00005600
      SCAN(I)=CAN(I)                                                    00005700
      CAN(I)=ZERO                                                       00005800
   10 CONTINUE                                                          00005900
      ISCAN=NLEN                                                        00006000
C                                                                       00006100
C---     ISX WILL BE AN INDEX FOR SEARCHING THE SCAN ARRAY              00006200
      ISX=9                                                             00006300
  100 CONTINUE                                                          00006400
      IF(ISX.GE.NLEN) GO TO 199                                         00006500
C---     DATA SHOULD REPRESENT EITHER AN SCURV OR THE WORD CROSS        00006600
      CALL HOLFRM(SCAN(ISX+1),TEST,1,8,NWD)                             00006690
      IF(TEST.NE.CRASS) GO TO 110                                       00006700
C---     THE WORD CROSS HAS BEEN ENCOUNTERED                            00006800
C****    THE WORD CROSS WAS ENCOUNTERED TWICE                           00006900
      IERROR=05                                                         00007000
      IF(CR) GO TO 9998                                                 00007100
C****    LESS THAN TWO SPLINE CURVES WERE INPUT BEFORE CROSS            00007200
      IERROR=06                                                         00007300
      IF(NUMSPL.LT.2) GO TO 9998                                        00007400
C---     SAVE THE STARTING INDEX TO CROSS CURVE DATA                    00007500
      ISXSAV=ISX+2                                                      00007600
      CR=.TRUE.                                                         00007700
      GO TO 198                                                         00007800
C                                                                       00007900
C---     A CURVE HAS BEEN ENCOUNTERED                                   00008000
  110 CONTINUE                                                          00008100
      IF(.NOT.CKDEF(SCAN(ISX))) GO TO 120                               00008200
C****    INPUT CURVE HAS NOT BEEN DEFINED CORRECTLY                     00008300
      IERROR=07                                                         00008400
      GO TO 9998                                                        00008500
  120 CONTINUE                                                          00008600
      IF(NUMSPL.GT.0) GO TO 130                                         00008700
C---     LOAD THE FIRST CURVE ONLY                                      00008800
      JMODE=2                                                           00008900
      CALL APT094(JMODE,SCAN(ISX),SCAN(ISCAN+1))                        00009000
C****    CURVE COULD NOT BE SUCCESSFULLY RETRIEVED                      00009100
      IERROR=08                                                         00009200
      IF(JMODE.NE.2) GO TO 9998                                         00009300
C---     ENTER CURVE LOCATION INTO DIRECTORY TABLE                      00009400
      NC=NC+1                                                           00009500
      NLOC(NC)=ISCAN+1                                                  00009600
C---     OBTAIN SEGMENT COUNT FROM THIS CURVE                           00009700
      NSEG=SCAN(ISCAN+8)                                                00009800
      ISCAN=ISCAN+SCAN(ISCAN+12)                                        00009900
C****    FIRST INPUT CURVE WAS NOT OF THE FLOW TYPE                     00010000
      IERROR=09                                                         00010100
      IF(NSEG.LT.1) GO TO 9998                                          00010200
  130 CONTINUE                                                          00010300
      IF(.NOT.CR) NUMSPL=NUMSPL+1                                       00010400
      IF(CR) NUMCRS=NUMCRS+1                                            00010500
  198 CONTINUE                                                          00010600
      ISX=ISX+2                                                         00010700
      GO TO 100                                                         00010800
  199 CONTINUE                                                          00010900
C                                                                       00011000
C---     NOW BEGIN PREPARATION OF THE SURFACE CANON FORM IN CAN         00011100
C---     ALL INPUT CURVES MUST BE LOADED INTO THE SCAN ARRAY            00011200
      NUMPAT=(NUMSPL-1)*NSEG                                            00011300
      J=10+NUMPAT*6                                                     00011400
      DO 210 I=1,J                                                      00011500
  210 CAN(I)=ZERO                                                       00011600
      CAN(3)=NUMPAT*4                                                   00011700
      CAN(4)=NUMPAT                                                     00011800
      CAN(5)=2.                                                         00011900
      CAN(6)=5.                                                         00012000
      CAN(7)=ONE                                                        00012100
      CAN(9)=NUMSPL                                                     00012200
      CAN(10)=NSEG+1                                                    00012300
C                                                                       00012400
C---     THIRD PHASE, LOAD ALL OF THE SPLINE CURVES INTO THE SCAN ARRAY 00012500
C---     SKIP THE FIRST CURVE, SINCE IT HAS ALREADY BEEN LOADED         00012600
      ISX=9+2                                                           00012700
  300 CONTINUE                                                          00012800
      CALL HOLFRM(SCAN(ISX+1),TEST,1,8,NWD)                             00012890
      IF(TEST.EQ.CRASS.OR.ISX.GE.NLEN) GO TO 399                        00012900
C****    THE CURVE DIRECTORY TABLE SIZE HAS BEEN EXCEEDED               00013000
      IERROR=10                                                         00013100
      IF(NC+1.GT.NCMAX) GO TO 9998                                      00013200
C---     CONSIDER THE ANTICIPATED SIZE OF THIS CURVE                    00013300
      ISIZE=SCAN(ISX+1)                                                 00013400
C****    THERE IS NOT ENOUGH BUFFER SPACE TO HOLD THIS SPLINE CURVE     00013500
      IERROR=11                                                         00013600
      IF(ISIZE+ISCAN.GT.NSCNMX) GO TO 9998                              00013700
      JMODE=2                                                           00013800
      CALL APT094(JMODE,SCAN(ISX),SCAN(ISCAN+1))                        00013900
C****    INPUT SPLINE CURVE COULD NOT BE FETCHED                        00014000
      IERROR=12                                                         00014100
      IF(JMODE.NE.2) GO TO 9998                                         00014200
      ISEG=SCAN(ISCAN+8)                                                00014300
C****    THE NUMBER OF SEGMENTS IN TWO INPUT SPLINE CURVES WAS UNEQUAL  00014400
      IERROR=13                                                         00014500
      IF(ISEG.NE.NSEG) GO TO 9998                                       00014600
C---     UPDATE DIRECTORY TABLE OF CURVE LOCATION                       00014700
      NC=NC+1                                                           00014800
      NLOC(NC)=ISCAN+1                                                  00014900
      ISCAN=ISCAN+SCAN(ISCAN+12)                                        00015000
  390 CONTINUE                                                          00015100
      ISX=ISX+2                                                         00015200
      GO TO 300                                                         00015300
C                                                                       00015400
  399 CONTINUE                                                          00015500
C                                                                       00015600
C---     PHASE 4.  ONE-BY-ONE LOAD CROSS CURVES INTO SCAN ARRAY         00015700
C---     AND COMPARE THEM TO SPLINE JUNCTIONS TO DETERMINE              00015800
C---     THEIR RELATIVE LOCATION.                                       00015900
C---     FIRST, ZERO OUT THIS PART OF THE DIRECTORY TABLE               00016000
C****    THERE IS NOT ENOUGH ROOM IN THE DIRECTORY FOR CROSS CURVES     00016100
      IERROR=14                                                         00016200
      IF(NC+NSEG+1.GT.NCMAX) GO TO 9998                                 00016300
C---     ZERO OUT THE CROSS PORTION OF THE DIRECTORY TABLE              00016400
      NSEG1=NSEG+1                                                      00016500
      DO 401 I=1,NSEG1                                                  00016600
      NLOC(I+NUMSPL)=0                                                  00016700
  401 CONTINUE                                                          00016800
C---     THE NEXT SECTION IS TO READ IN CROSS CURVES                    00016900
C---     IF THERE ARE NO CROSS CURVES, SKIP THIS SECTION                00017000
      IF(.NOT.CR.OR.NUMCRS.LT.1) GO TO 500                              00017100
C                                                                       00017200
C---     BEGIN LOADING CROSS CURVES (FROM THE PREVIOUS SAVE POINT)      00017300
      ISX=ISXSAV                                                        00017400
C                                                                       00017500
  420 CONTINUE                                                          00017600
      IF(ISX.GE.NLEN) GO TO 499                                         00017700
      ISIZE=SCAN(ISX+1)                                                 00017800
C****    THERE IS NOT ENOUGH BUFFER SPACE TO LOAD A CROSS CURVE         00017900
      IERROR=15                                                         00018000
      IF(ISIZE+ISCAN.GT.NSCNMX) GO TO 9998                              00018100
      JMODE=2                                                           00018200
      CALL APT094(JMODE,SCAN(ISX),SCAN(ISCAN+1))                        00018300
C****    CROSS CURVE COULD NOT BE FETCHED                               00018400
      IERROR=16                                                         00018500
      IF(JMODE.NE.2) GO TO 9998                                         00018600
      ISEG=SCAN(ISCAN+8)                                                00018700
C****    NUMBER OF SEGMENTS IN CROSS CURVE DID NOT MATCH NO. SPLINES    00018800
      IERROR=17                                                         00018900
      IF(ISEG+1.NE.NUMSPL) GO TO 9998                                   00019000
C                                                                       00019100
C---     A MAJOR TASK- IDENTIFY WHICH CROSS CURVE THIS IS.              00019200
C---     ISPL IS THE PREVIOUS SPLINE POINT WHICH MATCHED A              00019300
C---     CROSS CURVE POINT                                              00019400
      ISPL=1                                                            00019500
  429 CONTINUE                                                          00019600
C---     ICRS IS THE PRESENT POINT ON THE CROSS CURVE BEING EXAMINED    00019700
      ICRS=1                                                            00019800
  430 CONTINUE                                                          00019900
      IF(ICRS.GT.NUMSPL) GO TO 469                                      00020000
C---     CALCULATE THE CURVE POINT                                      00020100
      U=ICRS-1                                                          00020200
      CALL CURFLO(U,SCAN(ISCAN+1),CV,0,0)                               00020300
      DO 431 I=1,3                                                      00020400
  431 PP(I)=CV(I)                                                       00020500
C---     NOW SCAN THRU THE ICR-TH SPLINE FOR A MATCH ON PP              00020600
      NL=NLOC(ICRS)                                                     00020700
      NSP=ISPL                                                          00020800
  440 CONTINUE                                                          00020900
      IF(NSP.GT.NSEG1) GO TO 459                                        00021000
      U=NSP-1                                                           00021100
      CALL CURFLO(U,SCAN(NL),CV,0,0)                                    00021200
      W=DABS(CV(1)-PP(1))+DABS(CV(2)-PP(2))+DABS(CV(3)-PP(3))           00021300
      IF(W.GT.0.0001) GO TO 458                                         00021400
C---     JUNCTION POINTS OF CROSS CURVE AND SPLINE MATCH HERE           00021500
      IF(NSP.EQ.ISPL) GO TO 468                                         00021600
C---     UPDATE ISPL AND RESTART                                        00021700
      ISPL=NSP                                                          00021800
      GO TO 429                                                         00021900
C                                                                       00022000
  458 CONTINUE                                                          00022100
      NSP=NSP+1                                                         00022200
      GO TO 440                                                         00022300
C                                                                       00022400
  459 CONTINUE                                                          00022500
C****    THERE IS NO MATCH AT A JUNCTION PT BETWEEN A SPLINE AND CROSS  00022600
      IERROR=18                                                         00022700
      GO TO 9998                                                        00022800
C                                                                       00022900
  468 CONTINUE                                                          00023000
      ICRS=ICRS+1                                                       00023100
      GO TO 430                                                         00023200
  469 CONTINUE                                                          00023300
C---     MATCH HAS BEEN ACHIEVED, CROSS CURVE IS NUMBER ICRS            00023400
C****    ERROR, ANOTHER CROSS CURVE WAS ENTERED THRU SAME POINTS        00023500
      IERROR=19                                                         00023600
      IF(NLOC(NUMSPL+ISPL).NE.0) GO TO 9998                             00023700
      NLOC(NUMSPL+ISPL)=ISCAN+1                                         00023800
      ISCAN=ISCAN+SCAN(ISCAN+12)                                        00023900
      ISX=ISX+2                                                         00024000
      GO TO 420                                                         00024100
C                                                                       00024200
  499 CONTINUE                                                          00024300
C                                                                       00024400
  500 CONTINUE                                                          00024500
C---     ALL CROSS CURVES HAVE BEEN SAVED , NOW GENERATE                00024600
C---     ALL  CROSS CURVES NOT INPUT BY USER                            00024700
C                                                                       00024800
C---     FIRST CHECK WHETHER A RULED SURFACE IS INDICATED               00024900
      IF(NUMSPL.NE.2.OR.NUMCRS.GT.0) GO TO 600                          00025000
C                                                                       00025100
C---     PHASE 5.  DEFINTION OF A RULED SURFACE.                        00025200
C---     THE SURFACE IS RULED PROVIDED THAT NO CROSS SPLINE             00025300
C---     OR NORMAL CONSTRAINTS EXIST                                    00025400
      DO 510 I=1,NUMSPL                                                 00025500
      NL=NLOC(I)-1                                                      00025600
      NLOC1=SCAN(NL+2)*24.-4.+NL                                        00025700
      NLOC2=NLOC1+24.*SCAN(NL+4)                                        00025800
      DO 520 J=NLOC1,NLOC2,24                                           00025900
      W=DABS(SCAN(J)-ONE)                                               00026000
      IF(W.LT.SMAL) GO TO 600                                           00026100
      W=DABS(SCAN(J+4)-ONE)                                             00026200
      IF(W.LT.SMAL) GO TO 600                                           00026300
  520 CONTINUE                                                          00026400
  510 CONTINUE                                                          00026500
C                                                                       00026600
C---     ALL CONDITIONS FOR A RULED SURFACE HAVE BEEN MET               00026700
C---     FINISH THE DEFINITION OF THE RULED SURFACE NOW                 00026800
      NUMPAT=NSEG                                                       00026900
      ICAN=6*NSEG+10                                                    00027000
C                                                                       00027100
C---     DISSECT CURVES INTO SEGMENT CURVES AND SET UP RULED PATCHES    00027200
      DO 530 I=1,NSEG                                                   00027300
      ILOC=10+6*(I-1)                                                   00027400
      DO 540 J=1,NUMSPL                                                 00027500
      NL=NLOC(J)                                                        00027600
      ICANMX=MAXLDA-ICAN                                                00027700
      CALL DISEG(I,SCAN(NL),CAN(ICAN+1),ICANMX,IERROR)                  00027800
C****    ERROR IN DISSEGMENTING CURVE                                   00027900
      IF(IERROR.NE.0) GO TO 9998                                        00028000
      ILOC=ILOC+1                                                       00028100
      CAN(ILOC)=ICAN+1                                                  00028200
      ICAN=ICAN+CAN(ICAN+12)                                            00028300
  540 CONTINUE                                                          00028400
C---     TYPE FLAG INDICATES A BLEND BETWEEN TWO SPLINES                00028500
      CAN (ILOC+3)=-1.                                                  00028600
      CAN(ILOC+4)=ZERO                                                  00028700
  530 CONTINUE                                                          00028800
      CAN(2)=ICAN-(6*NSEG+11)                                           00028900
      CAN(8)=CAN(2)+CAN(3)+(6*NUMPAT+10)                                00029000
C                                                                       00029100
C                                                                       00029200
      GO TO 9997                                                        00029300
C                                                                       00029400
C---     CROSS FIT LIKE SEGMENT JUNCTION POINTS TO OBTAIN GOOD          00029500
C---     CROSS SLOPE CONSTRAINTS                                        00029600
  600 CONTINUE                                                          00029700
      I=1                                                               00029800
  610 CONTINUE                                                          00029900
      IF(I.GT.NSEG1) GO TO 699                                          00030000
C---     IF A CROSS CURVE HAS ALREADY BEEN ENTERED, SKIP TO NEXT JNCT.  00030100
      IF(NLOC(NUMSPL+I).NE.0) GO TO 690                                 00030200
C---     CHECK FOR AVAILABLE SPACE TO FIT CROSS CURVE                   00030300
      NSIZE=(NUMSPL+1)*24                                               00030400
C****    THERE IS NOT ENOUGH ROOM IN THE BUFFER TO FIT THIS CROSS CURVE 00030500
      IERROR=20                                                         00030600
      IF(NSIZE+ISCAN.GT.NSCNMX) GO TO 9998                              00030700
      U=ZERO                                                            00030800
      ISEG=I                                                            00030900
      IF(I.GT.NSEG) U=ONE                                               00031000
      ISEG=MIN0(NSEG,I)                                                 00031100
      J=1                                                               00031200
C---     PREPARE THE INPUT CURVE HEADER TABLE                           00031300
      DO 615 L=1,24                                                     00031400
  615 SCAN(ISCAN+L)=ZERO                                                00031500
      SCAN(ISCAN+2)=ONE                                                 00031600
      SCAN(ISCAN+3)=2.                                                  00031700
      SCAN(ISCAN+4)=NUMSPL                                              00031800
  620 CONTINUE                                                          00031900
C---     LOAD SPLINE CURVES ONE AT A  TIME TO OBTAIN POINT OR           00032000
C---     VECTOR DATA AT JUNCTION POINTS I                               00032100
      IF(J.GT.NUMSPL) GO TO 650                                         00032200
C---     SET ADDRESS OF SPLINE J                                        00032300
      NL=NLOC(J)-1                                                      00032400
      CALL CURFLO(U,SCAN(NL+1),CV,2,ISEG)                               00032500
C---     MOVE RELEVANT POINTS AND VECTOR CONSTRAINTS INTO BUFFER        00032600
      NBASE=J*24+ISCAN                                                  00032700
C---     ZERO OUT THE J-TH POINT BLOCK FIRST                            00032800
      DO 630 L=1,24                                                     00032900
  630 SCAN(NBASE+L)=ZERO                                                00033000
      DO 640 L=1,3                                                      00033100
      SCAN(NBASE+L)=CV(L)                                               00033200
      IF(DABS(CV(20)-ONE).LT.SMAL) SCAN(NBASE+4+L)=CV(L+16)             00033300
      IF(DABS(CV(32)-ONE).LT.SMAL) SCAN(NBASE+12+L)=CV(L+28)            00033400
      SCAN(NBASE+8+L)=CV(L+4)                                           00033500
  640 CONTINUE                                                          00033600
      IF(DABS(CV(20)-ONE).LT.SMAL) SCAN(NBASE+8)=ONE                    00033700
      IF(DABS(CV(32)-ONE).LT.SMAL) SCAN(NBASE+16)=ONE                   00033800
      SCAN(NBASE+12)=ONE                                                00033900
      SCAN(NBASE+17)=ONE                                                00034000
C                                                                       00034100
      J=J+1                                                             00034200
      GO TO 620                                                         00034300
C---                                                                    00034400
  650 CONTINUE                                                          00034500
      IF(IBUG.EQ.11) CALL SCDUMP(650,SCAN(ISCAN+1))                     00034600
C---     NOW DEFINE A SYNTHETIC CURVE IN THE CROSS DIRECTION            00034700
      IRR=0                                                             00034800
      CALL SCURV(SCAN(ISCAN+1),IRR)                                     00034900
C****    ERROR IN TRYING TO DEFINE A CROSS CURVE                        00035000
      IERROR=21                                                         00035100
      IF(IRR.NE.0) GO TO 9998                                           00035200
C                                                                       00035300
      SCAN(ISCAN+5)=SCAN(ISCAN+2)*24.+ONE                               00035400
      SCAN(ISCAN+12)=NUMSPL*24.                                         00035500
C---     IF CROSS CURVES HAVE BEEN INPUT BY THE USER, THEN INTERNALLY   00035600
C---     GENERATED CROSS CURVES MUST HAVE A FLOW STRUCTURE APPENDED     00035700
C                                                                       00035800
      IF(NUMCRS.LT.1) GO TO 680                                         00035900
C                                                                       00036000
C---     NOW APPEND AN IDENTITY-TYPE FLOW STRUCTURE                     00036100
      NSIZE=ISCAN+NUMSPL*40                                             00036200
C****    THERE IS NOT ENOUGH ROOM FOR FLOW STRUCTURE OF A CROSS CURVE   00036300
      IERROR=23                                                         00036400
      IF(NSIZE.GT.ICANMX) GO TO 9998                                    00036500
C                                                                       00036600
C---     NOW SETUP THE COMPLETE HEADER TABLE FOR A FLOW CURVE           00036700
      SCAN(ISCAN+5)=25+ISCAN                                            00036800
      SCAN(ISCAN+6)=NUMSPL-1                                            00036900
      SCAN(ISCAN+7)=NUMSPL*24+1                                         00037000
      SCAN(ISCAN+8)=SCAN(ISCAN+6)                                       00037100
      SCAN(ISCAN+9)=SCAN(ISCAN+7)+(NUMSPL-1)*4                          00037200
      SCAN(ISCAN+10)=2*(NUMSPL-1)                                       00037300
      SCAN(ISCAN+11)=SCAN(ISCAN+9)+(NUMSPL-1)*4                         00037400
      SCAN(ISCAN+12)=SCAN(ISCAN+11)+(NUMSPL-1)*8                        00037500
      SCAN(ISCAN+13)=ONE                                                00037600
C---     NOW FILL IN FLOW, SEGMENT, AND FLOW SPLINE DATA                00037700
C---     KEEP TRACK OF EACH TYPE OF DATA WITH ITS OWN POINTER.          00037800
      NFLOWR=SCAN(ISCAN+7)-5.                                           00037900
      NSEGR=SCAN(ISCAN+9)-5.                                            00038000
      NSPLR=SCAN(ISCAN+11)-9.                                           00038100
C---     LOOP THRU SEGMENT BY SEGMENT AND FILL IN FLOW DATA             00038200
      NN=NUMSPL-1                                                       00038300
      DO 660 L=1,NN                                                     00038400
C---     INCREMENT SEGMENT POINTERS                                     00038500
      NFLOWR=NFLOWR+4                                                   00038600
      NSEGR=NSEGR+4                                                     00038700
      NSPLR=NSPLR+8                                                     00038800
C---     FILL IN FLOW DATA FOR THE L-TH ARC                             00038900
      SCAN(NFLOWR+1)=NSPLR                                              00039000
      SCAN(NFLOWR+2)=2.                                                 00039100
      SCAN(NFLOWR+3)=4.0001                                             00039200
      SCAN(NFLOWR+4)=ONE                                                00039300
C---     FILL IN SEGMENT SUMMARY DATA                                   00039400
      SCAN(NSEGR+1)=L-1                                                 00039500
      SCAN(NSEGR+2)=L                                                   00039600
      SCAN(NSEGR+3)=ONE                                                 00039700
      SCAN(NSEGR+4)=ONE                                                 00039800
C---     FIRST SET UP AN IDENTITY FLOW SPLINE                           00039900
      SCAN(NSPLR+1)=ZERO                                                00040000
      SCAN(NSPLR+2)=ZERO                                                00040100
      SCAN(NSPLR+3)=ONE                                                 00040200
      SCAN(NSPLR+4)=ZERO                                                00040300
      SCAN(NSPLR+5)=ONE                                                 00040400
      SCAN(NSPLR+6)=ONE                                                 00040500
      SCAN(NSPLR+7)=ONE                                                 00040600
      SCAN(NSPLR+8)=ZERO                                                00040700
  660 CONTINUE                                                          00040800
C                                                                       00040900
  680 CONTINUE                                                          00041000
C                                                                       00041100
C---     CONSOLIDATE THIS CROSS CURVE INTO THE BUFFER AREA              00041200
      NLOC(NUMSPL+I)=ISCAN+1                                            00041300
C                                                                       00041400
      IF(NUMCRS.LT.1) ISCAN=ISCAN+24*NUMSPL                             00041500
      IF(NUMCRS.GT.0) ISCAN=ISCAN+SCAN(ISCAN+12)                        00041600
C                                                                       00041700
  690 CONTINUE                                                          00041800
      I=I+1                                                             00041900
      GO TO 610                                                         00042000
C                                                                       00042100
  699 CONTINUE                                                          00042200
C---     NOW ADD CROSS VECTORS AT ALL UNSPECIFIED POINTS                00042300
C---    THIS IS ACCOMPLISHED BY CROSS SPLINING THE SURFACE FOR          00042400
C---    FOR EACH AND EVERY USER INPUT POINT.                            00042500
C                                                                       00042600
C---    FIRST CHECK FOR STORAGE SPACE                                   00042700
      NSIZE=ISCAN+(NUMSPL+1)*24                                         00042800
C****    THERE IS NOT ENOUGH ROOM TO DETERMINE CROSS VECTOR BY SPLINING 00042900
      IERROR=24                                                         00043000
      IF(NSIZE.GT.NSCNMX) GO TO 9998                                    00043100
C                                                                       00043200
C---     MAJOR LOOP, DETERMINE UNSPECIFIED POINTS ON EACH SPLINE        00043300
C---     SKIP THIS LOOP IF THERE ARE ONLY TWO SPLINES                   00043400
      IF(NUMSPL.LE.2) GO TO 709                                         00043500
C                                                                       00043600
      DO 710 I=1,NUMSPL                                                 00043700
      NL=NLOC(I)-1                                                      00043800
C---     EXAMINE EACH JUNCTION POINT OF THE ITH SPLINE                  00043900
      NJ=SCAN(NL+4)                                                     00044000
      IF(NJ.EQ.1) GO TO 721                                             00044100
C                                                                       00044200
C---     SET UP PARAMETERS FOR DETECTING FLOW JUNCTIONS                 00044300
      NJFLO=SCAN(NL+6)*4.+ONE                                           00044400
      NJST=SCAN(NL+7)                                                   00044500
C                                                                       00044600
      DO 720 NK=1,NJ                                                    00044700
      JUNC=NK                                                           00044800
C---     SKIP CROSS CALCULATIONS FOR SEGMENT JUNCTION POINTS            00044900
      DO 722 II=1,NJFLO,4                                               00045000
      JUNCLO=SCAN(NL+NJST+II-1)                                         00045100
      JUNCHI=JUNCLO+SCAN(NL+NJST+II)                                    00045200
C---     SKIP CALCULATION IF JUNC EQUALS ONE OF THESE                   00045300
      IF(JUNC.EQ.JUNCLO.OR.JUNC.EQ.JUNCHI) GO TO 720                    00045400
C---     TERMINATE SEARCH AND CONTINUE WHEN JUNC IS BIG                 00045500
      IF(JUNC.GT.JUNCHI) GO TO 723                                      00045600
  722 CONTINUE                                                          00045700
C                                                                       00045800
  723 CONTINUE                                                          00045900
C                                                                       00046000
      LOC=JUNC*24+16                                                    00046100
C---     SKIP IF A CROSS VECTOR IS ALREADY THERE                        00046200
      IF(DABS(SCAN(NL+LOC+4)-ONE).LT.SMAL) GO TO 720                    00046300
C---     NOW PREPARE THE HEADER TABLE FOR SPLINING                      00046400
      DO 730 NN=5,24                                                    00046500
  730 SCAN(ISCAN+NN)=ZERO                                               00046600
      SCAN(ISCAN+2)=ONE                                                 00046700
      SCAN(ISCAN+3)=2.                                                  00046800
      SCAN(ISCAN+4)=NUMSPL                                              00046900
C---     FIND THE SEGMENT NUMBER AND FLOW VALUE AT ARC JUNCTIONS        00047000
      U=JUNC                                                            00047100
      CALL FLOINV(U,SCAN(NL+1),FLO,ISEG)                                00047200
C---     PICK A POINT OFF OF EACH SPLINE CURVE WITH THIS FLOW           00047300
C---     AND SEGMENT VALUE AND PLACE IT INTO A POINT BLOCK OF           00047400
C---     THE BUFFERED SCAN ARRAY                                        00047500
C                                                                       00047600
      DO 740 K=1,NUMSPL                                                 00047700
      JSC1=K*24+1                                                       00047800
      JSC2=JSC1+23                                                      00047900
      DO 750 J=JSC1,JSC2                                                00048000
      SCAN(J+ISCAN)=ZERO                                                00048100
  750 CONTINUE                                                          00048200
      SCAN(JSC1+ISCAN+16)=ONE                                           00048300
C---     NOW RETRIEVE A POINT FROM THE K-TH SPLINE                      00048400
      NKS=NLOC(K)                                                       00048500
      CALL CURFLO(FLO,SCAN(NKS),CV,0,ISEG)                              00048600
      DO 760 J=1,3                                                      00048700
  760 SCAN(ISCAN+JSC1+J-1)=CV(J)                                        00048800
  740 CONTINUE                                                          00048900
C                                                                       00049000
C---     NOW FIT A SPLINE THRU THESE POINTS                             00049100
      CALL SCURV(SCAN(ISCAN+1),IRR)                                     00049200
C****    CROSS FITTING FAILED AT A SEGMENT INTERIOR POINT               00049300
      IERROR=25                                                         00049400
      IF(IRR.NE.0) GO TO 9998                                           00049500
C---     RETRIEVE AND STORE BOTH THE ENTERING AND EXITING TANGENTS      00049600
C---     FIRST STORE THE EXITING VECTOR                                 00049700
      NN=I*24                                                           00049800
      U=ZERO                                                            00049900
      IF(I.EQ.NUMSPL) NN=NN-24                                          00050000
      IF(I.EQ.NUMSPL) U=ONE                                             00050100
      CALL CNCURV(U,SCAN(ISCAN+1+NN),CV,1)                              00050200
C---     STORE THIS VECTOR AS A CROSS CONSTRAINT OF THE SPLINE          00050300
      DO 770 L=1,3                                                      00050400
  770 SCAN(NL+LOC+L)=CV(L+4)                                            00050500
      SCAN(NL+LOC+4)=ONE                                                00050600
C---     NEXT RETRIEVE AND STORE THE ENTERING VECTOR                    00050700
      U=ONE                                                             00050800
      NN=(I-1)*24                                                       00050900
      IF(I.EQ.1) U=ZERO                                                 00051000
      IF(I.EQ.1) NN=NN+24                                               00051100
      CALL CNCURV(U,SCAN(ISCAN+1+NN),CV,1)                              00051200
      DO 780 L=1,3                                                      00051300
  780 SCAN(NL+LOC+L+4)=CV(L+4)                                          00051400
      SCAN(NL+LOC+8)=ONE                                                00051500
C                                                                       00051600
  720 CONTINUE                                                          00051700
C                                                                       00051800
  721 CONTINUE                                                          00051900
C                                                                       00052000
  710 CONTINUE                                                          00052100
C                                                                       00052200
  709 CONTINUE                                                          00052300
C---     END OF LOOP TO GENERATE CROSS CONSTRAINTS ON SPLINES           00052400
C                                                                       00052500
C                                                                       00052600
  800 CONTINUE                                                          00052700
C---     CASE OF A GENCUR SURFACE WITH NO CROSS SPLINES                 00052800
C---     FETCH CURVES AND DECOMPOSE SURFACE DEFINITION INTO A           00052900
C---     PATCH STRUCTURE                                                00053000
C                                                                       00053100
      NM=NUMSPL-1                                                       00053200
C---     ICAN IS THE LAST USED LOCATION IN THE CAN ARRAY                00053300
      ICAN=10+6*NSEG*NM                                                 00053400
C                                                                       00053500
C---     GENERATE SURFACE ON A PATCH-BY-PATCH BASIS                     00053600
C                                                                       00053700
      DO 810 J=1,NM                                                     00053800
      DO 810 I=1,NSEG                                                   00053900
C                                                                       00054000
      NUMPAT=I+(J-1)*NSEG                                               00054100
C---     ILOC IS THE LAST USED LOCATION IN THE PATCH POINTER TABLE      00054200
      ILOC=10+(NUMPAT-1)*6                                              00054300
C                                                                       00054400
C---     LOAD TWO SPLINE CURVE BOUNDARIES OF THIS PATCH                 00054500
      DO 820 K=1,2                                                      00054600
C                                                                       00054700
      ICURV=NLOC(J+K-1)                                                 00054800
      ICANMX=MAXLDA-ICAN                                                00054900
      CALL DISEG(I,SCAN(ICURV),CAN(ICAN+1),ICANMX,IERROR)               00055000
C****    DISSECTION OF A SPLINE CURVE FAILED                            00055100
      IF(IERROR.NE.0) GO TO 9998                                        00055200
      ILOC=ILOC+1                                                       00055300
      CAN(ILOC)=ICAN+1                                                  00055400
      ICAN=ICAN+CAN(ICAN+12)                                            00055500
  820 CONTINUE                                                          00055600
C                                                                       00055700
C---     NOW LOAD THE CROSS CURVES IN A SIMILAR FASHION, BUT            00055800
C---     DO NOT SAVE THEM UNLESS CROSS CURVES HAVE BEEN ENTERED         00055900
C                                                                       00056000
      ICANSV=ICAN                                                       00056100
      DO 830 K=1,2                                                      00056200
C                                                                       00056300
      ICURV=NLOC(NUMSPL+I+K-1)                                          00056400
      ICANMX=MAXLDA-ICAN                                                00056500
      CALL DISEG(J,SCAN(ICURV),CAN(ICAN+1),ICANMX,IERROR)               00056600
C****    A CROSS CURVE COULD NOT BE DISSECTED                           00056700
      IF(IERROR.NE.0) GO TO 9998                                        00056800
      ILOC=ILOC+1                                                       00056900
      CAN(ILOC)=ICAN+1                                                  00057000
      ICAN=ICAN+CAN(ICAN+12)                                            00057100
  830 CONTINUE                                                          00057200
C                                                                       00057300
C---     NOW COMPLETE ALL BOUNDARY CURVES BY FILLING IN                 00057400
C---     ALL CROSS VECTORS AT ARC JUNCTIONS                             00057500
      IA=CAN(ILOC-3)                                                    00057600
      IB=CAN(ILOC-2)                                                    00057700
      IC=CAN(ILOC-1)                                                    00057800
      ID=CAN(ILOC)                                                      00057900
C                                                                       00058000
C---     SPECIAL LOGIC WHERE DUAL(INCOMING AND OUTGOING) TANGENTS       00058100
C---     HAVE BEEN GENERATED EARLIER.  SKIP IF 2 OR FEWER SPLINES       00058200
      IF(NUMSPL.LT.3) GO TO 839                                         00058300
C                                                                       00058400
C---     RETAIN EXITING VECTORS FOR CAN(IA) AND ENTERING VECTORS FOR IB.00058500
      NUMJNC=CAN(IA+3)                                                  00058600
      IF(NUMJNC.LT.2) GO TO 834                                         00058700
      DO 832 II=2,NUMJNC                                                00058800
      KK=(II-1)*24+15                                                   00058900
      DO 833 JJ=1,4                                                     00059000
      CAN(IA+KK+4+JJ)=ZERO                                              00059100
  833 CONTINUE                                                          00059200
  832 CONTINUE                                                          00059300
  834 CONTINUE                                                          00059400
C---     NEXT REARRANGE THE ENTERING VECTORS FOR CAN(IB)                00059500
      NUMJNC=CAN(IB+3)                                                  00059600
      IF(NUMJNC.LT.2) GO TO 838                                         00059700
      DO 836 II=2,NUMJNC                                                00059800
      KK=(II-1)*24+15                                                   00059900
      DO 837 JJ=1,4                                                     00060000
      CAN(IB+KK+JJ)=CAN(IB+KK+JJ+4)                                     00060100
      CAN(IB+KK+JJ+4)=ZERO                                              00060200
  837 CONTINUE                                                          00060300
  836 CONTINUE                                                          00060400
  838 CONTINUE                                                          00060500
C                                                                       00060600
  839 CONTINUE                                                          00060700
C                                                                       00060800
C---     NOW FIT ANY UNRESOLVED CROSS VECTORS                           00060900
C---     SINCE ALL TANGENTS HAVE ALREADY BEEN DETERMINED , SET BYPASS   00061000
C---     FLAG FOR CRSFIT LOGIC  --  CRSFIT IS CALLED FOR DISPLAY        00061100
      IERROR=0                                                          00061200
      IF(NUMSPL.GT.2) IERROR=-11                                        00061300
      CALL CRSFIT(CAN(IA),CAN(IB),CAN(IC),CAN(ID),IERROR)               00061400
C****    FILLING IN OF CROSS SLOPES ON SPLINE CURVES FAILED             00061500
      IF(IERROR.NE.0) GO TO 9998                                        00061600
C                                                                       00061700
C---     FILL IN IC ID CURVES IF NUMCRS IS NOT ZERO.                    00061800
      IF(NUMCRS.GT.0)                                                   00061900
     X CALL CRSFIT(CAN(IC),CAN(ID),CAN(IA),CAN(IB),IERROR)              00062000
C****    FILLING IN OF CROSS SLOPES ON CROSS CURVES FAILED              00062100
      IF(IERROR.NE.0) GO TO 9998                                        00062200
C                                                                       00062300
C---     NOW FILL IN REMAINDER OF PATCH HEADER TABLE                    00062400
C                                                                       00062500
      IF(NUMCRS.GT.0) GO TO 840                                         00062600
C---     FOR SPLINE CURVES ONLY, CUT BACK SPACE FROM CROSS CURVES       00062700
      ICAN=ICANSV                                                       00062800
      CAN(ILOC-1)=ZERO                                                  00062900
      CAN(ILOC)=ZERO                                                    00063000
      ILOC=ILOC+1                                                       00063100
      CAN(ILOC)=-2.                                                     00063200
      ILOC=ILOC+1                                                       00063300
      CAN(ILOC)=ZERO                                                    00063400
      GO TO 810                                                         00063500
C                                                                       00063600
  840 CONTINUE                                                          00063700
      ILOC=ILOC+1                                                       00063800
      CAN(ILOC)=-22.                                                    00063900
      ILOC=ILOC+1                                                       00064000
      CAN(ILOC)=ZERO                                                    00064100
C                                                                       00064200
  810 CONTINUE                                                          00064300
C                                                                       00064400
C---     FILL IN SURFACE HEADER TABLE                                   00064500
C                                                                       00064600
C---     LAST PATCH,LAST BOUNDARY LOCATION                              00064700
      ILAST=CAN(10+NUMPAT*6-4)                                          00064800
      IF(NUMCRS.GT.0) ILAST=CAN(10+NUMPAT*6-2)                          00064900
C---     VALUE TABLE SIZE                                               00065000
      CAN(2)=CAN(ILAST+11)+(ILAST-10-NUMPAT*6-1)                        00065100
C---     TOPOLOGY TABLE SIZE                                            00065200
      CAN(3)=NUMPAT*4                                                   00065300
C---     NUMBER OF PATCHES IN SURFACE                                   00065400
      CAN(4)=NUMPAT                                                     00065500
C---     SURFACE TYPE, MESH TYPE                                        00065600
      CAN(5)=2.                                                         00065700
C---     SURFACE SUBTYPE, GENCUR                                        00065800
      CAN(6)=5.                                                         00065900
C---     SIGN OF SURFACE NORMAL                                         00066000
      CAN(7)=ONE                                                        00066100
C---     TOTAL SIZE OF THIS SURFACE                                     00066200
      CAN(8)=(10+NUMPAT*6)+CAN(2)+CAN(3)                                00066300
C---     NUMBER OF SPLINES                                              00066400
      CAN(9)=NUMSPL                                                     00066500
C---     NUMBER OF CROSS SPLINES OR SEGMENT JUNCTION POINTS PER SPLINE  00066600
      CAN(10)=NSEG1                                                     00066700
C                                                                       00066800
      IBADSZ=CAN(8)                                                     00066900
      IF(IBUG.EQ.11) CALL BAD(IBADSZ,1,'CAN ',CAN)                      00067000
C                                                                       00067100
C---     END OF PATCH GENERATING LOOP                                   00067200
C                                                                       00067300
      GO TO 9997                                                        00067400
C                                                                       00067500
C 900 CONTINUE                                                          00067600
C     GO TO 9997                                                        00067700
C                                                                       00067800
 9997 CONTINUE                                                          00067900
      IERROR=0                                                          00068000
      GO TO 9999                                                        00068100
C                                                                       00068200
 9998 CONTINUE                                                          00068300
C---     GENERATE DEBUG PRINTOUT IF IBUG FLAG IS SET                    00068400
      IF(IBUG.NE.11) GO TO 9996                                         00068500
      CALL BAD(1,0,'IRR ',IRR)                                          00068600
      CALL BAD(1,0,'IERR',IERROR)                                       00068700
      CALL BAD(1,0,'NUMS',NUMSPL)                                       00068800
      CALL BAD(1,0,'ISCN',ISCAN)                                        00068900
      CALL BAD(1,0,'NSEG',NSEG)                                         00069000
      CALL BAD(-1,0,'NLEN',NLEN)                                        00069100
      CALL BAD(-NC,0,'NLOC',NLOC)                                       00069200
      I1=MIN0(MAXLDA,ICAN)                                              00069300
      CALL BAD(-I1,1,'CAN ',CAN(1))                                     00069400
      I1=ISCAN+200                                                      00069500
      I1=MIN0(ISCAN,NSCNMX)                                             00069600
      CALL BAD(-I1,1,'SCAN',SCAN)                                       00069700
 9996 CONTINUE                                                          00069800
      IERROR=IERROR+5020                                                00069900
      GO TO 9999                                                        00070000
C                                                                       00070100
 9999 CONTINUE                                                          00070200
      RETURN                                                            00070300
      END                                                               00070400
**** SOURCE FILE : M0002771.V04   ***
*
C                                                                       00000050
      SUBROUTINE GETSCA(SCAN,SPL,PNTS,PTANS,PCRS,TAN,CTAN,IPARA,ILIN,   00000100
     *  ITW)                                                            00000200
C----------SCULPTURED SURFACE ROUTINE ------- JULY 1971  *LPK*          00000300
C----------GET SSCAN ARRAY                                              00000400
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000450
      DIMENSION SCAN(*),TAN(*),CTAN(*)                                  00000500
      DIMENSION IPARA(2)                                                00000600
C                                                                       00000710
      INCLUDE 'BLANKCOM.INC'                                            00000720
C                                                                       00000730
      IDEBUG=0                                                          00000800
C---------- XYZ                                                         00000900
      IA=SPL                                                            00001000
      IB=PNTS                                                           00001100
      IC=PTANS-1                                                        00001200
      ID=PCRS-1                                                         00001300
      NPH=SSCAN(4)                                                      00001400
      IE=6*NPH+10                                                       00001500
      IG=IE                                                             00001600
      IAA=IA-1                                                          00001700
      IBB=IB-1                                                          00001800
      IF(ILIN.EQ.1) GO TO 2000                                          00001900
      DO 1000 I=1,IAA                                                   00002000
      DO 1000 J=1,IBB                                                   00002100
      JA=(I-1)*IB*3+(J-1)*3                                             00002200
      JB=(I-1)*IB*3+J*3                                                 00002300
      JC=IC+JA                                                          00002400
      JD=IC+JB                                                          00002500
      JE=I*IB*3+(J-1)*3                                                 00002600
      JF=I*IB*3+J*3                                                     00002700
      JG=JE+IC                                                          00002800
      JH=JF+IC                                                          00002900
      JI=ID+(J-1)*IA*3+(I-1)*3                                          00003000
      JJ=ID+I*3+(J-1)*IA*3                                              00003100
      JK=ID+J*IA*3+(I-1)*3                                              00003200
      JL=ID+J*IA*3+I*3                                                  00003300
      JX=(J-1)*3+(I-1)*3*IBB                                            00003400
      JY=(J-1)*3+I*3*IBB                                                00003500
      JZ=(I-1)*3+(J-1)*3*IAA                                            00003600
      JW=(I-1)*3+J*3*IAA                                                00003700
      DO 1100 K=1,3                                                     00003800
      SSCAN(IG+1)=SCAN(JA+K)                                            00003900
      SSCAN(IG+2)=SCAN(JB+K)                                            00004000
      SSCAN(IG+3)=SCAN(JC+K)                                            00004100
      IF(IPARA(1).EQ.1) GO TO 1002                                      00004200
      SSCAN(IG+4)=SCAN(JD+K)                                            00004300
 1012 SSCAN(IG+5)=SCAN(JE+K)                                            00004400
      SSCAN(IG+6)=SCAN(JF+K)                                            00004500
      SSCAN(IG+7)=SCAN(JG+K)                                            00004600
      IF(IPARA(1).EQ.1) GO TO 1003                                      00004700
      SSCAN(IG+8)=SCAN(JH+K)                                            00004800
 1013 SSCAN(IG+9)=SCAN(JI+K)                                            00004900
      SSCAN(IG+10)=SCAN(JK+K)                                           00005100
      IF(IPARA(2).EQ.1) GO TO 1031                                      00005110
      SSCAN(IG+11)=SCAN(JJ+K)                                           00005200
      SSCAN(IG+12)=SCAN(JL+K)                                           00005400
      GO TO 1005                                                        00005500
C----------PARALLEL CASE                                                00005600
 1002 SSCAN(IG+4)=TAN(JX+K)                                             00005700
      GO TO 1012                                                        00005800
 1003 SSCAN(IG+8)=TAN(JY+K)                                             00005900
      GO TO 1013                                                        00006000
 1031 SSCAN(IG+11)=CTAN(JZ+K)                                           00006100
      SSCAN(IG+12)=CTAN(JW+K)                                           00006300
 1005 IF(ITW.EQ.0) GO TO 1101                                           00006400
C---------- INSERT TWIST VECTOR,IF SPL=2 OR PNTS=2                      00006600
      TEMA=SSCAN(IG+11)                                                 00006700
      TEMB=SSCAN(IG+12)                                                 00006800
      IF(ITW.EQ.2  ) GO TO 1110                                         00006900
      SSCAN(IG+11)=(SSCAN(IG+7)-SSCAN(IG+3))                            00007000
      SSCAN(IG+12)=(SSCAN(IG+8)-SSCAN(IG+4))                            00007100
      GO TO 1111                                                        00007200
 1110 SSCAN(IG+11)=(SSCAN(IG+10)-SSCAN(IG+9))                           00007300
      SSCAN(IG+12)=(TEMB-TEMA)                                          00007400
 1111 SSCAN(IG+13)=TEMA                                                 00007500
      SSCAN(IG+14)=TEMB                                                 00007600
      SSCAN(IG+15)=SSCAN(IG+11)                                         00007700
      SSCAN(IG+16)=SSCAN(IG+12)                                         00007800
 1101 IG=IG+12                                                          00007900
      IF(ITW.NE.0) IG=IG+4                                              00007910
 1100 CONTINUE                                                          00008000
      SSCAN(IG+1)=1.0                                                   00008100
      IG=IG+1                                                           00008200
 1000 CONTINUE                                                          00008300
      GO TO 9999                                                        00008400
 2000 DO 2001 I=1,IAA                                                   00008500
      DO 2001 J=1,IBB                                                   00008600
      JA=(I-1)*IB*3+(J-1)*3                                             00008700
      JB=(I-1)*IB*3+J*3                                                 00008800
      JC=IC+JA                                                          00008900
      JD=IC+JB                                                          00009000
      JE=I*IB*3+(J-1)*3                                                 00009100
      JF=I*IB*3+J*3                                                     00009200
      JG=JE+IC                                                          00009300
      JH=JF+IC                                                          00009400
      JI=ID+(J-1)*IA*3+(I-1)*3                                          00009500
      JJ=ID+I*3+(J-1)*IA*3                                              00009600
      JK=ID+J*IA*3+(I-1)*3                                              00009700
      JL=ID+J*IA*3+I*3                                                  00009800
      JX=(J-1)*3+(I-1)*3*IBB                                            00009900
      JY=(J-1)*3+I*3*IBB                                                00010000
      JZ=(I-1)*3+(J-1)*3*IAA                                            00010100
      JW=(I-1)*3+J*3*IAA                                                00010200
      IF(SSCAN(6)-2.0) 2100,2200,2300                                   00010300
C----------XYPLAN                                                       00010400
 2100 SSCAN(IG+1)=SCAN(JA+1)                                            00010500
      SSCAN(IG+2)=SCAN(JB+1)                                            00010600
      SSCAN(IG+3)=SCAN(JE+1)                                            00010700
      SSCAN(IG+4)=SCAN(JF+1)                                            00010800
      SSCAN(IG+5)=SCAN(JA+2)                                            00010900
      SSCAN(IG+6)=SCAN(JB+2)                                            00011000
      SSCAN(IG+7)=SCAN(JE+2)                                            00011100
      SSCAN(IG+8)=SCAN(JF+2)                                            00011200
      SSCAN(IG+9)=SCAN(JA+3)                                            00011300
      SSCAN(IG+10)=SCAN(JB+3)                                           00011400
      SSCAN(IG+11)=SCAN(JC+3)                                           00011500
      IF(IPARA(1).EQ.1) GO TO 2102                                      00011600
      SSCAN(IG+12)=SCAN(JD+3)                                           00011700
 2112 SSCAN(IG+13)=SCAN(JE+3)                                           00011800
      SSCAN(IG+14)=SCAN(JF+3)                                           00011900
      SSCAN(IG+15)=SCAN(JG+3)                                           00012000
      IF(IPARA(1).EQ.1) GO TO 2103                                      00012100
      SSCAN(IG+16)=SCAN(JH+3)                                           00012200
 2113 SSCAN(IG+17)=SCAN(JI+3)                                           00012300
      SSCAN(IG+18)=SCAN(JK+3)                                           00012500
      IF(IPARA(2).EQ.1) GO TO 2131                                      00012510
      SSCAN(IG+19)=SCAN(JJ+3)                                           00012600
      SSCAN(IG+20)=SCAN(JL+3)                                           00012800
      GO TO 2107                                                        00012900
C----------PARALLEL CASE                                                00013000
 2102 SSCAN(IG+12)=TAN(JX+3)                                            00013100
      GO TO 2112                                                        00013200
 2103 SSCAN(IG+16)=TAN(JY+3)                                            00013300
      GO TO 2113                                                        00013400
 2131 SSCAN(IG+19)=CTAN(JZ+3)                                           00013500
      SSCAN(IG+20)=CTAN(JW+3)                                           00013700
 2107 IF(ITW.EQ.0  ) GO TO 2105                                         00013800
C---------- INSERT TWIST VECTOR,IF SPL=2 OR PNTS=2                      00013900
      TEMA=SSCAN(IG+19)                                                 00014000
      TEMB=SSCAN(IG+20)                                                 00014100
      IF(ITW.EQ.2) GO TO 2110                                           00014200
      SSCAN(IG+19)=(SSCAN(IG+15)-SSCAN(IG+11))                          00014300
      SSCAN(IG+20)=(SSCAN(IG+16)-SSCAN(IG+12))                          00014400
      GO TO 2111                                                        00014500
 2110 SSCAN(IG+19)=(SSCAN(IG+18)-SSCAN(IG+17))                          00014600
      SSCAN(IG+20)=(TEMB-TEMA)                                          00014700
 2111 SSCAN(IG+21)=TEMA                                                 00014800
      SSCAN(IG+22)=TEMB                                                 00014900
      SSCAN(IG+23)=SSCAN(IG+19)                                         00015000
      SSCAN(IG+24)=SSCAN(IG+20)                                         00015100
      GO TO 2106                                                        00015200
C---------- YZPLAN                                                      00015300
 2200 SSCAN(IG+1)=SCAN(JA+1)                                            00015400
      SSCAN(IG+2)=SCAN(JB+1)                                            00015500
      SSCAN(IG+3)=SCAN(JC+1)                                            00015600
      IF(IPARA(1).EQ.1) GO TO 2202                                      00015700
      SSCAN(IG+4)=SCAN(JD+1)                                            00015800
 2212 SSCAN(IG+5)=SCAN(JE+1)                                            00015900
      SSCAN(IG+6)=SCAN(JF+1)                                            00016000
      SSCAN(IG+7)=SCAN(JG+1)                                            00016100
      IF(IPARA(1).EQ.1) GO TO 2203                                      00016200
      SSCAN(IG+8)=SCAN(JH+1)                                            00016300
 2213 SSCAN(IG+9)=SCAN(JI+1)                                            00016400
      SSCAN(IG+10)=SCAN(JK+1)                                           00016600
      IF(IPARA(2).EQ.1) GO TO 2231                                      00016610
      SSCAN(IG+11)=SCAN(JJ+1)                                           00016700
      SSCAN(IG+12)=SCAN(JL+1)                                           00016900
 2215 SSCAN(IG+13)=SCAN(JA+2)                                           00017000
      SSCAN(IG+14)=SCAN(JB+2)                                           00017100
      SSCAN(IG+15)=SCAN(JE+2)                                           00017200
      SSCAN(IG+16)=SCAN(JF+2)                                           00017300
      SSCAN(IG+17)=SCAN(JA+3)                                           00017400
      SSCAN(IG+18)=SCAN(JB+3)                                           00017500
      SSCAN(IG+19)=SCAN(JE+3)                                           00017600
      SSCAN(IG+20)=SCAN(JF+3)                                           00017700
      IF(ITW.EQ.0  ) GO TO 2105                                         00017800
C---------- INSERT TWIST VECTOR,IF SPL=2 OR PNTS=2                      00017900
      TEMA=SSCAN(IG+11)                                                 00018000
      TEMB=SSCAN(IG+12)                                                 00018100
      SSCAN(IG+17)=SSCAN(IG+13)                                         00018200
      SSCAN(IG+18)=SSCAN(IG+14)                                         00018300
      SSCAN(IG+19)=SSCAN(IG+15)                                         00018400
      SSCAN(IG+20)=SSCAN(IG+16)                                         00018500
      SSCAN(IG+21)=SSCAN(IG+17)                                         00018600
      SSCAN(IG+22)=SSCAN(IG+18)                                         00018700
      SSCAN(IG+23)=SSCAN(IG+19)                                         00018800
      SSCAN(IG+24)=SSCAN(IG+20)                                         00018900
      IF(ITW.EQ.2) GO TO 2210                                           00019000
      SSCAN(IG+11)=(SSCAN(IG+7)-SSCAN(IG+3))                            00019100
      SSCAN(IG+12)=(SSCAN(IG+8)-SSCAN(IG+4))                            00019200
      GO TO 2211                                                        00019300
 2210 SSCAN(IG+11)=(SSCAN(IG+10)-SSCAN(IG+9))                           00019400
      SSCAN(IG+12)=(TEMB-TEMA)                                          00019500
 2211 SSCAN(IG+13)=TEMA                                                 00019600
      SSCAN(IG+14)=TEMB                                                 00019700
      SSCAN(IG+15)=SSCAN(IG+11)                                         00019800
      SSCAN(IG+16)=SSCAN(IG+12)                                         00019900
      GO TO 2106                                                        00020000
C----------PARALLEL CASE                                                00020100
 2202 SSCAN(IG+4)=TAN(JX+1)                                             00020200
      GO TO 2212                                                        00020300
 2203 SSCAN(IG+8)=TAN(JY+1)                                             00020400
      GO TO 2213                                                        00020500
 2231 SSCAN(IG+11)=CTAN(JZ+1)                                           00020600
      SSCAN(IG+12)=CTAN(JW+1)                                           00020800
      GO TO 2215                                                        00020900
C----------ZXPLAN                                                       00021000
 2300 SSCAN(IG+1)=SCAN(JA+1)                                            00021100
      SSCAN(IG+2)=SCAN(JB+1)                                            00021200
      SSCAN(IG+3)=SCAN(JE+1)                                            00021300
      SSCAN(IG+4)=SCAN(JF+1)                                            00021400
      SSCAN(IG+5)=SCAN(JA+2)                                            00021500
      SSCAN(IG+6)=SCAN(JB+2)                                            00021600
      SSCAN(IG+7)=SCAN(JC+2)                                            00021700
      IF(IPARA(1).EQ.1) GO TO 2302                                      00021800
      SSCAN(IG+8)=SCAN(JD+2)                                            00021900
 2312 SSCAN(IG+9)=SCAN(JE+2)                                            00022000
      SSCAN(IG+10)=SCAN(JF+2)                                           00022100
      SSCAN(IG+11)=SCAN(JG+2)                                           00022200
      IF(IPARA(1).EQ.1) GO TO 2303                                      00022300
      SSCAN(IG+12)=SCAN(JH+2)                                           00022400
 2313 SSCAN(IG+13)=SCAN(JI+2)                                           00022500
      SSCAN(IG+14)=SCAN(JK+2)                                           00022700
      IF(IPARA(2).EQ.1) GO TO 2331                                      00022710
      SSCAN(IG+15)=SCAN(JJ+2)                                           00022800
      SSCAN(IG+16)=SCAN(JL+2)                                           00023000
 2315 SSCAN(IG+17)=SCAN(JA+3)                                           00023100
      SSCAN(IG+18)=SCAN(JB+3)                                           00023200
      SSCAN(IG+19)=SCAN(JE+3)                                           00023300
      SSCAN(IG+20)=SCAN(JF+3)                                           00023400
      IF(ITW.EQ.0  ) GO TO 2105                                         00023500
C---------- INSERT TWIST VECTOR,IF SPL=2 OR PNTS=2                      00023600
      TEMA=SSCAN(IG+15)                                                 00023700
      TEMB=SSCAN(IG+16)                                                 00023800
      SSCAN(IG+21)=SSCAN(IG+17)                                         00023900
      SSCAN(IG+22)=SSCAN(IG+18)                                         00024000
      SSCAN(IG+23)=SSCAN(IG+19)                                         00024100
      SSCAN(IG+24)=SSCAN(IG+20)                                         00024200
      IF(ITW.EQ.2) GO TO 2310                                           00024300
      SSCAN(IG+15)=(SSCAN(IG+11)-SSCAN(IG+7))                           00024400
      SSCAN(IG+16)=(SSCAN(IG+12)-SSCAN(IG+8))                           00024500
      GO TO 2311                                                        00024600
 2310 SSCAN(IG+15)=(SSCAN(IG+14)-SSCAN(IG+13))                          00024700
      SSCAN(IG+16)=(TEMB-TEMA)                                          00024800
 2311 SSCAN(IG+17)=TEMA                                                 00024900
      SSCAN(IG+18)=TEMB                                                 00025000
      SSCAN(IG+19)=SSCAN(IG+15)                                         00025100
      SSCAN(IG+20)=SSCAN(IG+16)                                         00025200
      GO TO 2106                                                        00025300
C----------PARALLEL CASE                                                00025400
 2302 SSCAN(IG+8)=TAN(JX+2)                                             00025500
      GO TO 2312                                                        00025600
 2303 SSCAN(IG+12)=TAN(JY+2)                                            00025700
      GO TO 2313                                                        00025800
 2331 SSCAN(IG+15)=CTAN(JZ+2)                                           00025900
      SSCAN(IG+16)=CTAN(JW+2)                                           00026100
      GO TO 2315                                                        00026200
 2105 SSCAN(IG+21)=1.0                                                  00026300
      IG=IG+21                                                          00026400
      GO TO 2001                                                        00026500
 2106 SSCAN(IG+25)=1.0                                                  00026600
      IG=IG+25                                                          00026700
 2001 CONTINUE                                                          00026800
 9999 RETURN                                                            00026900
      END                                                               00027000
**** SOURCE FILE : M0002890.V10   ***
*
C     READ ROUTINE (LDARD) FOR LARGE DATA ARRAYS                        00000010
C                                                                       00000011
      SUBROUTINE LDARD(MOD,A,NUMBER)                                    00000020
C                                                                       00000021
      IMPLICIT DOUBLE PRECISION (A-H), DOUBLE PRECISION (O-Z)           00000030
C                                                                       00000042
      INCLUDE 'BLANKCOM.INC'                                            00000044
C                                                                       00000046
      DOUBLE PRECISION A(3),B(10)                                       00000050
      INTEGER IB(20)                                                    00000060
      EQUIVALENCE (B(1),IB(1))                                          00000070
      INCLUDE 'DARRAY.INC'                                              00000081
      COMMON/SSPRT/SSPRT,SSTEST                                         00000090
      INTEGER ITEMP(2),BCDF                                             00000092
      EQUIVALENCE (TEMP,ITEMP(1))                                       00000094
      CHARACTER*1 TEST                                                  00000096
      LOGICAL SSPRT,SSTEST                                              00000100
      DOUBLE PRECISION SNAME(2)                                         00000110
      DOUBLE PRECISION MEMBER                                           00000120
      CHARACTER BLA8*8,BLA*1                                            00000124
      CHARACTER LNAME*16,LMEM*8                                         00000130
      DATA BLA8/'        '/,BLA/' '/                                    00000154
C                                                                       00000158
      CALL UNPACK(A(1),MODE,ISIZE,ISUB)                                 00000160
      MEMBER=A(ISIZE+1)                                                 00000170
      CALL HOLFRM(MEMBER,LMEM,1,8,NWD)                                  00000175
      SNAME(1)=MEMBER                                                   00000180
      ITEMP(1)=BCDF(BLA8(1:4))                                          00000182
      ITEMP(2)=BCDF(BLA8(5:8))                                          00000184
      SNAME(2)=TEMP                                                     00000190
      CALL HOLFRM(SNAME,LNAME,1,16,NWD)                                 00000195
      IF(ISUB.EQ.0) GOTO 8                                              00000200
      CALL ICONV(ISUB+10000000,LMEM,1,8)                                00000210
      SNAME(1)=A(ISUB*ISIZE+ISUB)                                       00000220
      CALL HOLFRM(SNAME(1),LNAME,1,8,NWD)                               00000222
      DO 5 K=1,8                                                        00000230
      IF(LNAME(K:K).EQ.BLA)GOTO 5                                       00000240
      LMEM(K:K)=LNAME(K:K)                                              00000250
    5 CONTINUE                                                          00000260
      CALL CFORM(' (     )',LNAME,9,8)                                  00000270
      CALL ICONV(ISUB,LNAME,11,4)                                       00000280
C   OPEN READING FROM PDS                                               00000290
    8 CALL FINDME (19,LMEM,IRET)                                        00000300
      IF(IRET.EQ.0)GOTO 10                                              00000310
      CALL CFORM('0 CANNOT FIND FILE :          :',DARRAY,1,31)         00000320
      CALL CFORM(LMEM,DARRAY,22,8)                                      00000321
      CALL CPRINT(DARRAY)                                               00000330
      RETURN                                                            00000340
   10 CALL RDSATZ(19,B,IANZ,NRSATZ,IRET)                                00000350
      IF(B(1).EQ.SNAME(1))GOTO 20                                       00000360
      CALL CFORM('0 FILE :          : CONTAINS WRONG SURFACE',DARRAY,   00000370
     +           1,42)                                                  00000371
      CALL CFORM(LMEM,DARRAY,10,8)                                      00000375
      CALL CPRINT(DARRAY)                                               00000380
      RETURN                                                            00000390
C      READ SURFACE                                                     00000400
C   RESTORE LENGTH                                                      00000410
   20 A(2)=IB(8)                                                        00000420
C   RESTORE SURFACE-TYPE                                                00000430
      MODE =IB(5)                                                       00000440
C   PREPARE RESTORAGE                                                   00000450
      IEND=40+IB(8)                                                     00000460
      J=6                                                               00000470
      DO 30 I=42,IEND                                                   00000480
      COM(I)=B(J)                                                       00000490
      J=J+1                                                             00000500
      IF(J.LE.9)GOTO 30                                                 00000510
      CALL RDSATZ(19,B,IANZ,NRSATZ,IRET)                                00000520
      J=1                                                               00000530
   30 CONTINUE                                                          00000540
C   STORE SURFACE                                                       00000550
      JMODE=1                                                           00000560
      CALL APT094(JMODE,A(1),COM(41))                                   00000570
      IF(JMODE.NE.1)GOTO 99                                             00000580
      ISPRNT=2                                                          00000590
      IF(SSTEST)ISPRNT=1                                                00000600
      IF(.NOT.SSPRT)RETURN                                              00000610
C    ONLY SSURF: OUTPUT VERIFICATION-LISTING                            00000620
      IF(MODE.EQ.29)CALL SSPICT(COM(41),LNAME ,ISPRNT)                  00000630
      IF(MODE.NE.30)RETURN                                              00000640
      ISPRNT=2                                                          00000650
      IF(SSTEST)ISPRNT=3                                                00000660
      CALL SCPICT(COM(41),LNAME,ISPRNT)                                 00000670
      RETURN                                                            00000680
   99 CALL ERROR(5000,'READ    ')                                       00000690
      CALL UNDEF(A(1))                                                  00000700
      RETURN                                                            00000710
      END                                                               00000720
**** SOURCE FILE : M0002770.V02   ***
*
      SUBROUTINE LINEAR(SCAN,SPL,PNTS,ILIN)                             00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C                                                                       00000410
      INCLUDE 'BLANKCOM.INC'                                            00000420
C                                                                       00000430
      DIMENSION SCAN(2000),X(200),Y(200),SLOP(200)                      00000500
      DIMENSION IU(3),IV(3)                                             00000600
      DATA IU,IV/1,2,3,2,3,1/                                           00000700
      DATA AZERO/0.1D-6/                                                00000710
      IDEBUG=0                                                          00000800
      ID=SSCAN(6)                                                       00000900
      IA=SPL                                                            00001000
      IB=PNTS                                                           00001100
      NU=IU(ID)                                                         00001200
      NV=IV(ID)                                                         00001300
      DO 150 J=1,IA                                                     00001400
      DO 150 I=1,IB                                                     00001500
      IC=(J-1)*IB*3+(I-1)*3                                             00001600
      X(I+J*IB-IB)=SCAN(IC+NU)                                          00001700
      Y(I+J*IB-IB)=SCAN(IC+NV)                                          00001800
  150 CONTINUE                                                          00001900
      I=IA                                                              00002000
      J=IB                                                              00002100
      DO 100 N=1,I                                                      00002200
      JA=J-1                                                            00002300
      DO 100 M=1,JA                                                     00002400
      MN=M+IB*N-IB                                                      00002500
      IF (DABS(X(MN+1) -X(MN )).LE.AZERO) GO TO 101                     00002600
      SLOP(MN)=(Y(MN+1)-Y(MN))/(X(MN+1)-X(MN))                          00002700
      IF (DABS(SLOP(MN )).LE.AZERO) SLOP(MN )=0.0                       00002710
      GO TO 100                                                         00002800
  101 SLOP(MN)=9999.0                                                   00002900
 100  CONTINUE                                                          00003000
      CSLOP=SLOP(1)*1.001                                               00003100
      DSLOP=SLOP(1)*0.999                                               00003200
      DO 120 N=1,I                                                      00003300
      I1N=1+(N-1)*IB                                                    00003400
      ASLOP=SLOP(I1N)*1.001                                             00003500
      BSLOP=SLOP(I1N)*0.999                                             00003600
      DO 110 M=1,JA                                                     00003700
      MN=M+(N-1)*IB                                                     00003800
      IF((SLOP(MN ).LE.ASLOP).AND.(SLOP(MN ).GE.BSLOP)) GO TO 110       00003900
      GO TO 130                                                         00004000
 110  CONTINUE                                                          00004100
      IF((SLOP(I1N).LE.CSLOP).AND.(SLOP(I1N).GE.DSLOP)) GO TO 120       00004200
      GO TO 130                                                         00004300
 120  CONTINUE                                                          00004400
      GO TO 1500                                                        00004500
 130  ILIN=0                                                            00004600
      GO TO 300                                                         00004700
 1500 DO 200 N=1,J                                                      00004800
      IA=I-1                                                            00004900
      DO 200 M=1,IA                                                     00005000
      NM=N+(M-1)*IB                                                     00005100
      IF (DABS(X(NM+IB)-X(NM )).LE.AZERO) GO TO 201                     00005200
      SLOP(NM)=(Y(NM+IB)-Y(NM))/(X(NM+IB)-X(NM))                        00005300
      IF (DABS(SLOP(NM )).LE.AZERO) SLOP(NM )=0.0                       00005310
      GO TO 200                                                         00005400
  201 SLOP(NM)=9999.0                                                   00005500
 200  CONTINUE                                                          00005600
      CSLOP=SLOP(1)*1.001                                               00005700
      DSLOP=SLOP(1)*0.9990                                              00005800
      DO 220 N=1,J                                                      00005900
      IN1=N                                                             00006000
      ASLOP=SLOP(IN1)*1.001                                             00006100
      BSLOP=SLOP(IN1)*0.999                                             00006200
      DO 210 M=1,IA                                                     00006300
      NM=N+(M-1)*IB                                                     00006400
      IF((SLOP(NM ).LE.ASLOP).AND.(SLOP(NM ).GE.BSLOP)) GO TO 210       00006500
      GO TO 130                                                         00006600
 210  CONTINUE                                                          00006700
      IF((SLOP(IN1).LE.CSLOP).AND.(SLOP(IN1).GE.DSLOP)) GO TO 220       00006800
      GO TO 130                                                         00006900
 220  CONTINUE                                                          00007000
      ILIN=1                                                            00007100
 300  RETURN                                                            00007200
      END                                                               00007300
**** SOURCE FILE : M0001897.V03   ***
*
      SUBROUTINE LODPCH(SS,B,IFLAG,ITOP,N,MODE)                         00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C------INPUT A SCULPTURED SURFACE DATA PACK SS AND A PATCH              00000300
C------ NUMBER N.  OUTPUT THE PATCH COEFFICIENTS INTO THE               00000400
C------ ARRAY B, THE FOUR MATRIX FLAGS INTO IFLAG AND                   00000500
C------ THE TOPOLOGY ENTRIES INTO ITOP                                  00000600
      DIMENSION B(64),IFLAG(4),ITOP(6,4)                                00000700
      DIMENSION SS(*), IXYZ(3,3)                                        00000800
C---     TEMPORARY ARRAY TO HOLD INTERIM CANON FORM OF SURFACE          00000900
      DIMENSION TEMP(2)                                                 00001000
C---     INTEGER JJJ IS EQUIVALENCED TO AAA BECAUSE THIRD ARGUMENT      00001100
C---     OF APT094 IS SUPPOSED TO BE ON A DOUBLE WORD BOUNDARY          00001200
      EQUIVALENCE (AAA,JJJ)                                             00001300
C                                                                       00001400
C                                                                       00001500
      DATA IXYZ/0,16,32, 16,32,0, 32,0,16 /                             00001600
C                                                                       00001700
      NPCHS=SS(4)                                                       00001800
      IF(N.GT.NPCHS) GO TO 998                                          00001900
      ITEMP=11+6*(N-1)                                                  00002000
      IFLAG(1)=SS(ITEMP)                                                00002100
      IFLAG(2)=SS(ITEMP+1)                                              00002200
      IFLAG(3)=SS(ITEMP+2)                                              00002300
      IFLAG(4)=SS(ITEMP+3)                                              00002400
      IF (IFLAG(1).LT.9) THEN                                           00002450
       IBREL=SS(ITEMP+4)                                                00002500
       ITREL=SS(ITEMP+5)                                                00002600
      ELSE                                                              00002650
       ITREL=SS(ITEMP+5)                                                00002660
      ENDIF                                                             00002670
C---     SPECIAL LOGIC IS FOLLOWED FOR A GENERAL CURVE TYPE PATCH       00002700
C                                                                       00002800
      IF(IFLAG(1).LT.9) GO TO 90                                        00002900
C                                                                       00003000
C---     GENERAL CURVE TYPE PATCH, OBTAIN INDEX TO SURFACE IN COMMON    00003100
      JMODE=3                                                           00003200
      JJJ=0                                                             00003300
C---     RETRIEVE THE LOCATION OF SS IN COMMON                          00003400
      TEMP(1)=SS(1)                                                     00003500
      TEMP(2)=SS(8)                                                     00003600
      CALL APT094(JMODE,TEMP,JJJ)                                       00003700
C---     NOW JJJ SHOULD CONTAIN THE START OF SS IN COMMON               00003800
C---     THE FOUR FLAGS WHICH CONTAIN RELATIVE ADDRESSES SHOULD         00003900
C---     NOW BE CONVERTED TO ABSOLUTE ADDRESSES IN COMMON               00004000
      DO 15 I=1,4                                                       00004100
      IF(IFLAG(I).GT.0) IFLAG(I)=IFLAG(I)+JJJ-1                         00004200
   15 CONTINUE                                                          00004300
      IF(MODE.EQ.2) GO TO 501                                           00004400
C---     THE PARTICULAR TYPE OF GENCUR SURFACE IS STORED IN             00004500
C---     THE B-ARRAY.  OTHERWISE, THIS ARRAY IS RESERVED FOR            00004600
C---     THE COEFFICIENTS OF A COONS BICUBIC PATCH.                     00004700
      DO 13 L=2,64                                                      00004800
   13 B(L)=0.                                                           00004900
      B(49)=1.                                                          00005000
      B(50)=1.                                                          00005100
      B(53)=1.                                                          00005200
      B(54)=1.                                                          00005300
C                                                                       00005400
      B(1)=SS(ITEMP+4)                                                  00005500
      IF(MODE.LE.1) RETURN                                              00005600
      GO TO 501                                                         00005700
C                                                                       00005800
   90 CONTINUE                                                          00005900
C---     CASE OF A CONVENTIONAL COONS BICUBIC FOLLOWS                   00006000
C                                                                       00006100
      IF(MODE.EQ.2) GO TO 501                                           00006200
      M=-15                                                             00006300
      DO 10 L=1,4                                                       00006400
      M=M+16                                                            00006500
      IFT=IFLAG(L)                                                      00006600
      IF (IFT.GT.4)  IFT=3                                              00006610
      GO TO (100,200,400,400),IFT                                       00006700
  100 B(M)=1.0                                                          00006800
      IBREL=IBREL+1                                                     00006900
      B(M+1)=B(M)                                                       00007000
      B(M+2)=0.0                                                        00007100
      B(M+3)=0.0                                                        00007200
      B(M+4)=B(M)                                                       00007300
      B(M+5)=B(M)                                                       00007400
      JL=M+6                                                            00007500
      JU=M+15                                                           00007600
      DO 120 K=JL,JU                                                    00007700
  120 B(K)=0.0                                                          00007800
      GO TO 10                                                          00007900
  200 B(M)=SS(IBREL)                                                    00008000
      B(M+1)=SS(IBREL+1)                                                00008100
      B(M+4)=SS(IBREL+2)                                                00008200
      B(M+5)=SS(IBREL+3)                                                00008300
      IBREL=IBREL+4                                                     00008400
      B(M+2)=B(M+1)-B(M)                                                00008500
      B(M+3)=B(M+2)                                                     00008600
      B(M+6)=B(M+5)-B(M+4)                                              00008700
      B(M+7)=B(M+6)                                                     00008800
      B(M+8)=B(M+4)-B(M)                                                00008900
      B(M+12)=B(M+8)                                                    00009000
      B(M+9)=B(M+5)-B(M+1)                                              00009100
      B(M+13)=B(M+9)                                                    00009200
      B(M+10)=B(M+6)-B(M+2)                                             00009300
      B(M+14)=B(M+10)                                                   00009400
      B(M+11)=B(M+7)-B(M+3)                                             00009500
      B(M+15)=B(M+11)                                                   00009600
      GO TO 10                                                          00009700
  400 IM=M-1                                                            00009800
      IB=IBREL-1                                                        00009900
      B(IM+1)=SS(IB+1)                                                  00010000
      B(IM+2)=SS(IB+2)                                                  00010100
      B(IM+3)=SS(IB+3)                                                  00010200
      B(IM+4)=SS(IB+4)                                                  00010300
      B(IM+5)=SS(IB+5)                                                  00010400
      B(IM+6)=SS(IB+6)                                                  00010500
      B(IM+7)=SS(IB+7)                                                  00010600
      B(IM+8)=SS(IB+8)                                                  00010700
      B(IM+9)=SS(IB+9)                                                  00010800
      B(IM+10)=SS(IB+10)                                                00010900
      IF (IFT.EQ.3) GO TO 300                                           00011000
      B(IM+11)=SS(IB+11)                                                00011100
      B(IM+12)=SS(IB+12)                                                00011200
      B(IM+13)=SS(IB+13)                                                00011300
      B(IM+14)=SS(IB+14)                                                00011400
      B(IM+15)=SS(IB+15)                                                00011500
      B(IM+16)=SS(IB+16)                                                00011600
      IBREL=IBREL+16                                                    00011700
      GO TO 10                                                          00011800
  300 B(IM+11)=0.0                                                      00011900
      B(IM+12)=0.0                                                      00012000
      B(IM+13)=SS(IB+11)                                                00012100
      B(IM+14)=SS(IB+12)                                                00012200
      B(IM+15)=0.0                                                      00012300
      B(IM+16)=0.0                                                      00012400
      IBREL=IBREL+12                                                    00012500
   10 CONTINUE                                                          00012600
C------ FURTHER MODIFICATION IS REQUIRED FOR XY,YZ OR ZX CASE           00012700
      ISUM = IFLAG(1)+IFLAG(2)+IFLAG(3)                                 00012800
      IF (ISUM.GE.9) GO TO 20                                           00012900
      ID=1                                                              00013000
      IF(IFLAG(1).GE.3) ID=2                                            00013100
      IF(IFLAG(2).GE.3) ID=3                                            00013200
      IA=IXYZ(1,ID)                                                     00013300
      IB=IXYZ(2,ID)                                                     00013400
      IC=IXYZ(3,ID)                                                     00013500
      D1=(B(IA+2)-B(IA+1))**2 + (B(IB+2)-B(IB+1))**2                    00013600
      D2=(B(IA+5)-B(IA+1))**2 + (B(IB+5)-B(IB+1))**2                    00013700
      D3=(B(IA+6)-B(IA+2))**2 + (B(IB+6)-B(IB+2))**2                    00013800
      D4=(B(IA+6)-B(IA+5))**2 + (B(IB+6)-B(IB+5))**2                    00013900
      D1=DSQRT(D1)                                                      00014000
      D2=DSQRT(D2)                                                      00014100
      D3=DSQRT(D3)                                                      00014200
      D4=DSQRT(D4)                                                      00014300
      B(IC+ 3)=B(IC+ 3)*D1                                              00014400
      B(IC+ 4)=B(IC+ 4)*D1                                              00014500
      B(IC+ 7)=B(IC+ 7)*D4                                              00014600
      B(IC+ 8)=B(IC+ 8)*D4                                              00014700
      B(IC+ 9)=B(IC+ 9)*D2                                              00014800
      B(IC+13)=B(IC+13)*D2                                              00014900
      B(IC+10)=B(IC+10)*D3                                              00015000
      B(IC+14)=B(IC+14)*D3                                              00015100
   20 CONTINUE                                                          00015200
      IF(MODE.EQ.1) RETURN                                              00015300
C------NOW LOAD THE TOPOLOGY DATA INTO ITOP                             00015400
  501 DO 500 L=1,4                                                      00015500
      ICT=1                                                             00015600
  530 ICT=ICT+1                                                         00015700
      ITOP(ICT,L)=SS(ITREL+ICT-2)                                       00015800
      IF (ITOP(ICT,L)) 540,550,550                                      00015900
  540 ITOP(ICT,L)=-ITOP(ICT,L)                                          00016000
      GO TO 530                                                         00016100
  550 ITOP(ICT-1,L)=ICT-1                                               00016200
      ITREL=ITREL+ICT-1                                                 00016300
  500 CONTINUE                                                          00016400
 998  RETURN                                                            00016500
      END                                                               00016600
**** SOURCE FILE : M0004288.W02   ***
*
      SUBROUTINE MESH(IERROR,IRR,ITW,SSNAME,ASAV)                       00000100
C----------SCULPTURED SURFACE ROUTINE ------- JULY 1971  *LPK*          00000200
C---------- MESH DEFINITION                                             00000300
C---------THIS ROUTINE ACCEPTS THE TRANSLATED MESH DEFINITION           00000400
C---------AND PREPARES THE NECESSARY VALUE TABLE FOR THE MESH           00000500
C---------DATA STRUCTURE. UPON ENTRANCE IT IS ASSUMED THAT THE HEADER   00000600
C---------OF THE DATA STRUCTURE -SSCAN ARRAY, WAS SET. THE ROUTINE      00000700
C---------CHECKS IF THE DEFINED SURFACE EXCEEDS THE SIZE LIMITATIONS    00000800
C---------(NMESX TOTAL NO. OF POINTS AND NSPLMX POINTS PER SPLINE).     00000900
C---------IT THEN CHECKS THE TRANSLATED DEFINITION IN SSCAN ARRY AND    00001000
C---------AND GENERATES AN INTERMEDIATE ARRAY-SCAN, CONSISTING OF       00001100
C---------FOUR BLOCKS(POINTS,TANGENT CONSTRAINTS, CROSS TANGENT         00001200
C---------CONSTRAINTS AND NORMALS), A WEIGHT ARRAY-RL,AND A LIMIT       00001300
C---------ARRAY-RLM.THE ROUTINE THEN CALLS SSPLIN ROUTINE FOR EACH S    00001400
C---------SPLINE AND CROSS SPLINE (WEIGHTS ARE RESOLVED UPON SPLINING   00001500
C---------IN THE MAIN DIRECTION). THE TANGENT VECTOR ARE MOVED BACK INTO00001600
C---------SCAN ARRAYAND THE DISTANCES BETWEEN POINTS ARE STORED IN      00001700
C---------DIST ARRY (FOR TANSPLINES) AND CDIST ARRAY(FOR CROSSSPLINES)  00001800
C---------FURTHER PARAL OR LINEAR ROUTINES ARE CALLED TO ASSIGN         00001900
C---------LENGTHS TO THE VECTORS. A RULED SURFACE FLAG IS SET           00002000
C---------ACCORDING TO THE FOLLOWING LOGIC:IF THERE ARE TWO SPLINES     00002100
C---------AND NO NORMAL CONSTRAINTS AND NO CROSS TANGENCY CONSTRAINTS   00002200
C---------A RULED SURFACE WITH RULLINGS IN CROSSPLINE DIRECTION IS      00002300
C---------INDICATED(ITW=1). IF THERE ARE TWO POINTS PER SPLINE AND      00002400
C---------NO NORMAL AND NO TANSPLINE CONSTRAINTS A RULED SURFACE        00002500
C---------WITH  RULLINGS IN THE MAIN DIRECTION IS INDICATED (ITW=2).    00002600
C---------FINALLY GETSCA ROUTINE IS CALLED TO LOAD THE DATA FROM SCAN   00002700
C---------ARRAY TO SSCAN ARRAY.                                         00002800
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00002900
      CHARACTER*8 ISPLIN,ITANS,ICRS,NORMAL,IWGT,ILIM                    00003000
      CHARACTER*8 TEST                                                  00003010
      DIMENSION ASAV(10)                                                00003200
C---     BUFFER ARRAY FOR PRINTING                                      00003300
      INCLUDE 'DARRAY.INC'                                              00003410
C-------- IF N IS THE MAX NO. OF POINTS IN THE MESH , DIMENSIONS OF     00003500
C-------- RL,RLM,DIST,CDIST =N.DIMENSION OF TAN AND CTAN=3*N,AND        00003600
C-------- DIMENSION OF SCAN =12*N                                       00003700
C---     NSCNMX IS THE MAXIMUM SPACE AVAILABLE IN SCAN                  00003800
C---     ISCAN IS THE LAST USED LOCATION IN SCAN                        00003900
C---     SCAN IS A SCRATCH PAD WORK AREA FOR SS CALCULATIONS            00004000
      INCLUDE 'SSPAD.INC'                                               00004110
      DIMENSION S(4,6,ISCN/24)                                          00004200
C---     THE BUFFER ARRAY FOR CURVES IS EQUIVALENCED TO SCAN            00004300
C---     ISXX WILL BE STARTING POSITION FOR THE CURVE DATA              00004400
      EQUIVALENCE (SCAN(1),S(1,1,1))                                    00004500
C                                                                       00004600
      DIMENSION IPALA(2)                                                00004700
C                                                                       00004810
      INCLUDE 'BLANKCOM.INC'                                            00004820
C                                                                       00004830
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00004900
      DATA ISPLIN/'SPLINE  '/,ITANS/'TANSPL  '/,ICRS/'CRSSPL  '/,       00005000
     C  NORMAL/'NORMAL  '/,IWGT/'WEIGHT  '/,ILIM/'LIMIT   '/            00005100
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-14/                           00005200
C                                                                       00005300
C---     MAX NUMBER OF POINTS IN A MESH IS LIMITED BY SPACE IN SCAN.    00005400
      NMESMX=NSCNMX/20                                                  00005500
      NSCAMX=NMESMX*20                                                  00005600
C---     COMPUTE THE ACTUAL NUMBER OF MESH POINTS                       00005700
      NUMPTS=SSCAN(9)*SSCAN(10)                                         00005800
      NK3=NUMPTS*3                                                      00005900
      IF(NUMPTS.LE.NMESMX) GO TO 71                                     00006000
C---     TOO MANY POINTS FOR SPACE AVAILABLE IN SSPAD                   00006100
      IERROR=213                                                        00006200
      GO TO 9000                                                        00006300
   71 CONTINUE                                                          00006400
      NSCAMX=MIN0(NSCAMX,NSCNMX)                                        00006500
C---     MAX NUMBER OF POINTS IN A SINGLE SPLINE OR CROSS SPLINE        00006600
      NSPLMX=30                                                         00006700
C---     SET UP BASE INDICES FOR VARIOUS TYPES OF DATA IN SCAN          00006800
C---     INPUT POINT DATA                                               00006900
      JPT=0                                                             00007000
C---     INPUT TANSPL DATA                                              00007100
      JPTAN=NUMPTS*3                                                    00007200
C---     INPUT CRSSPL DATA                                              00007300
      JPCTAN=NUMPTS*6                                                   00007400
C---     INPUT NORMAL DATA                                              00007500
      JNRML=NUMPTS*9                                                    00007600
C---     PROCESSED TANGENT DATA                                         00007700
      JTAN=NUMPTS*12                                                    00007800
C---     SHARED LOCATION, WEIGHT DATA FOR SMOOTHING                     00007900
      JRL=JTAN                                                          00008000
C---     SHARED LOCATION, WILD POINT DATA                               00008100
      JIWL=JTAN+NUMPTS                                                  00008200
C---      PROCESSED CROSS TANGENT DATA                                  00008300
      JCTAN=NUMPTS*15                                                   00008400
C---     SHARED LOCATION , LIMIT DATA                                   00008500
      JRLM=JCTAN                                                        00008600
C---     SHARED LOCATION, WILD POINT DATA                               00008700
      JWL=JCTAN+NUMPTS                                                  00008800
C---     TANGENT SPACING                                                00008900
      JDIST=NUMPTS*18                                                   00009000
C---     CROSS TANGENT SPACING                                          00009100
      JCDIST=NUMPTS*19                                                  00009200
C---     DETERMINE WHERE THE CURVE DATA BUFFER SHOULD START AND         00009300
C---     WHETHER THERE IS ENOUGH ROOM FOR SPLINING.                     00009400
      NTEMP=SSCAN(9)                                                    00009500
      IF(SSCAN(9).LT.SSCAN(10)) NTEMP=SSCAN(10)                         00009600
      ISXX=(NUMPTS*20)/24                                               00009700
      ISXX=ISXX+1                                                       00009800
      IF((ISXX+1+NTEMP)*24.LE.NSCNMX) GO TO 72                          00009900
C****    NOT ENOUGH SPACE FOR THE CURVE DATA                            00010000
      IERROR=210                                                        00010100
      GO TO 9000                                                        00010200
   72 CONTINUE                                                          00010300
C                                                                       00010400
      DO 100 I=1,NSCAMX                                                 00010500
  100 SCAN(I)=ZERO                                                      00010600
      DO 101 I=1,NUMPTS                                                 00010700
      SCAN(JRLM+I)=ZERO                                                 00010800
  101 SCAN(JRL+I)=ONE                                                   00010900
      IERROR=0                                                          00011000
      IRR=0                                                             00011100
      INORM=0                                                           00011200
      ITW=0                                                             00011300
      IRULE=0                                                           00011400
      JRULE=0                                                           00011500
      SPL=SSCAN(9)                                                      00011600
      PNTS=SSCAN(10)                                                    00011700
      SSCAN(10)=ASAV(10)                                                00011800
      NEND=ASAV(5)                                                      00011900
      IF(SPL.EQ.2.0) IRULE=1                                            00012000
      IF(PNTS.EQ.2.0) JRULE=1                                           00012100
      ITT=SPL*PNTS                                                      00012200
      IA=PNTS                                                           00012300
      IF (ITT .LE. NMESMX) GO TO 110                                    00012400
      IERROR=210                                                        00012500
      GO TO 9000                                                        00012600
  110 IF (IA .LE. NSPLMX) GO TO 120                                     00012700
      IERROR=211                                                        00012800
      GO TO 9000                                                        00012900
  120 CONTINUE                                                          00013000
      PTANS=JPTAN+1                                                     00013100
      PCRS=JPCTAN+1                                                     00013200
      K=0                                                               00013300
      ITA=JPTAN-2                                                       00013400
      ICS=JPCTAN-2                                                      00013500
      INR=JNRML-2                                                       00013600
C---      TURN THE GLOBAL WEIGHT AND LIMIT FLAG OFF                     00013700
      IGLOBE=0                                                          00013800
      M=9                                                               00013900
      IF(IBUG.EQ.11) CALL BAD(-NEND,1,'SSCN',SSCAN)                     00014000
C---     ASSUME THE FIRST INPUT FOLLOWS THE WORD SPLINE                 00014100
      GO TO 650                                                         00014200
C---     NOW SEARCH THRU THE INPUT STREAM AND STRUCTURE                 00014300
C---     THE MESH DATA INTO THE SCAN ARRAY FOR MESH PROCESSING          00014400
C                                                                       00014500
  160 CONTINUE                                                          00014600
      IF(IBUG.NE.11) GO TO 162                                          00014700
      CALL BAD(1,0,'NEND',NEND)                                         00014800
      CALL BAD(1,0,'M   ',M)                                            00014900
      CALL BAD(-4,1,'SNXT',SSCAN(M))                                    00015000
  162 CONTINUE                                                          00015100
      IF(M.GE.NEND) GO TO 1000                                          00015200
      IF(SSCAN(M).EQ.19.) GO TO 610                                     00015300
      IF(SSCAN(M).EQ.13.) GO TO 200                                     00015400
      IF(SSCAN(M).EQ.136.) GO TO 300                                    00015500
      IF(SSCAN(M).EQ.137.) GO TO 400                                    00015600
      IF(SSCAN(M).EQ.138.) GO TO 500                                    00015700
      IF(SSCAN(M).EQ.139.) GO TO 550                                    00015800
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)                                00015810
      IF(TEST.EQ.ISPLIN) GO TO 650                                      00015900
      GO TO 1000                                                        00016000
C----------NORMAL                                                       00016100
 200  M=M+1                                                             00016200
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)                                00016210
      IF(TEST.NE.NORMAL) IERROR=214                                     00016300
      M=M+1                                                             00016400
      INORM=1                                                           00016500
      IF(SSCAN(M).NE.20.)IERROR=215                                     00016600
      N=INR+2                                                           00016700
      DO 250 I=INR,N                                                    00016800
      M=M+1                                                             00016900
      SCAN(I)=SSCAN(M)                                                  00017000
 250  CONTINUE                                                          00017100
      GO TO 600                                                         00017200
C----------TANSPL                                                       00017300
 300  M=M+1                                                             00017400
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)                                00017410
      IF(TEST.NE.ITANS) IERROR=216                                      00017500
      M=M+1                                                             00017600
      IF(SSCAN(M).NE.20.)IERROR=215                                     00017700
      N=ITA+2                                                           00017800
      DO 350 I=ITA,N                                                    00017900
      M=M+1                                                             00018000
      SCAN(I)=SSCAN(M)                                                  00018100
 350  CONTINUE                                                          00018200
      GO TO 600                                                         00018300
C----------CRSSPL                                                       00018400
 400  M=M+1                                                             00018500
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)                                00018510
      IF(TEST.NE.ICRS) IERROR=217                                       00018600
      M=M+1                                                             00018700
      IF(SSCAN(M).NE.20.)IERROR=215                                     00018800
      N=ICS+2                                                           00018900
      DO 450 I=ICS,N                                                    00019000
      M=M+1                                                             00019100
      SCAN(I)=SSCAN(M)                                                  00019200
 450  CONTINUE                                                          00019300
      GO TO 600                                                         00019400
C----------WEIGHT                                                       00019500
 500  M=M+1                                                             00019600
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)                                00019610
      IF(TEST.NE.IWGT) IERROR=218                                       00019700
      M=M+1                                                             00019800
      IF(SSCAN(M).NE.21.)IERROR=219                                     00019900
      M=M+1                                                             00020000
C---     IF THIS IS A GLOBAL WEIGHT, THEN SET REMAINING WEIGHTS         00020100
C---     IN THIS PARTICULAR SPLINE DEFINITION                           00020200
      IF(IGLOBE.EQ.0) GO TO 501                                         00020300
      KLIM=PNTS-ONE+K                                                   00020400
C---     IF THE LIMIT IS NEGATIVE, THEN IT IS GLOBAL FOR THE            00020500
C---     REMAINING POINTS IN THE MESH.                                  00020600
      IF(SSCAN(M).LT.-SMAL) KLIM=NUMPTS+K-1                             00020700
      KLIM=MIN0(NUMPTS,KLIM)                                            00020800
      DO 502 L=K,KLIM                                                   00020900
  502 SCAN(JRL+L)=DABS(SSCAN(M))                                        00021000
      GO TO 650                                                         00021100
  501 CONTINUE                                                          00021200
C                                                                       00021300
      SCAN(JRL+K)=SSCAN(M)                                              00021400
      GO TO 600                                                         00021500
C-------------  LIMIT                                                   00021600
  550 M=M+1                                                             00021700
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)                                00021710
      IF (TEST .NE. ILIM)IERROR=220                                     00021800
      M=M+1                                                             00021900
      IF (SSCAN(M) .NE. 21.)IERROR=219                                  00022000
      M=M+1                                                             00022100
C---     IF THIS IS A GLOBAL LIMIT, THEN SET LIMITS IN THIS             00022200
C---     PARTICULAR SPLINE TO THE INDICATED LIMIT                       00022300
      IF(IGLOBE.EQ.0) GO TO 551                                         00022400
      KLIM=PNTS-ONE+K                                                   00022500
C---     IF THE LIMIT IS NEGATIVE THEN IT IS GLOBAL FOR THE             00022600
C---     REMAINING POINTS IN THE MESH                                   00022700
      IF(SSCAN(M).LT.-SMAL) KLIM=NUMPTS+K-1                             00022800
      KLIM=MIN0(NUMPTS,KLIM)                                            00022900
      DO 552 L=K,KLIM                                                   00023000
  552 SCAN(JRLM+L)=DABS(SSCAN(M))                                       00023100
      GO TO 650                                                         00023200
  551 CONTINUE                                                          00023300
C                                                                       00023400
      SCAN(JRLM+K)=SSCAN(M)                                             00023500
      GO TO 600                                                         00023600
C----------SPLINE                                                       00023700
 600  M=M+1                                                             00023800
      GO TO 160                                                         00023900
 610  ITA=ITA+3                                                         00024000
      ICS=ICS+3                                                         00024100
      INR=INR+3                                                         00024200
      MM=K*3+1                                                          00024300
      MA=MM+2                                                           00024400
      K=K+1                                                             00024500
      DO 620 I=MM,MA                                                    00024600
      M=M+1                                                             00024700
      SCAN(I)=SSCAN(M)                                                  00024800
 620  CONTINUE                                                          00024900
      GO TO 600                                                         00025000
C                                                                       00025100
 650  M=M+1                                                             00025200
      IGLOBE=0                                                          00025300
      IF(SSCAN(M).EQ.19.)GO TO 610                                      00025400
C---     IF A WEIGHT OR LIMIT FOLLOW, THEN THESE SPECIFY GLOBAL WEIGHTS 00025500
      IGLOBE=1                                                          00025600
      IF(SSCAN(M).EQ.138.) GO TO 500                                    00025700
      IF(SSCAN(M).EQ.139.) GO TO 550                                    00025800
      IERROR=212                                                        00025900
      GO TO 9000                                                        00026000
C                                                                       00026100
C--------USERS INPUT HAS NOW BEEN FORMATTED, BEGIN SPLINING PROCEDURE.  00026200
C----------SMOOTHING ALONG SPLINE DIRECTION                             00026300
 1000 CONTINUE                                                          00026400
C---     CHECK TO SEE IF ALL INPUT HAS BEEN PROCESSED                   00026500
      IF(M.EQ.NEND.AND.K.EQ.ITT) GO TO 1001                             00026600
C****    IMPROPER DATA IN SSURF INPUT STREAM                            00026700
      CALL BAD(1,0,'NEND',NEND)                                         00026800
      CALL BAD(1,0,'M   ',M)                                            00026900
      CALL BAD(-4,1,'SNXT',SSCAN(M))                                    00027000
      IERROR=222                                                        00027100
      GO TO 9000                                                        00027200
 1001 CONTINUE                                                          00027300
      IF(IBUG.NE.11) GO TO 1003                                         00027400
C---     DUMP PROCESSED POINT, TANSPL,CRSSPL,NORMAL, WT AND LIMITS      00027500
      NK3=NUMPTS*3                                                      00027600
      CALL BAD(-NK3,1,'PTS ',SCAN(JPT+1))                               00027700
      CALL BAD(-NK3,1,'TAN ',SCAN(JPTAN+1))                             00027800
      CALL BAD(-NK3,1,'CTAN',SCAN(JPCTAN+1))                            00027900
      CALL BAD(-NK3,1,'NRML',SCAN(JNRML+1))                             00028000
      CALL BAD(-NUMPTS,1,'WGT ',SCAN(JRL+1))                            00028100
      CALL BAD(-NUMPTS,1,'LIMT',SCAN(JRLM+1))                           00028200
 1003 CONTINUE                                                          00028300
C----------RESET POINTERS TO AREAS FOR TANGENTS, CROSS AND NORMALS      00028400
      ITA=JPTAN+1                                                       00028500
      ICS=JPCTAN+1                                                      00028600
      INR=JNRML+1                                                       00028700
C--------------    INITIATE CROSS SPLINE  CONSTRAINT INDICATORS         00028800
      IA=SPL                                                            00028900
      IB=PNTS                                                           00029000
      IIT=ITT*12                                                        00029100
      IM=IB+1                                                           00029200
      IF (IA .GT. IB) IM=IA+1                                           00029300
      DO 1005 I=1,IM                                                    00029400
 1005 S(4,3,I+ISXX)=ZERO                                                00029500
      IJK=0                                                             00029600
C-------------          PREPARE S ARRAY HEADER                          00029700
      S(2,1,1+ISXX)=ONE                                                 00029800
      S(3,1,1+ISXX)=ONE                                                 00029900
      S(4,1,1+ISXX)=IB                                                  00030000
C-------------          IND,ITD,ICD, INDICATE EXISTANCE OF NORMAL ,     00030100
C-------------          TANSPL, CRSSPL, CONSTRAINT RESPECTIVELY         00030200
C-------------        AT ANY OF THE POINTS                              00030300
      IND=0                                                             00030400
      ITD=0                                                             00030500
      ICD=0                                                             00030600
      KWL=0                                                             00030700
      KWL1=0                                                            00030800
      KTFL=0                                                            00030900
      SCAN(JIWL+1)=ZERO                                                 00031000
C-------------          SPLINING ALONG MAIN DIRECTION (TANSPL)          00031100
      IB1=IB+1                                                          00031200
      DO 1010 IG=1,IA                                                   00031300
      IB0=(IG-1)*IB*3                                                   00031400
      DO 1020 IG1=2,IB1                                                 00031500
      IB2=(IG1-2)*3+IB0                                                 00031600
C-------------          MOVE POINTS AND VECTORS INTO S ARRAY            00031700
      DO 1030 IG2=1,3                                                   00031800
      IG3=IG2+IB2                                                       00031900
      S(IG2,1,IG1+ISXX)=SCAN(IG3)                                       00032000
      S(IG2,2,IG1+ISXX)=SCAN(IG3-1+ITA)                                 00032100
      S(IG2,4,IG1+ISXX)=SCAN(IG3-1+INR)                                 00032200
 1030 CONTINUE                                                          00032300
C-------------          SET S ARRAY CONSTRAINT INDICATORS               00032400
      S(4,2,IG1+ISXX)=ZERO                                              00032500
      JNN=ITA+IG3-3                                                     00032600
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))            00032700
      IF(WJ.GT.SMAL) S(4,2,IG1+ISXX)=ONE                                00032800
      IF (S(4,2,IG1+ISXX) .EQ. ONE) ITD=1                               00032900
      S(4,4,IG1+ISXX)=ZERO                                              00033000
      JNN=INR+IG3-3                                                     00033100
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))            00033200
      IF(WJ.GT.SMAL) S(4,4,IG1+ISXX)=ONE                                00033300
      IF (S(4,4,IG1+ISXX) .EQ. ONE) IND=1                               00033400
C-------------          MOVE WEIGHT TO S ARRAY                          00033500
      S(1,5,IG1+ISXX)=SCAN(JRL+(IG-1)*IB+IG1-1)                         00033600
C-------------          MOVE LIMITS                                     00033700
      S(2,5,IG1+ISXX)=SCAN(JRLM+(IG-1)*IB+IG1-1)                        00033800
 1020 CONTINUE                                                          00033900
      S(1,2,ISXX+1)=ZERO                                                00034000
C-------------          BRANCH TO SSPLIN ROUTINE                        00034100
      JFLAG=1000+IG                                                     00034200
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))                   00034300
C                                                                       00034400
      CALL SSPLIN(S(1,1,ISXX+1),IRRT)                                   00034500
      JFLAG=2000+IG                                                     00034600
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))                   00034700
      IF(IRR.EQ.0.AND.IRRT.NE.0) IRR=IRRT                               00034800
C-------------          MOVE POINTS AND TANSPLINES TO SCAN              00034900
      DO 1040 IG1=2,IB1                                                 00035000
      IB2=(IG1-2)*3+IB0                                                 00035100
      DO 1050 IG2=1,3                                                   00035200
      IG3=IG2+IB2                                                       00035300
      SCAN(IG3)=S(IG2,1,IG1+ISXX)                                       00035400
      SCAN(ITA+IG3-1)=S(IG2,2,IG1+ISXX)                                 00035500
 1050 CONTINUE                                                          00035600
C-------------          MOVE DISTANCE BETWEEN POINTS TO DIST            00035700
      SCAN(JDIST+(IB-1)*(IG-1)+IG1-1)=S(4,1,IG1+ISXX)                   00035800
C------------- IF WILD POINT INDICATOR GT 1 STACK THE POINT LOCATION    00035900
C------------- (SPLINE NUMBER AND POINT NUMBER) INTO IWL ARRAY AND      00036000
C------------- THE WILDNESS FACTOR INTO WL ARRAY                        00036100
      IF (S(4,5,IG1+ISXX) .LE. ONE) GO TO 1040                          00036200
      KWL1=KWL1+1                                                       00036300
      KWL=KWL+1                                                         00036400
      SCAN(JWL+KWL1)=S(4,5,IG1+ISXX)                                    00036500
      SCAN(JIWL+KWL)=IG                                                 00036600
      KWL=KWL+1                                                         00036700
      SCAN(JIWL+KWL)=IG1-1                                              00036800
 1040 CONTINUE                                                          00036900
C---      PRINT ERROR NUMBER FOR EACH SPLINE, IF ANY.                   00037000
      IF(IRRT.EQ.0) GO TO 1041                                          00037100
      CALL RECORD(ISEQNO)                                               00037200
      CALL ICONV(ISEQNO,DARRAY,1,6)                                     00037300
      CALL CFORM('. ERROR NO.',DARRAY,7,11)                             00037400
      CALL ICONV(IRRT,DARRAY,18,7)                                      00037500
      CALL CFORM('FOR  SPLINE NO.',DARRAY,26,15)                        00037600
      CALL ICONV(IG,DARRAY,41,5)                                        00037700
      CALL CPRINT(DARRAY)                                               00037800
 1041 CONTINUE                                                          00037900
 1010 CONTINUE                                                          00038000
C                                                                       00038100
C------------- IF ANY WILD POINT DETECTED GO TO PRINT A MESSAGE         00038200
      IF(DABS(SCAN(JIWL+1)).LT.SMAL) GO TO 777                          00038300
      KO=0                                                              00038400
      ASSIGN 777 TO IRET                                                00038500
      GO TO 3000                                                        00038600
C----------END OF SPLINE FITTING, BRANCH TO WILD POINT ANALYSIS         00038700
  777 CONTINUE                                                          00038800
      IJK=1                                                             00038900
C-------------          SPLINE ALONG CROSS SPLINE DIRECTION             00039000
C------------           CHANGE S ARRAY HEADER (NO. OF POINTS)           00039100
      S(4,1,1+ISXX)=IA                                                  00039200
      IB1=IA+1                                                          00039300
      DO 1060 IG=1,IB                                                   00039400
      IB0=(IG-1)*3                                                      00039500
      DO 1070 IG1=2,IB1                                                 00039600
      IB2=(IG1-2)*3*IB+IB0                                              00039700
C-------------          MOVE POINTS AND VECTORS INTO S ARRAY            00039800
      DO 1075 IG2=1,3                                                   00039900
      IG3=IG2+IB2                                                       00040000
      S(IG2,1,IG1+ISXX)=SCAN(IG3)                                       00040100
      S(IG2,2,IG1+ISXX)=SCAN(IG3-1+ICS)                                 00040200
      S(IG2,4,IG1+ISXX)=SCAN(IG3-1+INR)                                 00040300
 1075 CONTINUE                                                          00040400
C-------------          SET CONSTRAINT INDICATORS                       00040500
      S(4,2,IG1+ISXX)=ZERO                                              00040600
      S(4,4,IG1+ISXX)=ZERO                                              00040700
      JNN=ICS+IG3-3                                                     00040800
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))            00040900
      IF(WJ.GT.SMAL) S(4,2,IG1+ISXX)=ONE                                00041000
      IF (S(4,2,IG1+ISXX) .EQ. ONE) ICD=1                               00041100
      JNN=INR+IG3-3                                                     00041200
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))            00041300
      IF(WJ.GT.SMAL) S(4,4,IG1+ISXX)=ONE                                00041400
C---------- SET WEIGHT TO CERTITUDE, AND LIMIT TO ZERO                  00041500
      S(1,5,IG1+ISXX)=ONE                                               00041600
      S(2,5,IG1+ISXX)=ZERO                                              00041700
 1070 CONTINUE                                                          00041800
      S(1,2,ISXX+1)=ZERO                                                00041900
C-------------          BRANCH TO SPLINING ROUTINE                      00042000
      JFLAG=3000+IG                                                     00042100
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))                   00042200
C                                                                       00042300
      CALL SSPLIN(S(1,1,ISXX+1),IRRT)                                   00042400
      JFLAG=4000+IG                                                     00042500
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))                   00042600
      IF(IRR.EQ.0.AND.IRRT.NE.0) IRR=IRRT                               00042700
C-------------          MOVE CROSS SPLINE TANGENTS TO SCAN              00042800
      DO 1080 IG1=2,IB1                                                 00042900
      IB2=(IG1-2)*3*IB+IB0                                              00043000
      DO 1090 IG2=1,3                                                   00043100
      IG3=IG2+IB2                                                       00043200
      SCAN(ICS+IG3-1)=S(IG2,2,IG1+ISXX)                                 00043300
 1090 CONTINUE                                                          00043400
C-------------          MOVE DISTANCES ALONG CROSSPLINES TO CDIST       00043500
      SCAN(JCDIST+(IA-1)*(IG-1)+IG1-1)=S(4,1,IG1+ISXX)                  00043600
C------------- IF WILD POINT INDICATOR GT 1 STACK THE POINT LOCATION    00043700
C------------- (SPLINE NUMBER AND POINT NUMBER) INTO IWL ARRAY AND      00043800
C------------- THE WILDNESS FACTOR INTO WL ARRAY                        00043900
      IF (S(4,5,IG1+ISXX) .LE. ONE) GO TO 1080                          00044000
      KWL1=KWL1+1                                                       00044100
      KWL=KWL+1                                                         00044200
      SCAN(JWL+KWL1)=S(4,5,IG1+ISXX)                                    00044300
      SCAN(JIWL+KWL)=IG                                                 00044400
      KWL=KWL+1                                                         00044500
      SCAN(JIWL+KWL)=IG1-1                                              00044600
 1080 CONTINUE                                                          00044700
C---      PRINT ERROR NUMBER FOR EACH CROSS SPLINE, IF ANY.             00044800
      IF(IRRT.EQ.0) GO TO 1081                                          00044900
      CALL RECORD(ISEQNO)                                               00045000
      CALL ICONV(ISEQNO,DARRAY,1,6)                                     00045100
      CALL CFORM('. ERROR NO.',DARRAY,7,11)                             00045200
      CALL ICONV(IRRT,DARRAY,18,7)                                      00045300
      CALL CFORM('FOR CSPLINE NO.',DARRAY,26,15)                        00045400
      CALL ICONV(IG,DARRAY,41,5)                                        00045500
      CALL CPRINT(DARRAY)                                               00045600
 1081 CONTINUE                                                          00045700
 1060 CONTINUE                                                          00045800
C                                                                       00045900
C------------- IF ANY WILD POINT DETECTED GO TO PRINT A MESSAGE         00046000
      IF(DABS(SCAN(JIWL+1)).LT.SMAL) GO TO 1065                         00046100
      KO=1                                                              00046200
      ASSIGN 1065 TO IRET                                               00046300
      GO TO 3000                                                        00046400
C----------END OF CROSS SPLINE FITTING, BRANCH TO WILD POINT ANALYSIS   00046500
 1065 CONTINUE                                                          00046600
      IF(IRR.NE.0) GO TO 9000                                           00046700
C---------- PRINT OUT RESULTS OF SPLINING AND CROSS SPLINING            00046800
      IF(IBUG.NE.11) GO TO 1068                                         00046900
      NKK=NUMPTS*12                                                     00047000
      CALL BAD(-NKK,1,'SCN2',SCAN)                                      00047100
      CALL BAD(-NUMPTS,1,'DIST',SCAN(JDIST+1))                          00047200
      CALL BAD(-NUMPTS,1,'CDIS',SCAN(JCDIST+1))                         00047300
 1068 CONTINUE                                                          00047400
      IJK=IJK+1                                                         00047500
C--------- REARRANGE CROSS SPLINE TANGENTS TO APPEAR IN SCAN            00047600
C-------  ARRAY ACCORDING TO THEIR ORDER ALONG SPLINES. USES NORMALS    00047700
C-------- SECTION OF SCAN AS A WORK AREA                                00047800
      DO 2010 J=1,ITT                                                   00047900
      INX=((J-1)/IA+(J-1-IA*((J-1)/IA))*IB)*3+ICS-1                     00048000
      IN=INR-1+(J-1)*3                                                  00048100
      DO 2010 K=1,3                                                     00048200
 2010 SCAN(IN+K)=SCAN(INX+K)                                            00048300
      IT1=ITT*3                                                         00048400
      DO 2020 I=1,IT1                                                   00048500
      SCAN(ICS-1+I)=SCAN(INR-1+I)                                       00048600
 2020 SCAN(INR-1+I)=ZERO                                                00048700
C---------              SET RULED SURFACE INDICATORS                    00048800
      IF (IND .EQ. 0 .AND. ICD .EQ. 0 .AND. IRULE .EQ. 1) ITW=1         00048900
      IF (IND .EQ. 0 .AND. ITD .EQ. 0 .AND. JRULE .EQ. 1) ITW=2         00049000
C---------- PRINT OUT TWIST FACTOR AND REARRANGED CROSS VECTORS         00049100
      IF(IBUG.NE.11) GO TO 2023                                         00049200
      CALL BAD(-1,0,'ITW ',ITW)                                         00049300
      NKK=3*NUMPTS                                                      00049400
      CALL BAD(-NK3,1,'CRS ',SCAN(JPCTAN+1))                            00049500
 2023 CONTINUE                                                          00049600
C                                                                       00049700
C----------PARALLEL CHECK                                               00049800
C----------LINEAR CHECK                                                 00049900
 4100 CONTINUE                                                          00050000
      DO 102 I=1,NK3                                                    00050100
      SCAN(JTAN+I)=ZERO                                                 00050200
      SCAN(JCTAN+I)=ZERO                                                00050300
  102 CONTINUE                                                          00050400
      IJK=IJK+1                                                         00050500
      IF(SSCAN(6).NE.4.) GO TO 7000                                     00050600
      IA=SPL                                                            00050700
      IB=PNTS                                                           00050800
      IPARA=0                                                           00050900
      CALL PARAL(SCAN(JPTAN+1),SCAN(JDIST+1),SCAN(JTAN+1),              00051000
     X           SCAN(JNRML+1),IA,IB,IPARA)                             00051100
C---------- PRINT RESULTS OF PARAL LOGIC FOR TANGENT LENGTH SELECTION   00051200
      IF(IBUG.NE.11) GO TO 2027                                         00051300
      CALL BAD(-1,0,'IPAR',IPARA)                                       00051400
      CALL BAD(-NK3,1,'TANS',SCAN(JPTAN+1))                             00051500
      CALL BAD(-NK3,1,'TAN ',SCAN(JTAN+1))                              00051600
 2027 CONTINUE                                                          00051700
C                                                                       00051800
      IPALA(1)=IPARA                                                    00051900
      IJK=IJK+1                                                         00052000
      IA=PNTS                                                           00052100
      IB=SPL                                                            00052200
      IPARA=0                                                           00052300
      CALL PARAL(SCAN(JPCTAN+1),SCAN(JCDIST+1),SCAN(JCTAN+1),           00052400
     X           SCAN(JNRML+1),IA,IB,IPARA)                             00052500
C---------- PRINT RESULTS OF CROSS VECTOR LENGTH ANALYSIS               00052600
      IF(IBUG.NE.11) GO TO 2028                                         00052700
      CALL BAD(-1,0,'IPAR',IPARA)                                       00052800
      CALL BAD(-NK3,1,'CRS ',SCAN(JPCTAN+1))                            00052900
      CALL BAD(-NK3,1,'CTAN',SCAN(JCTAN+1))                             00053000
 2028 CONTINUE                                                          00053100
C                                                                       00053200
      IPALA(2)=IPARA                                                    00053300
      IJK=IJK+1                                                         00053400
      ILIN=0                                                            00053450
      GO TO 8000                                                        00053500
 7000 CALL LINEAR(SCAN,SPL,PNTS,ILIN)                                   00053600
      IF(IBUG.EQ.11) CALL BAD(-1,0,'ILIN',ILIN)                         00053700
      IJK=IJK+1                                                         00053800
      IF(ILIN.EQ.0) IERROR=300                                          00053900
      IPALA(1)=0                                                        00054000
      IPALA(2)=0                                                        00054100
C---------- SET UP DATA STRUCTURE READY TO RETURN                       00054200
 8000 CONTINUE                                                          00054300
      SSCAN(10)=PNTS                                                    00054400
      CALL GETSCA(SCAN,SPL,PNTS,PTANS,PCRS,SCAN(JTAN+1),                00054500
     X  SCAN(JCTAN+1),IPALA,ILIN,ITW)                                   00054600
C---     PRINT OUT SCAN ON RETURN FOR DEBUGGING                         00054700
C                                                                       00054800
 9000 IF(IERROR.NE.0) IERROR=IERROR+5000                                00054900
      IF(IRR.NE.0) IERROR=IRR                                           00055000
      RETURN                                                            00055100
C                                                                       00055200
C------------- PRINT WILD POINTS MESSAGE                                00055300
 3000 KWL=KWL-1                                                         00055400
      IF (KTFL .EQ. 1) GO TO 3010                                       00055500
      CALL RECORD(ISEQNO)                                               00055600
      CALL ICONV(ISEQNO,DARRAY,1,6)                                     00055700
      CALL CFORM('. SOME  SPLINE POINTS MAY BE WILD',DARRAY,7,33)       00055800
      IF(IJK.EQ.1) CALL CFORM('CRSSPL',DARRAY,15,6)                     00055900
      CALL CPRINT(DARRAY)                                               00056000
      KWL=KWL-1                                                         00056100
      DO 3011 L=1,KWL                                                   00056200
      K=2*L-1                                                           00056300
      CALL BAD(1,1,'PTNO',SCAN(JIWL+K))                                 00056400
      CALL BAD(1,1,'SPL ',SCAN(JIWL+K+1))                               00056500
      CALL BAD(-1,1,'WILD',SCAN(JWL+L))                                 00056600
 3011 CONTINUE                                                          00056700
      KTFL=1                                                            00056800
 3010 CONTINUE                                                          00056900
      KWL=0                                                             00057000
      KWL1=0                                                            00057100
      SCAN(JIWL+1)=ZERO                                                 00057200
      GO TO IRET,(1065,777)                                             00057300
      END                                                               00057400
**** SOURCE FILE : M0000643.V01   ***
*
      SUBROUTINE NORML3(PA,PB,PC,AN,IRR)                                00000020
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000040
C------CONSTRUCT A UNIT NORMAL TO THREE POINTS PA,PB,PC AND STORE IN AN 00000060
C------IF NO NORMAL EXISTS THEN IRR NE 0.                               00000080
      DIMENSION PA(3),PB(3),PC(3),AN(3),P1(3),P2(3)                     00000100
      IDIAG=4000                                                        00000120
      CRIT=1.0D-10                                                      00000140
      DO 10 I=1,3                                                       00000160
      P1(I)=PB(I)-PA(I)                                                 00000180
   10 P2(I)=PC(I)-PA(I)                                                 00000200
      AN(1) = P1(2)*P2(3) - P1(3)*P2(2)                                 00000220
      AN(2) = P1(3)*P2(1) - P1(1)*P2(3)                                 00000240
      AN(3) = P1(1)*P2(2) - P1(2)*P2(1)                                 00000260
      D=DSQRT(AN(1)*AN(1)+AN(2)*AN(2)+AN(3)*AN(3))                      00000280
      IRR=IDIAG+1                                                       00000300
      IF(D.LT.CRIT) RETURN                                              00000320
      DO 20 I=1,3                                                       00000340
   20 AN(I)=AN(I)/D                                                     00000360
      IRR=0                                                             00000380
      RETURN                                                            00000400
      END                                                               00000420
**** SOURCE FILE : M0000644.V04   ***
*
      SUBROUTINE PARAL(VECA,DIST,VECB,AVDIST,NSPL,NPTS,IPARA)           00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION VECA(*),DIST(*),VECB(*),AVDIST(*)                       00000300
C---      PURPOSE OF PARAL IS TO DETERMINE LENGTHS OF TANGENT           00000400
C---      VECTORS IN ONE PARAMETRIC DIRECTION ACROSS A MESH SURFACE     00000500
C---      VECA IS THE ARRAY OF UNITIZED INPUT TANGENTS AND              00000600
C---      ON OUTPUT IS THE ENTERING VECTOR FOR A PATCH AT EACH POINT    00000700
C---      DIST IS THE ARRAY OF POLYGONAL DISTANCES BETWEEN POINTS       00000800
C---      VECB IS AN OUTPUT ARRAY OF EXITING VECTORS FOR EACH PAOINT    00000900
C---      AVDIST IS AN INPUT ARRAY USED TO TEMPORARILY HOLD THE         00001000
C---      AVERAGE WIDTH OF CHORDAL BANDS ACROSS THE SURFACE             00001100
C---      NSPL IS THE TOTAL NUMBER OF SPLINE CURVES AND                 00001200
C---      NPTS IS THE NUMBER OF POINTS PER SPLINE(BOTH INPUT)           00001300
C---      IPARA IS SET TO 1 IF ROUGHLY PARALLEL CHORDAL BANDS           00001400
C---      ARE DETECTED ACROSS THE SURFACE, AND 0 OTHERWISE              00001500
C---      IPARA IS SET TO 1 ON OUTPUT.                                  00001600
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00001700
C                                                                       00001800
C---      NUMBER OF CHORDS PER SPLINE                                   00001900
      NSEG=NPTS-1                                                       00002000
      ANSPL=NSPL                                                        00002100
C---      CHECK FOR ROUGH EQUALITY OF CHORDS ACROSS SURFACE             00002200
      DO 10 JSEG=1,NSEG                                                 00002300
C---      COMPUTE THE AVERAGE BAND WIDTH OF THE JTH CHORDS.             00002400
      SUM=0.0                                                           00002500
      DO 20 ISPL=1,NSPL                                                 00002600
      JJ=NSEG*(ISPL-1)+JSEG                                             00002700
      SUM=SUM+DIST(JJ)                                                  00002800
   20 CONTINUE                                                          00002900
C---      AVERAGE BANDWIDTH                                             00003000
      AVDIST(JSEG)=SUM/ANSPL                                            00003100
C---      IF IPARA IS 1 ON INPUT, THEN ASSUME PARALLELISM               00003200
      IF(IPARA.EQ.1) GO TO 10                                           00003300
C                                                                       00003400
C---      SET TOLERANCE FOR EQUALITY OF CHORDS                          00003500
      BOT=AVDIST(JSEG)*0.95                                             00003600
      TOP=AVDIST(JSEG)*1.06                                             00003700
C---      CHECK ALL CHORDS IN THIS BAND.                                00003800
      DO 30 ISPL=1,NSPL                                                 00003900
      JJ=NSEG*(ISPL-1)+JSEG                                             00004000
      IF(BOT.LE.DIST(JJ).AND.DIST(JJ).LE.TOP) GO TO 30                  00004100
C---      PARALLELISM CHECK FAILED                                      00004200
      IPARA=0                                                           00004300
      GO TO 90                                                          00004400
   30 CONTINUE                                                          00004500
C                                                                       00004600
   10 CONTINUE                                                          00004700
C                                                                       00004800
C---      SURFACE WILL BE TREATED AS PARALLEL.                          00004900
      IPARA=1                                                           00005000
   90 CONTINUE                                                          00005100
C---      IF SURFACE HAS ONLY A SINGLE CROSS BAND, USE NON-PARALLEL     00005200
      IF(NSEG.LE.1) IPARA=0                                             00005300
C                                                                       00005400
C---      SECOND PHASE, ASSIGN LENGTHS TO INCOMING AND OUTGOING         00005500
C---      VECTORS AT EACH POINT                                         00005600
C                                                                       00005700
      DO 100 ISPL=1,NSPL                                                00005800
      DO 100 IPT=1,NPTS                                                 00005900
      IVEC=(IPT-1+(ISPL-1)*NPTS)*3                                      00006000
C---      A SEPARATE POINTER IS SET UP FOR THE ARRAY OF                 00006100
C---      EXITING VECTORS VECB. THIS ARRAY IS OF DIMENSION              00006200
C---      NSEG X NSPL COMPARED WITH NPTS X NSPL FOR VECA AND            00006300
C---      POINTERS FOR VECB ARE SET UP SO THAT THE FIRST ENTRY          00006400
C---      IS OVERWRITTEN IN NPT PASSES THRU THIS LOOP                   00006500
      IPTB=MAX0(IPT-1,1)                                                00006600
      IVECB=((IPTB-1)+(ISPL-1)*NSEG)*3                                  00006700
C---      COMPUTE REFERENCE CHORD FOR VECTOR LENGTHS                    00006800
      J1=MAX0(IPT-1,1)                                                  00006900
      J2=MIN0(IPT,NSEG)                                                 00007000
C                                                                       00007100
      IF(IPARA.EQ.1) GO TO 110                                          00007200
C---      SHARED VECTOR CASE                                            00007300
      J1=J1+(ISPL-1)*NSEG                                               00007400
      J2=J2+(ISPL-1)*NSEG                                               00007500
C---      CHOOSE THE MINIMUM OF THE TWO SURROUNDING CHORDS              00007600
      ALEN1=DIST(J1)                                                    00007700
      IF(ALEN1.GT.DIST(J2)) ALEN1=DIST(J2)                              00007800
      ALEN2=ALEN1                                                       00007900
      GO TO 120                                                         00008000
C---      PARALLEL CASE, CHOOSE SEPARATE LENGTHS                        00008100
  110 CONTINUE                                                          00008200
      ALEN1=AVDIST(J2)                                                  00008300
      ALEN2=AVDIST(J1)                                                  00008400
  120 CONTINUE                                                          00008500
C---      VECB IS SET TO THE LENGTH OF THE EXITING VECTOR               00008600
      DO 130 K=1,3                                                      00008700
      KVEC=IVEC+K                                                       00008800
      KVECB=IVECB+K                                                     00008900
      VECB(KVECB)=ALEN2*VECA(KVEC)                                      00009000
      VECA(KVEC)=ALEN1*VECA(KVEC)                                       00009100
  130 CONTINUE                                                          00009200
C                                                                       00009300
  100 CONTINUE                                                          00009400
C                                                                       00009500
C---      END OF LOOP, CHANGE IPARA TO 1                                00009600
      IF(IBUG.EQ.11) CALL BAD(-1,0,'IPAR',IPARA)                        00009700
      IPARA=1                                                           00009800
C---      CLEAN UP AVDIST ARRAY                                         00009900
      DO 200 I=1,NSEG                                                   00010000
  200 AVDIST(I)=0.0                                                     00010100
C                                                                       00010200
  999 CONTINUE                                                          00010300
      RETURN                                                            00010400
      END                                                               00010500
**** SOURCE FILE : M0000646.V02   ***
*
C                                                                       00000050
      SUBROUTINE PARINT(PA,PD,PC,UDIR,RAD,KK,IRR)                       00000100
C------ALRP SCULPTURED SURFACE ROUTINE--MARCH 1970 JKH                  00000200
C------THIS SUBROUTINE IS MODULAR AND SHOULD NOT HAVE ANY COMMON BLOCKS 00000300
C------INPUT IS THREE SPACE POINTS PA,PB,PC                             00000400
C------KCASE=1,2,3 INDICATES THAT OUTPUT OF CURVATURE AND TANGENT       00000500
C------ IS DESIRED AT POINT P= PA, PB OR PC RESPECTIVELY                00000600
C------OUTPUT SHOULD CONSIST OF A UNITIZED DIRECTION VECTOR UDIR AND A  00000700
C------RADIUS AT POINT P  OF A PARABOLA WHICH PASSES THROUGH PA,PB,PC   00000800
C------IRR NE 0 INDICATES A FAILURE IN INPUT                            00000900
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00001000
      DIMENSION PA(3),PB(3),PC(3),UDIR(3),DX(3),DY(3),PD(3)             00001100
      IDIAG=2000                                                        00001200
      CRIT=1.0D-10                                                      00001300
      X1=DSQRT((PC(1)-PA(1))**2+(PC(2)-PA(2))**2+(PC(3)-PA(3))**2)      00001400
      IRR=IDIAG+1                                                       00001500
      IF(X1.LT.CRIT) RETURN                                             00001600
      DO 10 I=1,3                                                       00001700
   10 DX(I)=(PC(I)-PA(I))/X1                                            00001800
      KCASE=MOD(KK,10)                                                  00001900
      IF(KK.GT.10) GO TO 100                                            00002000
      PB(1)=PD(1)                                                       00002100
      PB(2)=PD(2)                                                       00002200
      PB(3)=PD(3)                                                       00002300
      GO TO 200                                                         00002400
 100  WA=DSQRT(PD(1)*PD(1)+PD(2)*PD(2)+PD(3)*PD(3))                     00002500
      IRR=IDIAG+3                                                       00002600
      IF(WA.LT.CRIT) RETURN                                             00002700
      WB=(DX(1)*PD(1)+DX(2)*PD(2)+DX(3)*PD(3))/WA                       00002800
      S=1.0/WA                                                          00002900
      IF(WB.LT.0.0D0) S=-S                                              00003000
      PB(1)=S*PD(1)                                                     00003100
      PB(2)=S*PD(2)                                                     00003200
      PB(3)=S*PD(3)                                                     00003300
      HDST=X1/2.0                                                       00003400
      WB=DABS(WB)                                                       00003500
      IF(WB.GT.CRIT) GO TO 130                                          00003600
      IRR=IDIAG+5                                                       00003700
      RETURN                                                            00003800
 130  PDST=HDST/WB                                                      00003900
      DO 150 I=1,3                                                      00004000
      PB(I)=(PDST*PB(I)-HDST*DX(I))/2.0+HDST*DX(I)                      00004100
      IF(KK.LT.20) PB(I)=PA(I)+PB(I)                                    00004200
      IF(KK.GT.20) PB(I)=PC(I)-PB(I)                                    00004300
 150  CONTINUE                                                          00004400
 200  CONTINUE                                                          00004500
C------PROJECT THE THIRD POINT PB ONTO THE PA,PC AXIS                   00004600
      X2=(PB(1)-PA(1))*DX(1)+(PB(2)-PA(2))*DX(2)+(PB(3)-PA(3))*DX(3)    00004700
      IRR=IDIAG+2                                                       00004800
      IF(X2.LT.CRIT.OR.X2.GT.X1-CRIT) RETURN                            00004900
      DO 20 I=1,3                                                       00005000
   20 DY(I)=PB(I)-(PA(I)+X2*DX(I))                                      00005100
      Y2=DSQRT(DY(1)*DY(1)+DY(2)*DY(2)+DY(3)*DY(3))                     00005200
      IF(Y2.LT.CRIT) GO TO 5000                                         00005300
      DO 30 I=1,3                                                       00005400
   30 DY(I)=DY(I)/Y2                                                    00005500
C------NOW DX,DY FORM A PLANAR RECTANGULAR COORDINATE SYSTEM IN WHICH   00005600
C------A PARABOLA Y=B*X+C*X**2 CAN BE DETERMINED SO THAT IT LIES ON     00005700
C------PA = (0,0), PC = (X1,0), PB = (X2,Y2)                            00005800
      C=Y2/(X2*(X2 -X1))                                                00005900
      B=-C*X1                                                           00006000
      X=0                                                               00006100
      IF(KCASE.EQ.2) X=X2                                               00006200
      IF(KCASE.EQ.3) X=X1                                               00006300
      W=C+C                                                             00006400
      SLOPE=B+W*X                                                       00006500
      VELA=DSQRT(1+SLOPE*SLOPE)                                         00006600
      VELB=SLOPE/VELA                                                   00006700
C-------RAD IS THE RADIUS OF THE CIRCLE THRU THREE POINTS               00006800
      RD2=1.0D+6                                                        00006900
      IF(Y2.GT.1.0D-6) YCC=(X2**2+Y2**2-X1*X2)/(2*Y2)                   00007000
      IF(Y2.GT.1.0D-6) RD2=DSQRT(YCC**2+X1*X1/4)                        00007100
      RAD=RD2                                                           00007200
C------UDIR IS CHOSEN TO POINT IN THE DIRECTION OF PA TO PB             00007300
      DO 40 I=1,3                                                       00007400
   40 UDIR(I)=DX(I)/VELA+DY(I)*VELB                                     00007500
      IRR=0                                                             00007600
      RETURN                                                            00007700
C------STRAIGHT LINE CASE                                               00007800
 5000 RAD=1.0/CRIT                                                      00007900
      DO 5010 I=1,3                                                     00008000
 5010 UDIR(I)=DX(I)                                                     00008100
      IRR=0                                                             00008200
      RETURN                                                            00008300
      END                                                               00008400
**** SOURCE FILE : M0000648.V01   ***
*
      SUBROUTINE PARMPT(PA,PD,PB,B,PC,C,TA,TD,IRR)                      00000020
C------ A COMPLETELY MODULAR SCULPTURED SURFACE ROUTINE  APRIL 1970 JKH 00000040
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000060
      DIMENSION PA(3),PB(3),PC(3),PD(3),DF(3),TA(3),TD(3)               00000080
C------ INPUT CONSISTS OF TWO END POINTS PA,PD AND TWO INTERIOR POINTS  00000100
C------PB WITH PARAMETER VALUE B AND PC WITH PARAMETER VALUE C THRU     00000120
C------WHICH A CUBIC CURVE MUST PASS.                                   00000140
C------OUTPUT CONSISTS OF TWO COONS TANGENT VECTORS TA AND TD WHICH     00000160
C-------DEFINE THE DESIRED CURVE.  A CASE OF TROUBLE IS THAT THE        00000180
C------PARAMETER VALUES B AND C ARE NEARLY EQUAL                        00000200
      IDIAG=23000                                                       00000220
      BSQ=B*B                                                           00000240
      CSQ=C*C                                                           00000260
      DISC = B * C * (B - 1) * (C - 1) * (B - C)                        00000280
      IRR=IDIAG+1                                                       00000300
      IF(DABS(DISC).LT.1.0D-12) RETURN                                  00000320
C------SET UP THE LINEAR EQUATION A * TA() + B * TB() = C()             00000340
      A1 = B * (1 - B)**2                                               00000360
      A2 = C * (1 - C)**2                                               00000380
      B1 = BSQ*(-1 + B)                                                 00000400
      B2 = CSQ*(-1 + C)                                                 00000420
      DO 20 I=1,3                                                       00000440
   20 DF(I)=PD(I)-PA(I)                                                 00000460
C------DETERMINE EACH COMPONENT OF TA() AND TD() BY SOLVING TWO EQUNS   00000480
C------IN TWO UNKNOWNS                                                  00000500
      DO 10 I=1,3                                                       00000520
      C1 = PB(I) - ( PA(I) + DF(I)*BSQ*(3 - 2*B) )                      00000540
      C2 = PC(I) - ( PA(I) + DF(I)*CSQ*(3 - 2*C) )                      00000560
      TA(I)=(C1*B2 -C2*B1)/DISC                                         00000580
      TD(I)=(A1*C2 - A2*C1)/DISC                                        00000600
   10 CONTINUE                                                          00000620
      IRR=0                                                             00000640
      RETURN                                                            00000660
      END                                                               00000680
**** SOURCE FILE : M0004286.V02   ***
*
C                                                                       00000010
      SUBROUTINE PNTSON(BIN,OUT,KTYP,KTWS,IRR)                          00000020
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000040
      DIMENSION OUT(49),DUV(4),NEXCH(16),IP(4),JP(4)                    00000050
      DIMENSION BIN( 3, 16 ), BOU( 3, 16 ), KTYP( 5 )                   00000060
      DIMENSION U( 4 ), V( 4 ), DUM( 3 ), DUM1( 3 ), KTWS( 5 )          00000080
      DIMENSION TEMP(4,3)                                               00000100
      DIMENSION  DUM2(3)                                                00000110
      DATA NEXCH/1,2,3,4,13,14,15,16,5,9,8,12,6,7,10,11/                00000111
      DATA IP,JP/1,5,1,4,4,8,5,8/                                       00000112
C------INPUT SIXTEEN POINTS ON A PATCH STORED IN THE ARRAY BIN.         00000120
C------OUTPUT  SIXTEEN COONS VECTORS OF A COONS PATCH WHICH PASSES      00000140
C------ THRU THE INPUT POINTS                                           00000160
C------ IN ADDITION, KTYP() CONTAINS INFORMATION ON SURFACE TYPE AND    00000180
C------KTYP=1=NULL CURVE, =2=STRAIGHT SEG, =3=3 PT CURVE,               00000200
C------KTYP=4= 4 PT CURVE, =10=ERROR ON CURVE                           00000220
C------ SOURCES OF TROUBLE IN THE INPUT                                 00000240
C------ IRR .NE. 0 MEANS THE PROCESSING WAS UNSUCESSFUL                 00000260
C------INITIALIZE VARIOUS VALUES                                        00000280
      IDIAG = 5390                                                      00000300
      IRR = 0                                                           00000320
C------ BEGIN BY ALTERING THE ORDER OF INPUT FROM SSX2 FORMAT TO THE    00000321
C------ OLD SSX1 FORMAT( THIS IS DONE TO SAVE REWORKING PNTSON)         00000322
      DO 5 J=1,16                                                       00000325
      N=NEXCH(J)                                                        00000326
      DO 5 I=1,3                                                        00000327
      BOU(I,J)=BIN(I,N)                                                 00000328
    5 CONTINUE                                                          00000329
      DO 6 J=1,16                                                       00000331
      DO 6 I=1,3                                                        00000332
    6 BIN(I,J)=BOU(I,J)                                                 00000333
      DO 1  I = 1, 5                                                    00000340
      KTWS(I) = 0                                                       00000360
    1 KTYP(I) = 0                                                       00000380
      DO 2 I  = 1, 16                                                   00000400
      DO 2 J = 1, 3                                                     00000420
      KTYP(3)=2                                                         00000440
      KTYP(4)=2                                                         00000460
    2 BOU(J,I) = 0.                                                     00000480
      DO 3 J = 1, 3                                                     00000500
      BOU(J,1) = BIN(J,1)                                               00000520
      BOU(J,2) = BIN(J,4)                                               00000540
      BOU(J,5) = BIN(J,5)                                               00000560
    3 BOU(J,6) = BIN(J,8)                                               00000580
      CRIT = 0.00001                                                    00000600
C------NEXT FIT THE FIRST TWO BOUNDARIES                                00000620
      CALL CURFIT( BIN(1,1), BIN(1,2), BIN(1,3), BIN(1,4),              00000640
     1             BOU(1,3), BOU(1,4), KTYP(1), IRR )                   00000660
      IF ( IRR .NE. 0 ) KTYP(1) = 10                                    00000680
      CALL CURFIT( BIN(1,5),BIN(1,6),BIN(1,7),BIN(1,8),                 00000700
     1             BOU(1,7),BOU(1,8), KTYP(2), IRR )                    00000720
      IF ( IRR .NE. 0 ) KTYP(2) = 10                                    00000740
C------NEXT, CHECK FOR TOTAL EQUALITY AMONG THE EIGHT CENTRAL VECTORS   00000760
C------ SUCH EQUALITY IMPLIES THE SURFACE IS RULED                      00000780
      DO 10 I = 9, 15                                                   00000800
      N = I + 1                                                         00000820
      DO 10 J = N, 16                                                   00000840
      DO 20 K = 1, 3                                                    00000860
      W  =  BIN( K, J ) - BIN( K, I )                                   00000880
      IF ( DABS(W) .GT. CRIT ) GO TO 300                                00000900
   20 CONTINUE                                                          00000920
   10 CONTINUE                                                          00000940
C------ ALL EQUALITY CHECKS HAVE BEEN MET -- A RULED SURFACE FOLLOWS    00000960
C------DETERMINE THE REMAINING TANGENTS AND TWISTS                      00000980
      KTYP(5) = 1                                                       00001000
      DO 210 J = 1, 3                                                   00001020
C------SET UP THE CROSS TANGENTS FIRST                                  00001040
      BOU(J,9) = BIN(J,5) - BIN(J,1)                                    00001060
      BOU(J,13) = BOU(J,9)                                              00001080
      BOU(J,10) = BIN(J,8) - BIN(J,4)                                   00001100
      BOU(J,14) = BOU(J,10)                                             00001120
C------NOW SET UP TWIST VECTORS                                         00001140
      BOU(J,11) = BOU(J,7) - BOU(J,3)                                   00001160
      BOU(J,15) = BOU(J,11)                                             00001180
      BOU(J,12) = BOU(J,8) - BOU(J,4)                                   00001200
      BOU(J,16) = BOU(J,12)                                             00001220
  210 CONTINUE                                                          00001240
C------FINALLY RESET IRR                                                00001260
      DO 220 I = 1, 2                                                   00001280
  220 IF ( KTYP(I) .EQ. 10 ) IRR = IDIAG + 1                            00001300
      GO TO 999                                                         00001320
C-----------   END OF RULED SURFACE PROCESSING   -------------          00001340
  300 CONTINUE                                                          00001360
C------NEXT COMPARE FOR TWO EQUAL CENTER POINTS                         00001380
      NUMTWS = 4                                                        00001400
      DO 310 I = 13, 15                                                 00001420
      N = I + 1                                                         00001440
      DO 310 J = N , 16                                                 00001460
      DO 320 K = 1 , 3                                                  00001480
      W  =  BIN(K,J) - BIN(K,I)                                         00001500
      IF ( DABS(W) .GT. CRIT ) GO TO 310                                00001520
  320 CONTINUE                                                          00001540
      NUMTWS = 0                                                        00001560
  310 CONTINUE                                                          00001580
C------NUMTWS=0 MEANS ZERO TWISTS, .NE.0 MEANS NON ZERO TWISTS          00001600
C------NEXT CALL FOR A FIT OF THE REMAINING TWO BOUNDARIES              00001620
      CALL CURFIT( BIN(1,1),BIN(1,9),BIN(1,10),BIN(1,5),                00001640
     1             BOU(1,9),BOU(1,13), KTYP(3), IRR)                    00001660
      IF ( IRR .NE. 0 ) KTYP(3) = 10                                    00001680
      CALL CURFIT( BIN(1,4),BIN(1,11),BIN(1,12),BIN(1,8),               00001700
     1             BOU(1,10),BOU(1,14), KTYP(4), IRR )                  00001720
      IF ( IRR .NE. 0 ) KTYP(4) = 10                                    00001740
C------IF TWISTS HAVE YET TO BE DETERMINED GO TO 500                    00001760
      IF ( NUMTWS .NE. 0 ) GO TO 500                                    00001780
C------FINISH THE ZERO TWIST CASE BY RESETTING IRR                      00001800
      DO 410 I = 1, 4                                                   00001820
  410 IF ( KTYP(I) .EQ. 10 ) IRR = IDIAG + 2                            00001840
      KTYP(5) = 2                                                       00001860
      GO TO 999                                                         00001880
C------THE DETERMINATION OF FOUR TWISTS FOLLOWS                         00001900
  500 CONTINUE                                                          00001920
C------FIRST PROJECT EACH OF THE POINTS BIN(,I), I = 13,14,15,16        00001940
C------IN SUCCESSION ONTO THE ZERO TWIST PATCH                          00001960
      ONE = 1.0                                                         00001980
      DO 510 I = 13, 16                                                 00002000
      DO 550 LL=1,4                                                     00002161
      IS=IP(LL)                                                         00002162
      IE=JP(LL)                                                         00002163
      BXS=BIN(1,IS)                                                     00002164
      BYS=BIN(2,IS)                                                     00002165
      BZS=BIN(3,IS)                                                     00002166
      DX=BIN(1,IE)-BXS                                                  00002167
      DY=BIN(2,IE)-BYS                                                  00002168
      DZ=BIN(3,IE)-BZS                                                  00002169
      PX=BIN(1,I)-BXS                                                   00002170
      PY=BIN(2,I)-BYS                                                   00002171
      PZ=BIN(3,I)-BZS                                                   00002172
      DP=DX*DX+DY*DY+DZ*DZ+1.0D-30                                      00002173
      DUV(LL)=(PX*DX+PY*DY+PZ*DZ)/DP                                    00002174
  550 CONTINUE                                                          00002175
      U(I-12)=(DUV(1)+DUV(2))/2.0                                       00002176
      V(I-12)=(DUV(3)+DUV(4))/2.0                                       00002177
  510 CONTINUE                                                          00002180
C------NOW RESET IRR IF TROUBLE HAS OCCURRED AND RETURN                 00002200
C------KTWS HERE ALWAYS ZERO !!!!!!!!, WHY ????????????                 00002210
      DO 520 I = 1, 4                                                   00002220
  520 IF ( KTWS(I) .NE. 0 ) IRR = IDIAG + 3                             00002240
      IF(IRR.NE.0) RETURN                                               00002241
C------FINALLY COMPUTE TWISTS BASED ON PARAMETER VALUES WHICH HAVE      00002260
C------ BEEN COMPUTED                                                   00002280
      DO 530 I = 1, 4                                                   00002300
      DO 530 K = 1, 3                                                   00002320
      N = 12 + I                                                        00002340
  530 TEMP(I,K) = BIN(K,N)                                              00002360
C     WRITE(6,571)(U(M),M=1,4),(V(MM),MM=1,4),TEMP                      00002361
C 571 FORMAT(10X,4F15.4,/)                                              00002362
      CALL COMPTW ( BOU, TEMP, U, V, IRR )                              00002380
      KTYP(5) = 3                                                       00002400
  999 CONTINUE                                                          00002420
      DO 560 I=1,3                                                      00002421
      DO 560 K=1,4                                                      00002422
      DO 560 J=1,4                                                      00002423
      IN=(I-1)*16+(K-1)*4+J                                             00002424
      OUT(IN)=BOU(I,4*K-4+J)                                            00002425
  560 CONTINUE                                                          00002426
      RETURN                                                            00002433
      END                                                               00002440
**** SOURCE FILE : M0004147.V02   ***
*
      SUBROUTINE RATCON(X1,XM,YM,XI,YI,CX)                              00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---  THIS SUBROUTINE ACCEPTS AS INPUT COORDINATES OF THREE             00000300
C---  POINTS IN THE X,Y-PLANE OF A LOCAL SYSTEM OF COORDINATES.         00000400
C---  THE OUTPUT CX IS THE CANONICAL FORM IN THE SAME COORDINATE        00000500
C---  SYSTEM OF A CONIC ARC WITH ENDPOINTS (0,0) AND (X1,0),            00000600
C---  WHOSE END TANGENTS INTERSECT AT (XI,YI), AND WHICH ALSO           00000700
C---  INTERPOLATES THE POINT (XM,YM). THE ARC IS PARAMETRISED SO        00000800
C---  THAT THE MAGNITUDES OF ITS END TANGENTS ARE EQUAL.                00000900
C---  REVISED AND CORRECTED, CRANFIELD 1981, M.J.P.                     00001000
      DIMENSION CX(16)                                                  00001100
      RATIO=DSQRT((XI**2+YI**2)/((XI-X1)**2+YI**2))                     00001200
      DET=X1*YM                                                         00001300
      S0=2*((XI-XM)*YM-(XM-X1)*(YI-YM))/DET                             00001400
      S1=2*(XM*(YI-YM)-(XI-XM)*YM)/DET                                  00001500
      W0=DSQRT(S0*S1*RATIO)                                             00001600
      W1=W0/RATIO                                                       00001700
C---  IN THE STANDARD RATIONAL QUADRATIC FORMULA FOR A CONIC ARC        00001800
C---  THE WEIGHT ASSOCIATED WITH THE TANGENT INTERSECTION POINT         00001900
C---  HAS BEEN ARBITRARILY TAKEN AS 1.0. W0 AND W1 ARE THE WEIGHTS      00002000
C---  ASSOCIATED WITH THE END POINTS.  WE NEXT SET UP THE CANONICAL     00002100
C---  MATRIX FOR THE ARC, CONTAINING THE TWO PROJECTIVE END POINTS      00002200
C---  AND END TANGENTS.                                                 00002300
      CX(1)=0.0                                                         00002400
      CX(2)=W1*X1                                                       00002500
      CX(3)=2*XI                                                        00002600
      CX(4)=2*(CX(2)-XI)                                                00002700
      CX(5)=0.0                                                         00002800
      CX(6)=0.0                                                         00002900
      CX(7)=2*YI                                                        00003000
      CX(8)=-2*YI                                                       00003100
      DO 10 J=9,12                                                      00003200
   10 CX(J)=0                                                           00003300
C---  ALL Z-COORDINATES ARE ZERO IN LOCAL COORDINATE SYSTEM             00003400
      CX(13)=W0                                                         00003500
      CX(14)=W1                                                         00003600
      CX(15)=2*(1-W0)                                                   00003700
      CX(16)=2*(W1-1)                                                   00003800
      RETURN                                                            00003900
      END                                                               00004000
**** SOURCE FILE : M0004289.W01   ***
*
      SUBROUTINE REVOLV(SC,PA,PB,DA,DB,ICCLW,IRR,S)                     00000100
C***** INSERT 2510 UND 4310 : REVOLV FUER 360 GRAD WINKEL               00000150
C--- SCULPTURED SURFACE ROUTINE TO GENERATE A SCULPTURED SURFACE WHICH  00000200
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000300
C--- REPRESENTS  A SURFACE FORM BY REVOLVING THE SYNTHETIC CURVE SC     00000400
C--- AROUND AN AXIS THRU PA AND PB FROM ANGLE A TO B.  THE SSURF IS     00000500
C--- PACKED INTO THE S ARRAY WITHOUT A TOPOLOGY TABLE( CALL TOPGEN)     00000600
C--- LATER)  IF A PROBLEM OCCURS IRR WILL BE NONZERO ON RETURN          00000700
C--- ICCLW SHOULD BE 1 IF ANGLE DB IS CLOCKWISE ROTATED FROM DB AND -1  00000800
C--- OTHERWISE                                                          00000900
C--- SECONDARILY, A CYLINDER WITH ARBITRARY AXIS CAN BE GENERATED THRU  00001000
C--- THE S CURVE SC,  IN ORDER TO ACHIEVE THIS THE INPUT IS AS FOLLOWS  00001100
C---  PA AND PB ARE TWO POINTS WHICH DESCRIBE THE AXIS VECTOR OF THE    00001200
C--- CYLINDER. SET DA=0., DB=90. AND ICCLW=0                            00001300
      DIMENSION S(*),SC(4,6,*),PA(*),PB(*)                              00001400
      DIMENSION P(4),T(4,4),BT(4,4),CC(4,4),BM(4,4,4),BU(4,4,4)         00001500
      DIMENSION CX(4,6,4)                                               00001600
C                                                                       00001640
      INCLUDE 'XUNITS.INC'                                              00001650
C                                                                       00001660
      DATA Z,U,SMAL/0.0,1.0,0.0001/                                     00001800
      DATA PI,CDR/3.141592654,.01745329252/                             00001900
      TPI=2.*PI                                                         00002200
C---  PROCESS ANGLES FIRST                                              00002300
      A=DA*CDR                                                          00002400
      B=DB*CDR                                                          00002500
      C=DABS(A-B)-TPI                                                   00002510
      IF(ICCLW.EQ.0) GO TO 6                                            00002550
C--- NORMALIZE THE ANGLES BETWEEN ZERO AND TPI                          00002600
      A=DMOD(A,TPI)                                                     00002700
      B=DMOD(B,TPI)                                                     00002800
      IF(DABS(A).LT.SMAL) A=Z                                           00002810
      IF(DABS(B).LT.SMAL) B=Z                                           00002820
      IF(A.LT.Z) A=A+TPI                                                00002900
      IF(B.LT.Z) B=B+TPI                                                00003000
C---  ADJUST THE NUMERICAL VALUE OF B IF NECESSARY                      00004110
      IF(ICCLW*(B-A).GE.-SMAL) B=B-ICCLW*TPI                            00004120
    6 CONTINUE                                                          00004200
      DIF=B-A                                                           00004300
      IF(DABS(C).LT.SMAL)DIF=-ICCLW*TPI                                 00004310
      NSPL=3.*DABS(DIF)/TPI+1.9999                                      00004400
C*** NUMBER OF SPLINES MUST BE AT LEAST TWO                             00004500
      IRR=2                                                             00004600
      IF(NSPL.LT.2) GO TO 998                                           00004700
C--- DIF BECOMES THE ANGULAR SPAN OF EACH SECTOR OF REVOLUTION          00004800
      DIF=DIF/(NSPL-1.0)                                                00004900
C--- THE SURFACE TYPE IS CALLED A MESH (USUALLY)                        00005000
      S(5)=2.                                                           00005100
C--- IF THE SURFACE IS CLOSED IT IS CALLED A NON-MESH                   00005200
      WW=DMOD(B-A,TPI)                                                  00005310
      IF(DABS(WW).GT.SMAL) GO TO 10                                     00005320
      S(5)=1.                                                           00005400
   10 CONTINUE                                                          00005700
      S(6)=5.                                                           00005800
C---  DETERMINE CRITICAL DATA FROM THE SCURV AND SET UP THE HEADER OF S 00005900
      NHD=SC(2,1,1)                                                     00006000
      NCS=SC(4,1,1)+1.                                                  00006100
      NLO=NHD+1                                                         00006200
      NHI=NHD+NCS-1                                                     00006300
      NPCH=(NCS-1)*(NSPL-1)                                             00006400
      S(2)=NPCH*64.                                                     00006500
      S(3)=4*NPCH                                                       00006600
      S(4)=NPCH                                                         00006700
      S(7)=1.0                                                          00006800
      S(8)=10+NPCH*(6+64+4)                                             00006900
      S(9)=NSPL                                                         00007300
      S(10)=NCS                                                         00007400
C--- FILL IN THE FLAG DATA FOR PATCHES                                  00007500
      NSM=NSPL-1                                                        00007600
      NCM=NCS-1                                                         00007700
      DO 20 J=1,NSM                                                     00007800
      DO 20 I=1,NCM                                                     00007900
      KP=I+(J-1)*NCM                                                    00008000
      IS=(KP-1)*6+11                                                    00008100
      IS3=IS+3                                                          00008200
      DO 30 L=IS,IS3                                                    00008300
   30 S(L)=4.0                                                          00008400
C--- COMPUTE THE LOCATION OF PATCH DATA FOR PATCH KP                    00008500
      S(IS+4)=11+NPCH*6+(KP-1)*64                                       00008600
   20 CONTINUE                                                          00008700
C---   DETERMINE A LOCAL COORDINATE SYSTEM                              00008800
      DO 100 I=1,3                                                      00008900
  100 BT(I,1)=PB(I)-PA(I)                                               00009000
C***   PA AND PB SHOULD NOT BE EQUAL                                    00009100
      IRR=4                                                             00009200
      CALL SNORM(BT(1,1),BT(1,1),IR)                                    00009300
      IF (IR.NE.0) GO TO 998                                            00009400
      IF(ICCLW.NE.0) GO TO 70                                           00009500
C---  FOR A CYLINDER SKIP THE COORDINATE TRANSFORMATION BUSINESS        00009600
C--- SET BT AND T EQUAL TO THE IDENTITY MATRIX                          00009700
C---  FOR A CYLINDER, LOAD THE AXIS INTO THE P ARRAY                    00009800
      DO 60 JJ=1,3                                                      00009900
   60 P(JJ)=BT(JJ,1)                                                    00010000
      DO 50 K=1,4                                                       00010100
      DO 50 J=1,4                                                       00010200
      BT(J,K)=Z                                                         00010300
      IF(J.EQ.K) BT(J,K)=U                                              00010400
      T(J,K)=BT(J,K)                                                    00010500
   50 CONTINUE                                                          00010600
      GO TO 150                                                         00010700
   70 CONTINUE                                                          00010800
C--- THE ORIGIN IS AT PA, X- AXIS IS PA,PB                              00010900
      DO 110 L=1,NCS                                                    00011000
      KSEG=MIN0(L+NHD,NHI)                                              00011100
      V=Z                                                               00011200
      IF(L.EQ.NCS) V=U                                                  00011300
      CALL CNCURV(V,SC(1,1,KSEG),P,0)                                   00011400
C---  PROJECT THE END POINT OF THE CURVE ONTO PA,VX                     00011500
      DO 120 LL=1,3                                                     00011600
  120 P(LL)=P(LL)-PA(LL)                                                00011700
      CALL CROSS(BT(1,1),P,BT(1,3))                                     00011800
      CALL SNORM(BT(1,3),BT(1,3),IR)                                    00011900
      IF(IR.NE.0) GO TO 110                                             00012000
      CALL CROSS(BT(1,3),BT(1,1),BT(1,2))                               00012100
      GO TO 130                                                         00012200
  110 CONTINUE                                                          00012300
C***  ALL THE END POINTS OF THE CURVE LAY ON THE AXIS                   00012400
      IRR=5                                                             00012500
      GO TO 998                                                         00012600
  130 CONTINUE                                                          00012700
C---  SET UP THE TRANSFORMATION TO MOVE THIS COORDINATE SYSTEM INTO     00012800
C---  STANDARD POSITION                                                 00012900
      DO 140 I=1,3                                                      00013000
      T(1,I)=BT(I,1)                                                    00013100
      T(2,I)=BT(I,2)                                                    00013200
      T(3,I)=BT(I,3)                                                    00013300
      T(I,4)=Z                                                          00013400
      BT(I,4)=Z                                                         00013500
      BT(4,I)=-(PA(1)*BT(1,I)+PA(2)*BT(2,I)+PA(3)*BT(3,I))              00013600
  140 CONTINUE                                                          00013700
      DO 145 I=1,3                                                      00013800
  145 T(4,I)=-(BT(4,1)*T(1,I)+BT(4,2)*T(2,I)+BT(4,3)*T(3,I))            00013900
      T(4,4)=U                                                          00014000
      BT(4,4)=U                                                         00014100
  150 CONTINUE                                                          00014200
C--- GENERATE PATCHES FOR EACH SECTOR AND EACH CUBIC SPLINE SEGMENT     00014300
C---  LOAD THE PATCH VALUES ONE-BY-ONE INTO THE S ARRAY                 00014400
      DO 200 II=1,NSM                                                   00014500
C--- SKIP TO SPECIAL AREA FOR A CYLINDER                                00014600
      IF(ICCLW.EQ.0) GO TO 250                                          00014700
C---   DETERMINE ANGLES FOR THIS SECTOR                                 00014800
      A1=A+(II-1)*DIF                                                   00014900
      A2=A+II*DIF                                                       00015000
C---  DETERMINE THREE POINTS ON THE BOUNDED UNIT CIRCULAR ARC           00015100
      CX(2,1,1)=1.                                                      00015200
      CX(3,1,1)=3.                                                      00015300
      CX(4,1,1)=3.                                                      00015400
      DO 220 L=1,4                                                      00015500
      DO 220 J=2,6                                                      00015600
      DO 220 K=1,4                                                      00015700
  220 CX(K,J,L)=Z                                                       00015800
      DO 210 J=1,3                                                      00015900
      AX=(J-1.0)/2.0*(A2-A1)+A1                                         00016000
      CX(1,5,J+1)=1.0                                                   00016100
      CX(1,1,J+1)=U                                                     00016200
      CX(2,1,J+1)=DCOS(AX)                                              00016300
      CX(3,1,J+1)=DSIN(AX)                                              00016400
  210 CX(4,1,J+1)=U                                                     00016500
C***   IF SCURV DEFINTION FAILS, THEN QUIT                              00016600
      IRR=6                                                             00016700
      CALL SCURV(CX,IR)                                                 00016800
      IF(IR.NE.0) GO TO 998                                             00016900
C                                                                       00016950
      NLOO=CX(2,1,1)+1                                                  00017000
C---  BM NOW CONTAINS A COONS CANON FORM OF THE UNIT CIRCLE REQUIRED    00017100
C---  TO DRIVE A SURFACE OF REVOLUTION -- MOVE ITS TRANSPOSE INTO CC    00017200
      DO 230 L=1,4                                                      00017300
      DO 230 J=1,4                                                      00017400
  230 CC(L,J)=CX(J,L,NLOO)                                              00017500
      GO TO 290                                                         00017600
C--- SPECIAL PROCESSING FOR A CYLINDRICAL SURFACE                       00017700
C--- THE DRIVING CURVE CC SHOULD BE A STRAIGHT LINE                     00017800
  250 CONTINUE                                                          00017900
C--- FOR A CYLINDER,THE DIRECTRIX SHOULD EXTEND 10 UNITS ON EACH SIDE   00018000
      DO 260 I=1,3                                                      00018100
      CC(I,1)=-P(I)*SSEXT                                               00018200
      CC(I,2)=P(I)*SSEXT                                                00018300
      CC(I,3)=CC(I,2)-CC(I,1)                                           00018400
  260 CC(I,4)=CC(I,3)                                                   00018500
      CC(4,1)=U                                                         00018600
      CC(4,2)=U                                                         00018700
      CC(4,3)=Z                                                         00018800
      CC(4,4)=Z                                                         00018900
  290 CONTINUE                                                          00019000
C-- CC IS A TRANSPOSED COONS CURVE FOR A CIRCLE OR STRT LINE            00019100
C---  SETUP THE FOUR LAYER MATRIX TO SWEEP THE CURVE ACROSS THE SECTOR  00019200
      DO 310 J=1,4                                                      00019300
      DO 310 K=1,4                                                      00019400
      DO 310 L=1,4                                                      00019500
  310 BM(J,K,L)=Z                                                       00019600
      IF(ICCLW.EQ.0) GO TO 311                                          00019700
      BM(1,1,1)=U                                                       00019800
      BM(2,2,2)=U                                                       00019900
      BM(3,3,2)=-U                                                      00020000
      BM(2,3,3)=U                                                       00020100
      BM(3,2,3)=U                                                       00020200
      BM(4,4,4)=U                                                       00020300
      GO TO 312                                                         00020400
C--- SET UP BM TO GENERATE A TRANSLATION IN SPACE FOR A CYLINDER        00020500
  311 CONTINUE                                                          00020600
      BM(1,4,1)=U                                                       00020700
      BM(4,1,1)=U                                                       00020800
      BM(2,4,2)=U                                                       00020900
      BM(4,2,2)=U                                                       00021000
      BM(3,4,3)=U                                                       00021100
      BM(4,3,3)=U                                                       00021200
      BM(4,4,4)=U                                                       00021300
  312 CONTINUE                                                          00021400
C---  BM=BM*CC                                                          00021500
      DO 320 KZ=1,4                                                     00021600
      K=KZ                                                              00021700
      CALL SMMULT(4,4,4,1,BM(1,1,K),CC,BU)                              00021800
      CALL SMMULT(4,4,4,2,BT,BM(1,1,K),BU)                              00021900
  320 CONTINUE                                                          00022000
C---  NOW SWEEP EACH CUBIC SEGMENT OF SC THRU THIS SECTOR               00022100
      DO 400 I=1,NCM                                                    00022200
      NCB=SC(2,1,1)+I                                                   00022300
      DO 410 KZ=1,4                                                     00022400
      K=KZ                                                              00022500
      CALL SMMULT(4,4,4,3,SC(1,1,NCB),BM(1,1,K),BU(1,1,K))              00022600
  410 CONTINUE                                                          00022700
C---  BU MUST NOW BE BACK TRANSFORMED TO BECOME A COONS MATRIX          00022800
      DO 420 J=1,4                                                      00022900
      DO 420 K=1,4                                                      00023000
      DO 430 L=1,4                                                      00023100
  430 P(L)=BU(J,K,L)                                                    00023200
      CALL SMMULT(1,4,4,1,P, T,BU)                                      00023300
      DO 440 L=1,4                                                      00023400
  440 BU(J,K,L)=P(L)                                                    00023500
  420 CONTINUE                                                          00023600
C---  NORMALIZE ALL MATRICES AFTER THE FIRST TO HAVE THE SAME W COORD   00023700
      IF(II+I.NE.2) GO TO 460                                           00023800
      WSAVE=BU(1,1,4)                                                   00023900
      GO TO 480                                                         00024000
C------ NORMALIZE THE MATRIX BU WITH WSAVE                              00024100
  460 CONTINUE                                                          00024200
      FAC=WSAVE/BU(1,1,4)                                               00024300
      DO 470 L=1,4                                                      00024400
      DO 470 K=1,4                                                      00024500
      DO 470 J=1,4                                                      00024600
  470 BU(L,K,J)=FAC*BU(L,K,J)                                           00024700
  480 CONTINUE                                                          00024800
C---  BU SHOULD NOW BE THE COONS MATRIX, PLACE IT INTO THE S ARRAY      00024900
      ILOC=10+NPCH*6+(I+(II-1)*NCM-1)*64.                               00025000
      DO 450 J=1,4                                                      00025100
      DO 450 K=1,4                                                      00025200
      DO 450 L=1,4                                                      00025300
      ILOC=ILOC+1                                                       00025400
      S(ILOC)=BU(L,K,J)                                                 00025500
  450 CONTINUE                                                          00025600
  400 CONTINUE                                                          00025700
  200 CONTINUE                                                          00025800
      IRR=0                                                             00025900
  998 CONTINUE                                                          00026200
      RETURN                                                            00026400
      END                                                               00026500
**** SOURCE FILE : M0000656.V04   ***
*
      SUBROUTINE SCDUMP(IN,SCAN)                                        00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION SCAN(*)                                                 00000300
      CALL BAD(-1,0,' ',0)                                              00000400
      CALL BAD(-1,0,'CHK=',IN)                                          00000500
      NTOT=SCAN(12)                                                     00000600
      IF(NTOT.EQ.0) NTOT=(SCAN(2)+SCAN(4))*24.                          00000700
      IK=-3                                                             00000800
      DO 10 L=1,NTOT,4                                                  00000900
      IF(MOD(L,24).EQ.1) CALL BAD(-1,0,' ',0)                           00001000
      IK=IK+4                                                           00001100
      CALL BAD(1,0,'KCT ',IK)                                           00001200
      CALL BAD(-4,1,'SCAN',SCAN(L))                                     00001300
   10 CONTINUE                                                          00001400
      RETURN                                                            00001500
      END                                                               00001600
**** SOURCE FILE : M0004124.V05   ***
*
      SUBROUTINE SCPICT(SC,SCNAME,MODE)                                 00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C--- INPUT- A SYNTHETIC CURVE S WITH NAME SCNAME                        00000300
C--- OUTPUT - A PRINTED ANALYSIS AND DISPLAY OF THE CURVE S ON VLFILE   00000400
      INCLUDE 'DARRAY.INC'                                              00000510
      CHARACTER*120 ARRAY                                               00000600
      DIMENSION SC(4,6,*)                                               00000700
      DIMENSION CV(16),TT(3)                                            00000800
      INTEGER VLFILE                                                    00000900
      CHARACTER*6 TYPFLO(2),ARCTYP(5)                                   00000910
      CHARACTER*16 SCNAME                                               00000920
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-9/                            00001000
C---     ALPHA EQUIVALENT OF SEGMENT FLOW TYPE                          00001100
      DATA TYPFLO/'PARAM ','LENGTH'/                                    00001300
      DATA ARCTYP/'ARC   ','ANGLE ','CHORD ','PARAM ','TRASH '/         00001500
      DATA MXARC/4/,MXFLO/2/                                            00001600
C                                                                       00001700
      DATA ARRAY/   '0   PARAM     XCOORD    YCOORD    ZCOORD    UTAN-I 00001800
     C   UTAN-J    UTAN-K    UNORMI    UNORMJ    UNORMK    CURVATURE RAD00001900
     CIUS'/                                                             00002000
C                                                                       00002100
      CALL CFORM('1 VERIFICATION LISTING FOR SCURV',DARRAY,1,32)        00002200
      CALL CFORM(SCNAME,DARRAY,36,16)                                   00002300
      CALL CPRIN1(DARRAY)                                               00002400
      CALL CPRIN1(DARRAY)                                               00002500
C---     PRINT HEADER TABLE VALUES FOR SYNTHETIC CURVE                  00002600
      CALL CFORM('0 INTERIM SCURV HEADER TABLE',DARRAY,1,28)            00002700
      IF(MODE.GT.0) CALL CFORM('  FINAL ',DARRAY,3,8)                   00002800
      CALL CPRIN1(DARRAY)                                               00002900
      CALL FCONV(SC(1,1,1),DARRAY,4,9,3)                                00003000
      CALL CFORM('= 1.APT FILE RECORD NUMBER',DARRAY,15,26)             00003100
      CALL CPRIN1(DARRAY)                                               00003200
      CALL FCONV(SC(2,1,1),DARRAY,4,9,3)                                00003300
      CALL CFORM('= 2.NUMBER OF BLOCKS FOR HEADER',DARRAY,15,31)        00003400
      CALL CPRIN1(DARRAY)                                               00003500
      CALL FCONV(SC(3,1,1),DARRAY,4,9,3)                                00003600
      CALL CFORM('= 3.1=COMBIN,2=SPLINE,3=CURSEG',DARRAY,15,30)         00003700
      CALL CPRIN1(DARRAY)                                               00003800
      CALL FCONV(SC(4,1,1),DARRAY,4,9,3)                                00003900
      CALL CFORM('= 4.NUMBER OF CUBIC ARCS',DARRAY,15,24)               00004000
      CALL CPRIN1(DARRAY)                                               00004100
C---     SKIP REST OF HEADER FOR MODE 0                                 00004200
      IF(MODE.LT.1) GO TO 11                                            00004300
C                                                                       00004400
      CALL FCONV(SC(1,2,1),DARRAY,4,9,3)                                00004500
      CALL CFORM('= 5.LOCATION OF FIRST CUBIC ARC',DARRAY,15,31)        00004600
      CALL CPRIN1(DARRAY)                                               00004700
      CALL FCONV(SC(2,2,1),DARRAY,4,9,3)                                00004800
      CALL CFORM('= 6.NUMBER OF ROWS FOR FLOW DATA',DARRAY,15,32)       00004900
      CALL CPRIN1(DARRAY)                                               00005000
      CALL FCONV(SC(3,2,1),DARRAY,4,9,3)                                00005100
      CALL CFORM('= 7.LOCATION OF FIRST FLOW ROW',DARRAY,15,30)         00005200
      CALL CPRIN1(DARRAY)                                               00005300
      CALL FCONV(SC(4,2,1),DARRAY,4,9,3)                                00005400
      CALL CFORM('= 8.NUMBER OF ROWS FOR SEGMENTS',DARRAY,15,31)        00005500
      CALL CPRIN1(DARRAY)                                               00005600
      CALL FCONV(SC(1,3,1),DARRAY,4,9,3)                                00005700
      CALL CFORM('= 9.LOCATION OF FIRST ROW OF SEGMENTS',DARRAY,15,37)  00005800
      CALL CPRIN1(DARRAY)                                               00005900
      CALL FCONV(SC(2,3,1),DARRAY,4,9,3)                                00006000
      CALL CFORM('=10.TOTAL NUMBER OF FLOW SPLINES',DARRAY,15,32)       00006100
      CALL CPRIN1(DARRAY)                                               00006200
      CALL FCONV(SC(3,3,1),DARRAY,4,9,3)                                00006300
      CALL CFORM('=11.LOCATION OF FIRST FLOW SPLINE',DARRAY,15,33)      00006400
      CALL CPRIN1(DARRAY)                                               00006500
      CALL FCONV(SC(4,3,1),DARRAY,4,9,3)                                00006600
      CALL CFORM('=12.TOTAL SIZE OF STRUCTURE',DARRAY,15,27)            00006700
      CALL CPRIN1(DARRAY)                                               00006800
      CALL FCONV(SC(1,4,1),DARRAY,4,9,3)                                00006900
      CALL CFORM('=13.FIRST LOCATION OF STRUCTURE',DARRAY,15,31)        00007000
      CALL CPRIN1(DARRAY)                                               00007100
   11 CONTINUE                                                          00007200
C                                                                       00007300
C---     SET UP POINTERS FOR USING CURVE STRUCTURE                      00007400
      D=0.25                                                            00007500
      N=1.0/D+1.1                                                       00007600
      NHD=SC(2,1,1)                                                     00007700
      NLO=NHD+1                                                         00007800
      NSEGST=SC(4,1,1)                                                  00007900
      NHI=NLO+NSEGST-1                                                  00008000
C                                                                       00008100
      ICT=0                                                             00008200
   13 CONTINUE                                                          00008300
      IF(MODE.LT.2) GO TO 101                                           00008400
      CALL VORSCH (12,DARRAY)                                           00008450
      IF(ICT.EQ.0) CALL CFORM('0CURVE SHAPE- DISPLAYED BY CUBIC ARCS',  00008500
     X DARRAY,1,37)                                                     00008600
      IF(ICT.EQ.1) CALL CFORM('0FLOW RATE ACROSS CURVE BY SEGMENTS',    00008700
     X DARRAY,1,35)                                                     00008800
      CALL CPRIN1(DARRAY)                                               00008900
      DARRAY=ARRAY                                                      00009110
      CALL CPRIN1(DARRAY)                                               00009200
      CALL CFORM(' ',DARRAY,1,1)                                        00009300
      CALL CPRIN1(DARRAY)                                               00009400
C                                                                       00009500
      DO 30 I=NLO,NHI                                                   00009600
      KK=I-NHD                                                          00009700
      IF(ICT.GT.0) KK=I-NLO+1                                           00009800
      CALL VORSCH ( 6, ARRAY)                                           00009850
      IF (ICT.EQ.1)CALL CFORM('0SEGMENT NUMBER',DARRAY,1,15)            00009900
      IF (ICT.EQ.0)CALL CFORM('0    ARC NUMBER',DARRAY,1,15)            00010000
      CALL ICONV(KK,DARRAY,17,6)                                        00010100
      CALL CPRIN1(DARRAY)                                               00010200
C                                                                       00010300
      DO 50 L=1,N                                                       00010400
      U=(L-ONE)*D                                                       00010500
      IF(ICT.EQ.0) CALL CNCURV(U,SC(1,1,I),CV,1)                        00010600
      IF(ICT.EQ.1) CALL CURFLO(U,SC,CV,1,KK)                            00010700
      CALL CROSS(CV(5),CV(9),TT)                                        00010800
      X=DSQRT(TT(1)**2+TT(2)**2+TT(3)**2)                               00010900
      DD=DSQRT(CV(5)**2+CV(6)**2+CV(7)**2)+SMAL                         00011000
      R=X/DD**3                                                         00011100
      RR=ONE/(R+SMAL)                                                   00011200
      CALL SNORM(TT,TT,II)                                              00011300
      K=1                                                               00011400
      CALL FCONV(U,DARRAY,K,10,4)                                       00011500
      K=K+10                                                            00011600
      DO 41 LL=1,3                                                      00011700
      CALL FCONV(CV(LL),DARRAY,K,9,4)                                   00011800
   41 K=K+10                                                            00011900
      DO 42 LL=13,15                                                    00012000
      CALL FCONV(CV(LL),DARRAY,K,9,4)                                   00012100
   42 K=K+10                                                            00012200
      DO 43 LL=1,3                                                      00012300
      CALL FCONV(TT(LL),DARRAY,K,9,4)                                   00012400
   43 K=K+10                                                            00012500
      CALL FCONV(R,DARRAY,K,9,4)                                        00012600
      K=K+10                                                            00012700
      CALL FCONV(RR,DARRAY,K,9,3)                                       00012800
      CALL CPRIN1(DARRAY)                                               00012900
   50 CONTINUE                                                          00013000
C                                                                       00013100
      IF(SC(2,2,1).LT.SMAL) GO TO 55                                    00013200
C---     LIST SUMMARY FLOW INFORMATION FOR THIS ARC                     00013300
      IF(ICT.NE.0) GO TO 55                                             00013400
C                                                                       00013500
      LOCARC=SC(3,2,1)+4*(KK-1)                                         00013600
      K=(LOCARC-1)/24+1                                                 00013700
      J=LOCARC-(K-1)*24                                                 00013800
      J=(J-1)/4+1                                                       00013900
      ITYPE=SC(3,J,K)                                                   00014000
      IF(ITYPE.LT.1.OR.ITYPE.GT.MXARC) ITYPE=MXARC+1                    00014100
      TOL=SC(3,J,K)-ITYPE                                               00014200
      NUM=SC(2,J,K)                                                     00014300
      CALL CFORM('FLOW TYPE=',DARRAY,5,10)                              00014400
      CALL CFORM(ARCTYP(ITYPE),DARRAY,17,6)                             00014500
      CALL CFORM('TOLERANCE FACTOR=',DARRAY,25,17)                      00014600
      CALL FCONV(TOL,DARRAY,44,7,4)                                     00014700
      CALL CFORM(ARCTYP(ITYPE),DARRAY,54,6)                             00014800
      CALL CFORM('LENGTH=',DARRAY,61,7)                                 00014900
      CALL FCONV(SC(4,J,K),DARRAY,70,9,4)                               00015000
      CALL CFORM('NUMBER OF FLOW SPLINES=',DARRAY,81,23)                00015100
      CALL ICONV(NUM,DARRAY,106,4)                                      00015200
      CALL CPRIN1(DARRAY)                                               00015300
C                                                                       00015400
   55 CONTINUE                                                          00015500
      IF(ICT.LT.1) GO TO 30                                             00015600
C---     PRINT SPECIAL SUMMARY INFORMATION FOR A FLOW SEGMENT           00015700
      LOCSEG=SC(1,3,1)+(KK-1)*4                                         00015800
      JA=(LOCSEG-1)/24+1                                                00015900
      L=LOCSEG-(JA-1)*24                                                00016000
      IA=(L-1)/4+1                                                      00016100
C---     SUMMARY INFORMATION FOR SEGMENT IS IN SC(1,IA,JA)              00016200
      CALL CFORM(' FIRST POINT=',DARRAY,4,13)                           00016300
      CALL FCONV(SC(1,IA,JA),DARRAY,18,6,1)                             00016400
      CALL CFORM(' LAST POINT=',DARRAY,25,12)                           00016500
      DUM=SC(1,IA,JA)+SC(2,IA,JA)                                       00016600
      CALL FCONV(DUM,DARRAY,37,6,1)                                     00016700
      CALL CFORM(' TYPE OF FLOW=',DARRAY,44,14)                         00016800
      II=SC(3,IA,JA)                                                    00016900
      CALL CFORM(TYPFLO(II),DARRAY,59,6)                                00017000
      CALL CFORM(' TOTAL SPAN=',DARRAY,66,12)                           00017100
      CALL FCONV(SC(4,IA,JA),DARRAY,79,13,4)                            00017200
      CALL CPRIN1(DARRAY)                                               00017300
C                                                                       00017400
   30 CONTINUE                                                          00017500
C                                                                       00017600
      IF(SC(4,2,1).LT.SMAL) GO TO 101                                   00017700
      IF(ICT.GE.1) GO TO 101                                            00017800
C---     FOR A CURVE WITH FLOW RATE, REDISPLAY ACCORDING TO FLOW.       00017900
      NLO=1                                                             00018000
      NHI=SC(4,2,1)                                                     00018100
      ICT=1                                                             00018200
      GO TO 13                                                          00018300
C                                                                       00018400
  101 IF (MODE.EQ.0) GOTO 102                                           00018500
C---     SUPRESS CANON FORM PRINTING IF MODE IS LT 3                    00018600
      IF(MODE.LT.3)  GO TO 111                                          00018700
C---     MODIFY THE EFFECTIVE SIZE FOR A FLOW CURVE                     00018800
      NHI=SC(4,3,1)/24.+1.                                              00018900
      NMX=SC(4,3,1)                                                     00019000
  102 NCT=0                                                             00019100
      IF(ICT.EQ.0) NHI=SC(4,1,1)+SC(2,1,1)                              00019200
      NMX=5000                                                          00019300
      CALL CFORM('0',DARRAY,1,1)                                        00019500
      CALL CPRIN1(DARRAY)                                               00019600
      CALL VORSCH ( 3,DARRAY)                                           00019650
      CALL CFORM(' CANONICAL ARRAY FOLLOWS',DARRAY,1,24)                00019700
      CALL CPRIN1(DARRAY)                                               00019800
      J2=6                                                              00019900
      DO 110 I=1,NHI                                                    00020000
      CALL VORSCH ( 3,DARRAY)                                           00020050
      CALL CFORM('  INDEX=',DARRAY,1,8)                                 00020100
      II=(I-1)*24+1                                                     00020200
      CALL ICONV(II,DARRAY,9,4)                                         00020300
      JB=0                                                              00020400
 120  JA=JB+1                                                           00020500
      JB=JA+2                                                           00020600
      K=14                                                              00020700
      IF(JA.GT.J2) GO TO 110                                            00020800
      IF(JB.GT.J2) JB=J2                                                00020900
      DO 141 J1=JA,JB                                                   00021000
      K=K+3                                                             00021100
      DO 141 L=1,4                                                      00021200
      NCT=NCT+1                                                         00021300
      IF(NCT.GT.NMX) GO TO 141                                          00021400
      CALL FCONV(SC(L,J1,I),DARRAY,K,8,3)                               00021500
      K=K+8                                                             00021600
  141 CONTINUE                                                          00021700
      CALL CPRIN1(DARRAY)                                               00021800
      GO TO 120                                                         00021900
  110 CONTINUE                                                          00022000
  111 CONTINUE                                                          00022100
      IF(MODE.LT.2) GO TO 150                                           00022200
C---     PRINT END MESSAGE                                              00022300
      CALL CFORM('0---- END OF SYNTHETIC CURVE VERIFICATION -------',   00022400
     X  DARRAY,1,49)                                                    00022500
      CALL CPRIN1(DARRAY)                                               00022600
  150 CONTINUE                                                          00022700
      RETURN                                                            00022800
      END                                                               00022900
**** SOURCE FILE : M0001090.V07   ***
*
       SUBROUTINE SCTRA(XMA,ANA,CAN,ISPRNT)                             00000100
C----------  THE PURPOSE OF THIS SUBROUTINE IS TO PERFORM GEOMETRY      00000200
C----------  TRANSFORMATION FOR THE SYNTHETIC CURVESS.                  00000300
C----------      XMA     TRANSFORMATION MATRIX                          00000400
C----------      ANA     CURVE NAME                                     00000500
C----------      CAN     CANON OF THE CURVE                             00000600
C----------      ISPRNT  PRINT FLAG                                     00000700
C----------                                                             00000800
       IMPLICIT DOUBLE PRECISION(A-H,O-Z)                               00000900
       CHARACTER*8 BLANK,DARRAY*120,ANAME*16                            00000910
       DIMENSION ANA(10),CAN(*),A(4,4),B(4,24),C(4,24)                  00001000
       DIMENSION IFLG(4),W(16),XMA(12)                                  00001100
       DATA BLANK/'        '/                                           00001200
       IGNC=0                                                           00001300
       CALL HOLFRM(ANA(3),ANAME,1,8,NWD)                                00001400
       ANAME(9:16)=BLANK                                                00001410
       DARRAY=BLANK                                                     00001600
       CALL CFORM('1THE FOLLOWING SSURF OR SCURV WAS ',DARRAY,1,34)     00001700
       CALL CFORM('TRANSFORMED BY THE MATRIX',DARRAY,36,25)             00001800
       CALL CPRINT(DARRAY)                                              00001900
       CALL CFORM('0',DARRAY,1,1)                                       00002000
       CALL CPRINT(DARRAY)                                              00002100
C***  INPUT MATRIX                                                      00002200
       DO 7 I=1,3                                                       00002300
       DO 7 J=1,4                                                       00002400
       LL=(I-1)*4+J                                                     00002500
       A(I,J)=XMA(LL)                                                   00002600
  7    CONTINUE                                                         00002700
       A(4,1)=0.0                                                       00002800
       A(4,2)=0.0                                                       00002900
       A(4,3)=0.0                                                       00003000
       A(4,4)=1.0                                                       00003100
C***  ************                                                      00003200
       DO 12 I=1,4                                                      00003300
       K=2                                                              00003400
       DO 11 J=1,4                                                      00003500
       CALL FCONV(A(I,J),DARRAY,K,12,5)                                 00003600
       K=K+12                                                           00003700
 11    CONTINUE                                                         00003800
       CALL CPRINT(DARRAY)                                              00003900
 12    CONTINUE                                                         00004000
       CALL CFORM('0',DARRAY,1,1)                                       00004100
       CALL CPRINT(DARRAY)                                              00004200
       NARC=CAN(4)                                                      00004300
       NPT=NARC+1                                                       00004400
       IV=CAN(5)                                                        00004500
       IA=IV                                                            00004600
       DO 2200 N=1,NARC                                                 00004700
       IB=IA                                                            00004800
       DO 2100 M=1,4                                                    00004900
       B(1,M)=CAN(IB)                                                   00005000
       B(2,M)=CAN(IB+4)                                                 00005100
       B(3,M)=CAN(IB+8)                                                 00005200
       B(4,M)=CAN(IB+12)                                                00005300
       IB=IB+1                                                          00005400
 2100  CONTINUE                                                         00005500
       IB=IA                                                            00005600
C----------  CRSSPL  OR  NORMAL                                         00005700
       DO 2300 K=1,2                                                    00005800
       KK=K+4                                                           00005900
       IC=IB-(3-K)*4                                                    00006000
       B(1,KK)=CAN(IC)                                                  00006100
       B(2,KK)=CAN(IC+1)                                                00006200
       B(3,KK)=CAN(IC+2)                                                00006300
       B(4,KK)=0.0                                                      00006400
 2300  CONTINUE                                                         00006500
       ML=6                                                             00006600
       IF(N.NE.NARC) GO TO 2500                                         00006700
       IA1=IA+19                                                        00006800
       IA2=IA+23                                                        00006900
       IF((CAN(IA1).EQ.0).AND.(CAN(IA2).EQ.0)) GO TO 2500               00007000
       DO 2310 K=1,2                                                    00007100
       KK=K+6                                                           00007200
       IC=IB+16+(K-1)*4                                                 00007300
       B(1,KK)=CAN(IC)                                                  00007400
       B(2,KK)=CAN(IC+1)                                                00007500
       B(3,KK)=CAN(IC+2)                                                00007600
       B(4,KK)=0.0                                                      00007700
 2310  CONTINUE                                                         00007800
       ML=8                                                             00007900
 2500  CONTINUE                                                         00008000
       DO 240 KA=1,ML                                                   00008100
       DO 230 II=1,4                                                    00008200
       D=0.0                                                            00008300
       DO 220 JJ=1,4                                                    00008400
       C(II,KA)=A(II,JJ)*B(JJ,KA)+D                                     00008500
 220   D=C(II,KA)                                                       00008600
 230   CONTINUE                                                         00008700
 240   CONTINUE                                                         00008800
       IB=IA                                                            00008900
       DO 2600 M=1,4                                                    00009000
       CAN(IB)=C(1,M)                                                   00009100
       CAN(IB+4)=C(2,M)                                                 00009200
       CAN(IB+8)=C(3,M)                                                 00009300
       CAN(IB+12)=C(4,M)                                                00009400
       IB=IB+1                                                          00009500
 2600  CONTINUE                                                         00009600
       IB=IA                                                            00009700
       DO 2700 K=1,2                                                    00009800
       KK=K+4                                                           00009900
       IC=IB-(3-K)*4                                                    00010000
       CAN(IC)=C(1,KK)                                                  00010100
       CAN(IC+1)=C(2,KK)                                                00010200
       CAN(IC+2)=C(3,KK)                                                00010300
 2700  CONTINUE                                                         00010400
       IF(ML.EQ.6) GO TO 2800                                           00010500
       DO 2710 K=1,2                                                    00010600
       KK=K+6                                                           00010700
       IC=IB+16+(K-1)*4                                                 00010800
       CAN(IC)=C(1,KK)                                                  00010900
       CAN(IC+1)=C(2,KK)                                                00011000
       CAN(IC+2)=C(3,KK)                                                00011100
 2710  CONTINUE                                                         00011200
 2800  IA=IA+24                                                         00011300
 2200  CONTINUE                                                         00011400
       CALL SCPICT(CAN,ANAME,ISPRNT)                                    00011500
 999    RETURN                                                          00011600
        END                                                             00011700
**** SOURCE FILE : M0004151.V04   ***
*
      SUBROUTINE SCURV(S,IRR)                                           S0000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                S0000200
C------ INPUT IS A STREAM OF POINTS TOGETHER WITH VARIOUS               S0000300
C------ TANSPL,CRSSPL,NORMAL,WEIGHT,LIMIT CONSTRAINTS                   S0000400
C------ ALL OF THIS INPUT IS STRUCTURED INTO THE S ARRAY                S0000500
C------ THE OBJECTIVE OF THIS ROUTINE IS TO CREATE EITHER               S0000600
C------ A CONIC ARC(S(3,1,1)=3.) OR A SPLINE CURVE(S(3,1,1)=2.)         S0000700
C------ THE FINAL PROCESSED CURVE IS PACKED INTO THE S ARRAY            S0000800
C------ REVISED VERSION, CRANFIELD 1981, R.J.G./M.J.P.                  S0000900
C                                                                       S0001000
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   S0001100
C                                                                       S0001200
      DIMENSION S(4,6,31)                                               S0001300
      DIMENSION X(5),Y(5),XT(5),YT(5)                                   S0001400
      DIMENSION VA(3),VB(3),VN(3),DIF(3)                                S0001500
      DIMENSION C(4,4),A(3,3),CL(4,4),R(4,4)                            S0001600
      CHARACTER*20 BADMSG                                               S0001610
      DATA SMAL1,SMAL2,VSMAL/.000000001D0,.00001D0,1.0D-30/             S0001700
      DATA ZERO,ONE,TWO,THREE/0.0D0,1.0D0,2.0D0,3.0D0/                  S0001800
      IRRR=0                                                            S0001900
      IRR=0                                                             S0002000
C                                                                       S0002100
C-------  FIRST CHECK FOR PRESENCE OF NULL ARC                          S0002200
      NHD=S(2,1,1)                                                      S0002300
      NPL=NHD+1                                                         S0002400
      NP=S(4,1,1)                                                       S0002500
      NPH=NHD+NP                                                        S0002600
      NPLP=NPL+1                                                        S0002700
      NPHM=NPH-1                                                        S0002800
C                                                                       S0002900
      IF(IBUG.NE.11) GO TO 7                                            S0003000
      CALL BAD(-1,0,' ',0)                                              S0003100
      BADMSG=' ENTRY TO SCURV'                                          S0003110
      CALL CPRINT(BADMSG)                                               S0003120
      JLIM=S(4,1,1)+ONE                                                 S0003200
      DO 8 J=1,JLIM                                                     S0003300
      DO 8 I=1,6                                                        S0003400
      CALL BAD(-4,1,'SC  ',S(1,I,J))                                    S0003500
    8 CONTINUE                                                          S0003600
    7 CONTINUE                                                          S0003700
C                                                                       S0003800
      IF(NP.NE.2) GO TO 1                                               S0003900
      DO 2 I=1,3                                                        S0004000
    2 DIF(I)=S(I,1,NPH)-S(I,1,NPL)                                      S0004100
      CALL DOTF(W,DIF,DIF)                                              S0004200
      IF(W.GT.VSMAL) GO TO 1                                            S0004300
C-------  NULL ARC INPUT CONFIRMED, PROCESS CURVE DEFINITION HERE       S0004400
C                                                                       S0004500
C-------  SET UP COONS CANON FORM FOR NULL CURVE                        S0004600
      DO 3 I=1,3                                                        S0004700
      C(1,I)=S(I,1,NPL)                                                 S0004800
      C(2,I)=S(I,1,NPH)                                                 S0004900
      C(3,I)=ZERO                                                       S0005000
      C(4,I)=ZERO                                                       S0005100
    3 CONTINUE                                                          S0005200
      C(1,4)=ONE                                                        S0005300
      C(2,4)=ONE                                                        S0005400
      C(3,4)=ZERO                                                       S0005500
      C(4,4)=ZERO                                                       S0005600
C-------  NOW MOVE ALL VECTOR CONSTRAINTS                               S0005700
      DO 4 I=1,4                                                        S0005800
      S(I,5,NPL-1)=S(I,3,NPL)                                           S0005900
      S(I,6,NPL-1)=S(I,4,NPL)                                           S0006000
      S(I,5,NPL)=S(I,3,NPH)                                             S0006100
      S(I,6,NPL)=S(I,4,NPH)                                             S0006200
      DO 5 J=1,4                                                        S0006300
      S(I,J,NPL)=C(I,J)                                                 S0006400
    5 CONTINUE                                                          S0006500
    4 CONTINUE                                                          S0006600
C                                                                       S0006700
C-------  REDUCE POINT BLOCK COUNT BY 1 AND QUIT                        S0006800
      S(4,1,1)=S(4,1,1)-ONE                                             S0006900
      GO TO 1000                                                        S0007000
C                                                                       S0007100
    1 CONTINUE                                                          S0007200
C------ ELIMINATE ALL SMALL CONSTRAINT VECTORS BEFORE SSPLIN            S0007300
      DO 12 I=NPL,NPH                                                   S0007400
      IF(S(4,3,I).LT.SMAL2) GO TO 12                                    S0007500
      CALL DOTF(W,S(1,3,I),S(1,3,I))                                    S0007600
      IF(W.GT.VSMAL) GO TO 12                                           S0007700
C------ CONSTRAINT VECTOR IS SMALL, SO ELIMINATE IT                     S0007800
      DO 13 L=1,4                                                       S0007900
   13 S(L,3,I)=ZERO                                                     S0008000
   12 CONTINUE                                                          S0008100
C                                                                       S0008200
C------ CALL SSPLIN FOR SMOOTHING AND GENERATION OF TANGENTS,           S0008300
C------ DISCRIMINATION OF INPUT ERRORS AND GENERATION OF TANGENT        S0008400
C------ DIRECTIONS AT EACH POINT IN THE CASE OF A SPLINE DEFINITION     S0008500
C                                                                       S0008600
      CALL SSPLIN(S,IRR)                                                S0008700
      IF(IRR.NE.0) GO TO 998                                            S0008800
C------ JUMP TO LABEL 700 FOR SPLINE PROCESSING                         S0008900
C                                                                       S0009000
C------ THE CASE OF A CURSEG DEFINITION                                 S0009100
C------ TEST FOR COPLANARITY OF THE NUMERICAL INPUT                     S0009200
C------ BEGIN BY CONSTRUCTING THE FIRST CHORD VECTOR                    S0009300
      NHD=S(2,1,1)                                                      S0009400
      NPL=NHD+1                                                         S0009500
      NP=S(4,1,1)                                                       S0009600
      NPH=NHD+NP                                                        S0009700
      NPLP=NPL+1                                                        S0009800
      NPHM=NPH-1                                                        S0009900
      IF (S(3,1,1) .NE. THREE) GO TO 700                                S0010000
      DO 10 L=1,3                                                       S0010100
   10 VA(L)=S(L,1,NPLP)-S(L,1,NPL)                                      S0010200
      CALL SNORM(VA,VA,IRRR)                                            S0010300
      IF (NP .EQ. 2) GO TO 25                                           S0010400
C------ CONSTRUCT A SECOND NON PARALLEL CHORD VECTOR                    S0010500
      DO 20 I=NPLP,NPHM                                                 S0010600
      DO 30 L=1,3                                                       S0010700
      VB(L)=S(L,1,I+1)-S(L,1,NPL)                                       S0010800
   30 CONTINUE                                                          S0010900
      CALL CROSS(VB,VA,VN)                                              S0011000
      D=DSQRT(VN(1)**2+VN(2)**2+VN(3)**2)                               S0011100
      IF(D.GT.SMAL1) GO TO 50                                           S0011200
   20 CONTINUE                                                          S0011300
C------ THE POINTS ARE COLINEAR SO FIND A NONPARALLEL TANGENT           S0011400
   25 CONTINUE                                                          S0011500
      DO 40 I=NPL,NPH                                                   S0011600
      KK=0                                                              S0011700
      IF(S(4,4,I).NE.ZERO) KK=4                                         S0011800
      IF(S(4,2,I).NE.ZERO) KK=2                                         S0011900
      IF(KK.EQ.0) GO TO 40                                              S0012000
      IF(I.EQ.NPH)GO TO 42                                              S0012100
      CALL CROSS(VA,S(1,KK,I),VN)                                       S0012200
      GO TO 45                                                          S0012300
   42 CALL CROSS(S(1,KK,I),VA,VN)                                       S0012400
   45 D=DSQRT(VN(1)**2+VN(2)**2+VN(3)**2)                               S0012500
      IF(D.GT.SMAL1) GO TO 50                                           S0012600
   40 CONTINUE                                                          S0012700
C------ THERE IS NO UNIQUE NORMAL, CONDITIONS INDICATE A STRAIGHT LINE  S0012800
      GO TO 200                                                         S0012900
C                                                                       S0013000
C------ VN IS THE POTENTIAL NORMAL TO THE BASE PLANE                    S0013100
   50 CALL SNORM(VN,VN,IRRR)                                            S0013200
C------ NOW CHECK ALL INPUT POINTS AND VECTORS TO SEE IF THEY           S0013300
C------ DO LIE IN THE BASE PLANE                                        S0013400
      DO 100 I=NPLP,NPH                                                 S0013500
      DO 110 L=1,3                                                      S0013600
  110 DIF(L)=S(L,1,I)-S(L,1,NPL)                                        S0013700
      CALL SNORM(DIF,DIF,IRRR)                                          S0013800
      DOT=DIF(1)*VN(1)+DIF(2)*VN(2)+DIF(3)*VN(3)                        S0013900
C------ NON COPLANAR POINTS                                             S0014000
      IRR=5751                                                          S0014100
      IF(DABS(DOT).GT.SMAL2) GO TO 998                                  S0014200
  100 CONTINUE                                                          S0014300
C------ NOW CHECK FOR NON COPLANAR TANGENTS                             S0014400
C------ NT GIVES TOTAL NUMBER OF TANGENT CONSTRAINTS                    S0014500
      IRR=5752                                                          S0014600
      NT=0                                                              S0014700
      DO 120 I=NPL,NPH                                                  S0014800
      IF(S(4,2,I).EQ.ZERO) GO TO 120                                    S0014900
      NT=NT+1                                                           S0015000
      DOT=VN(1)*S(1,2,I)+VN(2)*S(2,2,I)+VN(3)*S(3,2,I)                  S0015100
      IF(DABS(DOT).GT.SMAL2) GO TO 998                                  S0015200
  120 CONTINUE                                                          S0015300
      IRR=5753                                                          S0015400
      IF(NP+NT.GT.5) GO TO 998                                          S0015500
C------ ERROR IF MORE THAN 5 IMPOSED CONSTRAINTS                        S0015600
      GO TO 300                                                         S0015700
C------ INPUT DOES LIE IN A PLANE                                       S0015800
C                                                                       S0015900
C------ LINEAR CASE                                                     S0016000
  200 CONTINUE                                                          S0016100
      DO 210 K=1,2                                                      S0016200
      I=NPL                                                             S0016300
      IF(K.EQ.2) I=NPH                                                  S0016400
      DO 210 L=1,3                                                      S0016500
      C(K,L)=S(L,1,I)                                                   S0016600
  210 C(K+2,L)=S(L,1,NPH)-S(L,1,NPL)                                    S0016700
      C(1,4)=ONE                                                        S0016800
      C(2,4)=ONE                                                        S0016900
      C(3,4)=ZERO                                                       S0017000
      C(4,4)=ZERO                                                       S0017100
      GO TO 604                                                         S0017200
C                                                                       S0017300
C------ NON-LINEAR CASES; CONSTRUCT NEW COORDINATE SYSTEM               S0017400
  300 CONTINUE                                                          S0017500
      DO 305 I=1,3                                                      S0017600
  305 VA(I)=DIF(I)                                                      S0017700
      CALL CROSS(VN,VA,VB)                                              S0017800
      CALL SNORM(VB,VB,IRR)                                             S0017900
C------ VA,VB,VN ARE NEW AXES CENTRED AT FIRST POINT                    S0018000
C------ R IS RATIONAL TRANSFORMATION MATRIX                             S0018100
      DO 310 I=1,3                                                      S0018200
  310 R(I,4)=0.0                                                        S0018300
      R(4,4)=1.0                                                        S0018400
      DO 320 J=1,3                                                      S0018500
      R(1,J)=VA(J)                                                      S0018600
      R(2,J)=VB(J)                                                      S0018700
      R(3,J)=VN(J)                                                      S0018800
  320 R(4,J)=S(J,1,NPL)                                                 S0018900
C------ NEW COORDINATES STORED IN ARRAYS X,Y,TANGENTS IN XT,YT          S0019000
      NPN1=NP-1                                                         S0019050
      DO 340 I=1,NPN1                                                   S0019100
      SUMX=0.0                                                          S0019200
      SUMY=0.0                                                          S0019300
      DO 330 J=1,3                                                      S0019400
      SUMX=SUMX+(S(J,1,NPL+I)-S(J,1,NPL))*VA(J)                         S0019500
  330 SUMY=SUMY+(S(J,1,NPL+I)-S(J,1,NPL))*VB(J)                         S0019600
      X(I+1)=SUMX                                                       S0019700
  340 Y(I+1)=SUMY                                                       S0019800
      DO 350 I=1,NP                                                     S0019900
      J=NPL+I-1                                                         S0020000
      IF(S(4,2,J).EQ.ZERO) GO TO 350                                    S0020100
      XT(I)=S(1,2,J)*VA(1)+S(2,2,J)*VA(2)+S(3,2,J)*VA(3)                S0020200
      YT(I)=S(1,2,J)*VB(1)+S(2,2,J)*VB(2)+S(3,2,J)*VB(3)                S0020300
  350 CONTINUE                                                          S0020400
      X(1)=0.0                                                          S0020500
      Y(1)=0.0                                                          S0020600
C                                                                       S0020700
C------ CHECK CONVEXITY OF POINTS AND CONDITIONS DEFINED                S0020800
      IRR=5770                                                          S0020900
      IF(NP.EQ.2) GO TO 361                                             S0021000
      NPN1=NP-1                                                         S0021050
      DO 360 I=2,NPN1                                                   S0021100
      D=(Y(I)-Y(I-1))*(X(I+1)-X(I-1))-(X(I)-X(I-1))*(Y(I+1)-Y(I-1))     S0021200
      IF(D.LE.SMAL1) GO TO 998                                          S0021300
  360 CONTINUE                                                          S0021400
  361 CONTINUE                                                          S0021450
C                                                                       S0021500
      IF(NT.EQ.0) GO TO 372                                             S0021600
      DO 371 I=1,NP                                                     S0021650
      IF(S(4,2,NPL+I-1).EQ.ZERO) GO TO 371                              S0021700
      DO 370 J=1,NP                                                     S0021800
      IF(J.EQ.I) GO TO 370                                              S0021900
      DT=(X(J)-X(I))*YT(I)-(Y(J)-Y(I))*XT(I)                            S0022000
      IF(DT.LE.SMAL1) GO TO 998                                         S0022100
  370 CONTINUE                                                          S0022200
  371 CONTINUE                                                          S0022250
  372 CONTINUE                                                          S0022275
C                                                                       S0022300
C------ FIT CONIC X*X+B*Y*Y+C0*X*Y+D*X+E*Y=0 TO DATA                    S0022400
      D=-X(NP)                                                          S0022500
      IRR=5772                                                          S0022600
      IF(NP+NT.EQ.4) GO TO 400                                          S0022700
      IF(NP+NT.EQ.5) GO TO 500                                          S0022800
C------ 3 CONDITIONS DEFINE UNIQUE CIRCULAR ARC                         S0022900
      IF(NT.EQ.0) GO TO 381                                             S0023000
      DO 380 I=1,NP                                                     S0023100
      IF(S(4,2,NPL+I-1).EQ.ZERO) GO TO 380                              S0023200
      E=-(2.0*X(I)*XT(I)+2.0*Y(I)*YT(I)+D*XT(I))/YT(I)                  S0023300
  380 CONTINUE                                                          S0023400
  381 CONTINUE                                                          S0023450
      IF(NP.NE.3) GO TO 390                                             S0023500
      E=-(X(2)*X(2)+Y(2)*Y(2)+D*X(2))/Y(2)                              S0023600
  390 CONTINUE                                                          S0023700
C                                                                       S0023800
C------ GENERATE CANONICAL FORM MATRIX CL                               S0023900
      A0=(DSQRT(D*D+E*E)-E)/DABS(D)                                     S0024000
      A2=A0*A0                                                          S0024100
      DO 391 I=1,4                                                      S0024200
      DO 391 J=1,4                                                      S0024300
  391 CL(I,J)=0.0                                                       S0024400
      CL(1,4)=A2+1.0                                                    S0024500
      CL(2,1)=-D*(A2+1.0)                                               S0024600
      CL(2,4)=A2+1.0                                                    S0024700
      CL(3,1)=-D*(1.0-A2)                                               S0024800
      CL(3,2)=-2.0*A0*D                                                 S0024900
      CL(3,4)=-4.0*A2                                                   S0025000
      CL(4,1)=-D*(1.0+3.0*A2)                                           S0025100
      CL(4,2)=2.0*A0*D                                                  S0025200
      CL(4,4)=4.0*A2                                                    S0025300
      GO TO 600                                                         S0025400
C------ FOUR CONDITIONS,CURVE IS ELLIPSE OR PARABOLA                    S0025500
  400 CONTINUE                                                          S0025600
      IF(NT.NE.2) GO TO 410                                             S0025700
      E=-D*XT(1)/YT(1)                                                  S0025800
      C0=-(XT(2)/YT(2)+XT(1)/YT(1))                                     S0025900
C------ MINIMUM ECCENTRICITY ELLIPSE HAS B=C0*C0/2+1, PARABOLA B=C0*C0/4S0026000
      B=1.0+C0*C0/2.0                                                   S0026100
      GO TO 550                                                         S0026200
  410 IF(NT.NE.1) GO TO 425                                             S0026300
      DO 420 I=1,NP                                                     S0026400
      IF(S(4,2,NPL+I-1).EQ.ZERO) GO TO 420                              S0026500
C------ FORM QUADRATIC A2*C0*C0+A1*C0+A0=0 FOR C,TRY B=1+C0*C0/2 FIRST  S0026600
      A2=Y(2)*YT(I)*(Y(I)-0.5*Y(2))                                     S0026700
      A1=Y(2)*(X(I)*YT(I)+Y(I)*XT(I)-X(2)*YT(I))                        S0026800
      A0=XT(I)*Y(2)*(2.0*X(I)+D)-X(2)*YT(I)*(X(2)+D)+2.0*A2             S0026900
  420 CONTINUE                                                          S0027000
      GO TO 430                                                         S0027100
  425 A2=Y(2)*Y(3)*(Y(2)-Y(3))/2.0                                      S0027200
C------ CASE OF 4 DEFINED POINTS                                        S0027300
      A1=Y(2)*Y(3)*(X(2)-X(3))                                          S0027400
      A0=X(2)*Y(3)*(X(2)+D)-X(3)*Y(2)*(X(3)+D)+2.0*A2                   S0027500
  430 IF(DABS(A2).LE.SMAL1) GO TO 450                                   S0027600
      DISC=A1*A1-4.0*A2*A0                                              S0027700
      IF(DISC.LT.ZERO) GO TO 460                                        S0027800
      IF(DISC.GT.SMAL1) GO TO 435                                       S0027900
      C0=-A1/(2.0*A2)                                                   S0028000
      GO TO 455                                                         S0028100
  435 DO 440 K=1,3,2                                                    S0028200
      C0=(-A1+(K-2)*DSQRT(DISC))/(2.0*A2)                               S0028300
      B=1.0+C0*C0/2.0                                                   S0028400
      E=(X(2)*X(2)+B*Y(2)*Y(2)+C0*X(2)*Y(2)+D*X(2))/(-Y(2))             S0028500
      IF(D*E.LT.ZERO.AND.D*(E-C0*D).LT.ZERO) GO TO 550                  S0028600
  440 CONTINUE                                                          S0028700
      GO TO 460                                                         S0028800
  450 C0=-A0/A1                                                         S0028900
C------ EQUAL ROOTS OR LINEAR EQUATION FOR C                            S0029000
  455 B=1.0+C0*C0/2.0                                                   S0029100
      E=(X(2)*X(2)+B*Y(2)*Y(2)+C0*X(2)*Y(2)+D*X(2))/(-Y(2))             S0029200
      IF(D*E.LT.ZERO.AND.D*(E-C0*D).LT.ZERO) GO TO 550                  S0029300
  460 A2=A2/2.0                                                         S0029400
C------ PARABOLIC CASE                                                  S0029500
      A0=A0-4.0*A2                                                      S0029600
      IF(DABS(A2).LE.SMAL1) GO TO 480                                   S0029700
      DISC=A1*A1-4.0*A0*A2                                              S0029800
      IF(DISC.LT.0.0) GO TO 998                                         S0029900
      IF(DISC.GT.SMAL1) GO TO 465                                       S0030000
      C0=-A1/(2.0*A2)                                                   S0030100
      GO TO 485                                                         S0030200
  465 DO 470 K=1,3,2                                                    S0030300
      C0=(-A1+(K-2)*DSQRT(DISC))/(2.0*A2)                               S0030400
      B=C0*C0/4.0                                                       S0030500
      E=(X(2)*X(2)+B*Y(2)*Y(2)+C0*X(2)*Y(2)+D*X(2))/(-Y(2))             S0030600
      IF(D*E.LT.ZERO.AND.D*(E-C0*D).LT.ZERO) GO TO 550                  S0030700
  470 CONTINUE                                                          S0030800
      GO TO 998                                                         S0030900
C------ NO SATISFACTORY CONIC FOUND                                     S0031000
  480 C0=-A0/A1                                                         S0031100
C------ EQUAL ROOTS OR LINEAR EQUATIONS FOR C                           S0031200
  485 B=C0*C0/4.0                                                       S0031300
      E=(X(2)*X(2)+B*Y(2)*Y(2)+C0*X(2)*Y(2)+D*X(2))/(-Y(2))             S0031400
      IF(D*E.LT.ZERO.AND.D*(E-C0*D).LT.ZERO) GO TO 550                  S0031500
      GO TO 998                                                         S0031600
  500 CONTINUE                                                          S0031700
C                                                                       S0031800
C------ UNIQUE CONIC DEFINED BY 5 CONDITIONS;                           S0031900
C------ SET UP EQUATIONS FOR COEFFICIENTS                               S0032000
      NPN2=NP-2                                                         S0032050
      DO 510 I=1,NPN2                                                   S0032100
      J=I+1                                                             S0032200
      A(I,1)=Y(J)*Y(J)                                                  S0032300
      A(I,2)=X(J)*Y(J)                                                  S0032400
      A(I,3)=Y(J)                                                       S0032500
  510 VA(I)=-(X(J)+D)*X(J)                                              S0032600
      IF(NT.EQ.0) GO TO 530                                             S0032700
      I=NP-2                                                            S0032800
      DO 520 J=1,NP                                                     S0032900
      IF(S(4,2,NPL+J-1).EQ.ZERO) GO TO 520                              S0033000
      I=I+1                                                             S0033100
      A(I,1)=2.0*Y(J)*YT(J)                                             S0033200
      A(I,2)=Y(J)*XT(J)+X(J)*YT(J)                                      S0033300
      A(I,3)=YT(J)                                                      S0033400
      VA(I)=-(2.0*X(J)+D)*XT(J)                                         S0033500
  520 CONTINUE                                                          S0033600
C------ SOLVE LINEAR EQUATIONS                                          S0033700
  530 CALL GELG(VA,A,SMAL1,3,1,IRR)                                     S0033800
      IF(IRR.EQ.0) GO TO 540                                            S0033900
      IRR=5772                                                          S0034000
      GO TO 998                                                         S0034100
  540 B=VA(1)                                                           S0034200
      C0=VA(2)                                                          S0034300
      E=VA(3)                                                           S0034400
C                                                                       S0034500
C------ COEFFICIENTS OF CONIC HAVE BEEN DETERMINED,FIND MID POINT OF    S0034600
C------ ARC (XM,YM) AND TANGENT INTERSECTION (XI,YI)                    S0034700
  550 IRR=5760                                                          S0034800
      XM=-0.5*D                                                         S0034900
      IF(DABS(B).GT.SMAL2) GO TO 560                                    S0035000
      IF(C0.LT.SMAL2) GO TO 555                                         S0035100
      IF(DABS(0.5+E/C0).LT.0.5) GO TO 998                               S0035200
C------ DISCONTINUOUS HYPERBOLIC CASES REJECTED                         S0035300
  555 YM=XM*XM/(E-C0*XM)                                                S0035400
      GO TO 570                                                         S0035500
  560 BB=E-0.5*C0*D                                                     S0035600
      DISC=BB*BB+B*D*D                                                  S0035700
      IF(DISC.LT.0.0) GO TO 998                                         S0035800
      YM=(-BB+DSQRT(DISC))/(2.0*B)                                      S0035900
  570 DENOM=2.0*E-C0*D                                                  S0036000
      IF(DABS(DENOM).LE.SMAL1) GO TO 998                                S0036100
C------ PARALLEL TANGENTS                                               S0036200
      XI=-D*E/DENOM                                                     S0036300
      YI=D*D/DENOM                                                      S0036400
      IF(YI*YM.LT.ZERO) GO TO 998                                       S0036500
C------ POINTS ON OPPOSITE SIDES OF CHORD                               S0036600
      CALL RATCON(-D,XM,YM,XI,YI,CL)                                    S0036700
C                                                                       S0036800
C------ NOW REVERSE THE COORDINATE TRANSFORMATION                       S0036900
  600 CNORM=0.0                                                         S0037000
      DO 602 I=1,4                                                      S0037100
      DO 602 J=1,4                                                      S0037200
      SUM=0.0                                                           S0037300
      DO 601 K=1,4                                                      S0037400
  601 SUM=SUM+CL(I,K)*R(K,J)                                            S0037500
      IF(DABS(SUM).GT.CNORM) CNORM=SUM                                  S0037600
  602 C(I,J)=SUM                                                        S0037700
C------ NORMALISE THE C MATRIX                                          S0037800
      DO 603 I=1,4                                                      S0037900
      DO 603 J=1,4                                                      S0038000
  603 C(I,J)=C(I,J)*10.0/CNORM                                          S0038100
C------ BUILD THE NEW DATA BASE CONSISTING OF A SINGLE RATIONAL         S0038200
C------ CUBIC CURVE WITH POSSIBLE CRRSPL AND NORMAL CONSTRAINTS         S0038300
C------ AT CURVE ENDS                                                   S0038400
C------ SHIFT THE FIRST AND LAST CONSTRAINT VECTORS INTO APPROPRIATE    S0038500
C------ PARTS OF THE FINAL ARRAY                                        S0038600
  604 NDIFF=NPH-NPL                                                     S0038700
      DO 610 I=NPL,NPH,NDIFF                                            S0038800
      K=NHD                                                             S0038900
      IF(I.EQ.NPH) K=NHD+1                                              S0039000
      DO 610 J=3,4                                                      S0039100
      JJ=J+2                                                            S0039200
      DO 620 L=1,4                                                      S0039300
  620 S(L,JJ,K)=S(L,J,I)                                                S0039400
  610 CONTINUE                                                          S0039500
C------ NOW LOAD THE RATIONAL PARAMETRIC CUBIC CANON FORM               S0039600
C------ INTO THE DATA BASE                                              S0039700
      DO 630 K=1,4                                                      S0039800
      DO 630 L=1,4                                                      S0039900
  630 S(L,K,NPL)=C(L,K)                                                 S0040000
C------ ZERO OUT THE REST OF THE ARRAY                                  S0040100
      DO 640 I=NPLP,NPH                                                 S0040200
      DO 640 K=1,6                                                      S0040300
      DO 640 L=1,4                                                      S0040400
  640 S(L,K,I)=ZERO                                                     S0040500
      S(4,1,1)=ONE                                                      S0040600
      GO TO 1000                                                        S0040700
C------ THE INPUT HERE IS A PARTIALLY COMPLETED SPLINE DATA BASE        S0040800
C------ IN THIS SECTION FINAL LENGTHS ARE ASSIGNED TO TANGENT VECTORS   S0040900
C------ COONS MATRICES ARE CONSTRUCTED FOR EACH SEGMENT, AND THE        S0041000
C------ COMPLETE DATA BASE IS CONSTRUCTED                               S0041100
C                                                                       S0041200
  700 CONTINUE                                                          S0041300
C------ FIRST SHIFT THE LOCATION OF ALL CROSS SPLINE AND NORMAL         S0041400
C------ CONSTRAINTS                                                     S0041500
      DO 710 I=NPL,NPH                                                  S0041600
      DO 710 K=3,4                                                      S0041700
      DO 710 L=1,4                                                      S0041800
      S(L,K+2,I-1)=S(L,K,I)                                             S0041900
  710 CONTINUE                                                          S0042000
C------ NOW GENERATE LENGTHS FOR VECTORS AND THEN COONS MATRICES        S0042100
C                                                                       S0042200
      DO 720 I=NPL,NPHM                                                 S0042300
C-------  THREE LOGIC LEVELS FOR TANGENT VECTOR LENGTHS ARE AVAILABLE   S0042400
C-------  ILEVEL=2, DEFAULT, MINIMIZES DDR(0)**2+DDR(1)**2              S0042500
      ILEVEL=2                                                          S0042600
C-------  ILEVEL=1 USE CHORD LENGTH FOR TANGENT VECTORS                 S0042700
C-------  ILEVEL=3 USED LENGTHS WHICH MINIMIZE TENSION                  S0042800
      IF(IBUG.EQ.9) ILEVEL=1                                            S0042900
      IF(IBUG.EQ.10) ILEVEL=3                                           S0043000
C-------  CTOLR SETS THE TOLERANCE LEVEL FOR TERMINATING THE            S0043100
C-------  ITERATIVE PROCESS OF ADJUSTING TANGENT LENGTHS FOR            S0043200
C-------  THE PURPOSE OF REDUCING CURVE TENSION.                        S0043300
      CTOLR=0.005                                                       S0043400
C-------  NUMINT IS THE NUMBER OF INTERVALS USED FOR APPROXIMATING      S0043500
C-------  TENSION.  VALUE 5 IS ECONOMIC BUT MORE MAY PRODUCE            S0043600
C-------  MORE ACCURATE RESULTS, BUT WITH GREATER RUN TIMES             S0043700
      NUMINT=5                                                          S0043800
C-------  MXCT IS AN UPPER LIMIT ON THE NUMBER OF ITERATIONS            S0043900
C-------  THIS IS TO LIMIT TOTAL CPU TIME FOR SPLINING.                 S0044000
      MXCT=10                                                           S0044100
C-------  ALPH AND BETA ARE THE DESIRED LENGTHS OF TANGENT VECTORS      S0044200
C                                                                       S0044300
      CALL CRVLEN(S(1,1,I),S(1,1,I+1),S(1,2,I),S(1,2,I+1),              S0044400
     X            ALPH,BETA,NUMINT,MXCT,CTOLR,ILEVEL)                   S0044500
C                                                                       S0044600
C------ THIS ASSIGNMENT OF LENGTHS IS BASED ON A MINIMUM VALUE          S0044700
C------ FOR THE INTEGRAL OF THE SECOND DERIVATIVE SQUARED               S0044800
      DO 750 L=1,3                                                      S0044900
      C(1,L)=S(L,1,I)                                                   S0045000
      C(2,L)=S(L,1,I+1)                                                 S0045100
      C(3,L)=ALPH*S(L,2,I)                                              S0045200
      C(4,L)=BETA*S(L,2,I+1)                                            S0045300
  750 CONTINUE                                                          S0045400
      C(1,4)=ONE                                                        S0045500
      C(2,4)=ONE                                                        S0045600
      C(3,4)=ZERO                                                       S0045700
      C(4,4)=ZERO                                                       S0045800
C------ NOW LOAD THE COONS MATRIX INTO THE S ARRAY                      S0045900
      DO 760 K=1,4                                                      S0046000
      DO 760 L=1,4                                                      S0046100
  760 S(L,K,I)=C(L,K)                                                   S0046200
  720 CONTINUE                                                          S0046300
C                                                                       S0046400
C------ ZERO OUT THE LAST BLOCK AND RESET THE POINT BLOCK NUMBER        S0046500
      S(4,1,1)=NP-1                                                     S0046600
      DO 770 K=1,6                                                      S0046700
      DO 770 L=1,4                                                      S0046800
  770 S(L,K,NPH)=ZERO                                                   S0046900
      GO TO 1000                                                        S0047000
 1000 CONTINUE                                                          S0047100
      IRR=0                                                             S0047200
  998 CONTINUE                                                          S0047300
C                                                                       S0047400
      IF(IBUG.NE.11) GO TO 917                                          S0047500
      CALL BAD(-1,0,' ',0)                                              S0047600
      BADMSG=' EXIT FROM SCURV'                                         S0047610
      CALL CPRINT(BADMSG)                                               S0047620
      JLIM=S(4,1,1)+ONE                                                 S0047700
      DO 918 J=1,JLIM                                                   S0047800
      DO 918 I=1,6                                                      S0047900
      CALL BAD(-4,1,'SC  ',S(1,I,J))                                    S0048000
  918 CONTINUE                                                          S0048100
  917 CONTINUE                                                          S0048200
C                                                                       S0048300
      RETURN                                                            S0048400
      END                                                               S0048500
**** SOURCE FILE : M0000658.V02   ***
*
      SUBROUTINE SMMULT(L,M,N,KS,A,B,C)                                 00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C--- SCULPTURED SURFACE ROUTINE FOR MATRIX MULTIPLY                     00000300
C---  A IS AN INPUT MATRIX L ROWS BY M COLUMNS                          00000400
C--- B IS AN INPUT MATRIX M ROWS X N COLUMNS                            00000500
C--- KS DETERMINES WHERE THE OUTPUT IS LOADED                           00000600
C--- KS =1 A  KS=2 B  KS=3 C                                            00000700
C--- NO INPUT MATRIX IS ALTERED UNLESS REQUESTED                        00000800
      DIMENSION A(*),B(*),C(*)                                          00000900
      DIMENSION D(16)                                                   00001000
      KN(I,J,KK)=I+(J-1)*KK                                             00001100
      DO 10 JC=1,N                                                      00001200
      DO 10 IR=1,L                                                      00001300
      KLOC=KN(IR,JC,L)                                                  00001400
      D(KLOC)=0.0                                                       00001500
      DO 20 KK=1,M                                                      00001600
      KA=KN(IR,KK,L)                                                    00001700
      KB=KN(KK,JC,M)                                                    00001800
      D(KLOC)=D(KLOC)+A(KA)*B(KB)                                       00001900
   20 CONTINUE                                                          00002000
   10 CONTINUE                                                          00002100
      MSIZE=L*N                                                         00002200
      GO TO (100,200,300),KS                                            00002300
  100 CONTINUE                                                          00002400
      DO 110 K=1,MSIZE                                                  00002500
  110 A(K)=D(K)                                                         00002600
      GO TO 999                                                         00002700
  200 CONTINUE                                                          00002800
      DO 210 K=1,MSIZE                                                  00002900
  210 B(K)=D(K)                                                         00003000
      GO TO 999                                                         00003100
  300 CONTINUE                                                          00003200
      DO 310 K=1,MSIZE                                                  00003300
  310 C(K)=D(K)                                                         00003400
  999 RETURN                                                            00003500
      END                                                               00003600
**** SOURCE FILE : M0000659.V02   ***
*
C                                                                       00000010
      SUBROUTINE SMOOTH(Q,RL,A,TV,CB,NIN,IDC)                           00000020
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000040
C----************* SMTH1 *********************************'71/4/23  N.K.00000060
C---- THIS ROUTINE CALCULATES SMOOTHED POINTS AND TANGENT VECTORS AT    00000080
C---- THOSE POINTS , AND INPUT IS AN ARRAY OF POINT VECTORS.            00000100
C---- INPUT --- N = NUMBER OF POINTS                                    00000120
C----           Q = AN ARRAY OF INPUT POINT VECTORS                     00000140
C----           RL = AN ARRAY OF RELAXATION FACTORS ASSOCIATED TO EACH  00000160
C----                INPUT POINTS   ( RL(I)=0. MEANS NO SMOOTHING       00000180
C----                                 TO THE I-TH POINT.)               00000200
C----           IDC = BOUNDARY CONDITION IDENTIFIER                     00000220
C----               =1   CLOSED CURVE                                   00000240
C----                =2   1-ST DERIVATIVE --- 1-ST DERIVATIVE           00000260
C----               =3   1-ST DERIVATIVE --- 2-ND DERIVATIVE            00000280
C----               =4   2-ND DERIVATIVE --- 1-ST DERIVATIVE            00000300
C----               =5   2-ND DERIVATIVE --- 2-ND DERIVATIVE            00000320
C----           TV = END CONDITION VECTORS INTERPRETED AS SPECIFIED BY  00000340
C----                IDC.                                               00000360
C---- OUTPUT--- A = AN ARRAY OF DISTANCE BETWEEN CONSECUTIVE OUTPUT     00000380
C----               POINTS  ( A(J)=DISTANCE BTW. J-TH AND (J-1)-TH PNT.)00000400
C----           CB = AN ARRAY OF 1-ST DERIVATIVES (NORMALIZED)          00000420
C----           IDC = ERROR INDICATOR                                   00000440
C----               =0   NO ERROR                                       00000460
C----               =-1   A DISTANCE BTW. TWO CONSECUTIVE INPUT POINTS  00000480
C----                     IS VANISHING                                  00000500
C----               = -2   IDC IS NOT SIGNIFICANT.                      00000520
C----               =-3   ERROR IN SOLVING SIMULTANEOUS EQUATION        00000540
C----               =-4   NUMBER OF INPUT POINTS IS LESS THAN 3.        00000560
C----               =-5   A DISTANCE BTW. TWO CONSECUTIVE OUTPUT POINTS 00000580
C----                     IS VANISHING.                                 00000600
C----               =-6   AN OUTPUT 1-ST DERIVATIVE IS VANISHING.       00000620
C----********* SUBSIDIARY --- GELG                                      00000640
C----*******************************************************************00000660
      DIMENSION Q(3,30),RL(30),A(30),TV(3,2),CV(3,30),CT(90),CM(900),   00000680
     1  CA(3,30),CB(3,30)                                               00000700
      DATA SMAL1,SMAL2,SMAL3/1.0D-7,1.0D-6,1.0D-14/                     00000720
      DATA ZERO,ONE/0.0D0,1.0D0/                                        00000740
C------ JG CONTROLS OUTPUT. JO IS OUTPUT FILE NUMBER.                   00000760
      JG=0                                                              00000780
      JO=6                                                              00000800
C------ INITIAL EXAMINATION TO DETERMINE IF CURVE IS CLOSED             00000801
      N=NIN                                                             00000802
      W=DSQRT((Q(1,1)-Q(1,N))**2+(Q(2,1)-Q(2,N))**2+(Q(3,1)-Q(3,N))**2) 00000803
      IF(W.GT.SMAL2) GO TO 3                                            00000804
C--- CLOSED CURVE CASE   END POINTS ASSUMED EQUAL                       00000805
      N=NIN-1                                                           00000806
      IDC=1                                                             00000807
    3 CONTINUE                                                          00000808
C------ CONVERT FROM A PART PROGRAMMER WEIGHT FACTOR(0.0 TO 1.0 WHERE   00000820
C------ 1.0 MEANS CERTAINTY FOR A POINT) TO A RELAXATION FACTOR ( INF   00000840
C------ TO 0.0 WHERE 0.0 IS CERTITUDE AND INFINITY IS COMPLETE RELAXA)  00000860
      DO 1517 I=1,NIN                                                   00000880
      AA=RL(I)                                                          00000900
      IF(AA.LT.SMAL1)  AA=SMAL1                                         00000920
      IF(AA.GT.ONE) AA=ONE                                              00000940
      RL(I)=ONE/AA-ONE                                                  00000960
 1517 CONTINUE                                                          00000980
      NN=N*N                                                            00001000
      N3=3*N                                                            00001020
C                                                                       00001040
C    ***DISTANCE BTW,CONSECUTIVE INPUT POINTS***                        00001060
C    ***NORMALIZED INCREMENTAL VECTORS***                               00001080
C    ***SINGULARITY IS CHECKED***                                       00001100
C                                                                       00001120
      IF(N.LT.3)  GO TO 1300                                            00001140
    1 DO  10   J=2,N                                                    00001160
      JJ=J-1                                                            00001180
      DO  11   I=1,3                                                    00001200
      CV(I,J)=Q(I,J)-Q(I,JJ)                                            00001220
   11 CONTINUE                                                          00001240
      A(J)= DSQRT(CV(1,J)**2+CV(2,J)**2+CV(3,J)**2)                     00001260
      IF(A(J).LT.SMAL1)   GO TO 1000                                    00001280
      DO  12   I=1,3                                                    00001300
      CV(I,J)=CV(I,J)/A(J)                                              00001320
   12 CONTINUE                                                          00001340
   10 CONTINUE                                                          00001360
      DO  13   I=1,3                                                    00001380
   13 CV(I,1)=Q(I,1)-Q(I,N)                                             00001400
      A(1)=DSQRT(CV(1,1)**2+CV(2,1)**2+CV(3,1)**2)                      00001420
      IF(A(1).LT.SMAL1)  GO TO 1000                                     00001440
      DO  14   I=1,3                                                    00001460
   14 CV(I,1)=CV(I,1)/A(1)                                              00001480
C                                                                       00001500
C    ***CONSTANT VECTORS FOR THE EQUATION OF CURVATURE***               00001520
C                                                                       00001540
      L1=N+1                                                            00001560
      DO  20   I=1,3                                                    00001580
      II=I*N-L1                                                         00001600
      DO  21   J=2,N                                                    00001620
      CT(II+J)=6.*(CV(I,J)-CV(I,J-1))                                   00001640
   21 CONTINUE                                                          00001660
      CT(II+L1)=6.*(CV(I,1)-CV(I,N))                                    00001680
   20 CONTINUE                                                          00001700
C                                                                       00001720
C    ***CLEAR THE MATRIX***                                             00001740
C                                                                       00001760
      DO  30   I=1,NN                                                   00001780
      CM(I)=0.                                                          00001800
   30 CONTINUE                                                          00001820
C                                                                       00001840
C    ***MATRIX ELEMENTS***                                              00001860
C                                                                       00001880
      CA(1,1)=6.*(RL(1)+RL(2))/A(2)**2                                  00001900
      CB(1,1)=6.*(RL(1)/A(2))/A(1)                                      00001920
      DO  31   I=1,N                                                    00001940
      II=I+1-(I/N)*N                                                    00001960
      J1=I+2-((I+1)/N)*N                                                00001980
      CA(1,II)=6.*(RL(II)+RL(J1))/A(J1)**2                              00002000
      CB(1,II)=6.*(RL(II)/A(J1))/A(II)                                  00002020
      CB(2,I)=A(II)-(CB(1,II)+CA(1,I)+CB(1,I))                          00002040
      CB(3,II)=2.*(A(J1)+A(II))+(CA(1,II)+CA(1,I)+2.*CB(1,II))          00002060
   31 CONTINUE                                                          00002080
C                                                                       00002100
C    ***SET PRIMARY MATRIX***                                           00002120
C                                                                       00002140
      L2=N+2                                                            00002160
      N2=2*N                                                            00002180
      DO  41   IJ=L1,N2                                                 00002200
      J=IJ-1-((IJ-2)/N)*N                                               00002220
      JJ=J+1-(J/N)*N                                                    00002240
      I=J*L1-N                                                          00002260
      IA=I+N-((I+N-1)/NN)*NN                                            00002280
      IB=I+2*N-((I+2*N)/NN)*NN                                          00002300
      IC=I+1-(J/N)*N                                                    00002320
      ID=I+2-((J+1)/N)*N                                                00002340
      CM(I)=CB(3,J)+CM(I)                                               00002360
      CM(IA)=CB(2,J)+CM(IA)                                             00002380
      CM(IB)=CB(1,JJ)+CM(IB)                                            00002400
      CM(IC)=CB(2,J)+CM(IC)                                             00002420
      CM(ID)=CB(1,JJ)+CM(ID)                                            00002440
   41 CONTINUE                                                          00002460
C                                                                       00002480
C    ***CLOSED CURVE***                                                 00002500
C                                                                       00002520
      IF(IDC.EQ.1)  GO TO 200                                           00002540
C                                                                       00002560
C    ***OPEN ENDS***                                                    00002580
C                                                                       00002600
      K1=N-1                                                            00002620
      CM(NN-N+1)=0.                                                     00002640
      CM(NN-N+2)=0.                                                     00002660
      CM(NN-N2+1)=0.                                                    00002680
      CM(N)=0.                                                          00002700
      CM(N2)=0.                                                         00002720
      CM(K1)=0.                                                         00002740
      CM(2)=A(2)-CA(1,1)-CB(1,2)                                        00002760
      IF(N.NE.3)  GO TO 60                                              00002780
      CM(8)=A(3)-(CA(1,2)+CB(1,2))                                      00002800
      GO TO 61                                                          00002820
   60 CM(NN-1)=A(N)-(CA(1,K1)+CB(1,K1))                                 00002840
C                                                                       00002860
C    *** FIRST END BY CURVATURE***                                      00002880
C                                                                       00002900
   61 IF(IDC.LT.4)  GO TO 110                                           00002920
      DO  42   I=1,3                                                    00002940
      CT(I*N-K1)=TV(I,1)                                                00002960
   42 CONTINUE                                                          00002980
      CM(1)=1.                                                          00003000
      CM(L1)=0.                                                         00003020
      CM(N2+1)=0.                                                       00003040
C                                                                       00003060
C    ***LAST END BY TANGENT***                                          00003080
C                                                                       00003100
      IF(IDC.NE.4)  GO TO 120                                           00003120
  130 DO  43   I=1,3                                                    00003140
      CT(I*N)=6.*(CV(I,N)-TV(I,2))                                      00003160
   43 CONTINUE                                                          00003180
      CM(NN-N)=-A(N)+CB(1,K1)+CA(1,K1)                                  00003200
      CM(NN)=-2.*A(N)-CA(1,K1)                                          00003220
      CM(NN-N2)=-   CB(1,K1)                                            00003240
      GO TO 200                                                         00003260
C                                                                       00003280
C    ***LAST END BY CURVATURE***                                        00003300
C                                                                       00003320
  120 IF(IDC.NE.5)  GO TO 1100                                          00003340
  140 DO  44   I=1,3                                                    00003360
      CT(I*N)=TV(I,2)                                                   00003380
   44 CONTINUE                                                          00003400
      CM(NN)=1.                                                         00003420
      CM(NN-N)=0.                                                       00003440
      CM(NN-N2)=0.                                                      00003460
      GO TO 200                                                         00003480
C                                                                       00003500
C    ***FIRST END BY TANGENT***                                         00003520
C                                                                       00003540
  110 DO  45   I=1,3                                                    00003560
      CT(I*N-K1)=6.*(CV(I,2)-TV(I,1))                                   00003580
   45 CONTINUE                                                          00003600
      CM(1)=2.*A(2)+   CA(1,1)                                          00003620
      CM(L1)=A(2)-   (CA(1,1)+CB(1,2))                                  00003640
      CM(N2+1)=CB(1,2)                                                  00003660
      IF(IDC.EQ.2)   GO TO 130                                          00003680
      GO TO 140                                                         00003700
C                                                                       00003720
C    *** CALCULATION OF CURVATURE***                                    00003740
C                                                                       00003760
  200 EPS=SMAL3                                                         00003780
      NR=3                                                              00003800
      CALL GELG(CT,CM,EPS,N,NR,IER)                                     00003860
      IF(IER.NE.0)   GO TO 1200                                         00003880
      DO  50   I=1,3                                                    00003900
      II=I*N-N                                                          00003920
      DO  51   J=1,N                                                    00003940
      CV(I,J)=CT(II+J)                                                  00003960
   51 CONTINUE                                                          00003980
   50 CONTINUE                                                          00004000
C    ***CALCULATION OF CURVE SEGMENT COEFFICIENTS***                    00004120
C                                                                       00004140
      DO  55   I=1,3                                                    00004160
      DO  56   J=2,N                                                    00004180
      CA(I,J)=(CV(I,J)-CV(I,J-1))/A(J)                                  00004200
   56 CONTINUE                                                          00004220
      CA(I,1)=(CV(I,1)-CV(I,N))/A(1)                                    00004240
      K1=N-1                                                            00004260
      DO  57   J=2,K1                                                   00004280
      Q(I,J)=Q(I,J)-RL(J)*(CA(I,J+1)-CA(I,J))                           00004300
   57 CONTINUE                                                          00004320
      IF(IDC.EQ.1)  GO TO 250                                           00004340
      Q(I,1)=Q(I,1)-RL(1)*(CV(I,2)-CV(I,1))/A(2)                        00004360
      Q(I,N)=Q(I,N)+RL(N)*(CV(I,N)-CV(I,N-1))/A(N)                      00004380
      GO TO 55                                                          00004400
  250 Q(I,1)=Q(I,1)-RL(1)*(CA(I,2)-CA(I,1))                             00004420
      Q(I,N)=Q(I,N)-RL(N)*(CA(I,1)-CA(I,N))                             00004440
   55 CONTINUE                                                          00004460
      IDXX=0                                                            00004480
      DO  400   J=1,N                                                   00004500
      IF(RL(J).GT.SMAL2)   IDXX=IDXX+1                                  00004520
      IF(RL(J).GT.SMAL2)   RL(J)=0.                                     00004540
  400 CONTINUE                                                          00004560
      IF(IDXX.EQ.0)   GO TO 590                                         00004580
      GOTO 500                                                          00004600
  590 DO  510   J=2,N                                                   00004620
      DO  510   I=1,3                                                   00004640
      CA(I,J)=Q(I,J)-Q(I,J-1)                                           00004660
  510 CONTINUE                                                          00004680
      IF(IDC.NE.1)   GO TO 260                                          00004700
      DO  520   I=1,3                                                   00004720
  520 CA(I,1)=Q(I,1)-Q(I,N)                                             00004740
  260 DO  91   J=1,N                                                    00004760
      J1=J+1-(J/N)*N                                                    00004780
      DO  93   I=1,3                                                    00004800
      CB(I,J)=CA(I,J1)/A(J1)-A(J1)*(2.*CV(I,J)+CV(I,J1))/6.             00004820
   93 CONTINUE                                                          00004840
      A(J1)=0.                                                          00004860
      DO  92   I=1,3                                                    00004880
      A(J1)=CA(I,J1)**2+A(J1)                                           00004900
   92 CONTINUE                                                          00004920
      A(J1)=DSQRT(A(J1))                                                00004940
      IF(A(J1).GE.SMAL3)  GO TO 91                                      00004960
      IF(J.NE.N)  GO TO 1400                                            00004980
      IF(IDC.EQ.1)  GO TO 1400                                          00005000
      A(1)=99999.                                                       00005020
   91 CONTINUE                                                          00005040
      IF(IDC.EQ.1)   GO TO 511                                          00005060
      DO  94   I=1,3                                                    00005080
   94 CB(I,N)=CA(I,N)/A(N)+A(N)*(CV(I,N-1)+2.*CV(I,N))/6.               00005100
  511 CONTINUE                                                          00005120
      DO  300 J=1,N                                                     00005140
      TL=DSQRT(CB(1,J)*CB(1,J)+CB(2,J)*CB(2,J)+CB(3,J)*CB(3,J))         00005160
      IF(TL.LE.SMAL2)   GO TO 1500                                      00005180
      DO  310   I=1,3                                                   00005200
  310 CB(I,J)=CB(I,J)/TL                                                00005220
  300 CONTINUE                                                          00005240
      GO TO 500                                                         00005260
 1000 IDC=-1                                                            00005280
      GO TO 500                                                         00005300
 1100 IDC=-2                                                            00005320
      GO TO 500                                                         00005340
 1200 IDC=-3                                                            00005360
      GO TO 500                                                         00005380
 1300 IDC=-4                                                            00005400
      GO TO 500                                                         00005420
 1400 IDC=-5                                                            00005440
      GO TO 500                                                         00005460
 1500 IDC=-6                                                            00005480
  500 CONTINUE                                                          00005500
      IF(IDC.NE.1) RETURN                                               00005540
C------ FINAL ADJUSTMENT FOR CLOSED CURVE                               00005560
      DO 502 I=1,3                                                      00005580
      Q(I,NIN)=Q(I,1)                                                   00005600
      CB(I,NIN)=CB(I,1)                                                 00005620
  502 CONTINUE                                                          00005640
      A(NIN)=A(1)                                                       00005645
      IDC=2                                                             00005646
      RETURN                                                            00005660
      END                                                               00005780
**** SOURCE FILE : M0000660.V02   ***
*
      SUBROUTINE SNORM(A,B,IRR)                                         00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION A(*),B(*)                                               00000300
      IRR=1                                                             00000400
      W=DSQRT(A(1)*A(1)+A(2)*A(2)+A(3)*A(3))                            00000500
      IF(W.LT.1.0D-15) RETURN                                           00000600
      IRR=0                                                             00000700
      B(1)=A(1)/W                                                       00000800
      B(2)=A(2)/W                                                       00000900
      B(3)=A(3)/W                                                       00001000
      RETURN                                                            00001100
      END                                                               00001200
**** SOURCE FILE : M0002769.W01   ***
*
      SUBROUTINE SRFCOM(ISPRNT,IRR)                                     00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---     ISPRNT  IS INPUT AND CONTROLS PRINT VERIFICATION               00000300
C---     IRR IS OUTPUT AND IF NON ZERO INDICATES AN ERROR               00000400
C---     PURPOSE IS TO COMBINE A STRING OF SEPARATELY DEFINED SSURFS    00000500
C---     INTO A SINGLE NEW SSURF                                        00000600
C---     PART PROGRAM DATA ARRIVES IN BLANK COMMON(LOC 41 ON)           00000700
C---     IT IS FIRST TRANSFERRED TO LABELED COMMON.                     00000800
C---     SURFACES ARE THEN LOADED ONE BY ONE INTO BLANK COMMON          00000900
C---     STRIPPED OF THEIR TOPOLOGY TABLES, AND CONSOLIDATED INTO       00001000
C---     A SINGLE SURFACE IN BLANK COMMON.  THEN A PROCESS OF           00001100
C---     COMPARING EACH PATCH TO EVERY OTHER PATCH IS INVOKED TO        00001200
C---     BUILD A NEW TOPOLOGY TABLE FOR THE CONSOLIDATED                00001300
C---     SURFACE IN LABELED COMMON.  PRINT VERIFICATION FOLLOWS         00001400
C---     IF THE PRINT FLAG HAS BEEN TURNED ON AND AS A FINAL            00001500
C---     STEP THIS TOPOLOGY DATA IS CONSOLIDATED WITH THE               00001600
C---     NEW SURFACE.                                                   00001700
C                                                                       00001800
      INCLUDE 'DARRAY.INC'                                              00001900
C                                                                       00002000
      COMMON/MAXLDA/MAXLDA                                              00002100
      INCLUDE 'SSPAD.INC'                                               00002210
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00002300
C                                                                       00002410
      INCLUDE 'BLANKCOM.INC'                                            00002420
C                                                                       00002500
C     DUMMY ARRAY FOR BLANK-COMMON RESERVATION, MESH-TEST               00002520
      DIMENSION FDUMMY(2)                                               00002540
      DIMENSION SCH(4)                                                  00002580
C                                                                       00002600
      CHARACTER*8 WEIGHT,ALIMIT                                         00002610
      CHARACTER*8 TEST                                                  00002620
      LOGICAL CKDEF                                                     00002700
C                                                                       00003000
      DIMENSION SPV(32),B(64),IFLAG(4),ITOP(6,4)                        00003100
C                                                                       00003200
      DIMENSION U(4),V(4)                                               00003300
C                                                                       00003600
C---     INTEGER ARRAY KTOP USED FOR QUICK MANIPULATION OF TOPOLOGY DATA00003700
      DIMENSION KTOP(2*ISCN)                                            00003800
      EQUIVALENCE (KTOP(1),SCAN(1))                                     00003900
C                                                                       00004000
      DIMENSION ICP(2),JCP(2)                                           00004100
C                                                                       00004200
      DIMENSION IBPT(4,2)                                               00004300
C                                                                       00004500
      DIMENSION ICURV(4,2)                                              00004600
C                                                                       00004800
      DIMENSION NP(2)                                                   00004900
C                                                                       00005000
      DATA FDUMMY /2*0.D0/                                              00005010
      DATA WEIGHT,ALIMIT/'WEIGHT  ','LIMIT   '/                         00005020
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-14/                           00005030
      DATA U/0.0D0,1.0D0,0.0D0,1.0D0/                                   00005040
      DATA V/0.0D0,0.0D0,1.0D0,1.0D0/                                   00005050
      DATA IBPT/1,1,2,3,2,3,4,4/                                        00005060
      DATA ICURV/3,6,6,3,6,3,3,6/                                       00005070
      DATA SMALP/1.0D-4/                                                00005100
      DATA SMALV/1.0D-5/                                                00005200
C                                                                       00005300
C---     TRANSFER PART PROGRAM INPUT                                    00005400
      NSIZE=SSCAN(5)                                                    00005500
      DO 10 I=1,NSIZE                                                   00005600
      SCAN(I)=SSCAN(I)                                                  00005700
   10 CONTINUE                                                          00005800
C---     NEXT AVAILABLE SLOT IN SCAN                                    00005900
      ISCAN=NSIZE                                                       00006000
C---     NPAT IS TOTAL NUMBER OF PATCHES IN NEW SURFACE                 00006100
C---     NTOT IS TOTAL SIZE OF ALL SURFACES                             00006200
C---     NUMSUR IS TOTAL NUMBER OF INPUT SURFACES                       00006300
      NPAT=0                                                            00006400
      NTOT=0                                                            00006500
      NUMSUR=0                                                          00006600
C---     LOAD IN ALL SURFACES TO OBTAIN NPAT,NTOT,NUMSUR                00006700
      I=9                                                               00006800
  100 CONTINUE                                                          00006900
      CALL HOLFRM(SCAN(I+1),TEST,1,8,NWD)                               00006910
      IF(TEST.NE.WEIGHT.AND.TEST.NE.ALIMIT) GO TO 110                   00007000
      I=I+2                                                             00007100
      GO TO 120                                                         00007200
C                                                                       00007300
  110 CONTINUE                                                          00007400
C****    INPUT SURFACE WAS NOT DEFINED OR INCORRECT INPUT               00007500
      IRR=01                                                            00007600
      IF(CKDEF(SCAN(I))) GO TO 998                                      00007700
      MODE=2                                                            00007800
      CALL APT094(MODE,SCAN(I),SSCAN)                                   00007900
      IRR=02                                                            00008000
C****    INPUT SURFACE COULD NOT BE FETCHED FROM EXTERNAL STORAGE       00008100
      IF(MODE.NE.2) GO TO 998                                           00008200
C---     SURFACE HAS BEEN LOADED, EXTRACT NEEDED INFORMATION.           00008300
      NPAT=NPAT+SSCAN(4)                                                00008400
      NTOT=NTOT+SSCAN(8)                                                00008500
      NUMSUR=NUMSUR+1                                                   00008600
  120 CONTINUE                                                          00008700
      I=I+2                                                             00008800
      IF(I.LT.NSIZE) GO TO 100                                          00008900
C                                                                       00009000
      IF(IBUG.NE.11) GO TO 130                                          00009100
      CALL BAD(1,0,'NPAT',NPAT)                                         00009200
      CALL BAD(1,0,'NTOT',NTOT)                                         00009300
      CALL BAD(-1,0,'NMSR',NUMSUR)                                      00009400
  130 CONTINUE                                                          00009500
C****    ERROR IF THIS COMBINATION OF SURFACES IS TOO LARGE             00009600
      IRR=03                                                            00009700
      IF(NTOT-NUMSUR*10.GT.MAXLDA) GO TO 998                            00009800
C---      IF ONLY ONE SURFACE IS INPUT, THEN LEAVE IT UNALTERED         00009830
      IF(NUMSUR.EQ.1) GO TO 999                                         00009831
C                                                                       00009900
C---     NOW RE-READ ALL SURFACES AND CONSOLIDATE THEM INTO A           00010000
C---     A SINGLE SURFACE AFTER EACH SURFACE LOAD                       00010100
C---     ALSO, STRIP OUT ALL TOPOLOGY TABLES, AS THEY WILL BE RESET.    00010200
C---     FIRST SET POINTER FOR SCANNING THRU PART PROGRAM INPUT         00010300
      I=9                                                               00010400
C---     CURRENT AVAILABLE SLOT IN PATCH HEADER TABLE                   00010500
      NHEAD=11                                                          00010600
C---     SET CURRENT AVAILABLE SLOT IN VALUE TABLE                      00010700
      NVAL=11+6*NPAT                                                    00010800
C---     SET CURRENT AVAILABLE SLOT TO LOAD THE NEXT  SURFACE.          00010900
      NEXSUR=NVAL                                                       00011000
C                                                                       00011100
  200 CONTINUE                                                          00011200
      CALL HOLFRM(SCAN(I+1),TEST,1,8,NWD)                               00011210
      IF(TEST.NE.WEIGHT.AND.TEST.NE.ALIMIT) GO TO 210                   00011300
      I=I+2                                                             00011400
      GO TO 299                                                         00011500
C                                                                       00011600
  210 CONTINUE                                                          00011700
C****    INPUT SURFACE NOT CORRECTLY DEFINED                            00011800
      IRR=04                                                            00011900
      IF(CKDEF(SCAN(I))) GO TO 998                                      00012000
      MODE=2                                                            00012100
      CALL APT094(MODE,SCAN(I),SSCAN(NEXSUR))                           00012200
C****    INPUT SURFACE COULD NOT BE FETCHED                             00012300
      IRR=05                                                            00012400
      IF(MODE.NE.2) GO TO 998                                           00012500
C---     NEXT  SURFACE IS NOW AVAILABLE.  CONSOLIDATE IT WITH           00012600
C---     THE CONSOLIDATED SURFACE.                                      00012700
C---     PATCH HEADER DATA MUST BE MODIFIED TO REFLECT NEW DISPLACEMENTS00012800
C---      OF VALUE AND TOPOLOGY DATA.                                   00012900
C                                                                       00013000
C---     NUMBER OF PATCHES IN CURRENT INPUT SURFACE                     00013100
      KPAT=SSCAN(NEXSUR+3)                                              00013200
C---     LENGTH OF VALUE TABLE FOR CURRENT INPUT SURFACE                00013300
      KVAL=SSCAN(NEXSUR+1)                                              00013400
C---     POINTER TO CURRENT PATCH HEADER DATA                           00013500
      KLOC=NEXSUR+10                                                    00013600
C---     COMPUTE NEW DISPLACEMENT FOR HEADER DATA                       00013700
      DISP=NVAL-SSCAN(KLOC+4)                                           00013800
C---     RULE FOR DISPLACEMENT IS DIFFERENT FOR A GENCUR TYPE           00013900
      IF(SSCAN(KLOC).GT.9.0) DISP=NVAL-SSCAN(KLOC)                      00014000
      IF(IBUG.NE.0) CALL BAD(-1,1,'DISP',DISP)                          00014100
C                                                                       00014200
      DO 220 L=1,KPAT                                                   00014300
      IF(SSCAN(KLOC).GT.9.0) GO TO 230                                  00014400
C---     CONVENTIONAL COONS BICUBIC PATCH                               00014500
      SSCAN(KLOC+4)=SSCAN(KLOC+4)+DISP                                  00014600
      GO TO 240                                                         00014700
C                                                                       00014800
  230 CONTINUE                                                          00014900
C---     GENCUR TYPE PATCH                                              00015000
      DO 250 LL=1,4                                                     00015100
      LK=KLOC+LL-1                                                      00015200
      IF(SSCAN(LK).GT.SMAL) SSCAN(LK)=SSCAN(LK)+DISP                    00015300
  250 CONTINUE                                                          00015400
C                                                                       00015500
  240 CONTINUE                                                          00015600
C---     NOW TRANSFER SIX HEADER LOCATIONS                              00015700
      DO 260 LL=1,6                                                     00015800
      SSCAN(NHEAD)=SSCAN(KLOC)                                          00015900
      NHEAD=NHEAD+1                                                     00016000
      KLOC=KLOC+1                                                       00016100
  260 CONTINUE                                                          00016200
C---      ZERO OUT THE TOPOLOGY TABLE REFERENCE                         00016300
      SSCAN(NHEAD-1)=ZERO                                               00016400
C                                                                       00016500
  220 CONTINUE                                                          00016600
C                                                                       00016700
C---     NOW TRANSFER PATCH VALUE DATA IN ONE BLOCK                     00016800
      KLOC=NEXSUR+9+6*KPAT                                              00016900
      DO 270 LL=1,KVAL                                                  00017000
      SSCAN(NVAL)=SSCAN(KLOC+LL)                                        00017100
      NVAL=NVAL+1                                                       00017200
  270 CONTINUE                                                          00017300
C                                                                       00017400
  299 CONTINUE                                                          00017500
      NEXSUR=NVAL                                                       00017600
      I=I+2                                                             00017700
      IF(I.LT.NSIZE) GO TO 200                                          00017800
C                                                                       00017900
C---     SURFACES HAVE ALL BEEN FETCHED AND HEADER AND VALUE DATA       00018000
C---     CONSOLIDATED INTO ONE SURFACE.                                 00018100
C                                                                       00018200
C---     NOW A PORTION OF THE SURFACE HEADER TABLE CAN BE FILLED        00018300
      DO 292 L=1,10                                                     00018400
  292 SSCAN(L)=ZERO                                                     00018500
C---     VALUE TABLE SIZE                                               00018600
      SSCAN(2)=NVAL-11-6*NPAT                                           00018700
C---     NUMBER OF PATCHES                                              00018800
      SSCAN(4)=NPAT                                                     00018900
C---     TYPE OF SURFACE - NON-MESH                                     00019000
      SSCAN(5)=ONE                                                      00019100
C---     SURFACE TYPE -- ASSEMBLAGE OF ALL TYPES                        00019200
      SSCAN(6)=7.                                                       00019300
C---     SIGN OF SURFACE NORMAL                                         00019400
      SSCAN(7)=ONE                                                      00019500
C---     TOTAL SIZE - NOT YET KNOWN BUT SET TO CURRENT SIZE             00019600
      SSCAN(8)=NVAL-1                                                   00019700
C                                                                       00019800
      IF(IBUG.NE.11) GO TO 291                                          00019900
      CALL BAD(-10,1,'SSHD',SSCAN)                                      00020000
      NK=NPAT*6                                                         00020100
      CALL BAD(-NK,1,'PCHD',SSCAN(11))                                  00020200
      NK1=NVAL-11-NK                                                    00020300
      NK=11+NK                                                          00020400
      CALL BAD(-NK1,1,'VALD',SSCAN(NK))                                 00020500
  291 CONTINUE                                                          00020600
C                                                                       00020700
C---     FETCH AND STORE ALL VECTORS FOR EACH PATCH CORNER              00020800
C---     BASE POINTER FOR THIS STORAGE IS IPT+1                         00020900
      IPT=ISCAN-1                                                       00021000
      ISCAN=IPT                                                         00021100
      NLEN=NPAT*60                                                      00021200
C****    THERE IS NOT ENOUGH BUFFER SPACE TO HOLD CORNER DATA           00021300
      IRR=06                                                            00021400
      IF(NLEN+IPT.GT.NSCNMX) GO TO 998                                  00021500
C                                                                       00021600
C RESERV PRESENT NEW SURFACE                                            00021620
      MODE=5                                                            00021640
      FDUMMY(2)=NVAL-1                                                  00021650
      CALL APT094(MODE,FDUMMY,SSCAN)                                    00021660
C                                                                       00021680
      DO 300 ICUR=1,NPAT                                                00021700
C---     FETCH THE ICUR-TH PATCH                                        00021800
      CALL LODPCH(SSCAN,B,IFLAG,ITOP,ICUR,1)                            00021900
C---     OBTAIN DATA FROM EACH CORNER                                   00022000
      DO 310 J=1,4                                                      00022100
      CALL CNSURF(U(J),V(J),B,SPV,IFLAG,1)                              00022200
      DO 320 K=1,3                                                      00022300
C---     SAVE POINT,TANSPL,CRSSPL,TWIST,NORMAL                          00022400
      SCAN(ISCAN+K)=SPV(K)                                              00022500
      SCAN(ISCAN+3+K)=SPV(K+4)                                          00022600
      SCAN(ISCAN+6+K)=SPV(K+8)                                          00022700
      SCAN(ISCAN+9+K)=SPV(K+16)                                         00022800
      SCAN(ISCAN+12+K)=SPV(K+28)                                        00022900
  320 CONTINUE                                                          00023000
      ISCAN=ISCAN+15                                                    00023100
  310 CONTINUE                                                          00023200
C                                                                       00023300
  300 CONTINUE                                                          00023400
C---     CORNER DATA HAS NOW BEEN LOADED                                00023500
      IF(IBUG.NE.11) GO TO 340                                          00023600
      CALL BAD(-NLEN,1,'CORN',SCAN(IPT+1))                              00023700
  340 CONTINUE                                                          00023800
C                                                                       00023900
C---     PREPARE FOR SAVING TOPOLOGY CALCULATIONS                       00024000
      KLIM=2*NSCNMX                                                     00024100
      KSTART=(ISCAN+1)*2                                                00024200
      KNOW=KSTART+4                                                     00024300
      DO 399 K=1,4                                                      00024400
  399 KTOP(K+KSTART)=0                                                  00024500
C---     FIND TOPOLOGICAL RELATIONS BY COMPARING ALL BOUNDARIES         00024600
C---     IBN OF THE  ICUR-TH PATCH TO ALL BOUNDARIES JBN OF THE         00024700
C---     PATCHES JCUR=ICUR+1,ICUR+2,... NPAT                            00024800
C                                                                       00024900
      IF(NPAT.LE.1) GO TO 600                                           00025000
      NLIM1=NPAT-1                                                      00025100
      DO 400 ICUR=1,NLIM1                                               00025200
C                                                                       00025300
      NLIM2=ICUR+1                                                      00025400
C---     POINTER TO STORAGE OF CORNER DATA FOR PATCH ICUR.              00025500
      ICORN=(ICUR-1)*60+IPT                                             00025600
C---     DEVELOP DATA FOR EACH BOUNDARY OF THE ICUR TH PATCH.           00025700
      DO 410 IBN=1,4                                                    00025800
C---      INSERT INDICES TO CORNERS OF IBN-TH BOUNDARY                  00025900
      ICP(1)=IBPT(IBN,1)                                                00026000
      ICP(2)=IBPT(IBN,2)                                                00026100
      DO 420 JCUR=NLIM2,NPAT                                            00026200
      JCORN=(JCUR-1)*60+IPT                                             00026300
C---     COMPARE EACH BOUNDARY OF THIS PATCH TO OTHERS                  00026400
      DO 430 JBN=1,4                                                    00026500
      JCP(1)=IBPT(JBN,1)                                                00026600
      JCP(2)=IBPT(JBN,2)                                                00026700
C---     FIRST CHECK FOR IDENTICAL CORNER POINTS                        00026800
      NP(1)=1                                                           00026900
      NP(2)=2                                                           00027000
C---      NOCOMP=0 IF A BOUNDARY MATCH EXISTS, 1 IF IT DOES NOT.        00027100
      NOCOMP=0                                                          00027200
C                                                                       00027300
      K=1                                                               00027400
  438 CONTINUE                                                          00027500
      IF(K.GT.2) GO TO 443                                              00027600
C                                                                       00027700
      II=ICORN+(ICP(K)-1)*15                                            00027800
  439 CONTINUE                                                          00027900
      KK=NP(K)                                                          00028000
      JJ=JCORN+(JCP(KK)-1)*15                                           00028100
      W=ZERO                                                            00028200
      DO 441 L=1,3                                                      00028300
  441 W=W+DABS(SCAN(II+L)-SCAN(JJ+L))                                   00028400
      IF(W.LT.SMALP) GO TO 440                                          00028500
C---      MATCH FAILED, SWITCH POINTS AND RETRY                         00028600
      IF(NP(1).EQ.1) GO TO 442                                          00028700
C---      MATCH FAILED BETWEEN POINTS BOTH WAYS - NO BOUNDARY MATCH     00028800
      NOCOMP=1                                                          00028900
      GO TO 443                                                         00029000
C                                                                       00029100
  442 CONTINUE                                                          00029200
C---      SWITCH POINTS AND COMPARE AGAIN                               00029300
      K=1                                                               00029400
      NP(1)=2                                                           00029500
      NP(2)=1                                                           00029600
      GO TO 438                                                         00029700
C                                                                       00029800
  440 CONTINUE                                                          00029900
      K=K+1                                                             00030000
      GO TO 438                                                         00030100
C                                                                       00030200
  443 CONTINUE                                                          00030300
C                                                                       00030400
C---      IF CORNER POINTS DO NOT MATCH, TERMINATE SEARCH BETWEEN       00030500
C---      THESE TWO BOUNDARIES, ASSUME NO RELATION.                     00030600
      IF(NOCOMP.NE.0) GO TO 430                                         00030700
C                                                                       00030800
      IF(IBUG.NE.11) GO TO 446                                          00030900
      CALL BAD(1,0,'ICUR',ICUR)                                         00031000
      CALL BAD(1,0,'JCUR',JCUR)                                         00031100
      CALL BAD(1,0,'IBN ',IBN)                                          00031200
      CALL BAD(-1,0,'JBN ',JBN)                                         00031300
      CALL BAD(2,0,'NP  ',NP)                                           00031400
      CALL BAD(2,0,'ICP ',ICP)                                          00031500
      CALL BAD(-2,0,'JCP ',JCP)                                         00031600
  446 CONTINUE                                                          00031700
      ACOMP=ONE                                                         00031800
      IF(NP(1).NE.1) ACOMP=-ONE                                         00031900
C---     NEXT CHECK FOR IDENTICAL BOUNDARIES                            00032000
      NOCOMP=0                                                          00032100
      DO 450 K=1,2                                                      00032200
      II=ICORN+(ICP(K)-1)*15+ICURV(IBN,1)                               00032300
      KK=NP(K)                                                          00032400
      JJ=JCORN+(JCP(KK)-1)*15+ICURV(JBN,1)                              00032500
      DO 451 L=1,3                                                      00032600
      W=SCAN(II+L)-ACOMP*SCAN(JJ+L)                                     00032700
      IF(DABS(W).GT.SMALV) NOCOMP=1                                     00032800
  451 CONTINUE                                                          00032900
  450 CONTINUE                                                          00033000
      IF(NOCOMP.NE.0) GO TO 430                                         00033100
C                                                                       00033200
C---     ALL CONDITIONS FOR A CONNECTION HAVE BEEN MET                  00033300
C---     STORE THE RESULTS                                              00033400
      KTOP(KNOW)=ICUR                                                   00033500
      KTOP(KNOW+1)=IBN                                                  00033600
      KTOP(KNOW+2)=JCUR                                                 00033700
      KTOP(KNOW+3)=JBN                                                  00033800
      KNOW=KNOW+4                                                       00033900
C****    NOT ENOUGH SPACE TO STORE TOPOLOGY RESULTS                     00034000
      IRR=07                                                            00034100
      IF(KNOW.GT.KLIM) GO TO 998                                        00034200
C                                                                       00034300
  430 CONTINUE                                                          00034400
C                                                                       00034500
  420 CONTINUE                                                          00034600
C                                                                       00034700
  410 CONTINUE                                                          00034800
C                                                                       00034900
  400 CONTINUE                                                          00035000
C                                                                       00035100
  600 CONTINUE                                                          00035200
C                                                                       00035300
C---     TOPOLOGY RELATIONS HAVE ALL BEEN DETERMINED, NOW CONSOLIDATE   00035400
C---     THESE INTO THE SURFACE CANON FORM                              00035500
      IF(IBUG.NE.11) GO TO 499                                          00035600
      IK=KSTART                                                         00035700
  498 CONTINUE                                                          00035800
      CALL BAD(-4,0,'TOPO',KTOP(IK))                                    00035900
      IK=IK+4                                                           00036000
      IF(IK.LT.KNOW) GO TO 498                                          00036100
  499 CONTINUE                                                          00036200
C---      SET END OF LIST OF TOPOLOGY TABLE POINTERS                    00036300
      KEND=KNOW-4                                                       00036400
C                                                                       00036500
C---      SAVE CURRENT NVAL FOR TOPOLOGY SIZE CALCULATION               00036600
      NVALSV=NVAL                                                       00036700
C                                                                       00036800
      DO 500 ICUR=1,NPAT                                                00036900
C---      LCON IS NUMBER OF SIDES OF PATCH CONNECTED TO SURFACE         00037000
      LCON=0                                                            00037100
C---     TOPOLOGY POINTER LOCATION IN CURRENT PATCH HEADER              00037200
      IHTOP=10+6*ICUR                                                   00037300
      SSCAN(IHTOP)=NVAL                                                 00037400
C---      SEARCH EACH BOUNDARY IPN OF THE ICUR-TH PATCH                 00037500
      DO 510 IPN=1,4                                                    00037600
      LCONSV=LCON                                                       00037700
      SSCAN(NVAL)=ZERO                                                  00037800
C---      SEARCH THROUGH THE ENTIRE TOPOLOGY TABLE FOR A MATCH          00037900
      DO 520 K=KSTART,KEND,4                                            00038000
      IF(KTOP(K).NE.ICUR.OR.KTOP(K+1).NE.IPN) GO TO 525                 00038100
      SSCAN(NVAL)=-KTOP(K+2)                                            00038200
      LCON=LCON+1                                                       00038300
      NVAL=NVAL+1                                                       00038400
      GO TO 520                                                         00038500
  525 CONTINUE                                                          00038600
      IF(KTOP(K+2).NE.ICUR.OR.KTOP(K+3).NE.IPN) GO TO 520               00038700
      SSCAN(NVAL)=-KTOP(K)                                              00038800
      LCON=LCON+1                                                       00038900
      NVAL=NVAL+1                                                       00039000
  520 CONTINUE                                                          00039100
      IF(LCONSV.EQ.LCON) NVAL=NVAL+1                                    00039200
      SSCAN(NVAL-1)=-SSCAN(NVAL-1)                                      00039300
  510 CONTINUE                                                          00039400
C                                                                       00039500
      IF(LCON.GT.0) GO TO 501                                           00039600
      CALL CFORM(' WARNING. PATCH NOT CONNECTED TO SURFACE',            00039700
     X  DARRAY,1,40)                                                    00039800
      CALL ICONV(ICUR,DARRAY,43,6)                                      00039900
      CALL CPRINT(DARRAY)                                               00040000
      IRR=-09                                                           00040100
  501 CONTINUE                                                          00040200
  500 CONTINUE                                                          00040300
C                                                                       00040400
C---      UPDATE SURFACE SIZE AND SIZE OF TOPOLOGY TABLE                00040500
      SSCAN(8)=NVAL-1                                                   00040600
      SSCAN(3)=NVAL-NVALSV                                              00040700
      GO TO 999                                                         00040800
C                                                                       00040900
  999 CONTINUE                                                          00041000
      IRR=0                                                             00041100
C                                                                       00041103
C MESH TEST, 1. TOPOLOGY-POINTER                                        00041106
      N1TT=SSCAN(16)                                                    00041109
C LOWER LEFT CORNER AT 1. PATCH ?                                       00041112
      IF(SSCAN(N1TT).NE.0.D0.OR.SSCAN(N1TT+1).NE.0.D0) GOTO 997         00041115
      IF(SSCAN(N1TT+2).EQ.0.D0.AND.                                     00041118
     *   SSCAN(N1TT+3).EQ.0.D0) GOTO 997                                00041121
C SPLINE AND CROSS-SPLINE NUMBER                                        00041124
      NU=SSCAN(N1TT+3)                                                  00041127
      IF(NU.EQ.0)NU=2                                                   00041128
      NU1=NU-1                                                          00041130
      NV1=SSCAN(4)/NU1                                                  00041133
      NV=NV1+1                                                          00041136
      SNU2=NU1-1                                                        00041139
      ICH=1-NU1                                                         00041142
C TEST LOOP                                                             00041145
      DO 1000 I=1,NV1                                                   00041148
      DO 1000 J=1,NU1                                                   00041151
      SCH(1)=ICH                                                        00041154
      SCH(2)=SCH(1)+SNU2                                                00041157
      SCH(3)=SCH(2)+2.D0                                                00041160
      SCH(4)=SCH(3)+SNU2                                                00041163
      ICH=ICH+1                                                         00041166
      DO 1000 K=1,4                                                     00041169
      IF(I.NE.1.AND.I.NE.NV1.AND.J.NE.1.AND.J.NE.NU1) GOTO 996          00041172
      IF(SSCAN(N1TT).EQ.0.D0) GOTO 1000                                 00041175
      GOTO 997                                                          00041178
  996 IF(SSCAN(N1TT).NE.SCH(K)) GOTO 997                                00041181
 1000 N1TT=N1TT+1                                                       00041184
      SSCAN( 5)=2.D0                                                    00041187
      SSCAN( 9)=NV                                                      00041190
      SSCAN(10)=NU                                                      00041193
C                                                                       00041196
      GO TO 997                                                         00041200
C                                                                       00041300
  998 CONTINUE                                                          00041400
      CALL BAD(-1,1,'ERR ',IRR)                                         00041500
C                                                                       00041600
  997 CONTINUE                                                          00041700
      RETURN                                                            00041800
      END                                                               00041900
**** SOURCE FILE : M0004128.V08   ***
*
      SUBROUTINE  SSPICT(SS,SSNAME,ISPRNT)                              00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C------ THIS ROUTINE GENERATES A VERIFICATION LISTING REPORT FOR A      00000300
C------ SCULPTURED SURFACE CANONICAL ARRAY                              00000400
C------ IN ADDITION THE ROUTINE CONDUCTS AVERAGING FOR PNTSON CASE      00000500
C                                                                       00000510
      CHARACTER*8 BLANK                                                 00000590
      CHARACTER*4 NA(8,2),NB(8,2),NC(8)                                 00000600
C                                                                       00001200
      DIMENSION SS(*),B(64),SV(32),U(9),V(9),IFLAG(4),ITOP(6,4)         00001300
      DIMENSION UZ(4),VZ(4),SNM(3)                                      00001400
      DIMENSION IA(8),IB(8),PZ(3,2)                                     00001800
      DIMENSION PARE(9)                                                 00002100
      CHARACTER*24 SSHD(9)                                              00002110
      CHARACTER*16 SSNAME                                               00002120
C------ SETUP VARIABLES TO SAVE MESH POINTS DURING DEFINITION           00002200
C---     NSCNMX IS THE MAXIMUM SPACE AVAILABLE IN SCAN                  00002300
C---     ISCAN IS THE LAST USED LOCATION IN SCAN                        00002400
C---     SCAN IS A SCRATCH PAD WORK AREA FOR SS CALCULATIONS            00002500
      INCLUDE 'SSPAD.INC'                                               00002610
C---     ARRAY IISCAN IS USED  TO STORE INTEGERS IN SCAN                00002700
      DIMENSION IISCAN(2*ISCN)                                          00002800
      EQUIVALENCE (IISCAN(1),SCAN(1))                                   00002900
C---     ASSUMPTION ONE INTEGER IS ONE HALF THE LENGTH OF A REAL.       00003000
C                                                                       00003100
      DIMENSION PT(3,4),SNT(3,4)                                        00003200
      DIMENSION LOC(4),MP(4),MS(4),IAR(12)                              00003300
      CHARACTER*120 DARRAY,HEADR1,HEADR2,HEADR3,                        00003700
     C HEADR4,HEADR5                                                    00003800
      CHARACTER*3 IB1234(4)                                             00004000
      DATA IB1234/'B1=','B2=','B3=','B4='/                              00004100
      DATA HEADR1   /   ' PT=SURFACE POINT,TN=FIRST(SPLINE) DIRECTION,CS00004200
     C =SECOND(CROSS SPLINE) DIRECTION, NR=SURFACE NORMAL               00004300
     C       '/                                                         00004400
      DATA HEADR2   /   ' EACH PATCH HAS FOUR CORNERS PT00,PT10,PT01,PT100004500
     C1. BOUNDARY B1=PT00-PT10, B2=PT00-PT01, B3=PT10-PT11, B4=PT01-PT1100004600
     C       '/                                                         00004700
      DATA HEADR3   /   ' NR50,NR05, ETC REPRESENT SURFACE NORMALS AT IN00004800
     CTERIM PTS. NR05 REPRESENTS A NORMAL AT U=0,V=0.5 MIDWAY BETWEEN PT00004900
     C00-PT01'/                                                         00005000
      DATA HEADR4   /   ' POSITIVE RADII AND CURVATURES ARE CUPPED IN TH00005100
     CE DIRECTION OF THE SURFACE NORMALS NRI,NRJ,NRK                    00005200
     C       '/                                                         00005300
      DATA HEADR5    /   ' PATCH     X        Y        Z        W       00005400
     C         X        Y        Z        W              NRI     NRJ    00005500
     C NRK    '/                                                        00005600
C                                                                       00005700
      DATA SSHD/                                                        00005900
     X   'VALUE TABLE SIZE        ',                                    00006000
     X   'TOPOLOGY TABLE SIZE     ',                                    00006100
     X   'NUMBER OF PATCHES       ',                                    00006200
     X   'SURFACE TYPE(MESH=2)    ',                                    00006300
     X   'PNTVEC,POLYGN,PNTSON    ',                                    00006400
     X   'SIGN OF NORMAL(TN X CR) ',                                    00006500
     X   'TOTAL SIZE OF SURF      ',                                    00006600
     X   'NUMBER OF SPLINES       ',                                    00006700
     X   'NUMBER OF CROSS SPLINES '/                                    00006800
      DATA NA/'PT00','PT10','TN00','TN10','CR00','CR10','TW00','TW10',  00006821
     X        'PT00','PT50','PT10','PT01','PT51','PT11','PT05','PT15'/  00006822
      DATA NB/'PT01','PT11','TN01','TN11','CR01','CR11','TW01','TW11',  00006823
     X        'CR00','CR50','CR10','CR01','CR51','CR11','CR05','CR15'/  00006824
      DATA NC/'NR00','NR50','NR10','NR01','NR51','NR11','NR05','NR15'/  00006825
      DATA UZ,VZ/0.0D0,1.0D0,0.0D0,1.0D0,0.0D0,0.0D0,1.0D0,1.0D0/       00006830
      DATA U/0.0D0,0.5D0,1.0D0,0.0D0,0.5D0,1.0D0,0.0D0,1.0D0,0.5D0/     00006831
      DATA V/3*0.0D0,3*1.0D0,3*0.5D0/                                   00006832
      DATA IA/1,2,3,4,9,10,11,12/                                       00006836
      DATA IB/5,6,7,8,13,14,15,16/                                      00006837
      DATA IAR/3,9,4,10,7,13,8,14,11,12,15,16/                          00006840
      DATA LOC/1,3,4,6/                                                 00006841
      DATA ZERO,SMAL1/0.0D0,1.0D-11/                                    00006842
      DATA BLANK/'        '/                                            00006850
C                                                                       00006900
      NTOT=SS(4)                                                        00007000
      NP=SS(10)                                                         00007100
      NS=SS(9)                                                          00007200
      NMESH=SS(5)                                                       00007300
      NTYP=SS(6)                                                        00007400
      CMAX=-1.0D+5                                                      00007500
      CMIN=1.0D+5                                                       00007600
      IF(NMESH.NE.2) SS(9)=0.0                                          00007700
      IF(NMESH.NE.2) SS(10)=0.0                                         00007800
C------ AT THIS POINT PATCH AVERAGING IS DONE FOR THE                   00007900
C------ POINTS ON CASE                                                  00008000
C---     COMPUTE LOCATIONS FOR DATA STORAGE IN SCAN                     00008100
C---     ALSO DETERMINE WHETHER SCAN HAS ENOUGH ROOM                    00008200
C---     IF THE DATA IS TOO VOLUMINOUS THE DISPLAY IS SKIPPED           00008300
      NPTMAX=SS(4)*4.                                                   00008400
      IF(NMESH.EQ.2) NPTMAX=NP*NS                                       00008500
      NPTMAX=NPTMAX+1                                                   00008600
C---     INDEX TO CORNER POINT STORAGE                                  00008700
      IPMESH=0                                                          00008800
C---     INDEX TO SCAN FOR CORNER SURFACE NORMALS                       00008900
      ISNMES=NPTMAX*3-1                                                 00009000
C---     AREAS FOR STORAGE OF INTEGER ARRAYS                            00009100
      INUN=NPTMAX*6*2-1                                                 00009200
      INUNQ=INUN+NPTMAX                                                 00009300
      ICOMP=INUNQ+NPTMAX                                                00009400
C                                                                       00009500
      NQMAX=(15*NPTMAX)/2+2                                             00009600
      IF(NQMAX.LE.NSCNMX) GO TO 773                                     00009700
C****    NOT ENOUGH SPACE FOR SSPICT CALCULATION.  BYPASS.              00009800
      CALL CFORM('0 NOT ENOUGH SPACE TO DISPLAY ',DARRAY,1,29)          00009900
      CALL CFORM(SSNAME,DARRAY,37,16)                                   00010000
      CALL CPRIN1(DARRAY)                                               00010050
      GO TO 130                                                         00010100
  773 CONTINUE                                                          00010200
      IF(NMESH.NE.1.OR.NTYP.NE.3) GO TO 1000                            00010300
C------ COMMENCE PATCH AVERAGING BY CONSTRUCTING A TABLE OF             00010400
C------ CORNER POINTS AND CORNER NORMALS                                00010500
      NCT=0                                                             00010600
      DO 1010 I=1,NTOT                                                  00010700
      CALL LODPCH(SS,B,IFLAG,ITOP,I,3)                                  00010800
      DO 1010 L=1,4                                                     00010900
      CALL CNSURF(UZ(L),VZ(L),B,SV,IFLAG,1)                             00011000
      NCT=NCT+1                                                         00011100
      DO 1020 K=1,3                                                     00011200
      SCAN(IPMESH+NCT*3-3+K)=SV(K)                                      00011300
      SCAN(ISNMES+NCT*3-3+K)=SV(K+28)                                   00011400
 1020 CONTINUE                                                          00011500
 1010 CONTINUE                                                          00011600
      NCOMP=4*NTOT                                                      00011700
      DO 1030 I=1,NCOMP                                                 00011800
 1030 IISCAN(ICOMP+I)=I                                                 00011900
C------ SEARCH THRU THE TABLE OF POINTS TO FIND EQUALS                  00012000
C------ IF A LATER POINT EQUALS AN EARLIER, THEN REFERENCE              00012100
C------ THE EARLIER POINT IN ICOMP                                      00012200
      ICOMPC=0                                                          00012300
      NCOMPM=NCOMP-1                                                    00012400
C------ ICOMPC KEEPS TRACK OF THE TOTAL NUMBER OF UNIQUE POINTS         00012500
      DO 1040 I=1,NCOMPM                                                00012600
      IF(IISCAN(ICOMP+I).NE.I) GO TO 1040                               00012700
      J=I+1                                                             00012800
      DO 1050 K=J,NCOMP                                                 00012900
      II=IPMESH+I*3-3                                                   00013000
      KK=IPMESH+K*3-3                                                   00013100
      D=(SCAN(II+1)-SCAN(KK+1))**2+(SCAN(II+2)-SCAN(KK+2))**2           00013200
     X  +(SCAN(II+3)-SCAN(KK+3))**2                                     00013300
      IF(D.LT.SMAL1) IISCAN(ICOMP+K)=I                                  00013400
 1050 CONTINUE                                                          00013500
      ICOMPC=ICOMPC+1                                                   00013600
      IISCAN(INUN+ICOMPC)=I                                             00013700
C------ICOMPC CONTAINS THE NUMBER OF UNIQUE POINTS AND IISCAN(INUN+)    00013800
C------ CONTAINS THE FIRST POINT IN EACH UNIQUE STRING.                 00013900
 1040 CONTINUE                                                          00014000
      DO 1060 I=1,ICOMPC                                                00014100
      J=IISCAN(INUN+I)                                                  00014200
      NCT=0                                                             00014300
      DO 1065 K=1,3                                                     00014400
 1065 SNM(K)=0.0                                                        00014500
      DO 1070 K=J,NCOMP                                                 00014600
      IF(IISCAN(ICOMP+K).NE.J) GO TO 1070                               00014700
      JJ=ISNMES+J*3-3                                                   00014800
      KK=ISNMES+K*3-3                                                   00014900
      W=SCAN(JJ+1)*SCAN(KK+1)+SCAN(JJ+2)*SCAN(KK+2)                     00015000
     X  +SCAN(JJ+3)*SCAN(KK+3)                                          00015100
      SQ=1.0                                                            00015200
      IF(W.LT.0.0D0) SQ=-1.0                                            00015300
      DO 1080 L=1,3                                                     00015400
 1080 SNM(L)=SNM(L)+SQ*SCAN(ISNMES+K*3-3+L)                             00015500
      NCT=NCT+1                                                         00015600
      IISCAN(INUNQ+NCT)=K                                               00015700
 1070 CONTINUE                                                          00015800
      DSNM=0.0                                                          00015900
      DO 1090 K=1,3                                                     00016000
      SNM(K)=SNM(K)/NCT                                                 00016100
      DSNM=DSNM+SNM(K)**2                                               00016200
 1090 CONTINUE                                                          00016300
      DSNM=DSQRT(DSNM)                                                  00016400
      DO 1100 L=1,3                                                     00016500
 1100 SNM(L)=SNM(L)/DSNM                                                00016600
C------SNM IS AN AVERAGED SURFACE NORMAL AT THE CURRENT UNIQUE PT       00016700
C------ REPLACE EACH NORMAL VECTOR IN THE LIST WITH ITS CORRES-         00016800
C------ PONDING AVERAGED NORMAL.                                        00016900
      DO 1110 L=1,NCT                                                   00017000
      DO 1110 K=1,3                                                     00017100
      M=IISCAN(INUNQ+L)                                                 00017200
      SCAN(ISNMES+M*3-3+K)=SNM(K)                                       00017300
 1110 CONTINUE                                                          00017400
 1060 CONTINUE                                                          00017500
C------ FINALLY ALTER THE TANGENTS AND ZERO THE TWISTS                  00017600
      DO 1120 L=1,NTOT                                                  00017700
      DO 1120 K=1,4                                                     00017800
      IC=K+4*(L-1)                                                      00017900
      IBREL=10+6*(L-1)+5                                                00018000
      IBREL=SS(IBREL)-1.0                                               00018100
      DO 1130 M=1,2                                                     00018200
      MC=2*(K-1)+M                                                      00018300
      IV=IBREL+IAR(MC)                                                  00018400
      IIC=ISNMES+3*IC-3                                                 00018500
      DOT=SS(IV)*SCAN(IIC+1)+SS(IV+16)*SCAN(IIC+2)                      00018600
     X    +SS(IV+32)*SCAN(IIC+3)                                        00018700
      DO 1140 LL=1,3                                                    00018800
 1140 SS(IV+16*LL-16)=SS(IV+16*LL-16)-DOT*SCAN(ISNMES+IC*3-3+LL)        00018900
 1130 CONTINUE                                                          00019000
C------ ZERO OUT TWIST VECTORS                                          00019100
      DO 1150 M=9,12                                                    00019200
      IV=IAR(M)+IBREL                                                   00019300
      DO 1150 LL=1,3                                                    00019400
      SS(IV+16*LL-16)=ZERO                                              00019500
 1150 CONTINUE                                                          00019600
 1120 CONTINUE                                                          00019700
 1000 CONTINUE                                                          00019800
C------ THE PNTSON  SURFACE HAS NOW BEEN AVERAGED                       00019900
C                                                                       00020000
      DO 3000 I=1,15                                                    00020100
      I8=I*8                                                            00020110
 3000 DARRAY(I8-7:I8)=BLANK                                             00020200
      CALL CFORM('1',DARRAY,1,1)                                        00020300
      CALL CPRIN1(DARRAY)                                               00020400
      CALL CFORM(' SCULPTURED SURFACE ',DARRAY,20,20)                   00020500
      CALL CFORM(SSNAME,DARRAY,52,16)                                   00020600
      CALL CPRIN1(DARRAY)                                               00020700
      CALL CFORM('0',DARRAY,1,1)                                        00020800
      CALL CPRIN1(DARRAY)                                               00020900
      IF(ISPRNT.EQ.2) GO TO 3020                                        00021000
      DARRAY=HEADR1                                                     00021200
      CALL CPRIN1(DARRAY)                                               00021300
      DARRAY=HEADR2                                                     00021500
      CALL CPRIN1(DARRAY)                                               00021600
      DARRAY=HEADR3                                                     00021800
      CALL CPRIN1(DARRAY)                                               00021900
      DARRAY=HEADR4                                                     00022100
      CALL CPRIN1(DARRAY)                                               00022200
 3020 CALL CFORM('0SS HEADER TABLE',DARRAY,1,16)                        00022300
      CALL CPRIN1(DARRAY)                                               00022400
C---     WRITE OUT SS HEADER INFORMATION                                00022500
      DO 3008 J=1,9                                                     00022600
      CALL CFORM(SSHD(J),DARRAY,2,24)                                   00022700
      NIU=SS(J+1)                                                       00022800
      CALL ICONV(NIU,DARRAY,27,6)                                       00022900
      CALL CPRIN1(DARRAY)                                               00023000
 3008 CONTINUE                                                          00023100
C                                                                       00023200
      CALL CFORM('0',DARRAY,1,1)                                        00023300
      CALL CPRIN1(DARRAY)                                               00023400
      IF(ISPRNT.EQ.2) GO TO 3121                                        00023500
      DARRAY=HEADR5                                                     00023700
      CALL CPRIN1(DARRAY)                                               00023800
C                                                                       00023900
 3121 AREA=0.0                                                          00024000
      DO 90 I=1,NTOT                                                    00024100
      IF(ISPRNT.EQ.2) GO TO 3021                                        00024200
      CALL VORSCH( 12,HEADR5)                                           00024250
      CALL CFORM(' PATCH NUMBER ',DARRAY,1,14)                          00024300
      CALL ICONV(I,DARRAY,16,5)                                         00024400
      CALL CPRIN1(DARRAY)                                               00024500
 3021 CALL LODPCH(SS,B,IFLAG,ITOP,I,3)                                  00024600
      DO 80 L=1,8                                                       00024700
      CALL CNSURF(U(L),V(L),B,SV,IFLAG,1)                               00024800
      D=DSQRT(SV(25)**2+SV(26)**2+SV(27)**2)                            00024900
      PARE(L)=D                                                         00025000
      MA=IA(L)                                                          00025100
      MB=IB(L)                                                          00025200
C--- COMPUTE THE EUCLIDEAN X,Y,Z COORDINATES FOR DISPLAY                00025300
      MDIF=MB-MA                                                        00025400
C---     SET INDEX TO NA TO NON-GENCUR TYPE                             00025500
      IGENCR=1                                                          00025600
C---     SPECIAL TEMPORARY PATH FOR GENCUR SURFACE                      00025700
      IF(IFLAG(1).LT.9) GO TO 47                                        00025800
C---     SET INDEX TO NA TO GENCUR TYPE                                 00025900
      IGENCR=2                                                          00026000
C                                                                       00026100
      DO 46 IIL=1,3                                                     00026200
      PZ(IIL,1)=SV(IIL)                                                 00026300
      PZ(IIL,2)=SV(IIL+8)                                               00026400
   46 CONTINUE                                                          00026500
      GO TO 61                                                          00026600
   47 CONTINUE                                                          00026700
      IF(L.LT.3) GO TO 41                                               00026800
      IF(L.LT.7) GO TO 51                                               00026900
C--- LEAVE TWIST VECTORS AS IS                                          00027000
      DO 62 IM=1,2                                                      00027100
      MM=MA+MDIF*(IM-1)                                                 00027200
      DO 62 IL=1,3                                                      00027300
   62 PZ(IL,IM)=B(MM+16*IL-16)                                          00027400
      GO TO 61                                                          00027500
C--- DIVIDE X,Y, AND Z COORDINATES BY W                                 00027600
   41 CONTINUE                                                          00027700
      DO 42 IM=1,2                                                      00027800
      MM=MA+MDIF*(IM-1)                                                 00027900
      W=B(MM+48)+SMAL1                                                  00028000
      DO 42 IL=1,3                                                      00028100
   42 PZ(IL,IM)=B(MM+IL*16-16)/W                                        00028200
      GO TO 61                                                          00028300
   51 CONTINUE                                                          00028400
C--- DERIVATIVES ARE MODIFIED BY (DX*W-DW*X)/W**2                       00028500
      DO 52 IM=1,2                                                      00028600
      MM=MA+MDIF*(IM-1)                                                 00028700
      MMP=MOD(L+1,2)+1+(IM-1)*4                                         00028800
      W=B(MMP+48)                                                       00028900
      WP=B(MM+48)                                                       00029000
      DO 52 IL=1,3                                                      00029100
      PZ(IL,IM)=(W*B(MM+16*IL-16)-WP*B(MMP+16*IL-16))/(W+SMAL1)**2      00029200
   52 CONTINUE                                                          00029300
   61 CONTINUE                                                          00029400
      IF(ISPRNT.EQ.2) GO TO 3022                                        00029500
C                                                                       00029600
      CALL CFORM(NA(L,IGENCR),DARRAY,2,4)                               00029700
      K=7                                                               00029800
      DO 3031 IW=1,3                                                    00029900
      CALL FCONV(PZ(IW,1),DARRAY,K,9,3)                                 00030000
      K=K+9                                                             00030100
 3031 CONTINUE                                                          00030200
      CALL FCONV(B(MA+48),DARRAY,K,9,3)                                 00030300
      K=K+12                                                            00030400
      CALL CFORM(NB(L,IGENCR),DARRAY,K,4)                               00030500
      K=K+5                                                             00030600
      DO 3032 IY=1,3                                                    00030700
      CALL FCONV(PZ(IY,2),DARRAY,K,9,3)                                 00030800
      K=K+9                                                             00030900
 3032 CONTINUE                                                          00031000
      CALL FCONV(B(MB+48),DARRAY,K,9,3)                                 00031100
      K=K+12                                                            00031200
      CALL CFORM(NC(L),DARRAY,K,4)                                      00031300
      K=K+6                                                             00031400
      DO 3033 IZ=29,31                                                  00031500
      CALL FCONV(SV(IZ),DARRAY,K,8,5)                                   00031600
      K=K+8                                                             00031700
 3033 CONTINUE                                                          00031800
      CALL CPRIN1(DARRAY)                                               00031900
C                                                                       00032000
C------SAVE CORNER POINTS AND NORMALS AS THEY ARE GENERATED             00032100
 3022 IF(NMESH.NE.2) GO TO 330                                          00032200
      DO 310 LLOC=1,4                                                   00032300
      LLC=LOC(LLOC)                                                     00032400
      IF(LLC.NE.L) GO TO 310                                            00032500
C------ CASE L HAS GENERATED THE LLOC TH CORNER.  SAVE POINT AND NORMAL 00032600
      DO 320 LK=1,3                                                     00032700
      PT(LK,LLOC)=SV(LK)                                                00032800
      SNT(LK,LLOC)=SV(LK+28)                                            00032900
  320 CONTINUE                                                          00033000
  310 CONTINUE                                                          00033100
  330 CONTINUE                                                          00033200
   80 CONTINUE                                                          00033300
      CALL CNSURF(U(9),V(9),B,SV,IFLAG,1)                               00033400
C                                                                       00033500
      IF(ISPRNT.EQ.2) GO TO 3023                                        00033600
      IF(IGENCR.NE.2)GOTO 3045                                          00033620
C    GENCUR-OBERFLAECHE HAT KEINE RELEVANTEN FLAGS                      00033640
      K=8                                                               00033660
      GOTO 3046                                                         00033680
 3045 CALL CFORM(' FLAGS=',DARRAY,1,7)                                  00033700
      K=8                                                               00033800
      DO 3040 JJ=1,4                                                    00033900
      CALL ICONV(IFLAG(JJ),DARRAY,K,1)                                  00034000
      K=K+1                                                             00034100
      CALL CFORM(',',DARRAY,K,1)                                        00034200
      K=K+1                                                             00034300
 3040 CONTINUE                                                          00034400
 3046 K=K+1                                                             00034500
      DO 3041 LL=1,4                                                    00034600
      CALL CFORM(IB1234(LL),DARRAY,K,3)                                 00034700
      K=K+3                                                             00034800
      CALL ICONV(ITOP(2,LL),DARRAY,K,3)                                 00034900
      K=K+4                                                             00035000
 3041 CONTINUE                                                          00035100
      CALL CFORM(' PT55 ',DARRAY,K,6)                                   00035200
      K=K+6                                                             00035300
      DO 3042 LJ=1,3                                                    00035400
      CALL FCONV(SV(LJ),DARRAY,K,9,3)                                   00035500
 3042 K=K+12                                                            00035600
      CALL CFORM('NR55 ',DARRAY,K,5)                                    00035700
      K=K+5                                                             00035800
      DO 3043 JL=29,31                                                  00035900
      CALL FCONV(SV(JL),DARRAY,K,8,4)                                   00036000
 3043 K=K+8                                                             00036100
      CALL CPRIN1(DARRAY)                                               00036200
C                                                                       00036300
 3023 D=DSQRT(SV(25)**2+SV(26)**2+SV(27)**2)                            00036400
      PARE(L)=D                                                         00036500
      PAREA=(PARE(1)+PARE(3)+PARE(4)+PARE(6)+2.0*(PARE(2)+PARE(5)+      00036600
     C        PARE(7)+PARE(8))+4.0*PARE(9))/16.0                        00036700
      G11=SV(5)**2+SV(6)**2+SV(7)**2                                    00036800
      G12=SV(5)*SV(9)+SV(6)*SV(10)+SV(7)*SV(11)                         00036900
      G22=SV(9)**2+SV(10)**2+SV(11)**2                                  00037000
      A11=SV(13)*SV(29)+SV(14)*SV(30)+SV(15)*SV(31)                     00037100
      A12=SV(17)*SV(29)+SV(18)*SV(30)+SV(19)*SV(31)                     00037200
      A22=SV(21)*SV(29)+SV(22)*SV(30)+SV(23)*SV(31)                     00037300
      C=A11*A22-A12*A12                                                 00037400
      E=-G11*A22+2.0*G12*A12-G22*A11                                    00037500
      A=G11*G22-G12*G12                                                 00037600
      DD=E*E-4.0*A*C                                                    00037700
      IF(DD.LT.ZERO)GO TO 170                                           00037800
      DD=DSQRT(DD)                                                      00037900
      CA=(-E+DD)/(A+A)                                                  00038000
      CB=(-E-DD)/(A+A)                                                  00038100
      HM=(CA+CB)/2.D0                                                   00038200
      GK=CA*CB                                                          00038300
      SMAL=1.0D-5                                                       00038400
      RA=1.0/(CA+SMAL)                                                  00038500
      RB=1.0/(CB+SMAL)                                                  00038600
C------ SAVE THE CRITICAL CURVATURES                                    00038700
      CBIG=CA                                                           00038800
      CSMAL=CA                                                          00038900
      IF(CBIG.LT.CB) CBIG=CB                                            00039000
      IF(CSMAL.GT.CB) CSMAL=CB                                          00039100
      IF(CBIG.LT.CMAX) GO TO 210                                        00039200
      CMAX=CBIG                                                         00039300
      ICMAX=I                                                           00039400
  210 IF(CSMAL.GT.CMIN) GO TO 220                                       00039500
      CMIN=CSMAL                                                        00039600
      ICMIN=I                                                           00039700
  220 CONTINUE                                                          00039800
C                                                                       00039900
      IF(ISPRNT.EQ.2) GO TO 170                                         00040000
      CALL CFORM(' PATCH AREA=',DARRAY,1,12)                            00040100
      K=13                                                              00040200
      CALL FCONV(PAREA,DARRAY,K,12,5)                                   00040300
      K=K+12                                                            00040400
      CALL CFORM(' CURVATURES=',DARRAY,K,12)                            00040500
      K=K+12                                                            00040600
      CALL FCONV(CA,DARRAY,K,10,4)                                      00040700
      K=K+10                                                            00040800
      CALL FCONV(CB,DARRAY,K,10,4)                                      00040900
      K=K+10                                                            00041000
      CALL CFORM(' MEAN & GAUSS=',DARRAY,K,14)                          00041100
      K=K+14                                                            00041200
      CALL FCONV(HM,DARRAY,K,10,4)                                      00041300
      K=K+10                                                            00041400
      CALL FCONV(GK,DARRAY,K,10,4)                                      00041500
      K=K+10                                                            00041600
      CALL CFORM(' RADII=',DARRAY,K,7)                                  00041700
      K=K+7                                                             00041800
      CALL FCONV(RA,DARRAY,K,12,3)                                      00041900
      K=K+12                                                            00042000
      CALL FCONV(RB,DARRAY,K,10,3)                                      00042100
      CALL CPRIN1(DARRAY)                                               00042200
      CALL CPRIN1(DARRAY)                                               00042300
C                                                                       00042400
  170 CONTINUE                                                          00042500
      IF(NMESH.NE.2) GO TO 350                                          00042600
C------ PACK THE FOUR CORNER POINTS AND NORMALS INTO THE MESH ARRAY     00042700
C------ MP IS THE POINT LOCATION ON A SPLINE                            00042800
C------ MS IS THE SPLINE NUMBER                                         00042900
      MP(1)=MOD(I-1,NP-1)+1                                             00043000
      MS(1)=(I-1)/(NP-1)+1                                              00043100
      MP(2)=MP(1)+1                                                     00043200
      MS(2)=MS(1)                                                       00043300
      MP(3)=MP(1)                                                       00043400
      MS(3)=MS(1)+1                                                     00043500
      MP(4)=MP(1)+1                                                     00043600
      MS(4)=MS(3)                                                       00043700
      DO 380 KK=1,4                                                     00043800
      NCURR=(MS(KK)-1)*NP+MP(KK)                                        00043900
      DO 380 KKK=1,3                                                    00044000
      SCAN(IPMESH+NCURR*3-3+KKK)=PT(KKK,KK)                             00044100
      SCAN(ISNMES+NCURR*3-3+KKK)=SNT(KKK,KK)                            00044200
  380 CONTINUE                                                          00044300
  350 CONTINUE                                                          00044400
      AREA=AREA+PAREA                                                   00044500
   90 CONTINUE                                                          00044600
C                                                                       00044700
      CALL VORSCH ( 7,DARRAY)                                           00044750
      CALL CPRIN1(DARRAY)                                               00044800
      CALL CFORM('0',DARRAY,1,1)                                        00044900
      CALL CPRIN1(DARRAY)                                               00045000
      CALL CFORM(' APPROXIMATE TOTAL SURFACE AREA=',DARRAY,1,32)        00045100
      K=35                                                              00045200
      CALL FCONV(AREA,DARRAY,K,15,6)                                    00045300
      CALL CPRIN1(DARRAY)                                               00045400
C                                                                       00045500
      RMAX=1.0/(CMAX+SMAL)                                              00045600
      RMIN=1.0/(CMIN+SMAL)                                              00045700
C                                                                       00045800
C                                                                       00045900
      CALL CFORM('0  CRITICAL CURVATURES ON THE SURFACE',DARRAY,1,37)   00046000
      CALL CPRIN1(DARRAY)                                               00046100
      CALL CFORM('MAXIMUM SIGNED CURVATURE AND RADIUS=',DARRAY,10,36)   00046200
      K=46                                                              00046300
      CALL FCONV(CMAX,DARRAY,K,15,5)                                    00046400
      K=K+17                                                            00046500
      CALL FCONV(RMAX,DARRAY,K,15,5)                                    00046600
      K=K+15                                                            00046700
      CALL CFORM('   AT PATCH NUMBER',DARRAY,K,18)                      00046800
      K=K+18                                                            00046900
      CALL ICONV(ICMAX,DARRAY,K,5)                                      00047000
      CALL CPRIN1(DARRAY)                                               00047100
      CALL CFORM('MINIMUM SIGNED CURVATURE AND RADIUS=',DARRAY,10,36)   00047200
      K=46                                                              00047300
      CALL FCONV(CMIN,DARRAY,K,15,5)                                    00047400
      K=K+17                                                            00047500
      CALL FCONV(RMIN,DARRAY,K,15,5)                                    00047600
      K=K+15                                                            00047700
      CALL CFORM('   AT PATCH NUMBER',DARRAY,K,18)                      00047800
      K=K+18                                                            00047900
      CALL ICONV(ICMIN,DARRAY,K,5)                                      00048000
      CALL CPRIN1(DARRAY)                                               00048100
C                                                                       00048200
C                                                                       00048300
      IF(NMESH.NE.2) GO TO 480                                          00048400
      CALL VORSCH(15,DARRAY)                                            00048450
      CALL CFORM('0',DARRAY,1,1)                                        00048500
      CALL CPRIN1(DARRAY)                                               00048600
      CALL CFORM('MESH PATTERN OF POINTS AND NORMALS',DARRAY,10,34)     00048700
      CALL CPRIN1(DARRAY)                                               00048800
      CALL CFORM('0  POINT',DARRAY,1,8)                                 00048900
      K=17                                                              00049000
      CALL CFORM('X',DARRAY,K,1)                                        00049100
      K=K+13                                                            00049200
      CALL CFORM('Y',DARRAY,K,1)                                        00049300
      K=K+13                                                            00049400
      CALL CFORM('Z',DARRAY,K,1)                                        00049500
      K=K+26                                                            00049600
      CALL CFORM('SNI',DARRAY,K,3)                                      00049700
      K=K+13                                                            00049800
      CALL CFORM('SNJ',DARRAY,K,3)                                      00049900
      K=K+13                                                            00050000
      CALL CFORM('SNK',DARRAY,K,3)                                      00050100
      CALL CPRIN1(DARRAY)                                               00050200
C                                                                       00050300
      DO 440 IMM=1,NS                                                   00050400
C                                                                       00050500
      CALL VORSCH( 5,DARRAY)                                            00050550
      CALL CFORM('0',DARRAY,1,1)                                        00050600
      CALL CFORM('SPLINE NUMBER=',DARRAY,15,14)                         00050700
      CALL ICONV(IMM,DARRAY,30,6)                                       00050800
      CALL CFORM('(V=....)',DARRAY,40,8)                                00050810
      CALL ICONV(IMM-1,DARRAY,43,4)                                     00050820
      CALL CPRIN1(DARRAY)                                               00050900
C                                                                       00051000
      DO 440 IIP=1,NP                                                   00051100
      NCURR=(IMM-1)*NP+IIP                                              00051200
C                                                                       00051300
      CALL VORSCH ( 1,DARRAY)                                           00051350
      CALL ICONV(IIP,DARRAY,4,4)                                        00051400
      CALL CFORM('*',DARRAY,8,1)                                        00051500
      K=12                                                              00051600
      DO 3050 LLL=1,3                                                   00051700
      CALL FCONV(SCAN(IPMESH+NCURR*3-3+LLL),DARRAY,K,12,5)              00051800
      CALL CFORM(',',DARRAY,K+12,1)                                     00051900
      K=K+13                                                            00052000
 3050 CONTINUE                                                          00052100
      K=K+10                                                            00052200
      DO 3051 LN=1,3                                                    00052300
      CALL FCONV(SCAN(ISNMES+NCURR*3-3+LN),DARRAY,K,12,5)               00052400
      IF(LN.LT.3) CALL CFORM(',',DARRAY,K+12,1)                         00052500
      K=K+13                                                            00052600
 3051 CONTINUE                                                          00052700
      CALL CFORM('(U=....)',DARRAY, K+6,8)                              00052710
      CALL ICONV(IIP-1,DARRAY,K+9,4)                                    00052720
      CALL CPRIN1(DARRAY)                                               00052800
C                                                                       00052900
  440 CONTINUE                                                          00053000
C                                                                       00053100
C        PRINT OUT CROSS SPLINE INFORMATION                             00053200
C                                                                       00053300
      CALL CFORM('0',DARRAY,1,1)                                        00053400
      CALL CPRIN1(DARRAY)                                               00053500
C                                                                       00053600
      DO 450 IIP=1,NP                                                   00053700
      CALL VORSCH ( 5,DARRAY)                                           00053750
      CALL CFORM('0',DARRAY,1,1)                                        00053800
      CALL CFORM('CROSS SPLINE NUMBER=',DARRAY,15,20)                   00053900
      CALL ICONV(IIP,DARRAY,36,6)                                       00054000
      CALL CFORM('(U=....)',DARRAY,46,8)                                00054010
      CALL ICONV(IIP-1,DARRAY, 49,4)                                    00054020
      CALL CPRIN1(DARRAY)                                               00054100
C                                                                       00054200
      DO 450 IMM=1,NS                                                   00054300
      MCURR=IMM*NP-(NP-IIP)                                             00054400
      CALL VORSCH ( 1,DARRAY)                                           00054450
      CALL ICONV(IMM,DARRAY,4,4)                                        00054500
      CALL CFORM('*',DARRAY,8,1)                                        00054600
      K=12                                                              00054700
      DO 460 LLL=1,3                                                    00054800
      CALL FCONV(SCAN(IPMESH+MCURR*3-3+LLL),DARRAY,K,12,5)              00054900
      CALL CFORM(',',DARRAY,K+12,1)                                     00055000
       K=K+13                                                           00055100
 460  CONTINUE                                                          00055200
      K=K+10                                                            00055300
      DO 470 LN=1,3                                                     00055400
      CALL FCONV(SCAN(ISNMES+MCURR*3-3+LN),DARRAY,K,12,5)               00055500
      IF(LN.LT.3) CALL CFORM(',',DARRAY,K+12,1)                         00055600
      K=K+13                                                            00055700
 470  CONTINUE                                                          00055800
      CALL CFORM('(V=....)',DARRAY, K+6,8)                              00055810
      CALL ICONV(IMM-1,DARRAY,K+9,4)                                    00055820
      CALL CPRIN1(DARRAY)                                               00055900
 450  CONTINUE                                                          00056000
C                                                                       00056100
  480 CONTINUE                                                          00056200
  130 RETURN                                                            00056300
      END                                                               00056400
**** SOURCE FILE : M0004143.V04   ***
*
      SUBROUTINE SSPLIN(S,IRR)                                          00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION S(4,6,31)                                               00000300
C------ S IS AN INPUT ARRAY CONTAINING ALL POINTS AND CONSTRAINTS       00000400
C------ FOR A SPLINE FIT                                                00000500
C------ UPON RETURN S CONTAINS ALL OF THE PROCESSED OUTPUT DATA         00000600
C------ IRR IS AN ERROR INDICATOR.  ON  RETURN IRR IS ZERO IF           00000700
C------ NO ERRORS OCCURRED DURING PROCESSING WHILE IF AN                00000800
C------ ERROR DID OCCUR IRR GIVES THE APPROPRIATE ERROR NUMBER          00000900
C------ THE STRUCTURE OF S( IC, IL, IB ) IS AS FOLLOWS                  00001000
C------ IB IS THE BLOCK OR POINT NUMBER( THE FIRST BLOCK IS A           00001100
C------ HEADER)                                                         00001200
C------ IL  IS THE LINE NUMBER OF THE BLOCK                             00001300
C------ IC IS THE COORDINATE NUMBER OF THE LINE                         00001400
C------ ON INPUT S IS STRUCTURED AS FOLLOWS                             00001500
C      S(1-3,1,2) = X,Y,Z OF THE INPUT POINT                            00001600
C      S(1-4,2,2) = I,J,K OF TANSPL CONSTRAINT AND INDICATOR(0 OR 1)    00001700
C      S(1-4,3,2) = I,J,K OF CRSSPL CONSTRAINT AND INDICATOR(0 OR 1)    00001800
C      S(1-4,4,2) = I,J,K OF NORMAL CONSTRAINT AND INDICATOR(0 OR 1)    00001900
C      S(1,5,2) = WEIGHT FACTOR FOR SMOOTHING                           00002000
C      S(2,5,2) = LIMIT FACTOR TO LIMIT MOVEMENT IN SMOOTHING           00002100
C      S(1-4,6,2) ,S(4,1,2) AND S(3-4,5,2) ARE NOT INITIATED INPUT      00002200
C------ OUTPUT CONTAINS THE FOLLOWING ADDITIONAL INFORMATION            00002300
C      S(1-3,1,2) = X,Y,Z OF THE SMOOTHED INPUT POINT                   00002400
C      S(4,1,2)   = DISTANCE FROM THIS POINT TO THE NEXT                00002500
C      S(1-3,2,2) = I,J,K OF UNIT TANGENT VECTOR GENERATED AT THE PT    00002600
C      S(1,5,2) = WEIGHT WHICH GIVES CERTITUDE(1.0)                     00002700
C      S(2,5,2) = INPUT LIMIT                                           00002800
C      S(3,5,2) = ORIGINAL INPUT WEIGHT                                 00002900
C      S(4,5,2) =  MEASUREMENT OF WILDNESS RELATIVE TO ADJACENT POINTS  00003000
C      S(1-3,6,2) = X,Y,Z OF THE ORIGINAL INPUT POINT                   00003100
C      S(4,6,2)   = DISTANCE OF OUTPUT POINT FROM INPUT                 00003200
C------ THE HEADER CONTAINS THE FOLLOWING INFORMATION                   00003300
C      S(2,1,1) = LENGTH OF THE HEADER TABLE IN BLOCKS(=1)              00003400
C      S(3,1,1) = ORIGIN OF CALL  SSURF/MESH = 1, SCURV/SPLINE=2        00003500
C                 SCURV/CURSEG =3                                       00003600
C      S(4,1,1) = NUMBER OF POINT BLOCKS USED(GE.2)                     00003700
      DIMENSION P(3,30),W(30),D(30),TV(3,2),V(3,30)                     00003800
      DIMENSION T(3),TA(3),TB(3)                                        00003900
C------ LOGICAL FLAGS ARE TRUE WHEN NO CONSTRAINT IS PRESENT            00004100
C------ ID(1,I) TRUE MEANS THERE IS NO TANSPL CONSTRAINT AT ITH PT      00004200
C------ ID(2,I) TRUE MEANS THERE IS NO CRSSPL CONSTRAINT AT ITH PT      00004300
C------ ID(3,I) TRUE MEANS THERE IS NO NORMAL CONSTRAINT AT ITH PT      00004400
      LOGICAL ITAN,ICRS,INOR,IWGT,ILIM,ID(3,31)                         00004500
      DATA SMAL1,SMAL2/1.0D-8,1.0D-12/                                  00004510
      NP=S(4,1,1)                                                       00004600
      IORG=S(3,1,1)                                                     00004700
      NHD=S(2,1,1)                                                      00004800
      NTOT=NP+NHD                                                       00004900
      NPL=NHD+1                                                         00005000
      NPLP=NPL+1                                                        00005100
      NPH=NTOT                                                          00005200
      NPHM=NPH-1                                                        00005300
C------ MOVE INPUT POINTS INTO SIXTH LINE FOR SAVING                    00005400
      DO 30 I=NPL,NPH                                                   00005500
      S(4,6,I)=0.0                                                      00005600
      DO 20 L=1,3                                                       00005700
   20 S(L,6,I)=S(L,1,I)                                                 00005800
   30 CONTINUE                                                          00005900
C------ THERE SHOULD BE AT LEAST TWO POINTS IN A SPLINE                 00006000
      IRR=5901                                                          00006100
      IF(NP.LT.2) GO TO 998                                             00006200
C------ CHECK FOR IDENTICAL POINTS                                      00006300
      IF(IORG.EQ.3) GO TO 200                                           00006400
 10   IRR=5902                                                          00006500
      DO 100 I=NPL,NPHM                                                 00006600
      INX=I+1                                                           00006700
      SUM=0.0                                                           00006800
      DO 110 L=1,3                                                      00006900
      SUM=SUM+(S(L,1,INX)-S(L,1,I))**2                                  00007000
  110 CONTINUE                                                          00007100
      IF(SUM.LT.SMAL1) GO TO 998                                        00007200
  100 CONTINUE                                                          00007300
      GO TO 300                                                         00007400
  200 CONTINUE                                                          00007500
C------ CHECK FOR ANY TWO POINTS IDENTICAL IN CURSEG CASE               00007600
      IRR=5903                                                          00007700
      DO 210 I=NPL,NPHM                                                 00007800
      INX=I+1                                                           00007900
      DO 210 J=INX,NPH                                                  00008000
      SUM=0.0                                                           00008100
      DO 220 L=1,3                                                      00008200
      SUM=SUM+(S(L,1,J)-S(L,1,I))**2                                    00008300
  220 CONTINUE                                                          00008400
      IF(SUM.LT.SMAL1) GO TO 998                                        00008500
  210 CONTINUE                                                          00008600
  300 CONTINUE                                                          00008700
C------ DETERMINE THE PRESENCE OF CONSTRAINTS OF DIFFERENT TYPES        00008800
C1----- IF A FLAG IS TRUE THEN THERE IS NO CONSTRAINT OF THIS TYPE      00008900
      INOR=.TRUE.                                                       00009000
      ITAN=.TRUE.                                                       00009100
      ICRS=.TRUE.                                                       00009200
      IWGT=.TRUE.                                                       00009300
      ILIM=.TRUE.                                                       00009400
      DO 340 I=NPL,NPH                                                  00009500
      DO 340 K=1,3                                                      00009600
      KK=K+1                                                            00009700
      DUM=S(4,KK,I)-1.0                                                 00009800
      DUM=DABS(DUM)                                                     00009900
      ID(K,I)=.TRUE.                                                    00010000
      IF(DUM.GT.SMAL1) GO TO 340                                        00010100
      ID(K,I)=.FALSE.                                                   00010200
  340 CONTINUE                                                          00010300
      DO 310 I=NPL,NPH                                                  00010400
      IF(.NOT.ID(1,I)) ITAN=.FALSE.                                     00010500
      IF(.NOT.ID(2,I)) ICRS=.FALSE.                                     00010600
      IF(.NOT.ID(3,I)) INOR=.FALSE.                                     00010700
C---  CII UPDATE TO INITIALIZE WT AND LIM. NIU-APR/75E                  00010800
      IF(DABS(S(1,5,I)-1.0).GT.SMAL1) IWGT=.FALSE.                      00010900
      IF(DABS(S(2,5,I)).GT.SMAL1) ILIM=.FALSE.                          00011000
  310 CONTINUE                                                          00011100
C------ SKIP THE NEXT SECTION IF WEIGHTS ARE NOT EFFECTED               00011200
      IF(IWGT) GO TO 500                                                00011300
C------ WEIGHTS ARE PRESENT, MAKE A SMOOTHING PASS TO OBTAIN NEW        00011400
C------ POINT POSITIONS                                                 00011500
  400 CONTINUE                                                          00011600
      DO 420 I=NPL,NPH                                                  00011700
      DO 410 L=1,3                                                      00011800
      DO 410 J=1,2                                                      00011900
  410 TV(L,J)=0.0                                                       00012000
      J=I-NHD                                                           00012100
      W(J)=S(1,5,I)                                                     00012200
      S(3,5,I)=W(J)                                                     00012300
      DO 420 L=1,3                                                      00012400
  420 P(L,J)=S(L,1,I)                                                   00012500
      IDC=5                                                             00012600
      CALL SMOOTH(P,W,D,TV,V,NP,IDC)                                    00012700
      IRR=5904                                                          00012800
      IF(IDC.LT.0) GO TO 998                                            00012900
C------ RELOAD NEW POINTS INTO THE S ARRAY                              00013000
      DO 430 I=NPL,NPH                                                  00013100
      J=I-NHD                                                           00013200
      S(1,5,I)=1.0                                                      00013300
      IF(ILIM) GO TO 450                                                00013400
C------ VAL IS THE DISTANCE BETWEEN THE OLD POINT AND NEW POINT         00013500
      VAL=DSQRT((P(1,J)-S(1,1,I))**2+(P(2,J)-S(2,1,I))**2               00013600
     X          +(P(3,J)-S(3,1,I))**2)                                  00013700
      IF(VAL.LE.DABS(S(2,5,I))) GO TO 450                               00013800
C------ BRING THE POINT BACK INTO THE LIMITED SPHERE AROUND THE OLD     00013900
      VAL=DABS(S(2,5,I))/VAL                                            00014000
      DO 440 L=1,3                                                      00014100
  440 P(L,J)=S(L,1,I)+VAL*(P(L,J)-S(L,1,I))                             00014200
      VAL=DABS(S(2,5,I))                                                00014300
  450 CONTINUE                                                          00014400
      DO 460 L=1,3                                                      00014500
      S(L,6,I)=S(L,1,I)                                                 00014600
      S(L,1,I)=P(L,J)                                                   00014700
  460 CONTINUE                                                          00014800
      S(4,6,I)=VAL                                                      00014900
  430 CONTINUE                                                          00015000
C------ NOW RECYCLE THRU PRIOR LOGIC WITH NEW POINTS AND NO WEIGHTS     00015100
      GO TO 10                                                          00015200
  500 CONTINUE                                                          00015300
      IF(INOR.AND.ICRS.AND.ITAN) GO TO 700                              00015400
C------ CHECK FOR NULL CONSTRAINT VECTORS AND UNITIZE ALL               00015500
      IRR=5905                                                          00015600
      DO 600 I=NPL,NPH                                                  00015700
      DO 630 K=2,4                                                      00015800
      IF(ID(K-1,I)) GO TO 630                                           00015900
      SUM=S(1,K,I)**2+S(2,K,I)**2+S(3,K,I)**2                           00016000
      IF(SUM.LT.SMAL1) GO TO 998                                        00016100
      SUM=DSQRT(SUM)                                                    00016200
      DO 620 L=1,3                                                      00016300
  620 S(L,K,I)=S(L,K,I)/SUM                                             00016400
  630 CONTINUE                                                          00016500
  600 CONTINUE                                                          00016600
  700 CONTINUE                                                          00016700
C------ REORIENT TANSPL VECTORS BASED ON THE DIRECTION INDICATED BY PTS 00016800
      IF(ITAN) GO TO 790                                                00016900
      DO 710 I=NPL,NPH                                                  00017000
      IF(ID(1,I)) GO TO 710                                             00017100
      NLO=MAX0(I-1,NPL)                                                 00017200
      NHI=MIN0(I+1,NPH)                                                 00017300
      SUM=0.0                                                           00017400
      DO 720 L=1,3                                                      00017500
      T(L)=S(L,1,NHI)-S(L,1,NLO)                                        00017600
      SUM=SUM+T(L)*S(L,2,I)                                             00017700
  720 CONTINUE                                                          00017800
      IF(SUM.GE.0.0) GO TO 710                                          00017900
C------ REORIENT THIS TANGENT CONSTRAINT                                00018000
      DO 730 L=1,3                                                      00018100
  730 S(L,2,I)=-S(L,2,I)                                                00018200
  710 CONTINUE                                                          00018300
  790 CONTINUE                                                          00018400
      IRR=5909                                                          00018500
C------ GENERATE A TANSPL CONSTRAINT WHEREEVER A NORMAL IS PRESENT      00018600
      IF(INOR) GO TO 980                                                00018700
      DO 910 I=NPL,NPH                                                  00018800
C------ IF THERE ALREADY IS A TANSPL CONTRAINT OR NO NORMAL, SKIP       00018900
      IF(.NOT.ID(1,I).OR.ID(3,I)) GO TO 910                             00019000
      NLO=MAX0(I-1,NPL)                                                 00019100
      NHI=MIN0(I+1,NPH)                                                 00019200
      IF(NHI-NLO.GT.1) GO TO 920                                        00019300
      DO 930 L=1,3                                                      00019400
  930 T(L)=S(L,1,NHI)-S(L,1,NLO)                                        00019500
      GO TO 950                                                         00019600
  920 CALL PARINT(S(1,1,NLO),S(1,1,I),S(1,1,NHI),T,DUM,2,IRRR)          00019700
      IF(IRRR.NE.0) GO TO 998                                           00019800
  950 VAL=T(1)*S(1,4,I)+T(2)*S(2,4,I)+T(3)*S(3,4,I)                     00019900
      DO 960 L=1,3                                                      00020000
  960 T(L)=T(L)-VAL*S(L,4,I)                                            00020100
      CALL SNORM(T,S(1,2,I),IRRR)                                       00020200
      IF(IRRR.NE.0) GO TO 998                                           00020300
      ID(1,I)=.FALSE.                                                   00020400
      S(4,2,I)=-1.0                                                     00020500
  910 CONTINUE                                                          00020600
  980 CONTINUE                                                          00020700
      IF(IORG.EQ.3) GO TO 900                                           00020800
C END TANGENTS ARE NOT GENERATED IN CURSEG CASE                         00020900
C------ GENERATE TANGENTS AT THE ENDS                                   00021000
      IRR=5909                                                          00021100
      NDIF=NPH-NPL                                                      00021200
      DO 800 I=NPL,NPH,NDIF                                             00021300
      IF(.NOT.ID(1,I)) GO TO 800                                        00021400
      IF(I.EQ.NPL) GO TO 830                                            00021500
      IF(I.EQ.NPH) GO TO 860                                            00021600
  830 IF(NP.EQ.2.AND..NOT.ID(1,I+1)) GO TO 840                          00021700
      IF(NP.GT.2.AND.S(4,2,I+1).EQ.1.0) GO TO 840                       00021800
      IF(NP.GT.2) GO TO 836                                             00021900
      DO 835 L=1,3                                                      00022000
  835 T(L)=S(L,1,I+1)-S(L,1,I)                                          00022100
      CALL SNORM(T,T,IDUM)                                              00022200
      GO TO 880                                                         00022300
  836 CALL PARINT(S(1,1,I),S(1,1,I+1),S(1,1,I+2),T,DUM,1,IRRR)          00022400
      GO TO 880                                                         00022500
  840 CALL PARINT(S(1,1,I),S(1,2,I+1),S(1,1,I+1),T,DUM,21,IRRR)         00022600
      IF(IRRR.NE.0) GO TO 998                                           00022700
      GO TO 880                                                         00022800
  860 IF(NP.EQ.2.AND..NOT.ID(1,I-1)) GO TO 870                          00022900
      IF(NP.GT.2.AND.S(4,2,I-1).EQ.1.0) GO TO 870                       00023000
      IF(NP.GT.2) GO TO 866                                             00023100
      DO 865 L=1,3                                                      00023200
  865 T(L)=S(L,1,I)-S(L,1,I-1)                                          00023300
      CALL SNORM(T,T,IDUM)                                              00023400
      GO TO 880                                                         00023500
  866 CALL PARINT(S(1,1,I-2),S(1,1,I-1),S(1,1,I),T,DUM,3,IRRR)          00023600
      GO TO 880                                                         00023700
  870 CALL PARINT(S(1,1,I-1),S(1,2,I-1),S(1,1,I),T,DUM,13,IRRR)         00023800
      IF(IRRR.NE.0) GO TO 998                                           00023900
  880 CONTINUE                                                          00024000
      DO 890 L=1,3                                                      00024100
  890 S(L,2,I)=T(L)                                                     00024200
      S(4,2,I)=-1.0                                                     00024300
      ID(1,I)=.FALSE.                                                   00024400
  800 CONTINUE                                                          00024500
C------ PROJECT ALL TANSPL AND CRRSPL CONSTRAINTS INTO THE PLANE OF THE 00024600
C------ NORMAL CONSTRAINT AND UNITIZE THEM                              00024700
  900 CONTINUE                                                          00024800
      IF(INOR) GO TO 1100                                               00024900
      DO 1000 I=NPL,NPH                                                 00025000
      IF(ID(3,I)) GO TO 1000                                            00025100
      DO 1010 K=2,3                                                     00025200
      IRR=5904+K                                                        00025300
      IF(ID(K-1,I)) GO TO 1010                                          00025400
      VAL=S(1,K,I)*S(1,4,I)+S(2,K,I)*S(2,4,I)+S(3,K,I)*S(3,4,I)         00025500
      DO 1015 L=1,3                                                     00025600
 1015 S(L,K,I)=S(L,K,I)-VAL*S(L,4,I)                                    00025700
      CALL SNORM(S(1,K,I),S(1,K,I),IRRR)                                00025800
      IF(IRRR.NE.0) GO TO 998                                           00025900
 1010 CONTINUE                                                          00026000
 1000 CONTINUE                                                          00026100
 1100 CONTINUE                                                          00026200
C------ CHECK FOR THE COLLINEARITY OF CONSTRAINTS                       00026300
      IF(INOR.OR.ICRS) GO TO 1300                                       00026400
      IRR=5908                                                          00026500
      DO 1200 I=NPL,NPH                                                 00026600
      IF(ID(1,I).OR.ID(2,I).OR.ID(3,I)) GO TO 1200                      00026700
      CALL CROSS(S(1,2,I),S(1,3,I),T)                                   00026800
      VAL=T(1)*S(1,4,I)+T(2)*S(2,4,I)+T(3)*S(3,4,I)                     00026900
      IF(DABS(VAL).LT.SMAL2) GO TO 998                                  00027000
 1200 CONTINUE                                                          00027100
 1300 CONTINUE                                                          00027200
C------ CHECK FOR WILD POINTS                                           00027300
      IF(NP.EQ.2) GO TO 1500                                            00027400
      IRR=5910                                                          00027500
      DO 1400 I=NPLP,NPHM                                               00027600
      DO 1410 L=1,3                                                     00027700
 1410 T(L)=S(L,1,I+1)-S(L,1,I-1)                                        00027800
      DO 1420 L=1,3                                                     00027900
 1420 TA(L)=S(L,1,I)-S(L,1,I-1)                                         00028000
      VAL=T(1)*TA(1)+T(2)*TA(2)+T(3)*TA(3)                              00028100
      IF(VAL.LE.0.0) GO TO 998                                          00028200
      DO 1430 L=1,3                                                     00028300
 1430 TB(L)=S(L,1,I+1)-S(L,1,I)                                         00028400
      VAL=T(1)*TB(1)+T(2)*TB(2)+T(3)*TB(3)                              00028500
      IF(VAL.LE.0.0) GO TO 998                                          00028600
      CALL CROSS(T,TA,TB)                                               00028700
      VAL=TB(1)*TB(1)+TB(2)*TB(2)+TB(3)*TB(3)                           00028800
      VALA=T(1)*T(1)+T(2)*T(2)+T(3)*T(3)                                00028900
C------ WILD POINT MEASURE -- RATIO OF THE HEIGHT TO BASE               00029000
      S(4,5,I)=DSQRT(VAL)/VALA                                          00029100
 1400 CONTINUE                                                          00029200
 1500 CONTINUE                                                          00029300
      S(4,5,NPL)=0                                                      00029400
      S(4,5,NPH)=0                                                      00029500
C------ BRANCH TO SPLINE OR CURSEG PROCESSING                           00029600
      GO TO (2000,2000,3000),IORG                                       00029700
C------ COLLECT SUBSPLINES ONE BY ONE AND CONDUCT SMOOTHING             00029800
 2000 IBEG=NPL                                                          00029900
      ICUR=NPL                                                          00030000
 2010 NCUR=1                                                            00030100
      IBEG=ICUR                                                         00030200
      IF(IBEG.EQ.NTOT) GO TO 2160                                       00030300
      DO 2040 L=1,3                                                     00030400
 2040 P(L,NCUR)=S(L,1,ICUR)                                             00030500
      W(NCUR)=1.                                                        00030600
 2020 NCUR=NCUR+1                                                       00030700
      ICUR=ICUR+1                                                       00030800
      IF(.NOT.ID(1,ICUR)) GO TO 2100                                    00030900
      DO 2030 L=1,3                                                     00031000
 2030 P(L,NCUR)=S(L,1,ICUR)                                             00031100
      W(NCUR)=1.0                                                       00031200
      GO TO 2020                                                        00031300
 2100 IF(NCUR.EQ.2) GO TO 2010                                          00031400
      DO 2110 L=1,3                                                     00031500
      P(L,NCUR)=S(L,1,ICUR)                                             00031600
      TV(L,1)=S(L,2,IBEG)                                               00031700
 2110 TV(L,2)=S(L,2,ICUR)                                               00031800
      IDC=2                                                             00031900
      W(NCUR)=1.0                                                       00032000
      NREL=ICUR-IBEG+1                                                  00032100
      CALL SMOOTH (P,W,D,TV,V,NREL,IDC)                                 00032200
      IRR=5920+IABS(IDC)                                                00032300
      IF(IDC.LT.0) GO TO 998                                            00032400
      DO 2120 J=IBEG,ICUR                                               00032500
      K=J-IBEG+1                                                        00032600
      S(4,2,J)=1.0                                                      00032700
      IF((J-IBEG)*(J-ICUR).NE.0) S(4,2,J)=-1.0                          00032800
      ID(1,ICUR)=.FALSE.                                                00032900
      DO 2130 L=1,3                                                     00033000
      S(L,1,J)=P(L,K)                                                   00033100
 2130 S(L,2,J)=V(L,K)                                                   00033200
      S(4,1,J)=D(K)                                                     00033300
 2120 CONTINUE                                                          00033400
      IF(ICUR.LT.NTOT) GO TO 2010                                       00033500
 2160 CONTINUE                                                          00033600
      DO 2150 I=NPL,NPHM                                                00033700
      J=I+1                                                             00033800
      S(4,1,I)=DSQRT((S(1,1,J)-S(1,1,I))**2+(S(2,1,J)-S(2,1,I))**2      00033900
     X          +(S(3,1,J)-S(3,1,I))**2)                                00034000
 2150 CONTINUE                                                          00034100
      GO TO 999                                                         00034200
C------ CURSEG PROCESSING                                               00034300
 3000 CONTINUE                                                          00034400
  999 IRR=0                                                             00034500
      RETURN                                                            00034600
C------ ERROR RETURN.  IRR IS NOT ZERO.                                 00034700
  998 CONTINUE                                                          00034800
      S(1,2,1)=IRR                                                      00034900
      RETURN                                                            00035000
      END                                                               00035100
**** SOURCE FILE : M0008157.V11   ***
*
       SUBROUTINE SSTRA(XMA,ANA,CAN,ISPRNT)                             00000100
C----------  THE PURPOSE OF THIS SUBROUTINE IS TO PERFORM GEOMETRY      00000200
C----------  TRANSFORMATION FOR THE SCULPTURED SURFACES.                00000300
C----------      XMA     TRANSFORMATION MATRIX                          00000400
C----------      ANA     SURFACE NAME                                   00000500
C----------      CAN     CANON OF THE SURFACE                           00000600
C----------      ISPRNT  PRINT FLAG                                     00000700
C----------                                                             00000800
       IMPLICIT DOUBLE PRECISION(A-H,O-Z)                               00000900
       CHARACTER BLANK*8                                                00000910
       INTEGER BCDF                                                     00000920
       DIMENSION ANA(10),CAN(*),A(4,4),B(4,24),C(4,24)                  00001000
       DIMENSION IFLG(4),W(16),XMA(12)                                  00001100
      CHARACTER*8 TNAME,ANAME*16                                        00001130
      INCLUDE 'DARRAY.INC'                                              00001180
C                                                                       00001190
       DATA BLANK/'        '/                                           00001200
C                                                                       00001208
C---      BUDD CHANGE TO TEST TABPRT FLAG FOR PRINT OUTPUT.             00001210
       IGNC=0                                                           00001300
       CALL HOLFRM(ANA(3),ANAME,1,8,NWD)                                00001400
       ANAME(9:16)=BLANK                                                00001401
      IF(ISPRNT.EQ.0) GO TO 2                                           00001410
       DO 1 I=1,15                                                      00001500
       I1=I*8                                                           00001510
  1    DARRAY(I1-7:I1)=BLANK                                            00001600
       CALL CFORM('1THE FOLLOWING SSURF OR SCURV WAS ',DARRAY,1,34)     00001700
       CALL CFORM('TRANSFORMED BY THE MATRIX',DARRAY,36,25)             00001800
       CALL CPRINT(DARRAY)                                              00001900
       CALL CFORM('0',DARRAY,1,1)                                       00002000
       CALL CPRINT(DARRAY)                                              00002100
C***  INPUT MATRIX                                                      00002200
    2 CONTINUE                                                          00002210
       DO 7 I=1,3                                                       00002300
       DO 7 J=1,4                                                       00002400
       LL=(I-1)*4+J                                                     00002500
       A(I,J)=XMA(LL)                                                   00002600
  7    CONTINUE                                                         00002700
       A(4,1)=0.0                                                       00002800
       A(4,2)=0.0                                                       00002900
       A(4,3)=0.0                                                       00003000
       A(4,4)=1.0                                                       00003100
C***  ************                                                      00003200
      IF(ISPRNT.EQ.0) GO TO 3                                           00003210
       DO 12 I=1,4                                                      00003300
       K=2                                                              00003400
       DO 11 J=1,4                                                      00003500
       CALL FCONV(A(I,J),DARRAY,K,12,5)                                 00003600
       K=K+12                                                           00003700
 11    CONTINUE                                                         00003800
       CALL CPRINT(DARRAY)                                              00003900
 12    CONTINUE                                                         00004000
       CALL CFORM('0',DARRAY,1,1)                                       00004100
       CALL CPRINT(DARRAY)                                              00004200
C***  ************                                                      00004300
    3 CONTINUE                                                          00004310
       NPCH=CAN(4)                                                      00004400
       NNN=CAN(5)                                                       00004500
       DO 15 I=1,16                                                     00004600
 15    W(I)=0.0                                                         00004700
       W(1)=1.0                                                         00004800
       W(2)=W(1)                                                        00004900
       W(5)=W(1)                                                        00005000
       W(6)=W(1)                                                        00005100
       DO 500 N=1,NPCH                                                  00005200
       I=11+6*(N-1)                                                     00005300
       IFLG(1)=CAN(I)                                                   00005400
       IFLG(2)=CAN(I+1)                                                 00005500
       IFLG(3)=CAN(I+2)                                                 00005600
       IFLG(4)=CAN(I+3)                                                 00005700
      IF(IFLG(2).NE.0) GOTO 8                                           00005720
C NON NATIVE PATCH TRANSFORMATION                                       00005730
      IGNC=1                                                            00005735
      CALL HOLFRM(CAN(I+4),TNAME,1,8,NWD)                               00005740
      CALL TEVAL(TNAME,XMA,CAN(IFLG(1)))                                00005760
      GOTO 500                                                          00005770
    8 CONTINUE                                                          00005780
       IV=CAN(I+4)                                                      00005800
       IF(IV.LT.0) GO TO 1000                                           00005900
C----------  GENERAL CURVE TYPE BRANCH TO 1000                          00006000
C----------  COONS BICUBIC PATCH FOLLOWS                                00006100
       IF(IFLG(4).NE.4) GO TO 19                                        00006200
       IU=IV+47                                                         00006300
       DO 17 IW=1,16                                                    00006400
       IX=IU+IW                                                         00006500
 17    W(IW)=CAN(IX)                                                    00006600
 19    CONTINUE                                                         00006700
C----------  NON TWIST CONSTANT                                         00006800
       MM=12                                                            00006900
       NST=3                                                            00007000
       IH=1                                                             00007100
       IF (IFLG(1).EQ.3) GO TO 50                                       00007200
C----------  TWIST CONSTANT                                             00007300
       MM=16                                                            00007400
       NST=4                                                            00007500
   50  IF(IFLG(1).LT.3) GO TO 900                                       00007600
       DO 400 IJK=1,NST                                                 00007700
       IA=IV                                                            00007800
       IB=IV+MM                                                         00007900
       IC=IV+MM+MM                                                      00008000
       B(1,1)=CAN(IA)                                                   00008100
       B(2,1)=CAN(IB)                                                   00008200
       B(3,1)=CAN(IC)                                                   00008300
       B(4,1)=W(IH)                                                     00008400
       B(1,2)=CAN(IA+1)                                                 00008500
       B(2,2)=CAN(IB+1)                                                 00008600
       B(3,2)=CAN(IC+1)                                                 00008700
       B(4,2)=W(IH+1)                                                   00008800
       L=4                                                              00008900
       IF((IJK.EQ.3).AND.(NST.EQ.3)) L=2                                00009000
       B(1,3)=CAN(IA+L)                                                 00009100
       B(2,3)=CAN(IB+L)                                                 00009200
       B(3,3)=CAN(IC+L)                                                 00009300
       B(4,3)=W(IH+L)                                                   00009400
       B(1,4)=CAN(IA+L+1)                                               00009500
       B(2,4)=CAN(IB+L+1)                                               00009600
       B(3,4)=CAN(IC+L+1)                                               00009700
       B(4,4)=W(IH+L+1)                                                 00009800
       DO 40 KA=1,4                                                     00009900
       DO 30 II=1,4                                                     00010000
       D=0.0                                                            00010100
       DO 20 JJ=1,4                                                     00010200
       C(II,KA)=A(II,JJ)*B(JJ,KA)+D                                     00010300
 20    D=C(II,KA)                                                       00010400
 30    CONTINUE                                                         00010500
 40    CONTINUE                                                         00010600
       IA=IV                                                            00010700
       IB=IV+MM                                                         00010800
       IC=IV+MM+MM                                                      00010900
       CAN(IA)=C(1,1)                                                   00011000
       CAN(IB)=C(2,1)                                                   00011100
       CAN(IC)=C(3,1)                                                   00011200
       CAN(IA+1)=C(1,2)                                                 00011300
       CAN(IB+1)=C(2,2)                                                 00011400
       CAN(IC+1)=C(3,2)                                                 00011500
       CAN(IA+L)=C(1,3)                                                 00011600
       CAN(IB+L)=C(2,3)                                                 00011700
       CAN(IC+L)=C(3,3)                                                 00011800
       CAN(IA+L+1)=C(1,4)                                               00011900
       CAN(IB+L+1)=C(2,4)                                               00012000
       CAN(IC+L+1)=C(3,4)                                               00012100
       IV=IV+2                                                          00012200
       IF(IJK.EQ.2) IV=IV+4                                             00012300
       IH=IH+2                                                          00012400
       IF(IJK.EQ.2) IH=IH+4                                             00012500
400    CONTINUE                                                         00012600
       GO TO 500                                                        00012700
C----------  GENCUR  SURFACE                                            00012800
 1000  IGNC=1                                                           00012900
       DO 1900 JK=1,4                                                   00013000
       ISC=IFLG(JK)                                                     00013100
       IF(ISC.EQ.0) GO TO 1900                                          00013200
       NARC=CAN(ISC+3)                                                  00013300
       NPT=NARC+1                                                       00013400
       IQ=CAN(ISC+4)+ISC-1                                              00013500
       IA=IQ                                                            00013600
       DO 1200 NR=1,NARC                                                00013700
       IB=IA                                                            00013800
       DO 1100 M=1,4                                                    00013900
       B(1,M)=CAN(IB)                                                   00014000
       B(2,M)=CAN(IB+4)                                                 00014100
       B(3,M)=CAN(IB+8)                                                 00014200
       B(4,M)=CAN(IB+12)                                                00014300
       IB=IB+1                                                          00014400
 1100  CONTINUE                                                         00014500
       IB=IA                                                            00014600
C----------  CRSSPL  AND  NANDMAL                                       00014700
       DO 1300 K=1,2                                                    00014800
       KK=K+4                                                           00014900
       IC=IB-(3-K)*4                                                    00015000
       B(1,KK)=CAN(IC)                                                  00015100
       B(2,KK)=CAN(IC+1)                                                00015200
       B(3,KK)=CAN(IC+2)                                                00015300
       B(4,KK)=0.0                                                      00015400
 1300  CONTINUE                                                         00015500
       ML=6                                                             00015600
       IF(NR.NE.NARC) GO TO 1500                                        00015700
       IA1=IA+19                                                        00015800
       IA2=IA+23                                                        00015900
       IF((CAN(IA1).EQ.0).AND.(CAN(IA2).EQ.0)) GO TO 1500               00016000
       DO 1310 K=1,2                                                    00016100
       KK=K+6                                                           00016200
       IC=IB+16+(K-1)*4                                                 00016300
       B(1,KK)=CAN(IC)                                                  00016400
       B(2,KK)=CAN(IC+1)                                                00016500
       B(3,KK)=CAN(IC+2)                                                00016600
       B(4,KK)=0.0                                                      00016700
 1310  CONTINUE                                                         00016800
       ML=8                                                             00016900
 1500  CONTINUE                                                         00017000
       DO 140 KA=1,ML                                                   00017100
       DO 130 II=1,4                                                    00017200
       D=0.0                                                            00017300
       DO 120 JJ=1,4                                                    00017400
       C(II,KA)=A(II,JJ)*B(JJ,KA)+D                                     00017500
 120   D=C(II,KA)                                                       00017600
 130   CONTINUE                                                         00017700
 140   CONTINUE                                                         00017800
       IB=IA                                                            00017900
       DO 1600 M=1,4                                                    00018000
       CAN(IB)=C(1,M)                                                   00018100
       CAN(IB+4)=C(2,M)                                                 00018200
       CAN(IB+8)=C(3,M)                                                 00018300
       CAN(IB+12)=C(4,M)                                                00018400
       IB=IB+1                                                          00018500
 1600  CONTINUE                                                         00018600
       IB=IA                                                            00018700
       DO 1700 K=1,2                                                    00018800
       KK=K+4                                                           00018900
       IC=IB-(3-K)*4                                                    00019000
       CAN(IC)=C(1,KK)                                                  00019100
       CAN(IC+1)=C(2,KK)                                                00019200
       CAN(IC+2)=C(3,KK)                                                00019300
 1700  CONTINUE                                                         00019400
       IF(ML.EQ.6) GO TO 1800                                           00019500
       DO 1710 K=1,2                                                    00019600
       KK=K+6                                                           00019700
       IC=IB+16+(K-1)*4                                                 00019800
       CAN(IC)=C(1,KK)                                                  00019900
       CAN(IC+1)=C(2,KK)                                                00020000
       CAN(IC+2)=C(3,KK)                                                00020100
 1710  CONTINUE                                                         00020200
 1800  IA=IA+24                                                         00020300
 1200  CONTINUE                                                         00020400
 1900  CONTINUE                                                         00020500
 500   CONTINUE                                                         00020600
       IF(IGNC.NE.1) GO TO 550                                          00020700
       JMD=1                                                            00020800
       CALL APT094(JMD,ANA(1),CAN(1))                                   00020900
  550 IF(ISPRNT.EQ.0) GO TO 999                                         00020910
      CALL SSPICT(CAN,ANAME,ISPRNT)                                     00021000
       GO TO 999                                                        00021100
C----------  LINEAR OR CONSTANT MATRIX, WILL NOT TRANSFORM              00021200
 900    CONTINUE                                                        00021300
 999   RETURN                                                           00021400
       END                                                              00021500
**** SOURCE FILE : M0001226.V04   ***
*
      SUBROUTINE SYCURV(ANAME,PNTS,CRL,ITY)                             00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C                                                                       00000310
      INCLUDE 'BLANKCOM.INC'                                            00000320
C                                                                       00000330
      DIMENSION PNTS(20),ANAME(7),CRL(10),CENT(10),VEC(5)               00000400
      DIMENSION CENT0(2)                                                00000800
      EQUIVALENCE (CENT0(2),CENT(1))                                    00000900
      INTEGER BCDF,ITEMP(2)                                             00000910
      EQUIVALENCE (TEMP,ITEMP(1))                                       00000920
C                                                                       00000980
C                                                                       00000990
      DO 10 I=41,49                                                     00001000
 10   CANON(I)=0.0D0                                                    00001100
      CANON(43)=2.0D0                                                   00001200
      CANON(44)=2.0D0                                                   00001300
      CANON(45)=18.0D0                                                  00001400
      ITEMP(1)=BCDF('CURS')                                             00001460
      ITEMP(2)=BCDF('EG  ')                                             00001470
      CANON(49)=TEMP                                                    00001500
      KON=49                                                            00001600
      CANON(KON+1)=19.0D0                                               00001700
      CANON(KON+2)=PNTS(1)                                              00001800
      CANON(KON+3)=PNTS(2)                                              00001900
      CANON(KON+4)=PNTS(3)                                              00002000
      IF(ITY.GT.0) GO TO 20                                             00002100
      CENT0(1)=19030000.0D0                                             00002200
       CALL APT007(CENT,CRL)                                            00002300
      VEC(1)=PNTS(1)-CENT(1)                                            00002400
      VEC(2)=PNTS(2)-CENT(2)                                            00002500
      VEC(3)=PNTS(3)-CENT(3)                                            00002600
      CANON(KON+5)=136.0D0                                              00002700
      ITEMP(1)=BCDF('TANS')                                             00002760
      ITEMP(2)=BCDF('PL  ')                                             00002770
      CANON(KON+6)=TEMP                                                 00002800
      CANON(KON+7)=20.0D0                                               00002900
C  LOESUNG FUER ZSURF SENKRECHTER ZYLINDER                              00003000
      CALL CROSS(VEC,CRL(4),CANON(KON+8))                               00003100
C  ANDERE FAELLE NICHT ABGEFANGEN !                                     00003200
      CANON(44)=3.0D0                                                   00003300
      CANON(45)=24.0D0                                                  00003400
      KON=KON+6                                                         00003500
20    CANON(KON+5)=19.0D0                                               00003600
      CANON(KON+6)=PNTS(4)                                              00003700
      CANON(KON+7)=PNTS(5)                                              00003800
      CANON(KON+8)=PNTS(6)                                              00003900
C CODE GELOESCHT                                                        00004000
C CODE GELOESCHT                                                        00004100
      CALL STRTSH(ARG1)                                                 00004150
      CALL APT108(ANAME,CRSEG,ARG1,ARG1)                                00004200
      RETURN                                                            00004300
      END                                                               00004400
**** SOURCE FILE : M0000680.V02   ***
*
      SUBROUTINE TOPGEN(SS)                                             00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---     ROUTINE TO GENERATE A TOPOLOGY TABLE FOR AN OTHERWISE COMPLETE 00000300
C---      SS DATA STRUCTURE                                             00000400
      DIMENSION SS(*)                                                   00000500
      DIMENSION P(3,4),PT(3,4),NSZ(4),NBOUN(8)                          00000600
      DATA NSZ/1,4,12,16/,NBOUN/1,2,1,3,2,4,3,4/                        00000700
      DATA ZERO,SMAL/0.0D0,1.0D-10/                                     00000800
      DATA IZERO/0/                                                     00000900
C                                                                       00001000
C---     NTOT IS THE TOTAL NUMBER OF PATCHES IN THE SS ARRAY            00001100
      NTOT=SS(4)                                                        00001200
C---    SPECIAL HANDLING FOR A GENCUR SURFACE                           00001300
      IF(SS(6).LT.5.999.OR.SS(6).GT.6.001) GO TO 10                     00001400
      ITOP1=11+NTOT*6+SS(2)                                             00001500
      GO TO 25                                                          00001600
C                                                                       00001700
   10 CONTINUE                                                          00001800
C---   TOPOLOGY TABLE IS ASSUMED REGULAR(CONTACT AT CORNER POINTS ONLY) 00001900
C---     FILL IN POINTERS FROM EACH PATCH HEADER TO TOPOLOGY TABLE      00002000
C---     ALSO ZERO OUT THE TOPOLOGY TABLE ENTRIES                       00002100
      ITOP1=10+6*(NTOT-1)+5                                             00002200
      ITOP1=SS(ITOP1)                                                   00002300
C---     ITOP1 IS THE LOCATION OF THE LAST PATCH COEFFICIENT ARRAY      00002400
      DO 20 K=1,4                                                       00002500
      I=SS(10+6*NTOT-6+K)                                               00002600
      ITOP1=ITOP1+NSZ(I)                                                00002700
   20 CONTINUE                                                          00002800
   25 CONTINUE                                                          00002900
C---     ITOP1 IS THE SS LOCATION OF THE FIRST TOPOLOGY TABLE ENTRY     00003000
C---      FILL POINTERS TO THE TOPOLOGY TABLE FOR EACH PATCH            00003100
      DO 30 K=1,NTOT                                                    00003200
      SS(10+6*K)=ITOP1+4*(K-1)                                          00003300
      KT=SS(10+6*K)-1                                                   00003400
C---     ZERO OUT THE TOPOLOGY TABLE ENTRIES                            00003500
      DO 30 KK=1,4                                                      00003600
      SS(KT+KK)=0.                                                      00003700
   30 CONTINUE                                                          00003800
C---  NOW SEPARATE THE CASE OF A MESH SURFACE FROM PNTSON,PNTVEC,POLYGN 00003900
      NTYPE=SS(5)                                                       00004000
      IF(NTYPE.NE.2) GO TO 200                                          00004100
C---     SURFACE IS A MESH TYPE                                         00004200
C------NUMBER OF PATCHES IN A STRIP ALONG THE MAJOR SPLINE DIRECTION    00004300
      NP=SS(10)-1                                                       00004400
C---     NUMBER OF PATCHES IN A STRIP ALONG THE CROSS SPLINE DIRECTION  00004500
      NS=SS(9)-1                                                        00004600
C---     PATCHES ARE STORED LINEARLY AS I,J WHERE I=1 TO NP AND THEN    00004700
C---     J = 1 TO NS                                                    00004800
C---     GENERATE TOPOLOGY TABLE FOR EACH PATCH IN SUCCESSION           00004900
      DO 40 J=1,NS                                                      00005000
      DO 40 I=1,NP                                                      00005100
      ITOP=10+6*((J-1)*NP+I)                                            00005200
      ITOP=SS(ITOP)                                                     00005300
      NCUR=I+(J-1)*NP                                                   00005400
      NLOWER=(J-1)*NP+1                                                 00005500
      NUPPER=J*NP                                                       00005600
C---     FIRST BOUNDARY ( U= 0 TO 1= 1 WHILE V=0)                       00005700
      SS(ITOP)=MAX0(IZERO,NCUR-NP)                                      00005800
      ITOP=ITOP+1                                                       00005900
C---     SECOND BOUNDARY ( U=0 WHILE V= 0 TO 1 )                        00006000
      KTEMP=NCUR-1                                                      00006100
      IF(KTEMP.LT.NLOWER) KTEMP=0                                       00006200
      SS(ITOP)=KTEMP                                                    00006300
      ITOP=ITOP+1                                                       00006400
C---     THIRD BOUNDARY ( U=1 WHILE V= 0 TO 1)                          00006500
      KTEMP=NCUR+1                                                      00006600
      IF(KTEMP.GT.NUPPER) KTEMP=0                                       00006700
      SS(ITOP)=KTEMP                                                    00006800
      ITOP=ITOP+1                                                       00006900
C---     FOURTH BOUNDARY (U=0 TO 1 WHILE V=1)                           00007000
      KTEMP=NCUR+NP                                                     00007100
      IF(KTEMP.GT.NTOT) KTEMP=0                                         00007200
      SS(ITOP)=KTEMP                                                    00007300
C---     THIS COMPLETES THE TOPOLOGY TABLE FOR THE MESH DEFINITION      00007400
   40 CONTINUE                                                          00007500
      GO TO 9999                                                        00007600
C                                                                       00007700
C                                                                       00007800
C---     THE NEXT SURFACE IS PNTSON,POLYGN OR PNTVEC                    00007900
C---     ASSUMPTIONS:  THE PATCHES HAVE FLAGS 4,4,4,1                   00008000
C---     ASSUMPTIONS:  TWO ADJACENT PATCHES HAVE CONTACT IN TWO CORNER  00008100
C---     POINTS                                                         00008200
  200 CONTINUE                                                          00008300
C---     RESOLVE TOPOLOGY RELATIONS ONE PATCH AT A TIME                 00008400
      DO 210 I=1,NTOT                                                   00008500
      ITOP=SS(10+6*I)                                                   00008600
      IPREL=SS(10+6*I-1)-1                                              00008700
C---     LOAD THE CORNER POINTS(USING THE MATRIX ASSUMPTION)            00008800
      DO 220 K=1,3                                                      00008900
      KK=(K-1)*16                                                       00009000
      P(K,1)=SS(IPREL+KK+1)                                             00009100
      P(K,2)=SS(IPREL+KK+2)                                             00009200
      P(K,3)=SS(IPREL+KK+5)                                             00009300
  220 P(K,4)=SS(IPREL+KK+6)                                             00009400
C---     COMPARE EACH BOUNDARY OF THE I TH PATCH TO OTHER PATCHES       00009500
      DO 230 J=1,4                                                      00009600
C---     BOUNDARY 1  POINTS P(,1) TO P(,2)                              00009700
C---     BOUNDARY 2  POINTS P(,1) TO P(,3)                              00009800
C---     BOUNDARY 3  POINTS P(,2) TO P(,4)                              00009900
C---     BOUNDARY 4  POINTS P(,3) TO P(,4)                              00010000
      JA=NBOUN(2*J-1)                                                   00010100
      JB=NBOUN(2*J)                                                     00010200
C---     CHECK EACH PATCH AGAINST BOUNDARY J OF PATCH I                 00010300
      DO 240 L=1,NTOT                                                   00010400
      IF (L.EQ.I) GO TO 240                                             00010500
      IPRELT=SS(10+6*L-1)-1                                             00010600
C---     LOAD CORNER POINTS OF PATCH L                                  00010700
      DO 250 K=1,3                                                      00010800
      KK=(K-1)*16                                                       00010900
      PT(K,1)=SS(IPRELT+KK+1)                                           00011000
      PT(K,2)=SS(IPRELT+KK+2)                                           00011100
      PT(K,3)=SS(IPRELT+KK+5)                                           00011200
  250 PT(K,4)=SS(IPRELT+KK+6)                                           00011300
      DO 260 M=1,4                                                      00011400
      MA=NBOUN(2*M-1)                                                   00011500
      MB=NBOUN(2*M)                                                     00011600
      D=ZERO                                                            00011700
      DO 280 NN=1,3                                                     00011800
  280 D=D+(P(NN,JA)-PT(NN,MA))**2+(P(NN,JB)-PT(NN,MB))**2               00011900
      IF (D.GT.SMAL) GO TO 290                                          00012000
      GO TO 300                                                         00012100
  290 D=ZERO                                                            00012200
      DO 310  NN=1,3                                                    00012300
  310 D=D+(P(NN,JA)-PT(NN,MB))**2+(P(NN,JB)-PT(NN,MA))**2               00012400
      IF(D.GT.SMAL) GO TO 260                                           00012500
C---     BOUNDARY CHECK IS POSITIVE LTH PATCH LIES ACROSS J TH BOUNDARY 00012600
C---     OF THE I TH PATCH                                              00012700
  300 ITOPIJ=10+6*I                                                     00012800
      ITOPIJ=SS(ITOPIJ)                                                 00012900
      SS(ITOPIJ-1+J)=L                                                  00013000
  260 CONTINUE                                                          00013100
  240 CONTINUE                                                          00013200
  230 CONTINUE                                                          00013300
  210 CONTINUE                                                          00013400
C                                                                       00013500
C                                                                       00013600
 9999 CONTINUE                                                          00013700
      RETURN                                                            00013800
      END                                                               00013900
**** SOURCE FILE : M0001121.V01   ***
*
      SUBROUTINE TRANSP(A,B,N)                                          00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION A(N,N),B(N,N)                                           00000300
C---     TRANSPOSE A NXN MATRIX  CALLED A AND PLACE IN B                00000400
C---     NOTE THAT B MAY BE THE SAME AS A                               00000500
      DO 10 I=1,N                                                       00000600
      J=I                                                               00000700
      DO 20 K=1,J                                                       00000800
      T=A(I,K)                                                          00000900
      B(I,K)=A(K,I)                                                     00001000
      B(K,I)=T                                                          00001100
   20 CONTINUE                                                          00001200
   10 CONTINUE                                                          00001300
      RETURN                                                            00001400
      END                                                               00001500
**** MODULE = SSEVAL ****
**** SOURCE FILE : M0001054.V01   ***
*
      SUBROUTINE CNCURV(UIN,C,CV,MODE)                                  00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---    PURPOSE IS TO RETRIEVE CURVE POINT, DERIVATIVE AND SECOND       00000300
C---    DERIVATIVE AT A PARAMETER VALUE U                               00000400
C---    C IS THE CANON FORM OF A RATIONAL PARAMETRIC CUBIC CURVE        00000500
C---    CV(1 THRU 3) CONTAINS THE CURVE POINT OUTPUT,                   00000600
C---    CV(5 THRU 7) THE FIRST DERIVATIVE, CV(9 THRU 11), THE           00000700
C---    SECOND DERIVATIVE AND CV(13 THRU 15 ) THE NORMALISED            00000800
C---    FIRST DERIVATIVE.                                               00000900
      DIMENSION C(16),CV(16)                                            00001000
      DIMENSION F(12)                                                   00001100
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-14/                           00001200
      DATA TWO/2.0D0/                                                   00001300
C                                                                       00001400
C---      SET IUOUT FLAG TO 1 WHEN U IS OUTSIDE (0,1)                   00001500
      IUOUT=0                                                           00001600
      U=UIN                                                             00001700
      IF(U.GE.ZERO.AND.U.LE.ONE) GO TO 9                                00001800
      IUOUT=1                                                           00001900
      IF(U.LT.ZERO) U=ZERO                                              00002000
      IF(U.GT.ONE) U=ONE                                                00002100
    9 CONTINUE                                                          00002200
C                                                                       00002300
      CALL BLENDF(U,F)                                                  00002400
C                                                                       00002500
C---  CV(1)=F(1)*C(1)+F(2)*C(2)+F(3)*C(3)+F(4)*C(4)                     00002600
C---  CV(2)=F(1)*C(5)+F(2)*C(6)+F(3)*C(7)+F(4)*C(8)                     00002700
C---  CV(3)=F(1)*C(9)+F(2)*C(10)+F(3)*C(11)+F(4)*C(12)                  00002800
C---  CV(4)=F(1)*C(13)+F(2)*C(14)+F(3)*C(15)+F(4)*C(16)                 00002900
C---  CV(5)=F(5)*C(1)+F(6)*C(2)+F(7)*C(3)+F(8)*C(4)                     00003000
C---  CV(6)=F(5)*C(5)+F(6)*C(6)+F(7)*C(7)+F(8)*C(8)                     00003100
C---  CV(7)=F(5)*C(9)+F(6)*C(10)+F(7)*C(11)+F(8)*C(12)                  00003200
C---  CV(8)=F(5)*C(13)+F(6)*C(14)+F(7)*C(15)+F(8)*C(16)                 00003300
C---  CV(9)=F(9)*C(1)+F(10)*C(2)+F(11)*C(3)+F(12)*C(4)                  00003400
C---  CV(10)=F(9)*C(5)+F(10)*C(6)+F(11)*C(7)+F(12)*C(8)                 00003500
C---  CV(11)=F(9)*C(9)+F(10)*C(10)+F(11)*C(11)+F(12)*C(12)              00003600
C---  CV(12)=F(9)*C(13)+F(10)*C(14)+F(11)*C(15)+F(12)*C(16)             00003700
      KLIM=9                                                            00003800
      IF(MODE.EQ.0) KLIM=1                                              00003900
      DO 10 I=1,KLIM,4                                                  00004000
      CV(I  )=F(I)*C( 1)+F(I+1)*C( 2)+F(I+2)*C( 3)+F(I+3)*C( 4)         00004100
      CV(I+1)=F(I)*C( 5)+F(I+1)*C( 6)+F(I+2)*C( 7)+F(I+3)*C( 8)         00004200
      CV(I+2)=F(I)*C( 9)+F(I+1)*C(10)+F(I+2)*C(11)+F(I+3)*C(12)         00004300
      CV(I+3)=F(I)*C(13)+F(I+1)*C(14)+F(I+2)*C(15)+F(I+3)*C(16)         00004400
   10 CONTINUE                                                          00004500
      IF(MODE.EQ.0) GO TO 100                                           00004600
C---     NOW CHECK IF THE FORM IS RATIONAL OR SIMPLE                    00004700
      WSQ=ONE                                                           00004800
      DO 25 I=13,16                                                     00004900
      IF(I.GT.14) WSQ=ZERO                                              00005000
      IF(DABS(C(I)-WSQ).GT.SMAL) GO TO 30                               00005100
   25 CONTINUE                                                          00005200
C---     FORM IS SIMPLE NON-RATIONAL SO SKIP THESE CALCULATIONS         00005300
      GO TO 100                                                         00005400
C---     CALCULATE DERIVATIVES BASED ON FORMULA PV(I)=CV(I)/CV(4)       00005500
   30 CONTINUE                                                          00005600
      WSQ=CV(4)*CV(4)                                                   00005700
      TWPW=TWO*CV(8)/CV(4)                                              00005800
      DO 40 I=1,3                                                       00005900
      CV(I+4)=(CV(I+4)*CV(4)-CV(I)*CV(8))/WSQ                           00006000
      CV(I+8)=(CV(I+8)*CV(4)-CV(I)*CV(12))/WSQ-CV(I+4)*TWPW             00006100
   40 CONTINUE                                                          00006200
C                                                                       00006300
  100 CONTINUE                                                          00006400
      WSQ=ZERO                                                          00006500
      DO 110 I=1,3                                                      00006600
      CV(I)=CV(I)/CV(4)                                                 00006700
      IF(MODE.EQ.0) GO TO 110                                           00006800
      WSQ=WSQ+CV(I+4)**2                                                00006900
  110 CONTINUE                                                          00007000
      CV(4)=ONE                                                         00007100
      IF(MODE.EQ.0) GO TO 200                                           00007200
C---      UNITIZE FIRST DERIVATIVE                                      00007300
      WSQ=DSQRT(WSQ)                                                    00007400
      IF(WSQ.LT.SMAL) WSQ=ONE                                           00007500
      DO 120 I=1,3                                                      00007600
      CV(I+12)=CV(I+4)/WSQ                                              00007700
      CV(4*I+4)=ONE                                                     00007800
  120 CONTINUE                                                          00007900
C                                                                       00008000
  200 CONTINUE                                                          00008100
C                                                                       00008200
      IF(IUOUT.EQ.0.OR.MODE.EQ.0) GO TO 999                             00008300
      UINC=UIN                                                          00008400
      IF(UIN.GT.ONE) UINC=UIN-ONE                                       00008500
      DO 210 I=1,3                                                      00008600
      CV(I)=CV(I)+UINC*CV(I+4)                                          00008700
      CV(I+8)=ZERO                                                      00008800
  210 CONTINUE                                                          00008900
C                                                                       00009000
  999 CONTINUE                                                          00009100
      RETURN                                                            00009200
      END                                                               00009300
**** SOURCE FILE : M0001046.V02   ***
*
      SUBROUTINE BLENDF(U,FU)                                           00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION FU(*)                                                   00000300
      DATA ZERO,ONE/0.0D0,1.0D0/                                        00000400
      DATA TWO,THREE,FOUR,SIX/2.0D0,3.0D0,4.0D0,6.0D0/                  00000500
C------ INPUT IS A SCALAR U                                             00000600
C------ OUTPUT ARE VALUES OF COONS CUBIC BLEND FUNCTIONS                00000700
C------ (FU(I),I=1,4), THEIR FIRST AND SECOND                           00000800
      IF(U.LT.ZERO.OR.U.GT.ONE) GO TO 100                               00000900
C------ DERIVATIVES (FU(I),I=5,12)                                      00001000
      U2=U*U                                                            00001100
      U3=U2*U                                                           00001200
      DIF=U3-U2                                                         00001300
      FU(1)=DIF+DIF-U2+ONE                                              00001400
      FU(2)=-FU(1)+ONE                                                  00001500
      FU(3)=DIF-U2+U                                                    00001600
      FU(4)=DIF                                                         00001700
      DIF=THREE*(U2-U)                                                  00001800
      FU(5)=DIF+DIF                                                     00001900
      FU(6)=-FU(5)                                                      00002000
      FU(7)=DIF-U+ONE                                                   00002100
      FU(8)=DIF+U                                                       00002200
      DIF=SIX*U                                                         00002300
      FU(9)=DIF+DIF-SIX                                                 00002400
      FU(10)=-FU(9)                                                     00002500
      FU(11)=DIF-FOUR                                                   00002600
      FU(12)=DIF-TWO                                                    00002700
      RETURN                                                            00002800
  100 DO 110 I=1,12                                                     00002900
  110 FU(I)=ZERO                                                        00003000
      IF(U.GT.ONE) GO TO 200                                            00003100
C---  U IS LESS THAN ZERO                                               00003200
      FU(1)=ONE                                                         00003300
      FU(3)=U                                                           00003400
      FU(7)=ONE                                                         00003500
      RETURN                                                            00003600
  200 FU(2)=ONE                                                         00003700
      FU(4)=U-ONE                                                       00003800
      FU(8)=ONE                                                         00003900
      RETURN                                                            00004000
      END                                                               00004100
**** SOURCE FILE : M0000620.V04   ***
*
      SUBROUTINE CRBLEN(U,SC,CV,MODE)                                   00000100
C---     CALLING ARGUMENTS ARE ANALAGOUS TO THOSE OF CNCURV             00000200
C---     HOWEVER , THE BLEND FORMULA IS DESIGNED TO PRSERVE             00000300
C---     DIRECTIONALITY OF POINTS AS A FUNCTION OF THE NATURAL          00000400
C---     FLOW PARAMETER                                                 00000500
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000600
      DIMENSION SC(*),CV(*)                                             00000700
      INCLUDE 'DARRAY.INC'                                              00000810
      DIMENSION FU(12),PA(3),PB(3),TA(3),TB(3)                          00000900
      DATA ONE,ZERO,SMAL/1.0D0,0.0D0,1.0D-15/                           00001000
C                                                                       00001100
      CALL BLENDF(U,FU)                                                 00001200
      A=SC(1)*SC(1)+SC(5)*SC(5)+SC(9)*SC(9)                             00001300
      B=SC(2)*SC(2)+SC(6)*SC(6)+SC(10)*SC(10)                           00001400
      A=DSQRT(A)+SMAL                                                   00001500
      B=DSQRT(B)+SMAL                                                   00001600
C                                                                       00001700
      K=0                                                               00001800
      DO 10 I=1,9,4                                                     00001900
      K=K+1                                                             00002000
      PA(K)=SC(I)/A                                                     00002100
      PB(K)=SC(I+1)/B                                                   00002200
      TA(K)=SC(I+2)/A                                                   00002300
      TB(K)=SC(I+3)/B                                                   00002400
   10 CONTINUE                                                          00002500
C                                                                       00002600
      W=FU(1)*A+FU(2)*B                                                 00002700
      WP=FU(5)*A+FU(6)*B                                                00002800
      WPP=FU(9)*A+FU(10)*B                                              00002900
C                                                                       00003000
      DO 20 I=1,3                                                       00003100
      TEMP1=FU(1)*PA(I)+FU(2)*PB(I)+FU(3)*TA(I)+FU(4)*TB(I)             00003200
      CV(I)=W*TEMP1                                                     00003300
      IF(MODE.LT.1) GO TO 20                                            00003400
      TEMP2=FU(5)*PA(I)+FU(6)*PB(I)+FU(7)*TA(I)+FU(8)*TB(I)             00003500
      CV(I+4)=TEMP1*WP+TEMP2*W                                          00003600
      CV(I+8)=WPP*TEMP1+2.*TEMP2*WP+W*(FU(9)*PA(I)+FU(10)*PB(I)+        00003700
     X         FU(11)*TA(I)+FU(12)*TB(I))                               00003800
   20 CONTINUE                                                          00003900
      CV(4)=ONE                                                         00004000
      CV(8)=ZERO                                                        00004100
      CV(12)=ZERO                                                       00004200
      CV(16)=ZERO                                                       00004300
      IF(MODE.LT.1) GO TO 999                                           00004400
      CV(8)=ONE                                                         00004500
      CV(12)=ONE                                                        00004600
      GO TO 999                                                         00004700
C                                                                       00004800
  998 CONTINUE                                                          00004900
      CALL CFORM(' ERROR IN CRBLEN',DARRAY,0,16)                        00005000
      CALL CPRINT(DARRAY)                                               00005100
      GO TO 999                                                         00005200
C                                                                       00005300
  999 CONTINUE                                                          00005400
      RETURN                                                            00005500
      END                                                               00005600
**** SOURCE FILE : M0001061.V07   ***
*
      SUBROUTINE CURFLO(UIN,SC,CV,MODE,NNSEG)                           00000100
C---     PURPOSE IS TO COMPUTE CURVE POINT AND DERIVATIVES FROM AN      00000200
C---     INPUT PARAMETRIC VALUE U.  SC IS THE COMPLETE INPUT CURVE      00000300
C---     CANONICAL FORM AND MODE IS ZERO FOR POINT EXTRACTION,          00000400
C---     AND NON ZERO IF FIRST AND SECONDERIVATIVES ARE ALSO            00000500
C---     DESIRED.   CV IS THE OUTPUT ARRAY. CV(1-3) CONTAINS            00000600
C---     THE CURVE POINT, CV(5-7) CONTAINS THE FIRST DERIVATIVE,        00000700
C---     CV(9-11) THE SECOND DERIVATIVE AND CV(13-15) CONTAINS          00000800
C---     THE UNITIZED TANGENT VECTOR                                    00000900
C---     IF MODE=2 ON INPUT THEN CV(17-19) CONTAINS THE CRSSPL VECOTR,  00001000
C---     CV(21-23) THE TWIST ETC. ANALAGOUS TO THE CURVE POINT          00001100
C---     AND TANGENT VECTOR ETC.                                        00001200
C---     IF THESE QUANTITIES DO NOT EXIST, THE UPPER PART IS ZEROED.    00001300
C---     INPUT  INSEG IS NORMALLY 0.  HOWEVER, IF INSEG                 00001400
C---     IS POSITIVE THEN INSEG IS INTERPRETED AS A SPECIFIC            00001500
C---     SEGMENT NUMBER AND UIN IS A PARAMETER                          00001600
C---     RELATIVE TO THIS SEGMENT ONLY.  IF UIN IS OUTSIDE THE          00001700
C---     0,1 RANGE THE A POINT ON THE LINEAR EXTENSION OF THIS          00001800
C---     SEGMENT WILL BE GENERATED.  IF INSEG IS NEGATIVE, THEN         00001900
C---     THE ABSOLUTE VALUE REFERS TO A SEGMENT COUNTING BACKWARD FROM  00002000
C---     THE LAST SEGMENT OF THE CURVE.                                 00002100
C---     IN EITHER CASE, INSEG MUST REFER TO A LEGITIMATE SEGMENT.      00002200
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00002300
      INCLUDE 'DARRAY.INC'                                              00002400
      DIMENSION SC(*),CV(*)                                             00002500
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00002700
      DIMENSION TEMP(4,4)                                               00002800
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-7/                            00002810
C                                                                       00002900
      INSEG=NNSEG                                                       00003000
      MERR=0                                                            00003100
C                                                                       00003200
C                                                                       00003300
      NMAX=SC(8)                                                        00003400
C---     IF NMAX IS ZERO THERE IS NO FLOW STRUCTURE                     00003500
C---     THEN TREAT INDIVIDUAL ARCS AS CURVE SEGMENTS USING             00003600
C---     THE NATURAL COON PARAMETER AS FLOW.                            00003700
      IF(NMAX.EQ.0) GO TO 300                                           00003800
      IF(INSEG.EQ.0) GO TO 5                                            00003900
C                                                                       00004000
      MERR=1                                                            00004100
      IF(IABS(INSEG).GT.NMAX) GO TO 998                                 00004200
      ISEG=IABS(INSEG)                                                  00004300
      IF(INSEG.LT.0) ISEG=NMAX-ISEG+1                                   00004400
      U=UIN                                                             00004500
      IF(INSEG.LT.0) U=ONE-U                                            00004600
      FRAC=U                                                            00004700
      LOCSEG=SC(9)+(ISEG-1)*4                                           00004800
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200                                00004900
      IF(U.GE.ZERO.AND.U.LE.ONE) GO TO 30                               00005000
      LOCARC=SC(7)                                                      00005100
      IARC=LOCARC+SC(LOCSEG)*4.                                         00005200
      IF(U.GT.ONE) IARC=IARC+(SC(LOCSEG+1)-ONE)*4.                      00005300
      ISPL=SC(IARC)                                                     00005400
      IF(U.GT.ONE) ISPL=ISPL+(SC(IARC+1)-ONE-ONE)*4.                    00005500
      IARC=(IARC-LOCARC)/4+1                                            00005600
      GO TO 80                                                          00005700
C                                                                       00005800
    5 CONTINUE                                                          00005900
      U=UIN                                                             00006000
      IF(U.LT.ZERO) GO TO 10                                            00006100
      IF(U.GT.SC(8)) GO TO 20                                           00006200
C---      OBTAIN SEGMENT NUMBER AND FRACTIONAL AMOUNT                   00006300
      ISEG=U                                                            00006400
      FRAC=U-ISEG                                                       00006500
      NMAX=SC(8)                                                        00006600
      ISEG=ISEG+1                                                       00006700
      IF(ISEG.GT.NMAX) FRAC=ONE                                         00006800
      IF(ISEG.GT.NMAX) ISEG=ISEG-1                                      00006900
      GO TO 30                                                          00007000
C                                                                       00007100
   10 CONTINUE                                                          00007200
      ISEG=1                                                            00007300
      FRAC=U                                                            00007400
      ISPL=SC(11)                                                       00007500
      IARC=1                                                            00007600
C                                                                       00007700
      LOCSEG=SC(9)+(ISEG-1)*4                                           00007800
C---     BRANCH FOR CASE OF A DEGENERATE SEGMENT                        00007900
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200                                00008000
      GO TO 80                                                          00008100
C                                                                       00008200
   20 CONTINUE                                                          00008300
      ISEG=SC(8)                                                        00008400
      FRAC=U-SC(8)+ONE                                                  00008500
      ISPL=SC(11)+SC(10)*4.-8.                                          00008600
      IARC=SC(4)                                                        00008700
C                                                                       00008800
      LOCSEG=SC(9)+(ISEG-1)*4                                           00008900
C---     BRANCH FOR CASE OF A DEGENERATE SEGMENT                        00009000
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200                                00009100
      GO TO 80                                                          00009200
C                                                                       00009300
   30 CONTINUE                                                          00009400
C                                                                       00009500
      LOCSEG=SC(9)+(ISEG-1)*4                                           00009600
C---     BRANCH FOR CASE OF A DEGENERATE SEGMENT                        00009700
      IF(SC(LOCSEG+3).LT.SMAL) GO TO 200                                00009800
C---     COMPUTE STARTING AND ENDING ARCS FOR THIS SEGMENT(ISEG)        00009900
      LOCARC=SC(7)                                                      00010000
      IARC1=LOCARC+SC(LOCSEG)*4.                                        00010100
      IARC2=IARC1+(SC(LOCSEG+1)-ONE)*4.                                 00010200
C---     FIND  AN ARC WHICH INCLUDES THE FRACTIONAL VALUE               00010300
      DO 50 IARC=IARC1,IARC2,4                                          00010400
      IFLOW1=SC(IARC)                                                   00010500
      IFLOW2=(SC(IARC+1)-ONE)*4.+SC(IARC)                               00010600
      IF(FRAC.GE.SC(IFLOW1).AND.FRAC.LT.SC(IFLOW2)+SMAL) GO TO 60       00010700
   50 CONTINUE                                                          00010800
      MERR=2                                                            00010900
      GO TO 998                                                         00011000
C---                                                                    00011100
   60 CONTINUE                                                          00011200
C---     CONVERT ARC REFERENCE TO AN ABSOLUTE                           00011300
      IARC=(IARC-LOCARC)/4+1                                            00011400
C---     LOCATE FRAC WITHIN THE RANGE OF ONE FLOW FUNCTION              00011500
      DO 70 ISPL=IFLOW1,IFLOW2,4                                        00011600
      IF(FRAC.GE.SC(ISPL).AND.FRAC.LT.SC(ISPL+4)+SMAL) GO TO 80         00011700
   70 CONTINUE                                                          00011800
      MERR=3                                                            00011900
      GO TO 998                                                         00012000
C                                                                       00012100
   80 CONTINUE                                                          00012200
      IF(IBUG.NE.11) GO TO 83                                           00012300
      CALL BAD(1,1,'U   ',U)                                            00012400
      CALL BAD(1,1,'FRAC',FRAC)                                         00012500
      CALL BAD(1,0,'SEG ',ISEG)                                         00012600
      CALL BAD(1,0,'IARC',IARC)                                         00012700
      CALL BAD(1,0,'ISPL',ISPL)                                         00012800
      CALL BAD(-1,0,'LOCS',LOCSEG)                                      00012900
   83 CONTINUE                                                          00013000
C                                                                       00013100
      IF(FRAC.LT.ZERO) GO TO 85                                         00013200
      IF(FRAC.GT.ONE) GO TO 87                                          00013300
C---      CASE WHERE FRAC IS BETWEEN ZERO AND ONE                       00013400
C                                                                       00013500
      PU=FRAC-SC(ISPL)                                                  00013600
      SPAN=SC(ISPL+4)-SC(ISPL)                                          00013700
      IF(SPAN.EQ.ZERO) GO TO 81                                         00013800
      PU=PU/SPAN                                                        00013900
      UA=SC(ISPL+1)                                                     00014000
      UB=SC(ISPL+5)                                                     00014100
      UMA=SC(ISPL+2)*SPAN                                               00014200
      UMB=SC(ISPL+6)*SPAN                                               00014300
      GO TO 89                                                          00014400
C                                                                       00014500
   85 CONTINUE                                                          00014600
C---      CASE WHERE FRAC IS LT ZERO                                    00014700
      PU=FRAC-SC(ISPL)                                                  00014800
      SPAN=SC(ISPL+4)-SC(ISPL)                                          00014900
      IF(SPAN.EQ.ZERO) GO TO 81                                         00015000
      PU=PU/SPAN                                                        00015100
      UA=SC(ISPL+1)                                                     00015200
      UMA=SC(ISPL+2)*SPAN                                               00015300
      UB=UMA                                                            00015400
      UMB=UMA                                                           00015500
      GO TO 89                                                          00015600
C                                                                       00015700
   87 CONTINUE                                                          00015800
      PU=FRAC-SC(ISPL)                                                  00015900
      SPAN=SC(ISPL)-SC(ISPL-4)                                          00016000
      IF(SPAN.EQ.ZERO) GO TO 81                                         00016100
      PU=PU/SPAN                                                        00016200
      UB=ONE                                                            00016300
      UMB=SC(ISPL+2)*SPAN                                               00016400
      UA=UB-UMB                                                         00016500
      UMA=UMB                                                           00016600
      GO TO 89                                                          00016700
C                                                                       00016800
   81 CONTINUE                                                          00016900
      U=UA                                                              00017000
      UP=ZERO                                                           00017100
      UPP=ZERO                                                          00017200
      UPSQ=ZERO                                                         00017300
      GO TO 92                                                          00017400
C                                                                       00017500
   89 CONTINUE                                                          00017600
      IF(IBUG.NE.11) GO TO 88                                           00017700
      CALL BAD(1,1,'PU  ',PU)                                           00017800
      CALL BAD(1,1,'SPAN',SPAN)                                         00017900
      CALL BAD(1,1,'UA  ',UA)                                           00018000
      CALL BAD(1,1,'UB  ',UB)                                           00018100
      CALL BAD(1,1,'UMA ',UMA)                                          00018200
      CALL BAD(-1,1,'UMB ',UMB)                                         00018300
   88 CONTINUE                                                          00018400
C---     COMPUTE EXACT CORRESPONDING VALUE U OF COONS PARAMETER         00018500
      W1=3.0*(UB-UA)-UMA-UMA-UMB                                        00018600
      W2=2.0*(UA-UB)+UMA+UMB                                            00018700
      U=UA+PU*(UMA+PU*(W1+PU*W2))                                       00018800
      UP=UMA+PU*(W1+W1+PU*3.*W2)                                        00018900
      UPP=W1+W1+6.*PU*W2                                                00019000
      UP=UP/SPAN                                                        00019100
      UPP=UPP/(SPAN*SPAN)                                               00019200
      UPSQ=UP*UP                                                        00019300
   92 CONTINUE                                                          00019400
      NN=SC(5)+(IARC-1)*24                                              00019500
      IF(IBUG.NE.11) GO TO 91                                           00019600
      CALL BAD(1,1,'U   ',U)                                            00019700
      CALL BAD(1,1,'UP  ',UP)                                           00019800
      CALL BAD(-1,1,'UPP ',UPP)                                         00019900
   91 CONTINUE                                                          00020000
      CALL CNCURV(U,SC(NN),CV,MODE)                                     00020100
C     DO 556 I=1,13,4                                                   00020200
C     CALL BAD(-4,1,'CNCV',CV(I))                                       00020300
C 556 CONTINUE                                                          00020400
      IF(MODE.EQ.0) GO TO 999                                           00020500
C---     CHANGE DERIVATIVES TO COMPENSATE FOR FLOW RATE.                00020600
      DO 90 I=1,3                                                       00020700
      CV(I+8)=CV(I+4)*UPP+CV(I+8)*UPSQ                                  00020800
      CV(I+4)=CV(I+4)*UP                                                00020900
   90 CONTINUE                                                          00021000
C---     WORK COMPLETED IF MODE.LT.2                                    00021100
      IF(MODE.LT.2) GO TO 999                                           00021200
C---     CHECK IF A CRSSPL IS AVAILABLE AT EACH END OF THE ARC          00021300
      IF(DABS(SC(NN-5)-ONE)+DABS(SC(NN+19)-ONE).LT.SMAL) GO TO 100      00021400
      IF(DABS(SC(NN-5)-ONE).LT.SMAL.AND.DABS(U).LT.SMAL) GO TO 130      00021500
      IF(DABS(SC(NN+19)-ONE).LT.SMAL.AND.DABS(ONE-U).LT.SMAL) GO TO 140 00021600
C                                                                       00021700
C---     NO CROSS SPLINES ARE THERE, SO ZERO OUT CV(17-32)              00021800
      DO 101 I=17,32                                                    00021900
  101 CV(I)=ZERO                                                        00022000
      GO TO 999                                                         00022100
C                                                                       00022200
C---     NOW INTERPOLATE A CROSS SPLINE VECTOR AND DERIVATIVES          00022300
  100 CONTINUE                                                          00022400
      W1=DABS(SC(NN-1)-3.)                                              00022500
      W2=DABS(SC(NN+23)-3.)                                             00022600
C---    SET UP CANON FORM FOR CRSSPL VECTOR AS A CUBIC ARC              00022700
      DO 110 I=1,3                                                      00022800
      TEMP(1,I)=SC(NN-9+I)                                              00022900
      TEMP(2,I)=SC(NN+15+I)                                             00023000
      TEMP(3,I)=ZERO                                                    00023100
      IF(W1.LT.SMAL) TEMP(3,I)=SC(NN-5+I)                               00023200
      TEMP(4,I)=ZERO                                                    00023300
      IF(W2.LT.SMAL) TEMP(4,I)=SC(NN+19+I)                              00023400
  110 CONTINUE                                                          00023500
C                                                                       00023600
      TEMP(1,4)=ONE                                                     00023700
      TEMP(2,4)=ONE                                                     00023800
      TEMP(3,4)=ZERO                                                    00023900
      TEMP(4,4)=ZERO                                                    00024000
C                                                                       00024100
      CALL CRBLEN(U,TEMP,CV(17),1)                                      00024200
C     DO 557 I=17,32,4                                                  00024300
C     CALL BAD(-4,1,'CRBN',CV(I))                                       00024400
C 557 CONTINUE                                                          00024500
      DO 120 I=1,3                                                      00024600
      CV(I+24)=CV(I+20)*UPP+CV(I+24)*UPSQ                               00024700
      CV(I+20)=CV(I+20)*UP                                              00024800
  120 CONTINUE                                                          00024900
C---     FINALLY COMPUTE THE NORMAL (TAN CROSSED WITH CRS)              00025000
  121 CONTINUE                                                          00025050
      CALL CROSS(CV(5),CV(17),TEMP(1,1))                                00025100
      W=TEMP(1,1)**2+TEMP(2,1)**2+TEMP(3,1)**2                          00025200
      W=DSQRT(W)                                                        00025300
      IF(W.LT.SMAL) W=ONE                                               00025400
      CV(29)=TEMP(1,1)/W                                                00025500
      CV(30)=TEMP(2,1)/W                                                00025600
      CV(31)=TEMP(3,1)/W                                                00025700
      CV(32)=ONE                                                        00025800
      GO TO 999                                                         00025900
C---     SIMPLE EXTRACTION OF AVAILABLE VECTORS FROM JUNCTION           00026000
  130 CONTINUE                                                          00026100
      DO 131 L=1,3                                                      00026200
      CV(L+16)=SC(NN-9+L)                                               00026300
      IF(DABS(SC(NN-1)-3.).LT.SMAL) CV(L+20)=SC(NN-5+L)                 00026400
      CV(L+24)=ZERO                                                     00026500
  131 CONTINUE                                                          00026600
      CV(20)=ONE                                                        00026700
      CV(28)=ZERO                                                       00026800
      GO TO 121                                                         00026900
C                                                                       00027000
  140 CONTINUE                                                          00027100
      DO 141 L=1,3                                                      00027200
      CV(L+16)=SC(NN+15+L)                                              00027300
      IF(DABS(SC(NN+23)-3.).LT.SMAL) CV(L+20)=SC(NN+19+L)               00027400
      CV(L+24)=ZERO                                                     00027500
  141 CONTINUE                                                          00027600
      CV(20)=ONE                                                        00027700
      CV(28)=ZERO                                                       00027800
      IF(DABS(SC(NN+23)-3.).LT.SMAL) CV(24)=ONE                         00027900
      GO TO 121                                                         00028000
C                                                                       00028100
C                                                                       00028200
  999 CONTINUE                                                          00028300
      IF(IBUG.NE.11) GO TO 997                                          00028400
      CALL BAD(-4,1,'CV1 ',CV(1))                                       00028500
      CALL BAD(-4,1,'CV5 ',CV(5))                                       00028600
      CALL BAD(-4,1,'CV9 ',CV(9))                                       00028700
      CALL BAD(-4,1,'CV17',CV(17))                                      00028800
      CALL BAD(-4,1,'CV21',CV(21))                                      00028900
  997 CONTINUE                                                          00029000
      RETURN                                                            00029100
C                                                                       00029200
  998 CONTINUE                                                          00029300
      CALL CFORM(' WARNING ERROR IN CURFLO',DARRAY,1,24)                00029400
      CALL CPRINT(DARRAY)                                               00029500
      CALL BAD(1,1,'UIN ',UIN)                                          00029600
      CALL BAD(1,0,'MERR',MERR)                                         00029700
      CALL BAD(1,0,'INSG',INSEG)                                        00029800
      CALL BAD(1,1,'U   ',U)                                            00029900
      CALL BAD(1,1,'FRAC',FRAC)                                         00030000
      CALL BAD(1,0,'SEG ',ISEG)                                         00030100
      CALL BAD(1,0,'IARC',IARC)                                         00030200
      CALL BAD(1,0,'ISPL',ISPL)                                         00030300
      CALL BAD(-1,0,'LOCS',LOCSEG)                                      00030400
      CALL SCDUMP(333,SC)                                               00030500
      GO TO 999                                                         00030600
C                                                                       00030700
  200 CONTINUE                                                          00030800
C---     SPECIAL ENTRY FOR A DEGENERATE SEGMENT                         00030900
      LOCARC=SC(7)                                                      00031000
      IARC=SC(LOCSEG)                                                   00031100
      IF(IARC.EQ.0) GO TO 210                                           00031200
C                                                                       00031300
      IARC=IARC-1                                                       00031400
      PU=ONE                                                            00031500
      GO TO 220                                                         00031600
C                                                                       00031700
  210 CONTINUE                                                          00031800
      IARC=1                                                            00031900
      PU=ZERO                                                           00032000
C                                                                       00032100
  220 CONTINUE                                                          00032200
      NN=SC(5)+(IARC-1)*24                                              00032300
      CALL CNCURV(PU,SC(NN),CV,MODE)                                    00032400
C---      ZERO OUT FIRST AND SECOND DERIVATIVES                         00032500
      DO 230 J=1,2                                                      00032600
      DO 230 I=1,3                                                      00032700
      CV(I+J*4)=ZERO                                                    00032800
  230 CONTINUE                                                          00032900
      GO TO 999                                                         00033000
C                                                                       00033100
C---      UIN AND INSEG REFER TO ARC STRUCTURE AND COONS NATURAL        00033200
C---      FLOW PARAMETER DIRECTLY                                       00033300
  300 CONTINUE                                                          00033400
      U=UIN                                                             00033500
      NMAX=SC(4)                                                        00033600
      IF(INSEG) 310,320,330                                             00033700
C                                                                       00033800
  310 CONTINUE                                                          00033900
C---     CONVERT INSEG AND UIN TO CASE OF POSITIVE INSEG                00034000
      INSEG=NMAX-IABS(INSEG)+1                                          00034100
      UIN=ONE-UIN                                                       00034200
      GO TO 330                                                         00034300
C                                                                       00034400
  320 CONTINUE                                                          00034500
      IARC=UIN+ONE                                                      00034600
      IARC=MIN0(NMAX,IARC)                                              00034700
      IARC=MAX0(1,IARC)                                                 00034800
      ULO=IARC-1                                                        00034900
      U=UIN-ULO                                                         00035000
      GO TO 340                                                         00035100
C                                                                       00035200
  330 CONTINUE                                                          00035300
C****    SEGMENT REFERENCE IS OUT OF VALID RANGE                        00035400
      MERR=4                                                            00035500
      IF(INSEG.LT.1.OR.INSEG.GT.NMAX) GO TO 998                         00035600
C                                                                       00035700
      IARC=INSEG                                                        00035800
      U=UIN                                                             00035900
C                                                                       00036000
  340 CONTINUE                                                          00036100
C---     COMPUTE ARC LOCATION IN SC ARRAY                               00036200
      NN=(SC(2)-ONE+IARC)*24+1                                          00036300
      CALL CNCURV(U,SC(NN),CV,MODE)                                     00036400
      IF(MODE.LT.2) GO TO 999                                           00036500
C                                                                       00036600
      IF(DABS(SC(NN-5)-ONE)+DABS(SC(NN+19)-ONE).LT.SMAL) GO TO 345      00036700
      IF(DABS(SC(NN-5)-ONE).LT.SMAL.AND.DABS(U).LT.SMAL) GO TO 130      00036800
      IF(DABS(SC(NN+19)-ONE).LT.SMAL.AND.DABS(ONE-U).LT.SMAL) GO TO 140 00036900
C                                                                       00037000
  345 CONTINUE                                                          00037100
C                                                                       00037200
      W1=DABS(SC(NN-1)-3.)                                              00037300
      W2=DABS(SC(NN+23)-3.)                                             00037400
C---    SET UP CANON FORM FOR CRSSPL VECTOR AS A CUBIC ARC              00037500
      DO 350 I=1,3                                                      00037600
      TEMP(1,I)=SC(NN-9+I)                                              00037700
      TEMP(2,I)=SC(NN+15+I)                                             00037800
      TEMP(3,I)=ZERO                                                    00037900
      IF(W1.LT.SMAL) TEMP(3,I)=SC(NN-5+I)                               00038000
      TEMP(4,I)=ZERO                                                    00038100
      IF(W2.LT.SMAL) TEMP(4,I)=SC(NN+19+I)                              00038200
  350 CONTINUE                                                          00038300
C                                                                       00038400
      TEMP(4,1)=ONE                                                     00038500
      TEMP(4,2)=ONE                                                     00038600
      TEMP(4,3)=ZERO                                                    00038700
      TEMP(4,4)=ZERO                                                    00038800
C                                                                       00038900
      CALL CRBLEN(U,TEMP,CV(17),1)                                      00039000
C---     FINALLY COMPUTE THE NORMAL (TAN CROSSED WITH CRS)              00039100
      CALL CROSS(CV(5),CV(17),TEMP(1,1))                                00039200
      CALL VNORM(TEMP(1,1),CV(29))                                      00039300
      CV(32)=ONE                                                        00039400
      GO TO 999                                                         00039500
C                                                                       00039600
      END                                                               00039700
**** SOURCE FILE : M0001635.V04   ***
*
      SUBROUTINE CNSURF(U,V,B,SPV,IFLAG,MMODE)                          00000100
C...................................................................    00000200
C..PURPOSE   GIVEN PATCH AND PARAMETRIC COORDINATES COMPUTE THE PATCH   00000300
C..          POINTS AND DERIVATIVES.  SEARCH LOGIC IS USED TO ATTEMPT   00000400
C..          TO FIND A NON-ZERO SURFACE NORMAL WHEN THAT NORMAL IS TOO  00000500
C..          SMALL.  WHEN PATCH COORDINATES ARE OUTSIDE THE UNIT SQUARE 00000600
C..          DATA IS COMPUTED ON THE UNIT BORDER AND EXTRAPOLATED BY A  00000700
C..          LINEAR BLEND FORMULA.                                      00000800
C..ARGUMENTS                                                            00000900
C..   U,V -  INPUT  PARAMETRIC U,V COORDINATES OF PATCH.                00001000
C..   B   -  INPUT PATCH COEFFICIENT ARRAY FOR BICUBIC PATCH AND PATCH  00001100
C..          TYPE FLAG ( IN B(1) ) FOR GENCUR PATCH                     00001200
C..   SPV -  OUTPUT  POINT AND DERIVATIVES OF PATCH AT U,V POSITION     00001300
C..          SPV(1-3)=POINT, SPV(5-8)=DP/DU, SPV(9-11)=DP/DV,           00001400
C..          SPV(13-15)=DDP/DUU, SPV(17-19)=DDP/DUV, SPV(21-23)=DDP/DVV 00001500
C..          SPV(25-27)= DP/DU X DP/DV,  SPV(29-31)=NORM OF SPV(25-27)  00001600
C..          SPV(4,8,12,..)=1 IF ARRAY IS SET, =0 IF NOT SET.           00001700
C..   IFLAG  INPUT MATRIX FLAGS FOR BICUBIC PATCH AND LOCAL POINTERS    00001800
C..          FOR GENCUR PATCH CURVES.                                   00001900
C..   MMODE  INPUT  =0 MEANS CALCULATE PATCH POINT ONLY.                00002000
C..                 =1 MEANS CALCULATE POINT AND DERIVATIVES(SPV)       00002100
C                                                                       00002200
C..CALLED BY APT109 BALLOC BALSRF DGEOM  PCHPRC PUVLOC SRFCOM SSPICT    00002300
C..CALLS     CNSURG CNSURH CROSS  DMIN1  DMAX1  DOTV   DSQRT            00002400
C..ERRORS    NO PROGRAMMED ERROR MODES.                                 00002500
C..RESTRICTIONS                                                         00002600
C..          SEARCH LOGIC TO RETRIEVE A NON-ZERO NORMAL MAY NOT         00002700
C..          SUCCEED.  IN THAT CASE NORMAL IS SET TO ZERO.  ALSO        00002800
C..          SURFACE NORMAL ORIENTATION MAY BE REVERSED IN AREAS        00002900
C..          OF COLLAPSING EXTENSIONS.                                  00003000
C..LOCAL VARIABLES                                                      00003100
C..   AINC   VARIABLE TO CONTROL THE PARAMETRIC INCREMENT FOR SEARCHING 00003200
C..   MODE   VARIABLE TO CONTROL NUMBER OF DERIVATIVES CALCULATED       00003300
C..          =MMODE, BUT =1 ALWAYS ON LINEAR EXTENSIONS OF SURFACE      00003400
C..   NCT    THE NUMBER OF SEARCH ATTEMPTS                              00003500
C..   SPW    A BUFFER TO HOLD CURRENT SURFACE PT AND DERIVATIVES WHILE  00003600
C..          SEARCHING FOR A NON ZERO NORMAL OR EXTRAPOLATING DATA ON   00003700
C..          EXTENSIONS                                                 00003800
C..   U1,V1  THE CLOSEST POINT IN THE UNIT SQUARE TO U,V                00003900
C..   VSMAL  FIXED VARIABLE USED TO JUDGE WHEN A VECTOR LENGTH IS SMALL 00004000
C...................................................................    00004100
C                                                                       00004200
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00004300
      DIMENSION B(64),SPV(32),IFLAG(4)                                  00004400
      DIMENSION SPW(32)                                                 00004500
      CHARACTER ENAME*8                                                 00004520
C                                                                       00004540
      INCLUDE 'BLANKCOM.INC'                                            00004560
C                                                                       00004600
      DATA ZERO,ONE/0.0D0,1.0D0/                                        00004700
      DATA VSMAL,SMAL,HALF/1.0D-9,1.0D-6,0.499999D0/                    00004800
C                                                                       00004900
C---/STEP 1/   PREPARATION                                              00005000
C---      SET U1,V1 TO CLOSEST POINT IN UNIT SQUARE TO U,V              00005100
C---      WHEN U,V IS OUTSIDE THE UNIT SQUARE THE SURFACE POINT         00005200
C---      AND DERIVATIVES ARE EXTRAPOLATED FROM DATA ON THE BORDER.     00005300
      U1=U                                                              00005400
      V1=V                                                              00005500
      U1=DMIN1(ONE,U1)                                                  00005600
      U1=DMAX1(ZERO,U1)                                                 00005700
      V1=DMIN1(ONE,V1)                                                  00005800
      V1=DMAX1(ZERO,V1)                                                 00005900
      MODE=MMODE                                                        00006000
      IEXT=0                                                            00006100
      IF(U.EQ.U1.AND.V.EQ.V1) GO TO 5                                   00006200
C---      U,V IS OUTSIDE THE UNIT SQUARE, EXTRAPOLATION REQUIRED.       00006300
      IEXT=1                                                            00006400
      MODE=1                                                            00006500
    5 CONTINUE                                                          00006600
C                                                                       00006700
C--- NCT IS THE COUNTER WHICH KEEPS TRACK OF THE NUMBER OF TRIALS       00006800
C--- WITHIN CNSURF WHENEVER TROUBLE IS ENCOUNTERED IN FINDING A NORMAL  00006900
      NCT=0                                                             00007000
C---    AINC IS STARTING FACTOR FOR ALTERATION OF U-V VALUES            00007100
C---    WHILE SEARCHING FOR A NON DEGENERATE SURFACE NORMAL             00007200
      AINC=0.000000001                                                  00007300
C---      SAVE U1,V1 VALUES, AS THEY MAY BE CHANGED BY A SEARCH         00007400
      U1SAVE=U1                                                         00007500
      V1SAVE=V1                                                         00007600
C                                                                       00007700
    1 CONTINUE                                                          00007800
C---/STEP 2/   PATCH DERIVATIVES                                        00007900
C                                                                       00008000
C---    EXTRACT SURFACE POINT AND DERIVATIVES AT U,V VALUES             00008100
C---     INTERPOLATE SURF PT AND DERIVS AS RATIONAL BICUBIC.            00008200
      IF(IFLAG(1).GT.9) GOTO 7                                          00008300
      CALL CNSURG(U1,V1,B,SPW,IFLAG,MODE)                               00008310
      GOTO 6                                                            00008320
C---     INTERPOLATE SURF PT AND DERIVS AS GENCUR PATCH                 00008400
    7 IF(IFLAG(2).EQ.0) GOTO 8                                          00008500
      CALL CNSURH(U1,V1,B,SPW,IFLAG,MODE)                               00008510
      GOTO 6                                                            00008520
C---     INTERPOLATE SURF PT AND DERIVS AS FOREIGN PATCH                00008530
    8 CALL HOLFRM(B(1),ENAME,1,8,NWD)                                   00008540
      CALL EVAL(ENAME,U1,V1,CANON(IFLAG(1)),SPW,MODE)                   00008550
C                                                                       00008600
C---      SAVE SURFACE POINT ON FIRST PASS                              00008700
    6 IF(NCT.NE.0) GO TO 3                                              00008800
      DO 2 I=1,3                                                        00008900
    2 SPV(I)=SPW(I)                                                     00009000
      SPV(4)=ONE                                                        00009100
    3 CONTINUE                                                          00009200
C                                                                       00009300
C---      SKIP NORMAL CHECKING WHEN ONLY POINT IS DESIRED               00009400
      IF(MMODE.EQ.0) GO TO 400                                          00009500
C---/STEP 3/   SIGNIFICANCE OF DERIVATIVES                              00009600
C---    EXAMINE SURFACE NORMAL FOR NON DEGENERACY                       00009700
      CALL CROSS(SPW(5),SPW(9),SPW(25))                                 00009800
      CALL DOTV(D3,SPW(25),SPW(25))                                     00009900
      D3=DSQRT(D3)                                                      00010000
      IF(D3.GT.VSMAL) GO TO 310                                         00010100
C---    SURFACE NORMAL MAGNITUDE IS SMALL SO EXAMINE FURTHER            00010200
C---    FIND MAGNITUDES OF TANSPL AND CRSSPL VECTORS                    00010300
      CALL DOTV(D1,SPW(5),SPW(5))                                       00010400
      D1=DSQRT(D1)                                                      00010500
      CALL DOTV(D2,SPW(9),SPW(9))                                       00010600
      D2=DSQRT(D2)                                                      00010700
C---    IF EITHER TANGENT VECTOR IS SMALL, FIND NEW U,V                 00010800
      IF(D1.LT.VSMAL.OR.D2.LT.VSMAL) GO TO 309                          00010900
C---    FINALLY CHECK ANGULAR SPREAD BETWEEN TANSPL AND CRSSPL          00011000
      IF(D3.GT.SMAL*D1*D2) GO TO 310                                    00011100
C                                                                       00011200
  309 CONTINUE                                                          00011300
C---/STEP 4/   ALTER COORDINATES                                        00011400
C---    OBTAIN A NEW U,V AND TRY FOR A CLEARER SURFACE NORMAL           00011500
      NCT=NCT+1                                                         00011600
C---    QUIT AFTER 8 TRIALS                                             00011700
      IF(NCT.GT.8) GO TO 310                                            00011800
      FAC=ONE-VSMAL*10.0D0**NCT                                         00011900
      U1=(U1SAVE-HALF)*FAC+HALF                                         00012000
      V1=(V1SAVE-HALF)*FAC+HALF                                         00012100
C---    RECYCLE TO CHECK WHETHER NEW NORMAL IS DEFINED                  00012200
      GO TO 1                                                           00012300
C                                                                       00012400
C---/STEP 5/   CONSOLIDATE PATCH DERIVATIVES                            00012500
  310 CONTINUE                                                          00012600
C---      RESTORE U1,V1 AND COMPUTE UNIT NORMAL                         00012700
      U1=U1SAVE                                                         00012800
      V1=V1SAVE                                                         00012900
      IF(D3.EQ.ZERO) D3=ONE                                             00013000
      DO 311 I=1,3                                                      00013100
      SPW(I)=SPV(I)                                                     00013200
      SPW(I+28)=SPW(I+24)/D3                                            00013300
  311 CONTINUE                                                          00013400
C                                                                       00013500
C---      FINAL STEP, EXTRAPOLATE SURFACE PT AND DERIVS IF POINT        00013600
C---      IS OUTSIDE THE UNIT SQUARE.                                   00013700
  400 CONTINUE                                                          00013800
      IF(IEXT.NE.0) GO TO 410                                           00013900
      IF(MMODE.EQ.0) GO TO 490                                          00014000
C---      TRANSFER DERIVATIVES TO SPV ARRAY                             00014100
      DO 405 I=5,32                                                     00014200
  405 SPV(I)=SPW(I)                                                     00014300
      GO TO 490                                                         00014400
C                                                                       00014500
  410 CONTINUE                                                          00014600
C---/STEP 6/   DERIVATIVES EXTRAPOLATED TO PATCH EXTENSION.             00014700
      DU=U-U1                                                           00014800
      DV=V-V1                                                           00014900
C---      U1 IS A FUNCTION OF U.  U1P IS RATE OF CHANGE OF U1 WRT U.    00015000
C---      SIMILARLY FOR V1 AND V1P.                                     00015100
      U1P=ZERO                                                          00015200
      IF(U.EQ.U1) U1P=ONE                                               00015300
      V1P=ZERO                                                          00015400
      IF(V.EQ.V1) V1P=ONE                                               00015500
      SPV(4)=ONE                                                        00015600
C---      EXTRAPOLATION FORMULA IS AS FOLLOWS                           00015700
C---      SPV = SPW + DU*SPW-U +DV*SPW-V + DU*DV*SPW-UV                 00015800
      DO 430 I=1,3                                                      00015900
      SPV(I)=SPW(I)+DU*SPW(I+4)+DV*(SPW(I+8)+DU*SPW(I+16))              00016000
      IF(MMODE.EQ.0) GO TO 430                                          00016100
      SPV(I+4)=SPW(I+4)+DV*SPW(I+16)                                    00016200
      SPV(I+8)=SPW(I+8)+DU*SPW(I+16)                                    00016300
      SPV(I+12)=U1P*SPW(I+12)                                           00016400
      SPV(I+16)=SPW(I+16)                                               00016500
      SPV(I+20)=V1P*SPW(I+20)                                           00016600
  430 CONTINUE                                                          00016700
      IF(MMODE.EQ.0) GO TO 490                                          00016800
      CALL CROSS(SPV(5),SPV(9),SPV(25))                                 00016900
      CALL DOTV(D1,SPV(25),SPV(25))                                     00017000
      D1=DSQRT(D1)                                                      00017100
      IF(D1.EQ.ZERO) D1=ONE                                             00017200
      DO 440 I=1,3                                                      00017300
  440 SPV(I+28)=SPV(I+24)/D1                                            00017400
  490 CONTINUE                                                          00017500
C---      SET FLAGS FOR DERIVATIVES                                     00017600
      IF(MMODE.EQ.0) GO TO 999                                          00017700
      DO 495 I=8,32,4                                                   00017800
  495 SPV(I)=ONE                                                        00017900
C                                                                       00018000
  999 CONTINUE                                                          00018100
      RETURN                                                            00018200
      END                                                               00018300
**** SOURCE FILE : M0000617.V02   ***
*
      SUBROUTINE CNSURG(U,V,B,SPV,IFLAG,MODE)                           00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C--  MODULAR.  PURPOSE IS TO GENERATE SURFACE POINT AND DIFFERENTIAL    00000300
C--  ELEMENTS ON A COONS PATCH (B) FROM INPUT COORDINATES U,V.          00000400
C--  U,V = INPUT SURFACE COORDINATES                                    00000500
C--  B   = INPUT COONS PATCH COEFFICIENTS                               00000600
C--  IFLAG = INPUT ARRAY WHICH RECORDS THE TYPE OF EACH 16-COMPONENT    00000700
C--           MATRIX IN THE ARRAY B( 1=CONSTANT,2=LINEAR,3,4=FULL)      00000800
C--  MODE  = INPUT.  MODE=0 MEANS ONLY SURFACE POINT REQD.              00000900
C--               OTHERWISE FIRST AND SECOND ORDER DIFFERENTIAL ELEMENTS00001000
C--                ARE ALSO REQUIRED                                    00001100
C--  SPV   = OUTPUT  SPV(1-4)= PROJECTIVE COORDINATES OF SURFACE POINT  00001200
C--               SPV(5-8) = P.C. OF FIRST DERIV WRT U                  00001300
C--                SPV(9-12)=  P.C. OF FIRST DERIV WRT V                00001400
C--                SPV(13-16)= P.C. OF SECOND DERIV WRT U               00001500
C--                SPV(17-20) = P.C. OF MIXED PARTIAL WRT U,V           00001600
C--                SPV(21-24) = P.C. OF SECOND DERIV WRT TO V           00001700
      LOGICAL IMODE                                                     00001710
      DIMENSION B(64),SPV(32),IFLAG(4)                                  00001800
      DIMENSION F(12),G(12),T(12)                                       00001900
C---     POINTERS FOR RAPID EVALUATION OF SPV THRU PRODUCTS OF T AND G. 00002000
      DIMENSION NT(6),NG(6)                                             00002100
      DATA NT/1,5,1,9,5,1/                                              00002200
      DATA NG/1,1,5,1,5,9/                                              00002300
C                                                                       00002400
C                                                                       00002600
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-12/                           00002700
C                                                                       00002800
      IMODE=.FALSE.                                                     00002900
      IF(MODE.EQ.0) IMODE=.TRUE.                                        00003000
C------ EVALUATE COONS BLEND FUNCTIONS AND THEIR DERIVATIVES            00003100
C------ FOR PARAMETER VALUES U AND V                                    00003200
      CALL BLENDF(U,F)                                                  00003300
      CALL BLENDF(V,G)                                                  00003400
C------ EVALUATE THE PROJECTIVE SURFACE POINT AND PARTIAL DERIVATIVE    00003500
C------ COORDINATES.  EACH COORDINATE SET(X,Y,Z,W) IS EVALUATED         00003600
C------ ON SUCCESSIVE PASSES THRU THE 10 LOOP AND SPECIAL SPEED         00003700
C------ ROUTES ARE TAKEN FOR A LINEAR OR CONSTANT COORDINATE            00003800
C------ MATRIX                                                          00003900
      DO 10 I=1,4                                                       00004000
      K=IFLAG(I)                                                        00004100
      GO TO (100,200,300,300),K                                         00004200
  300 CONTINUE                                                          00004300
      N=16*I-16                                                         00004400
      KLIM=9                                                            00004500
      IF(IMODE) KLIM=1                                                  00004600
      DO 310 L=1,KLIM,4                                                 00004700
      T(L  )=F(L)*B(N+ 1)+F(L+1)*B(N+ 2)+F(L+2)*B(N+ 3)+F(L+3)*B(N+ 4)  00004800
      T(L+1)=F(L)*B(N+ 5)+F(L+1)*B(N+ 6)+F(L+2)*B(N+ 7)+F(L+3)*B(N+ 8)  00004900
      T(L+2)=F(L)*B(N+ 9)+F(L+1)*B(N+10)+F(L+2)*B(N+11)+F(L+3)*B(N+12)  00005000
      T(L+3)=F(L)*B(N+13)+F(L+1)*B(N+14)+F(L+2)*B(N+15)+F(L+3)*B(N+16)  00005100
  310 CONTINUE                                                          00005200
      SPV(I) = T(1)*G(1)+T(2)*G(2)+T(3)*G(3)+T(4)*G(4)                  00005300
      IF(IMODE) GO TO 10                                                00005400
C                                                                       00005500
      LV=0                                                              00005600
      DO 320 L=1,5                                                      00005700
      LV=LV+4                                                           00005800
      M=NT(L+1)                                                         00005900
      LG=NG(L+1)                                                        00006000
      SPV(I+LV)=T(M)*G(LG)+T(M+1)*G(LG+1)+T(M+2)*G(LG+2)+T(M+3)*G(LG+3) 00006100
  320 CONTINUE                                                          00006200
      GO TO 10                                                          00006300
C                                                                       00006400
  100 SPV(I)=B(16*I-15)                                                 00006500
      IF(IMODE) GO TO 10                                                00006600
      DO 110 L = 4,20,4                                                 00006700
  110 SPV(I +L) = ZERO                                                  00006800
      GO TO 10                                                          00006900
C                                                                       00007000
  200 CONTINUE                                                          00007100
      N=16*I-15                                                         00007200
      T(1) = B(N)                                                       00007300
      T(2) = B(N +1)-B(N)                                               00007400
      T(3) = B(N +4)-B(N)                                               00007500
      T(4) = B(N +5)-B(N +4)-T(2)                                       00007600
      SPV(I) = T(1) +T(2)*U +(T(3) +T(4)*U)*V                           00007700
      IF(IMODE) GO TO 10                                                00007800
      SPV(I +4) = T(2) +T(4)*V                                          00007900
      SPV(I +8) = T(3) +T(4)*U                                          00008000
      SPV(I +12) = ZERO                                                 00008100
      SPV(I +16) = T(4)                                                 00008200
      SPV(I +20) = ZERO                                                 00008300
   10 CONTINUE                                                          00008400
C                                                                       00008500
      IF(IFLAG(4).EQ.1) GO TO 400                                       00008600
C                                                                       00008700
C--  INTERPOLATE EUCLIDEAN QUANTITIES FROM PROJECTIVE QUANTITIES        00008800
C---     PATCH IS OF RATIONAL FORM SO COMPUTE DERIVATIVES BY RATIOS.    00008900
C---     FIRST EVALUATE FIXED W DERIVATIVES AND RATIOS.                 00009000
      IF(IMODE) GO TO 360                                               00009100
C---     T(1)=WSQ, 2=WU, 3=WV, 4=TWU, 5=TWV, 6=WUU, 7=WUV, 8=WVV        00009200
      T(1)=SPV(4)**2                                                    00009300
      T(2)=SPV(8)/T(1)                                                  00009400
      T(3)=SPV(12)/T(1)                                                 00009500
      T(4)=(SPV(8)+SPV(8))/SPV(4)                                       00009600
      T(5)=(SPV(12)+SPV(12))/SPV(4)                                     00009700
      T(6)=SPV(16)/T(1)                                                 00009800
      T(7)=SPV(20)/T(1)                                                 00009900
      T(8)=SPV(24)/T(1)                                                 00010000
C---     LOOP TO EVALUATE RATIONAL DERIVATIVES FOR X,Y,Z COMPONENTS     00010100
      DO 350 L=1,3                                                      00010200
C---     PARTIAL OF F WITH RESPECT TO U =FU.                            00010300
      SPV(L+4)=SPV(L+4)/SPV(4)-SPV(L)*T(2)                              00010400
C---     PARTIAL OF F WITH RESPECT TO V                                 00010500
      SPV(L+8)=SPV(L+8)/SPV(4)-SPV(L)*T(3)                              00010600
C---     SECOND PARTIAL OF F WITH RESPECT TO U.                         00010700
      SPV(L+12)=-T(4)*SPV(L+4)+SPV(L+12)/SPV(4)-SPV(L)*T(6)             00010800
C---     SECOND PARTIAL OF F WITH RESPECT TO V.                         00010900
      SPV(L+20)=-T(5)*SPV(L+8)+SPV(L+20)/SPV(4)-SPV(L)*T(8)             00011000
C---     MIXED SECOND PARTIAL OF F WITH RESPECT TO U AND V.             00011100
      SPV(L+16)=-(T(5)*SPV(L+4)+T(4)*SPV(L+8))/2.0+                     00011200
     X          SPV(L+16)/SPV(4)-SPV(L)*T(7)                            00011300
C---     NOTE THAT THE ORDER OF THE ABOVE CALCULATIONS IS SENSITIVE     00011400
  350 CONTINUE                                                          00011500
C                                                                       00011600
  360 CONTINUE                                                          00011700
      DO 370 L=1,3                                                      00011800
      SPV(L)=SPV(L)/SPV(4)                                              00011900
  370 CONTINUE                                                          00012000
C                                                                       00012100
  400 CONTINUE                                                          00012200
C---     SET INDICATOR VALUES FOR QUANTITIES COMPUTED                   00012300
      IF(IMODE) GO TO 501                                               00012400
      DO 500 I=8,24,4                                                   00012500
  500 SPV(I)=ONE                                                        00012600
  501 CONTINUE                                                          00012700
      SPV(4)=ONE                                                        00012800
C                                                                       00012900
      RETURN                                                            00013000
      END                                                               00013100
**** SOURCE FILE : M0001056.V02   ***
*
      SUBROUTINE CNSURH(U,V,B,SPV,IFLAG,MMODE)                          00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C------  INTERPOLATION FORMULAS FOR VARIOUS TYPES OF GENCUR             00000300
C------  PATCHES ARE HERE.                                              00000400
C---     BLANK COMMON INCLUDED TO PROVIDE ACCESS TO SURFACE             00000500
C---     FOR THE SPECIAL CASE OF A SURFACE THRU GENERAL CURVES          00000600
C                                                                       00000710
      INCLUDE 'BLANKCOM.INC'                                            00000720
C                                                                       00000730
      DIMENSION B(64),SPV(32),IFLAG(4)                                  00000800
      DIMENSION SPW(32),FV(12)                                          00000900
      DIMENSION RK(32,2)                                                00001000
      DIMENSION R(32),RT(32)                                            00001100
      EQUIVALENCE (RK(1,1),R(1)),(RK(1,2),RT(1))                        00001200
      DIMENSION IFLX(4)                                                 00001300
      DATA IFLX/4,4,4,1/                                                00001400
C--- INPUT CONSISTS OF PARAMETRIC U,V COORDINATES.  THE UNIT SQUARE     00001500
C--- DIVIDES THE PLANE INTO 9 SECTORS.  THIS ROUTINE DETERMINES THE     00001600
C--- CORRECT SECTOR FOR U,V AND THEN COMPUTES SURFACE DIFFERENTIAL      00001700
C--- QUANTITIES FOR THE NATURAL PATCH OR ELSE FOR ITS RULED EXTENSIONS  00001800
C                                                                       00001900
      DATA ZERO,ONE/0.0D0,1.0D0/                                        00002000
C                                                                       00002100
      U1=U                                                              00002200
      V1=V                                                              00002300
      MODE=MMODE                                                        00002400
C                                                                       00002500
C---     SPECIAL PATH FOR HANDLING A PATCH THRU GENERAL CURVES.         00002600
C---     FIRST DECOMPOSE THE PATCH FLAG INTO COMPONENTS FOR             00002700
C---     INTERPOLATING BOUNDARIES 1 AND 2 AND BOUNDARIES 3 AND 4        00002800
C                                                                       00002900
  100 CONTINUE                                                          00003000
      II=DABS(B(1))                                                     00003100
      IA=MOD(II,10)                                                     00003200
      IB=II/10                                                          00003300
      IB=MOD(IB,10)                                                     00003400
C---     LEVEL OF INTERPOLATION IS DIFFERENT FOR RULED INTERPOLATION    00003500
C---     AND HIGHER LEVEL OF INTERPOLATION                              00003600
      IF(IA.LT.2) JLEV=1                                                00003700
      IF(IA.GT.1) JLEV=2                                                00003800
C                                                                       00003900
C---     OBTAIN DERIVATIVES AT CORRESPONDING EDGES OF BOUNDARIES        00004000
C---     NUMBERED 1 AND 2                                               00004100
      DO 110 I=1,2                                                      00004200
      LOC=IFLAG(I)                                                      00004300
      CALL CURFLO(U,CANON(LOC),RK(1,I),JLEV,1)                          00004400
  110 CONTINUE                                                          00004500
C---      BRANCH TO NON RULED TYPE OF INTERPOLATION                     00004600
      IF(IA.GT.1) GO TO 200                                             00004700
C---     RULED TYPE OF INTERPOLATION FOLLOWS                            00004800
      VA=ONE-V1                                                         00004900
      VB=V1                                                             00005000
      DO 120 I=1,3                                                      00005100
      SPV(I)=RK(I,1)*VA+RK(I,2)*VB                                      00005200
      IF(MODE.EQ.0) GO TO 120                                           00005300
      SPV(I+4)=RK(I+4,1)*VA+RK(I+4,2)*VB                                00005400
      SPV(I+12)=RK(I+8,1)*VA+RK(I+8,2)*VB                               00005500
      SPV(I+8)=RK(I,2)-RK(I,1)                                          00005600
      SPV(I+20)=ZERO                                                    00005700
      SPV(I+16)=RK(I+4,2)-RK(I+4,1)                                     00005800
  120 CONTINUE                                                          00005900
C                                                                       00006000
  140 CONTINUE                                                          00006100
C                                                                       00006200
      GO TO 999                                                         00006300
C                                                                       00006400
C---     THE CASE OF NON-RULED INTERPOLATION                            00006500
  200 CONTINUE                                                          00006600
      CALL BLENDF(V,FV)                                                 00006700
      DO 210 I=1,3                                                      00006800
      SPV(I)=                                                           00006900
     C FV(1)*RK(I,1)+FV(2)*RK(I,2)+FV(3)*RK(I+16,1)+FV(4)*RK(I+16,2)    00007000
      IF(MODE.EQ.0) GO TO 210                                           00007100
      SPV(I+4)=                                                         00007200
     C FV(1)*RK(I+4,1)+FV(2)*RK(I+4,2)+FV(3)*RK(I+20,1)+FV(4)*RK(I+20,2)00007300
      SPV(I+8)=                                                         00007400
     C FV(5)*RK(I,1)+FV(6)*RK(I,2)+FV(7)*RK(I+16,1)+FV(8)*RK(I+16,2)    00007500
      SPV(I+12)=                                                        00007600
     C FV(1)*RK(I+8,1)+FV(2)*RK(I+8,2)+FV(3)*RK(I+24,1)+FV(4)*RK(I+24,2)00007700
      SPV(I+16)=                                                        00007800
     C FV(5)*RK(I+4,1)+FV(6)*RK(I+4,2)+FV(7)*RK(I+20,1)+FV(8)*RK(I+20,2)00007900
      SPV(I+20)=                                                        00008000
     C FV(9)*RK(I,1)+FV(10)*RK(I,2)+FV(11)*RK(I+16,1)+FV(12)*RK(I+16,2) 00008100
  210 CONTINUE                                                          00008200
C                                                                       00008300
      IF(IB.LT.2) GO TO 140                                             00008400
C                                                                       00008500
C---     THE FULL CROSS CURVE CASE, TWO MORE LEVELS OF INTERPOLATION    00008600
C---     ARE NOW REQUIRED.                                              00008700
C                                                                       00008800
C---     FIRST LOAD THE TWO CROSS CURVES AND INTERPOLATE THEM           00008900
      DO 410 I=3,4                                                      00009000
      LOC=IFLAG(I)                                                      00009100
      II=I-2                                                            00009200
      CALL CURFLO(V,CANON(LOC),RK(1,II),JLEV,1)                         00009300
  410 CONTINUE                                                          00009400
      BSAVE=B(1)                                                        00009500
      CALL BLENDF(U,FV)                                                 00009600
      DO 420 I=1,3                                                      00009700
      SPW(I)=SPV(I)+                                                    00009800
     C FV(1)*RK(I,1)+FV(2)*RK(I,2)+FV(3)*RK(I+16,1)+FV(4)*RK(I+16,2)    00009900
      IF(MODE.EQ.0) GO TO 420                                           00010000
      SPW(I+4)=SPV(I+8)+                                                00010100
     C FV(1)*RK(I+4,1)+FV(2)*RK(I+4,2)+FV(3)*RK(I+20,1)+FV(4)*RK(I+20,2)00010200
      SPW(I+8)=SPV(I+4)+                                                00010300
     C FV(5)*RK(I,1)+FV(6)*RK(I,2)+FV(7)*RK(I+16,1)+FV(8)*RK(I+16,2)    00010400
      SPW(I+12)=SPV(I+20)+                                              00010500
     C FV(1)*RK(I+8,1)+FV(2)*RK(I+8,2)+FV(3)*RK(I+24,1)+FV(4)*RK(I+24,2)00010600
      SPW(I+16)=SPV(I+16)+                                              00010700
     C FV(5)*RK(I+4,1)+FV(6)*RK(I+4,2)+FV(7)*RK(I+20,1)+FV(8)*RK(I+20,2)00010800
      SPW(I+20)=SPV(I+12)+                                              00010900
     C FV(9)*RK(I,1)+FV(10)*RK(I,2)+FV(11)*RK(I+16,1)+FV(12)*RK(I+16,2) 00011000
  420 CONTINUE                                                          00011100
C---     FINALLY SET UP MATRIX FOR CONVENTIONAL COONS INTERPOLATION     00011200
C                                                                       00011300
      DO 470 I=1,2                                                      00011400
C                                                                       00011500
      LOC=IFLAG(I)                                                      00011600
      DO 470 J=1,2                                                      00011700
      UT=J-1                                                            00011800
      CALL CURFLO(UT,CANON(LOC),R(1),2,1)                               00011900
      IN=J+(I-1)*4-1                                                    00012000
      KINC=0                                                            00012100
      DO 430 K=1,33,16                                                  00012200
      KINC=KINC+1                                                       00012300
      B(IN+K)=R(KINC)                                                   00012400
      B(IN+K+2)=R(KINC+4)                                               00012500
      B(IN+K+8)=R(KINC+16)                                              00012600
      B(IN+K+10)=R(KINC+20)                                             00012700
  430 CONTINUE                                                          00012800
C---     SET THE W MATRIX                                               00012900
      DO 435 L=51,64                                                    00013000
      B(L)=ZERO                                                         00013100
  435 CONTINUE                                                          00013200
      B(49)=ONE                                                         00013300
      B(50)=ONE                                                         00013400
      B(53)=ONE                                                         00013500
      B(54)=ONE                                                         00013600
C                                                                       00013700
  470 CONTINUE                                                          00013800
C                                                                       00013900
C---     NOW EVALUATE COONS INTERPOLATION OF SURFACE POINT              00014000
C                                                                       00014100
      CALL CNSURG(U,V,B,SPV,IFLX,MODE)                                  00014200
C                                                                       00014300
C---     NOWSUBTRACT THIS POINT AND DERIVATIVES FROM SPW                00014400
C---     TO OBTAIN THE CONSTRAINED INTERPOLATION.                       00014500
C                                                                       00014600
      DO 450 I=1,3                                                      00014700
      SPV(I)=SPW(I)-SPV(I)                                              00014800
      IF(MODE.LT.1) GO TO 450                                           00014900
      SPV(I+4)=SPW(I+8)-SPV(I+4)                                        00015000
      SPV(I+8)=SPW(I+4)-SPV(I+8)                                        00015100
      SPV(I+12)=SPW(I+20)-SPV(I+12)                                     00015200
      SPV(I+16)=SPW(I+16)-SPV(I+16)                                     00015300
      SPV(I+20)=SPW(I+12)-SPV(I+20)                                     00015400
  450 CONTINUE                                                          00015500
C---     NOW RESTORE THE B MATRIX                                       00015600
      DO 480 I=2,64                                                     00015700
  480 B(I)=ZERO                                                         00015800
      B(49)=ONE                                                         00015900
      B(50)=ONE                                                         00016000
      B(53)=ONE                                                         00016100
      B(54)=ONE                                                         00016200
      B(1)=BSAVE                                                        00016300
C                                                                       00016400
  999 CONTINUE                                                          00016500
      RETURN                                                            00016600
      END                                                               00016700
**** SOURCE FILE : M0011517.V05   ***
*
      SUBROUTINE CMESH(SPV,UST,VST,J11)                                 M0000100
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)              M0000200
C---- THIS ROUTINE GIVES A POINT WITH ITS DERIVATIVES,WHEN UST AND VST  M0000300
C---- IS GIVEN.                                                         M0000400
C---- THE SURFACE IS LOADED BEFORE BY APT094 IN CAN                     M0000500
C---- LODPCH AND CNSURF ARE CALLED                                      M0000600
C                                                                       M0000700
C                                                                       M0000800
C    NPATCH : IST DIE ZURUECKGEGEBENE PATCH-NUMMER                      M0000900
C    UST    : FLAECHEN-PARAMETER IN U-RICHTUNG                          M0001000
C    VST    : FLAECHENPARAMETER IN V-RICHTUNG                           M0001100
C                                                                       M0001200
C                                                                       M0001300
C                                                                       M0001400
      INCLUDE 'TOTAL.INC'                                               M0002801
      INCLUDE 'ISHR16.INC'                                              M0008101
C                                                                       M0008200
C                                                                       M0010000
      DIMENSION SPV(32),IFLAG(4),PATCH(64),ITOP(6,4)                    M0010100
C                                                                       M0010210
      INCLUDE 'BLANKCOM.INC'                                            M0010220
C                                                                       M0010230
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   M0010300
C                                                                       M0010400
C  PUNKT/VECTOR MITTELS PARAMETER AUS SSURF                             M0010500
C                                                                       M0010600
      PA01=UST                                                          M0010700
      PB01=VST                                                          M0010800
      PC01=0.0D0                                                        M0010900
C   MAXIMALE PATCH-ANZAHL                                               M0011000
      MPATCH=CAN(J11+4)                                                 M0011100
C   FLAECHENART (2 FUER MESH-TYP)                                       M0011200
      MESH=CAN(J11+5)                                                   M0011300
C   ANZAHL DER KURVENSEGMENTE IN U-RICHTUNG                             M0011400
      NSPL=CAN(J11+9)-1.                                                M0011500
C   ANZAHL DER KURVENSEGMENTE IN V-RICHTUNG                             M0011600
      NPNT=CAN(J11+10)-1.                                               M0011700
      IPA01=PA01                                                        M0011800
      IPB01=PB01                                                        M0011900
      IF(IPA01.LT.NPNT) GOTO 10                                         M0012000
      IPA01=NPNT-1                                                      M0012100
   30 PU01=PA01-IPA01                                                   M0012200
   40 IF(IPB01.LT.NSPL) GOTO 20                                         M0012300
      IPB01=NSPL-1                                                      M0012400
   50 PV01=PB01-IPB01                                                   M0012500
   60 NPATCH=IPB01*NPNT+IPA01+1                                         M0012600
      GOTO 70                                                           M0012700
   10 IF(IPA01.GE.0) GOTO 30                                            M0012800
      IPA01=0                                                           M0012900
      PU01=PA01                                                         M0013000
      GOTO 40                                                           M0013100
   20 IF(IPB01.GE.0) GOTO 50                                            M0013200
      IPB01=0                                                           M0013300
      PV01=PB01                                                         M0013400
      GOTO 60                                                           M0013500
   70 CONTINUE                                                          M0013600
      CALL LODPCH(CAN(J11+1),PATCH,IFLAG,ITOP,NPATCH,1)                 M0013700
C                                                                       M0013800
C    MMODE=1 MEANS CALCULATE POINT AND DERIVATIVES(SPV)                 M0013900
      MM=1                                                              M0014000
C                                                                       M0014100
C                                                                       M0014200
C                                                                       M0014300
      CALL CNSURF(PU01,PV01,PATCH,SPV,IFLAG,MM)                         M0014400
C                                                                       M0014500
      RETURN                                                            M0014600
      END                                                               M0014700
**** MODULE = SSARELEM ****
**** SOURCE FILE : M0004316.W03   ***
*
      SUBROUTINE DDSSRF(SS)                                             00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C------ BEGIN SCULPTURED SURFACE TOOL RAY INTERSECTION ALGORITHM        00000300
      DIMENSION SS(*)                                                   00000400
C                                                                       00000500
C                                                                       00000800
      INCLUDE 'TOTAL.INC'                                               00001601
      INCLUDE 'FXCOR.INC'                                               00003801
      INCLUDE 'SV.INC'                                                  00006401
      INCLUDE 'ISV.INC'                                                 00008301
      INCLUDE 'IFXCOR.INC'                                              00010201
      INCLUDE 'ISHR18.INC'                                              00010202
C                                                                       00010300
C                                                                       00010400
      COMMON/MODESS/MODESS,MSSCHK,MSSARL                                00010500
C                                                                       00010600
      COMMON/IDDST/IDDST                                                00010700
C                                                                       00010800
      COMMON/IBUGG/IBUG,I1,I2                                           00010900
C                                                                       00011000
      COMMON/SSARLM/B(64,4),U(4),V(4),ITOP(6,4,4),IFLAG(4,4),IPNUM(4),  00011100
     X              ISEQLS,NLAST,MCAT,                                  00011200
     X              IDDLAS(4),JENLAS(4),LODFLG(4),                      00011300
     X              NCALMX,NCMX                                         00011400
C                                                                       00011500
      INCLUDE 'CHEKFL.INC'                                              00011510
C                                                                       00011600
      DIMENSION DIF(3)                                                  00011620
C                                                                       00011800
      DIMENSION SPSAV(3),DSAV(3)                                        00012000
C                                                                       00012010
      DATA ZERO,ONE,SMAL/0.D0,1.D0,1.D-12/                              00012020
      DATA Z5EM1/0.5D0/,ZM5EM1/-0.5D0/                                  00012100
C                                                                       00012200
      IAERR=0                                                           00012300
      LOD63=0                                                           00012310
      IDEBUG=0                                                          00012400
      IDEBUX=0                                                          00012500
      IF(IBUG.EQ.1.OR.IBUG.EQ.2) IDEBUG=1                               00012600
      IF(IBUG.EQ.2) IDEBUX=1                                            00012700
C                                                                       00012800
C                                                                       00012900
      NLAST=NLAST+1                                                     00013000
      IP=IS-1                                                           00013100
C             /-SAVE UV,PATCH NUMBER IN CASE OF TROUBLE                 00013400
      USAVE=U(IP)                                                       00013500
      VSAVE=V(IP)                                                       00013600
      IPSAVE=IPNUM(IP)                                                  00013700
C             /-SAVE OLD SP VALUE                                       00013800
      DO 8 I=1,3                                                        00013900
    8 SPSAV(I)=SP(I,IS)                                                 00014000
      IF(ISEQLS.EQ.ISEQNO) GO TO 20                                     00014100
C             /-RESET INITIALIZING DATA FOR ALL SURFACES FOR NEW STATEME00014200
      DO 30 I=1,4                                                       00014300
   30 LODFLG(I)=1                                                       00014400
   20 CONTINUE                                                          00014500
      IF(JENT(IS).EQ.1.AND.JENLAS(IP).EQ.0) LODFLG(IP)=1                00014600
C             /-SET COUNT OF NUMBER OR RETRY-S WITHIN DDSSRF            00014700
      KRETRY=0                                                          00014800
C                                                                       00014900
C             /-NLAST RECORDS TOTAL NUMBER OF CALLS TO DDSSRF           00015000
C             /-NCALMX IS NUMBER OF CALLS SINCE LAST CUT VECTOR         00015100
C             /-NCMX IS MAX NUMBER OF CALLS ALLOWED FOR ONE CUT VECTOR  00015200
C             /-ICLCUR IS NUMBER OF CURRENT CL POINT IN CUT RECORD      00015300
C             /-MCAT IS LAST VALUE OF ICLCUR ON EXIT FROM DDSSRF        00015400
      ICLCUR=NMPNTS-NUMPT1+1                                            00015500
      IF(ICLCUR.NE.MCAT) NCALMX=0                                       00015600
C             /-RESET NUMBER OF CALLS FOR NEW DS                        00015700
      IF(JENLAS(IP).EQ.0.AND.JENT(IS).EQ.1) NCALMX=0                    00015800
      NCALMX=NCALMX+1                                                   00015900
      IF(NCALMX.GT.NCMX) IAERR=25403                                    00016000
      IF(IAERR.NE.0) GO TO 999                                          00016100
C                                                                       00016200
      IF(IDEBUG.LE.0) GO TO 40                                          00016300
      CALL BAD(-1,0,'DSRF',NLAST)                                       00016400
      CALL BAD(1,0,'ISEQ',ISEQNO)                                       00016500
      CALL BAD(1,0,'CLPT',ICLCUR)                                       00016600
      CALL BAD(1,0,'MODS',MODESS)                                       00016700
      CALL BAD(1,0,'MSCK',MSSCHK)                                       00016800
      CALL BAD(1,0,'IS  ',IS)                                           00016900
      CALL BAD(-1,0,'DDST',IDDST)                                       00017000
      CALL BAD(1,0,'JTN ',JTN(IS))                                      00017100
      CALL BAD(1,0,'MDIC',MDIC)                                         00017200
      CALL BAD(1,0,'INDR',INDIR(IS))                                    00017300
      CALL BAD(-3,1,'TE  ',TE (1))                                      00017400
      CALL BAD(3,1,'TP  ',TP(1,IS))                                     00017500
      CALL BAD(-3,1,'TN  ',TN(1,IS))                                    00017600
   40 CONTINUE                                                          00017700
C                                                                       00017800
C             /-SET MODE FOR DD CALCULATION- USE SNXP WITH MODE=0,      00017900
C             /-OR ELSE USE DDST WITH MODE=-1                           00018000
C             /-FOR VERY FIRST ENTRY USE MODE=0                         00018100
      MODE=-1                                                           00018200
      IF(MDIC.GT.0) GO TO 50                                            00018300
      IF(INDIR(IS).EQ.1.AND.ISTRUP.NE.0.AND.JENT(IS).EQ.1) GO TO 50     00018400
      IF(MSSCHK.EQ.0.AND.MODESS.NE.11) GO TO 50                         00018500
C             /-SET MODE TO SNXP IF ABOVE CONDITIONS DO NOT EXIST       00018600
      MODE=0                                                            00018700
   50 CONTINUE                                                          00018800
C                                                                       00018900
C             /-INITIAL PHASE, SCAN SURFACE FOR BEST CANDIDATE          00019000
C             /-THIS IS USED FOR ERROR RESTART OR INITIAL PROCESSING    00019100
C             /-LOAD INITIAL PATCH IF DDST MODE OR MODE HAS CHANGED     00019200
      IF(IDDLAS(IP).NE.IDDST) GO TO 63                                  00019300
C             /-DO NOT LOAD IF LODFLG IS ZERO AND MDIC IS ZERO          00019400
      IF(LODFLG(IP).EQ.0.AND.MDIC.EQ.0) GO TO 60                        00019500
   63 CONTINUE                                                          00019600
C             /-LOAD A PATCH DURING ERROR PROCESSING OR INITIAL PROCESSI00019700
C                                                                       00019800
      CALL LODINT(SS,B(1,IP),U(IP),V(IP),TP(1,IS),TN(1,IS),             00019900
     X            IFLAG(1,IP),ITOP(1,1,IP),IPNUM(IP),MODE)              00020000
      IF(IDEBUG.LE.0) GO TO 66                                          00020100
      CALL BAD(1,0,'LODI',MODE)                                         00020200
      CALL BAD(1,1,'UIP ',U(IP))                                        00020300
      CALL BAD(-1,1,'VIP ',V(IP))                                       00020400
   66 CONTINUE                                                          00020500
C                                                                       00020600
C             /-TRUNCATE INITIAL U,V TO LIE INSIDE PATCH BOUNDARY       00020700
      CALL SQRCUT(Z5EM1,Z5EM1,U(IP),V(IP),UU,VV,ICKBN)                  00020800
      U(IP)=Z5EM1+.9999D0*(UU-Z5EM1)                                    00020900
      V(IP)=Z5EM1+.9999D0*(VV-Z5EM1)                                    00021000
   80 CONTINUE                                                          00021100
      LODFLG(IP)=0                                                      00021200
      IF(IDEBUG.LE.0) GO TO 70                                          00021300
      CALL BAD(1,0,'LINT',IPNUM(IP))                                    00021400
      CALL BAD(1,0,'ICKB',ICKBN)                                        00021500
      CALL BAD(1,1,'UU  ',UU)                                           00021600
      CALL BAD(-1,1,'VV  ',VV)                                          00021700
   70 CONTINUE                                                          00021800
C                                                                       00021900
   60 CONTINUE                                                          00022000
C                                                                       00022100
C             /-CALL THE MAIN ALGORITHM FOR DETERMINING THE RELATION    00022200
C             /-BETWEEN THE SURFACE AND EXTERIOR POINT OR TOOL RAY      00022300
C...CALL PCHPRC.  LAST PARAMETER .FALSE. FOR NO GEOMETRIC CONSTRUCTION  00022310
C                                                                       00022400
      CALL PCHPRC( SS,B(1,IP),U(IP),V(IP),                              00022500
     1         TP(1,IS),TN(1,IS),UA,VA,                                 00022600
     2         SP(1,IS),SN(1,IS),SLX(1,IS),                             00022700
     3         IFLAG(1,IP),ITOP(1,1,IP),IPNUM(IP),                      00022800
     4         MODE,IDEBUX,IRR,.FALSE.)                                 00022900
C                                                                       00023000
      IF(IDEBUG.LE.0) GO TO 100                                         00023100
      CALL BAD(1,0,'PCHP',IRR)                                          00023200
      CALL BAD(1,0,'MODE',MODE)                                         00023300
      CALL BAD(1,0,'PCNO',IPNUM(IP))                                    00023400
      CALL BAD(1,1,'UA  ',UA)                                           00023500
      CALL BAD(-1,1,'VA  ',VA)                                          00023600
      CALL BAD(3,1,'SP  ',SP(1,IS))                                     00023700
      CALL BAD(-3,1,'SN  ',SN(1,IS))                                    00023800
  100 CONTINUE                                                          00023900
C                                                                       00024000
      IF(IRR.NE.0) GO TO 800                                            00024100
C                                                                       00024102
C                                                                       00024104
      IF ( (ICHEKF.NE.1).OR.(LOD63.EQ.1)) THEN                          00024110
        CONTINUE                                                        00024115
      ELSE                                                              00024120
        LOD63=1                                                         00024130
        DO 109 I=1,3                                                    00024140
          DIF(I) = SP(I,IS) - TP(I,IS)                                  00024150
  109   CONTINUE                                                        00024160
        CALL DOTF(DCK,TI,DIF)                                           00024170
        IF (DCK.LT.ZM5EM1) GOTO 63                                      00024180
      ENDIF                                                             00024190
C             /-CHECK FURTHER TO SEE WHETHER U,V ARE VALID              00024200
      NOPATC=SS(4)                                                      00024300
      IRR=0                                                             00024400
      IF(IPNUM(IP).LT.1.OR.IPNUM(IP).GT.NOPATC) GO TO 70                00024500
C---  DOUBLE CHECK TO SEE IF UA,VA ARE ON A LEGAL EXTENSION             00024600
      IUR=2                                                             00024700
      IF(UA.LT.ZERO) IUR=1                                              00024800
      IF(UA.GT.ONE) IUR=3                                               00024900
      IVR=2                                                             00025000
      IF(VA.LT.ZERO) IVR=1                                              00025100
      IF(VA.GT.ONE) IVR=3                                               00025200
      ISQNO=IUR+3*(IVR-1)                                               00025300
C---  IF UA,VA ARE INSIDE THE PATCH BOUNDS ITS O.K.                     00025400
      IF(ISEQNO.EQ.5.AND.IP.EQ.K1) IPCHN=0                              00025410
      IF(ISQNO.EQ.5) GO TO 230                                          00025500
      IF(MOD(ISQNO,2).NE.0) GO TO 240                                   00025600
C---  UA,VA IS ON EXT DIRECTLY OPPOSITE A BOUNDARY                      00025700
      IB1  =ISQNO/2                                                     00025800
C---  CHECK IF A PATCH IS HOOKED TO THIS BOUNDARY                       00025900
      IF(ITOP(2,IB1  ,IP).EQ.0) GO TO 230                               00026000
      IRR=2                                                             00026100
      GO TO 230                                                         00026200
  240 CONTINUE                                                          00026300
C---  UA,VA ARE ON A CORNER EXTENSION, CHECK TWO BOUNDARIES             00026400
      IB1=1                                                             00026500
      IB2=2                                                             00026600
      IF(ISQNO.EQ.7) IB1=4                                              00026700
      IF(ISQNO.EQ.3) IB2=3                                              00026800
      IF(ISQNO.EQ.9) IB1=4                                              00026900
      IF(ISQNO.EQ.9) IB2=3                                              00027000
C---  IB1,IB2 ARE THE BOUNDARIES, CHECK IF EITHER HAS A PATCH           00027100
      IF(ITOP(2,IB1,IP).EQ.0.AND.ITOP(2,IB2,IP).EQ.0) GO TO 230         00027200
      IRR=3                                                             00027300
  230 CONTINUE                                                          00027400
C                                                                       00027500
      IF(IRR.EQ.0.OR.IDEBUG.LE.0) GO TO 885                             00027600
      CALL RECORD(II)                                                   00027700
      CALL BAD(1,0,'ISEQ',II)                                           00027800
      CALL BAD(1,0,'IRR ',IRR)                                          00027900
      CALL BAD(1,0,'IPNM',IPNUM(IP))                                    00028000
      CALL BAD(1,1,'U   ',U(IP))                                        00028100
      CALL BAD(-1,1,'V   ',V(IP))                                       00028200
      CALL BAD(1,0,'ISQN',ISQNO)                                        00028300
      CALL BAD(1,1,'UA  ',UA)                                           00028400
      CALL BAD(-1,1,'VA  ',VA)                                          00028500
      DO 825 LL=1,4                                                     00028600
      CALL BAD(1,0,'ITOP',ITOP(2,LL,IP))                                00028700
  825 CONTINUE                                                          00028800
      CALL BAD(-1,0,' ',0)                                              00028900
  885 CONTINUE                                                          00029000
C             /-QUIT IF IRR IS  NOT ZERO NOW                            00029100
      IF(IRR.NE.0) GO TO 800                                            00029200
      IER=0                                                             00029300
C             /-SET TN ONLY IF MODE=0 AND MODESS.NE.11(Z DETERMINATION) 00029400
      IF(MODE.NE.0) GO TO 310                                           00029500
      W1=ONE                                                            00029600
      IF(JTN(IS).EQ.0) W1=-ONE                                          00029700
      W1=W1*Z(IS)                                                       00029800
      DO 320 I=1,3                                                      00029900
      TN(I,IS)=W1*SN(I,IS)                                              00029910
  320 CONTINUE                                                          00030000
  310 CONTINUE                                                          00030100
      DO 300 I=1,3                                                      00030200
      TEMP(I)=SP(I,IS)-TP(I,IS)                                         00030300
  300 CONTINUE                                                          00030400
C             /-MODIFY TN FOR CASE OF MODESS.EQ.11                      00030500
      IF(MODESS.NE.11) GO TO 330                                        00030600
      CALL DOTF(W1,TN(1,IS),TEMP)                                       00030700
      IF(W1.GE.ZERO) GO TO 330                                          00030800
C             /-REVERSE TN TO POINT TOWARD SP                           00030900
      DO 360 I=1,3                                                      00031000
      TN(I,IS)=-TN(I,IS)                                                00031010
  360 CONTINUE                                                          00031100
  330 CONTINUE                                                          00031200
      CALL DOTF(S(IS),TEMP(1),TEMP(1))                                  00031300
      S(IS)=DSQRT(S(IS))                                                00031400
      CALL DOTF(W1,TEMP,TN(1,IS))                                       00031500
      S(IS)=DSIGN(ONE,W1)*S(IS)                                         00031600
C                                                                       00031700
      U(IP)=UA                                                          00031800
      V(IP)=VA                                                          00031900
C             /-SET THE VALUE OF THE LAST SURFACE POINT                 00032000
      IEQUAL=1                                                          00032100
      DO 410 I=1,3                                                      00032200
      W1=SP(I,IS)-SPSAV(I)                                              00032300
      IF(DABS(W1).GT.SMAL) IEQUAL=0                                     00032400
  410 CONTINUE                                                          00032500
C             /-IF SPSAV IS DIFFERENT AND MODESS.NE.11, SET SPL=SPSAV   00032600
      IF(IEQUAL.EQ.1.OR.MODESS.EQ.11) GO TO 420                         00032700
      DO 430 I=1,3                                                      00032800
  430 SPL(I,IS)=SPSAV(I)                                                00032900
      GO TO 999                                                         00033000
  420 CONTINUE                                                          00033100
      DO 440 I=1,3                                                      00033200
  440 SPL(I,IS)=SPSAV(I)                                                00033300
C                                                                       00033400
      GO TO 999                                                         00033500
C                                                                       00033600
C             /-ERROR PROCESSING                                        00033700
  800 CONTINUE                                                          00033800
      KRETRY=KRETRY+1                                                   00033900
      IF(KRETRY.EQ.1) GO TO 340                                         00034000
C.... ACCEPT SURFACE POINT                                              00034002
C.... IF DISTANCE BETWEEN CUTTER AND SP IS LARGE (DIST.GE.10)           00034003
C.... AND DISTANCE TO PATCH BOUNDARY IS SMALL (UVDIST.LE.0.05)          00034004
      IF ((DIST.GE.10.D0).AND.(UVDIST.LE.0.05D0)) THEN                  00034005
        IRR=0                                                           00034006
        GOTO 885                                                        00034007
      ENDIF                                                             00034008
      IF(KRETRY.EQ.2) GO TO 350                                         00034010
      GO TO 355                                                         00034020
C             /-RELOAD INITIAL DATA AND RETRY                           00034100
  340 CONTINUE                                                          00034200
      U(IP)=USAVE                                                       00034300
      V(IP)=VSAVE                                                       00034400
      IPNUM(IP)=IPSAVE                                                  00034500
C             /-BRANCH BACK TO LOAD INITIAL PATCH                       00034600
      LODFLG(IP)=1-LODFLG(IP)                                           00034700
      IF (MODE.NE.0.OR.MODES.NE.11) GO TO 50                            00034710
C     IF MODE=0, RETRY WITH NEW TE,TP                                   00034720
      DO 345 I=1,3                                                      00034730
  345 DSAV(I)=TE(I)-TP(I,IS)                                            00034740
      CALL DOTV (W1,DSAV,DSAV)                                          00034750
      W1=DSQRT(W1)                                                      00034760
      IF(DABS(W1).LT.SMAL) GO TO 355                                    00034770
      DO 346 I=1,3                                                      00034780
      DSAV(I) =DSAV(I)/W1                                               00034790
  346 CONTINUE                                                          00034791
      W1=0.5D0*W1                                                       00034792
      DO 347 I=1,3                                                      00034793
      TE(I)=TE(I)+W1*DSAV(I)                                            00034794
  347 TP(I,IS)=TP(I,IS)+W1*DSAV(I)                                      00034795
      GO TO 50                                                          00034800
C                                                                       00034900
  350 CONTINUE                                                          00035000
      IER=IRR                                                           00035100
      IF(MODE.EQ.0) GO TO 355                                           00035200
      IER=0                                                             00035300
      IF(IDDST.EQ.1) GO TO 999                                          00035400
      IER=0                                                             00035500
      MODE=0                                                            00035600
      MDIC=1                                                            00035700
      GO TO 63                                                          00035800
C                                                                       00035900
  355 CONTINUE                                                          00036000
C             /- FATAL ERROR IN SNXP MODE                               00036100
C                IF IBUG=1 OR 2, DO AGAIN TO GET DYDMP-LIST             00036110
      IF (IBUG.LE.0) GO TO 356                                          00036120
      IDEBUG=1                                                          00036130
      IDEBUX=1                                                          00036140
      GO TO 50                                                          00036160
  356 IAERR=25402                                                       00036200
      GO TO 999                                                         00036300
  999 CONTINUE                                                          00036600
      IF(IDEBUG.GT.0) CALL BAD(1,0,'IER ',IER)                          00036700
      IF(IDEBUG.GT.0) CALL BAD(-1,0,'AERR',IAERR)                       00036800
      MCAT=ICLCUR                                                       00036900
      ISEQLS=ISEQNO                                                     00037000
      IDDLAS(IP)=IDDST                                                  00037100
      JENLAS(IP)=JENT(IS)                                               00037200
      IF(IAERR.NE.0)IBUG=0                                              00037205
      IF (IAERR.NE.0) IAER1=IAERR                                       00037207
      IF(IAERR.NE.0) CALL AERR(IAER1,'DDSSRF  ')                        00037210
      RETURN                                                            00037300
      END                                                               00037400
**** SOURCE FILE : M0001032.W01   ***
*
      SUBROUTINE APRIX(DU,DV,DT,SPV,TP,TN,MODE,ILEV,IRR,IDEBUG)         00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---      PURPOSE IS TO COMPUTE INTERSECTION BETWEEN SURFACE            00000300
C---      DIFFERENTIAL FORM AND EXTERNAL TOOL RAY.                      00000400
C--- INPUT U,V   FOR REFERENCE ONLY, CURRENT SURFACE PARAMETRIC COORDS. 00000500
C--- INPUT SPV   SURFACE POINT SPV 1-3, SPV-U 5-7, SPV-V 9-11,          00000600
C---             SPV-UU 13-15, SPV-UV 17-19, SPV-VV 21-23,              00000700
C---             SPV- SPU-U X SPV-V 25-27, SPV UNIT NORMAL 29-31        00000800
C--- INPUT TP    CURRENT EXTERIOR (TOOL) POINT                          00000900
C--- INPUT TN    IF MODE.NE.0, TN IS THE TOOL RAY VECTOR                00001000
C--- INPUT MODE  IF MODE.EQ.0, COMPUTE CLOSEST POINT TO TP.             00001100
C---       MODE  IF MODE.NE.0 COMPUTE CLOSEST POINT(INTERSECTION) WITH  00001200
C--              TOOL RAY FROM POINT TP IN DIRECTION TN.                00001300
C--- INPUT ILEV  CONTROLS WHICH PHASES OF APRIX ARE USED                00001400
C---       ILEV.LE.1 MEANS QUIT AFTER PHASE 1.                          00001500
C---       ILEV.EQ.2 MEANS DO BOTH PHASE 1 AND PHASE 2                  00001600
C---       ILEV.GE.3 MEANS USE DU,DV AS INPUT AND GO TO PHASE 2.        00001700
C--- OUTPUT DU,DV SUGGESTED CHANGE IN U,V TO PROVIDE ANSWER             00001800
C--- OUTPUT DT    IF MODE.NE.0, DT IS THE SCALAR TP+DT*TN FOR RAY INTERS00001900
C--- OUTPUT IRR  ERROR CODE.  IF IRR.EQ.0, THEN NO ERROR OCCURRED.      00002000
C--- OUTPUT IDEBUG IF NOT ZERO, THEN PRINT DEBUGGING OUTPUT             00002100
C                                                                       00002200
      DIMENSION SPV(32),TP(3),TN(3)                                     00002300
      DIMENSION DIF(3),AU(3),AV(3),AT(3),AC(3)                          00002400
      DIMENSION VEC(3),VECU(3),VECV(3)                                  00002500
      CHARACTER*20 BADMSG                                               00002510
C                                                                       00002600
      DATA ZERO,ONE,TWO,VSMAL/0.0D0,1.0D0,2.0D0,1.0D-20/                00002700
C---      ERGOOD IS THE FACTOR FOR IMPROVEMENT IN ERROR WHICH IS        00002800
C---      NECESSARY TO CONTINUE WITH THE SECOND ORDER ITERATION.        00002900
      DATA ERGOOD/0.8D0/                                                00003000
C---      MAXIMUM NUMBER OF SECOND ORDER ITERATIONS ALLOWED             00003100
      DATA MXCT/15/,ERCHK/0.05D0/,DISCK/0.0008D0/                       00003200
C---      ERCHK2 IS A MORE LIBERAL ACCEPTANCE CRITERIA FOR              00003300
C---      SECOND ORDER ITERATION ERROR THAN ERCHK.                      00003400
      DATA ERCHK2/0.15D0/                                               00003500
      DATA BIG0,BIG/1.0D+13,1.0D+19/                                    00003600
C                                                                       00003700
C                                                                       00003800
      IF(IDEBUG.EQ.0) GO TO 5                                           00003900
      CALL BAD(-1,0,' ',0)                                              00004000
      BADMSG=' ENTRY TO APRIX'                                          00004010
      CALL CPRINT(BADMSG)                                               00004020
      CALL BAD(1,0,'ILEV',ILEV)                                         00004100
      CALL BAD(1,0,'MODE',MODE)                                         00004200
      CALL BAD(1,1,'DU  ',DU)                                           00004300
      CALL BAD(-1,1,'DV  ',DV)                                          00004400
    5 CONTINUE                                                          00004500
C                                                                       00004600
      IRR=0                                                             00004700
      DO 10 I=1,3                                                       00004800
      DIF(I)=TP(I)-SPV(I)                                               00004900
   10 CONTINUE                                                          00005000
C                                                                       00005100
      IF(ILEV.GE.3) GO TO 200                                           00005200
C---      DETERMINE DU,DV,DT SO THAT                                    00005300
C---  (SPV+DU*SPV-U +DV*SPV-V - TP -DT*TN) **2 = MINIMUM.               00005400
C                                                                       00005500
      CALL DOTV(AU(1),SPV(5),SPV(5))                                    00005600
      CALL DOTV(AU(2),SPV(5),SPV(9))                                    00005700
      AV(1)=AU(2)                                                       00005800
      CALL DOTV(AV(2),SPV(9),SPV(9))                                    00005900
      CALL DOTV(AC(1),DIF,SPV(5))                                       00006000
      CALL DOTV(AC(2),DIF,SPV(9))                                       00006100
C---      CONTINUE WITH FURTHER COEFFICIENT CALCULATION IF MODE.NE.0    00006200
      IF(MODE.NE.0) GO TO 50                                            00006300
C---       FIRST COMPLETE 3X3 COEFFICIENTS                              00006400
      AU(3)=ZERO                                                        00006500
      AV(3)=ZERO                                                        00006600
      DO 20 I=1,3                                                       00006700
   20 AT(I)=ZERO                                                        00006800
      AC(3)=ZERO                                                        00006900
C---      FIND CLOSEST POINT BETWEEN TP AND SPV+DU*SPU+DV*SPV.          00007000
      DISC=AU(1)*AV(2)-AU(2)**2                                         00007100
      IRR=1                                                             00007200
      IF(DABS(DISC).LT.VSMAL) GO TO 1000                                00007300
      DU=(AC(1)*AV(2)-AC(2)*AV(1))/DISC                                 00007400
      DV=(AU(1)*AC(2)-AU(2)*AC(1))/DISC                                 00007500
      DT=ZERO                                                           00007600
      GO TO 100                                                         00007700
C                                                                       00007800
   50 CONTINUE                                                          00007900
C---      CALCULATE 3 X 3 COEFFICIENTS FOR SPV+DU*SPU+DV*SPV-TP-DT*TN=MI00008000
      CALL DOTV(AU(3),SPV(5),TN)                                        00008100
      CALL DOTV(AV(3),SPV(9),TN)                                        00008200
      AT(1)=-AU(3)                                                      00008300
      AT(2)=-AV(3)                                                      00008400
      CALL DOTV(AT(3),TN,TN)                                            00008500
      AT(3)=-AT(3)                                                      00008600
      CALL DOTV(AC(3),DIF,TN)                                           00008700
C                                                                       00008800
      DISC=DET3(AU,AV,AT)                                               00008900
      IRR=2                                                             00009000
      IF(DABS(DISC).LT.VSMAL) GO TO 1000                                00009100
C                                                                       00009200
      DU=DET3(AC,AV,AT)/DISC                                            00009300
      DV=DET3(AU,AC,AT)/DISC                                            00009400
      DT=DET3(AU,AV,AC)/DISC                                            00009500
C                                                                       00009600
  100 CONTINUE                                                          00009700
C                                                                       00009800
      IF(IDEBUG.EQ.0) GO TO 110                                         00009900
      CALL BAD(1,1,'DU  ',DU)                                           00010000
      CALL BAD(1,1,'DV  ',DV)                                           00010100
      CALL BAD(1,1,'DT  ',DT)                                           00010200
      CALL BAD(1,1,'DISC',DISC)                                         00010300
      CALL BAD(-1,0,' ',0)                                              00010400
      BADMSG=' EXIT FROM APRIX'                                         00010410
      CALL CPRINT(BADMSG)                                               00010420
  110 CONTINUE                                                          00010500
C---      IF DU,DV, OR DT ARE TOO LARGE, TEHN AVOID 2ND ORDER CALCULATIO00010600
C---      AVOID A POSSIBLE OVERFLOW CONDITION                           00010700
      IF(DABS(DU)+DABS(DV)+DABS(DT).GT.BIG0) GO TO 2000                 00010800
C                                                                       00010900
C                                                                       00011000
      IF(ILEV.LE.1) GO TO 2000                                          00011100
C                                                                       00011200
  200 CONTINUE                                                          00011300
C---      BEGIN SECOND PHASE OF APRIX ALGORITHM                         00011400
C                                                                       00011500
C---      FOLLOW 1ST ORDER SOLN WITH 2ND ORDER NEWTON RAPHSON ITERATION 00011600
C---   (SP+DU*SPU+DV*SPV+DU**2*SPUU/2+DU*DV*SPUV+DV**2*SPVV-TP-DT*TN)**200011700
C---    SHOULD BE REPETITIVELY EVALUATED TO REACH A MINIMUM.            00011800
C---    ABOVE EXPRESSION IS CALLED W(DU,DV,DT)=VEC(DU,DV,DT)**2         00011900
C                                                                       00012000
      EU=DU                                                             00012100
      EV=DV                                                             00012200
      ET=DT                                                             00012300
      ICT=0                                                             00012400
C                                                                       00012500
  210 CONTINUE                                                          00012600
C---      COMPUTE COEFFICIENTS FOR EFFICIENCY                           00012700
      EUSQ=EU**2/TWO                                                    00012800
      EUV=EU*EV                                                         00012900
      EVSQ=EV**2/TWO                                                    00013000
C                                                                       00013100
      ICT=ICT+1                                                         00013200
      IF(ICT.LE.MXCT) GO TO 300                                         00013300
C---      MXCT EXCEEDED, ERROR IF ILEV IS GE 3                          00013400
      IRR=3                                                             00013500
      IF(ILEV.GE.3) GO TO 1000                                          00013600
C---      MXCT EXCEEDED, ACCEPT LINEAR ESTIMATE                         00013700
      EU=DU                                                             00013800
      EV=DV                                                             00013900
      ET=DT                                                             00014000
      GO TO 400                                                         00014100
C                                                                       00014200
  300 CONTINUE                                                          00014300
C---      EVALUATE VEC-U,VEC-V, VEC-UU ETC.                             00014400
      DO 310 I=1,3                                                      00014500
      VEC(I)=-DIF(I)+EU*SPV(4+I)+EV*SPV(8+I)+EUSQ*SPV(12+I)             00014600
     X       +EUV*SPV(16+I)+EVSQ*SPV(20+I)-ET*TN(I)                     00014700
      VECU(I)=SPV(4+I)+EU*SPV(12+I)+EV*SPV(16+I)                        00014800
      VECV(I)=SPV(8+I)+EU*SPV(16+I)+EV*SPV(20+I)                        00014900
C---      VECUU=SPV(12+I)=SPUU                                          00015000
C---      VECUV=SPV(16+I)=SPUV                                          00015100
C---      VECVV=SPV(20+I)=SPVV                                          00015200
C---      VECTU=VECTV=VECTT=0                                           00015300
  310 CONTINUE                                                          00015400
C                                                                       00015500
C---      W(DU,DV,DT)=VEC(DU,DV,DT)**2                                  00015600
C---      COMPUTE ALL 2ND ORDER PARTIALS OF W FROM VEC AND VEC PARTIALS 00015700
C                                                                       00015800
      DO 320 I=1,3                                                      00015900
      AU(I)=ZERO                                                        00016000
      AV(I)=ZERO                                                        00016100
      AT(I)=ZERO                                                        00016200
      AC(I)=ZERO                                                        00016300
  320 CONTINUE                                                          00016400
C                                                                       00016500
      CALL DOTV(WVAL,VEC,VEC)                                           00016600
      WVAL=DSQRT(WVAL)                                                  00016700
      IF(IDEBUG.EQ.0) GO TO 322                                         00016800
      CALL BAD(1,1,'DIST',WVAL)                                         00016900
      CALL BAD(-3,1,'TPSP',VEC)                                         00017000
  322 CONTINUE                                                          00017100
      CALL DOTV(AC(1),VEC,VECU)                                         00017200
      CALL DOTV(AC(2),VEC,VECV)                                         00017300
      AC(1)=-AC(1)                                                      00017400
      AC(2)=-AC(2)                                                      00017500
      CALL DOTV(TEMP,VECU,VECU)                                         00017600
      CALL DOTV(AU(1),VEC,SPV(13))                                      00017700
      AU(1)=AU(1)+TEMP                                                  00017800
      CALL DOTV(TEMP,VECU,VECV)                                         00017900
      CALL DOTV(AU(2),VEC,SPV(17))                                      00018000
      AU(2)=AU(2)+TEMP                                                  00018100
      AV(1)=AU(2)                                                       00018200
      CALL DOTV(TEMP,VECV,VECV)                                         00018300
      CALL DOTV(AV(2),VEC,SPV(21))                                      00018400
      AV(2)=AV(2)+TEMP                                                  00018500
C---      TERMINATE 2ND ORDER ALGORITHM IF ANY COEFFICIENT IS LARGE     00018600
      IF(DABS(AC(1)).GT.BIG) GO TO 2000                                 00018700
      IF(DABS(AC(2)).GT.BIG) GO TO 2000                                 00018800
C---      COEFFICIENTS ARE COMPLETE FOR 2X2 CASE, I.E. MODE.EQ.0        00018900
      IF(MODE.NE.0) GO TO 330                                           00019000
C                                                                       00019100
      DISC=AU(1)*AV(2)-AU(2)**2                                         00019200
C---      IF DISC IS TOO SMALL ACCEPT FIRST ORDER ANSWER                00019300
      IF(DISC.LT.DISCK) GO TO 410                                       00019400
      FU=(AC(1)*AV(2)-AC(2)*AV(1))/DISC                                 00019500
      FV=(AU(1)*AC(2)-AU(2)*AC(1))/DISC                                 00019600
      FT=ZERO                                                           00019700
      GO TO 360                                                         00019800
C---      COMPLETE COEFFICIENT CALCULATION FOR 3X3 CASE                 00019900
  330 CONTINUE                                                          00020000
      CALL DOTV(AC(3),VEC,TN)                                           00020100
C---      TERMINATE SECOND ORDER PROCESS IF COEFFICIENT IS TOO LARGE    00020200
      IF(DABS(AC(3)).GT.BIG) GO TO 2000                                 00020300
      CALL DOTV(AU(3),TN,VECU)                                          00020400
      AU(3)=-AU(3)                                                      00020500
      CALL DOTV(AV(3),TN,VECV)                                          00020600
      AV(3)=-AV(3)                                                      00020700
      AT(1)=AU(3)                                                       00020800
      AT(2)=AV(3)                                                       00020900
      CALL DOTV(AT(3),TN,TN)                                            00021000
C---      NOW USE NEWTON RAPHSON FORMULA TO ALTER EU,EV,ET TO MIN W.    00021100
C---      EQUATIONS TAKE THE FORM                                       00021200
C---      WU(NXT)=0-WU(NOW)=FU*WUU+FV*WUV+FT*WUT                        00021300
C---      WV(NXT)=0-WV(NOW)=FU*WUV+FV*WVV+FT*WVT                        00021400
C---      WT(NXT)=0-WT(NOW)=FU*WUT+FV*WVT+FT*WTT                        00021500
C---      THEN EU=EU+FU, EV=EV+FV, ET=ET+FT.                            00021600
C                                                                       00021700
      DISC=DET3(AU,AV,AT)                                               00021800
C---      IF DISC IS SMALL, THEN ACCEPT LAST GOOD DU,DV,DT              00021900
      IF(DISC.LT.DISCK) GO TO 410                                       00022000
      FU=DET3(AC,AV,AT)/DISC                                            00022100
      FV=DET3(AU,AC,AT)/DISC                                            00022200
      FT=DET3(AU,AV,AC)/DISC                                            00022300
C                                                                       00022400
  360 CONTINUE                                                          00022500
C---      COMPARE CURRENT FU,FV,FT AND LAST EU,EV,ET                    00022600
C---      IF CHANGE IS SMALL, THEN QUIT                                 00022700
      TEMP=DABS(EU)+DABS(EV)+DABS(ET)                                   00022800
      IF ((ICT.EQ.1).AND.(ILEV.GE.3)) TEMP=ONE                          00022850
      IF(TEMP.LT.VSMAL) GO TO 400                                       00022900
C                                                                       00023000
      ERRAT=(DABS(FU)+DABS(FV)+DABS(FT))/TEMP                           00023100
      EU=EU+FU                                                          00023200
      EV=EV+FV                                                          00023300
      ET=ET+FT                                                          00023400
C                                                                       00023500
      IF(IDEBUG.EQ.0) GO TO 370                                         00023600
      CALL BAD(1,1,'EU  ',EU)                                           00023700
      CALL BAD(1,1,'EV  ',EV)                                           00023800
      CALL BAD(1,1,'ET  ',ET)                                           00023900
      CALL BAD(1,1,'ERAT',ERRAT)                                        00024000
      CALL BAD(-1,0,'ICT ',ICT)                                         00024100
      CALL BAD(1,1,'DISC',DISC)                                         00024200
      CALL BAD(-3,1,'AC  ',AC)                                          00024300
  370 CONTINUE                                                          00024400
      IF (ILEV.GT.3) GOTO 400                                           00024450
      IF(ERRAT.LT.ERCHK) GO TO 400                                      00024500
C---      CHECK FOR DEFINITE REDUCTION OF ERROR, OTHERWISE QUIT         00024600
      IF(ICT.EQ.3) ERRLAS=ERRAT                                         00024700
      IF(ICT.LT.4) GO TO 210                                            00024800
      IF(ERRAT/ERRLAS.GT.ERGOOD) GO TO 2000                             00024900
      ERRLAS=ERRAT                                                      00025000
C---      NOT CLOSE ENOUGH, SO SAVE FU,FV,FT AND REPEAT N-R ITERATION   00025100
      GO TO 210                                                         00025200
C                                                                       00025300
  410 CONTINUE                                                          00025400
C---      DECIDE WHETHER TO ACCEPT SECOND ORDER ITERATION               00025500
      IF(ICT.LT.2.OR.ERRAT.GT.ERCHK2) GO TO 2000                        00025600
  400 CONTINUE                                                          00025700
      DU=EU                                                             00025800
      DV=EV                                                             00025900
      DT=ET                                                             00026000
 2000 CONTINUE                                                          00026100
      IRR=0                                                             00026200
C                                                                       00026300
      GO TO 9999                                                        00026400
C                                                                       00026500
 1000 CONTINUE                                                          00026600
C---      ERROR EXIT                                                    00026700
C                                                                       00026800
 9999 CONTINUE                                                          00026900
C                                                                       00027000
      IF(IDEBUG.EQ.0) GO TO 2010                                        00027100
      CALL BAD(1,0,'IRR ',IRR)                                          00027200
      CALL BAD(1,1,'DU  ',DU)                                           00027300
      CALL BAD(1,1,'DV  ',DV)                                           00027400
      CALL BAD(1,1,'DT  ',DT)                                           00027500
      CALL BAD(-1,1,'DISC',DISC)                                        00027600
 2010 CONTINUE                                                          00027700
C                                                                       00027800
      RETURN                                                            00027900
      END                                                               00028000
**** SOURCE FILE : M0001047.V02   ***
*
      SUBROUTINE BONCHK(SS,B,U,V,IFLAG,ITOP,INUM,ICKBN,IDEBUG)          00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C------ THIS PROGRAM CHECKS FOR A VALID BOUNDARY TRANSITION             00000300
C------ IF THE TRANSITION IS VALID, THE ROUTINE REPLACES THE            00000400
C------ CURRENT PATCH WITH A NEW ONE                                    00000500
C------ SS IS THE SCULPTURE SURFACE CANON ARRAY                         00000600
C------ B,IFLAG,ITOP IS THE DEFINING DATA FOR THE CURRENT PATCH         00000700
C------ INUM IS THE NUMBER OF THE CURRENT PATCH RELATIVE TO SS          00000800
C------ ICKBN IS THE NUMBER OF THE BOUNDARY TO BE CHECKED               00000900
C------ U,V SHOULD BE PARAMETRIC COORDINATES ON THIS BOUNDARY           00001000
C------ IF THE TRANSITION IS VALID, ALL DATA EXCEPT SS SHOULD           00001100
C------ BE REPLACED ON TERMINATION OF THIS PROGRAM.                     00001200
C------      FIRST CHECK TO SEE IF ANY PATCH AT ALL LIES ACROSS         00001300
C------      THIS BOUNDARY.                                             00001400
      DIMENSION B(64),IFLAG(4),ITOP(6,4)                                00001500
      DIMENSION BT(64),IFLAGT(4),ITOPT(6,4)                             00001600
      DIMENSION SS(*)                                                   00001700
      DIMENSION SPV(4),CV(16),C(16)                                     00001800
      DATA SMAL,ONE,ZERO/1.0D-4,1.0D0,0.0D0/                            00001900
C                                                                       00002000
      NP=ITOP(1,ICKBN)                                                  00002100
      IF(ITOP(2,ICKBN).EQ.0) RETURN                                     00002200
C------ OTHERWISE CHECK EACH PATCH IN THE LIST                          00002300
      DO 10 I=1,NP                                                      00002400
      NCUR=ITOP(I+1,ICKBN)                                              00002500
      CALL LODPCH(SS,BT,IFLAGT,ITOPT,NCUR,3)                            00002600
C------ CHECK THE TOPOLOGY TABLE OF NCUR FOR A MATCH WITH INUM          00002700
      DO 20 L=1,4                                                       00002800
      NPT=ITOPT(1,L)                                                    00002900
      IF(NPT.EQ.0) GO TO 20                                             00003000
      DO 30 K=1,NPT                                                     00003100
      IF(ITOPT(K+1,L).EQ.INUM) GO TO 40                                 00003200
   30 CONTINUE                                                          00003300
      GO TO 20                                                          00003400
C------ IT IS CLEAR THAT PATCH NCUR S LTH BOUNDARY DOES LIE ON          00003500
C------ PATCH INUM S ICKBN-TH BOUNDARY.  THEREFORE, MAY A DETAILED      00003600
C------ COMPUTATION IF A CROSSOVER OCCURS AT U,V                        00003700
C------ SPV IS COMPUTED AS THE CROSSOVER SPACE POINT                    00003800
C------ IN CASE OF A MESH SURFACE, SKIP MOST OF THE TRANSFER LOGIC      00003900
   40 CONTINUE                                                          00004000
      NMESH=SS(5)                                                       00004100
      T=U                                                               00004200
      IF((ICKBN-1)*(ICKBN-4).NE.0) T=V                                  00004300
C------ THEREFORE GENERATE THE NEW ACTIVE PATCH DATA                    00004400
      INUM=NCUR                                                         00004500
      DO 200 KK=1,64                                                    00004600
      B(KK)=BT(KK)                                                      00004700
  200 CONTINUE                                                          00004800
      DO 210 KK=1,4                                                     00004900
      IFLAG(KK)=IFLAGT(KK)                                              00005000
      ITOP(1,KK)=ITOPT(1,KK)                                            00005100
      NPT=ITOP(1,KK)                                                    00005200
      DO 210 JJ=2,6                                                     00005300
      ITOP(JJ,KK)=ITOPT(JJ,KK)                                          00005400
  210 CONTINUE                                                          00005500
      ICKBN=L                                                           00005600
      IF((ICKBN-1)*(4-ICKBN).GT.0) GO TO 220                            00005700
      V=ZERO                                                            00005800
      IF(ICKBN.EQ.4) V=ONE                                              00005900
      U=T                                                               00006000
      GO TO 230                                                         00006100
  220 U=ZERO                                                            00006200
      IF(ICKBN.EQ.3) U=ONE                                              00006300
      V=T                                                               00006400
  230 RETURN                                                            00006500
   20 CONTINUE                                                          00006600
   10 CONTINUE                                                          00006700
      RETURN                                                            00006800
      END                                                               00006900
**** SOURCE FILE : M0001064.V02   ***
*
      FUNCTION DET3(A,B,C)                                              00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION A(*),B(*),C(*)                                          00000300
C           /-COMPUTE DETERMINANT FROM ROW VECTORS A,B AND C            00000400
      DET3=A(1)*(B(2)*C(3)-B(3)*C(2))                                   00000500
     X    -A(2)*(B(1)*C(3)-B(3)*C(1))                                   00000600
     X    +A(3)*(B(1)*C(2)-B(2)*C(1))                                   00000700
      RETURN                                                            00000800
      END                                                               00000900
**** SOURCE FILE : M0000640.W01   ***
*
C                                                                       00000010
C                                                                       00000020
      SUBROUTINE LODINT(SS,B,UST,VST,TP,TN,IFLAG,ITOP,IPNUM,MODE)       00000040
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000060
C--------PROGRAM PERFORMS GLOBAL SEARCH OF PATCH STRUCTURE              00000080
C--------AND LOADS AN INITIAL PATCH BASED ON DISTANCE                   00000100
C--------AS RETURNED BY PUVLOC                                          00000120
      DIMENSION SS(*)                                                   00000140
      DIMENSION B(64),IFLAG(4),ITOP(6,4)                                00000160
      DIMENSION TP(3),TN(3)                                             00000180
      HALF=0.5D0                                                        00000190
      D=1.0D10                                                          00000200
      IPNUM=1                                                           00000210
      NPCHS=SS(4)                                                       00000220
      IF (NPCHS.NE.1) THEN                                              00000225
      DO 20 I=1,NPCHS                                                   00000240
      CALL LODPCH(SS,B,IFLAG,ITOP,I,1)                                  00000260
C.... TAKE 'CENTRE POINT' OF PATCH FOR START OF SEARCH                  00000262
      UT=HALF                                                           00000264
      VT=HALF                                                           00000266
      CALL PUVLOC(B,TP,TN,UT,VT,DT,MODE,IFLAG)                          00000280
      IF(DT.GT.D) GO TO 20                                              00000300
      IPNUM=I                                                           00000320
      UST=UT                                                            00000340
      VST=VT                                                            00000360
      D=DT                                                              00000380
   20 CONTINUE                                                          00000400
      ELSE                                                              00000410
C.... SPECIAL TREATMENT FOR SINGLE PATCH SURFACES                       00000430
C.... CONSIDER 9 START POINTS                                           00000440
        CALL LODPCH(SS,B,IFLAG,ITOP,1,1)                                00000450
        ISTEP=2                                                         00000460
        JSTEP=2                                                         00000470
        DO 210 I=1,ISTEP+1                                              00000480
          DO 200 J=1,JSTEP+1                                            00000490
            UT=I-1                                                      00000500
            UT=UT/DBLE(ISTEP)                                           00000510
            VT=J-1                                                      00000520
            VT=VT/DBLE(JSTEP)                                           00000530
            CALL PUVLOC(B,TP,TN,UT,VT,DT,MODE,IFLAG)                    00000550
            IF (DT.LT.D) THEN                                           00000560
              IPNUM=1                                                   00000570
              UST=UT                                                    00000580
              VST=VT                                                    00000590
              D=DT                                                      00000600
            ENDIF                                                       00000610
  200     CONTINUE                                                      00000620
  210   CONTINUE                                                        00000630
      ENDIF                                                             00000640
      CALL LODPCH(SS,B,IFLAG,ITOP,IPNUM,3)                              00000650
      END                                                               00000660
**** SOURCE FILE : M0004323.W03   ***
*
      SUBROUTINE PCHPRC(SS,B,UST,VST,TP,TN,UA,VA,SP,SN,SLX,             00000100
     1 IFLAG,ITOP,IPNUM,MODE,IDEBUG,IRR,LGEOM)                          00000200
C------ THIS PROGRAM ACCEPTS A CURRENT PATCH B AND U,V VALUES.          00000300
C------ IT MUST DETERMINE A LINEUP WITH AN INPUT TOOL POINT AND         00000400
C------  TOOL NORMAL .  IF THE LINEUP IS NOT ON THE CURRENT             00000500
C------ PATCH THEN THE LOGIC FREELY EXCHANGES PATCHES UNTIL AN ANSWER   00000600
C------ IS FOUND.  NO MORE THAN TEN PATCH EXCHANGES ARE ALLOWED.        00000700
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000800
      DIMENSION SS(*),DAF(3),DELT(3)                                    00000900
      DIMENSION B(64),IFLAG(4),ITOP(6,4)                                00001000
      DIMENSION SLX(3),DIF(3)                                           00001010
      DIMENSION SP(32),SN(3),TP(3),TN(3),SPV(32)                        00001100
      DIMENSION UCHG(8),VCHG(8)                                         00001110
      LOGICAL LGEOM                                                     00001120
      CHARACTER*20 BADMSG                                               00001130
C                                                                       00001150
      INCLUDE 'CSTART.INC'                                              00001160
C                                                                       00001290
      DATA ZERO,ONE,HALF/0.0D0,1.0D0,0.5D0/                             00001400
      DATA FLCK0,FLCK1,FLCK2/0.99998D0,0.999992D0,0.9990D0/             00001500
      DATA SMAL,VSMAL/1.0D-10,1.0D-20/,BIG/1.0D10/                      00001600
      DATA UVCHG/0.0005D0/                                              00001700
      DATA UCHG/0.0D0,3*1.0D0,0.0D0,3*-1.0D0/                           00001720
      DATA VCHG/2*1.0D0,0.0D0,3*-1.0D0,0.0D0,1.0D0/                     00001730
C---      NITS IS THE NUMBER OR ITERATIONS ALLOWED ON 1 SURFACE         00001800
C---      MEXCHG IS THE NUMBER OF PATCH EXCHANGES ALLOWED               00001900
      DATA NITS/30/,MEXCHG/10/                                          00002000
C---      STEPMX IS A MAXIMUM STEP WITHIN THE PARAMETRIC UNIT SQUARE    00002100
C---      STEPLN IS THE REDUCTION OF STEP SIZE IF IT IS TOO LARGE.      00002200
      DATA STEPMX/0.64D0/,STEPLN/0.7D0/,R125/0.125D0/,R875/0.875D0/     00002300
C---                                                                    00002400
C---                                                                    00002410
C---                                                                    00002420
C---                                                                    00002430
      KRETRY=0                                                          00002440
      UA=UST                                                            00002500
      VA=VST                                                            00002600
      ULAST=HALF                                                        00002700
      VLAST=HALF                                                        00002800
      DRMAX = 0.0D0                                                     00002810
      IPNST=IPNUM                                                       00002820
    1 IEXCNT = 0                                                        00002830
      KINPAT = 0                                                        00002920
C                                                                       00003100
      DO 1000 K=1,NITS                                                  00003200
C                                                                       00003201
      IF (KRETRY.EQ.5) GO TO 8                                          00003202
      IF(KRETRY.EQ.0)  GO TO 8                                          00003203
      IF(IPNUM.NE.IPMAX) GO TO 8                                        00003204
      IF(DABS(UA-UMAX).GT.0.01D0)  GO TO 8                              00003205
      IF(DABS(VA-VMAX).GT.0.01D0)  GO TO 8                              00003206
      GO TO 1400                                                        00003207
    8 KINPAT=KINPAT+1                                                   00003300
      IF(IDEBUG.EQ.0) GO TO 9                                           00003500
      CALL BAD(-1,0,' ',0)                                              00003700
      BADMSG=' PCHPRC LOOP'                                             00003710
      CALL CPRINT(BADMSG)                                               00003720
      CALL BAD(1,0,'PNUM',IPNUM)                                        00003800
      CALL BAD(1,1,'UA  ',UA)                                           00003910
      CALL BAD(1,1,'VA  ',VA)                                           00003920
      CALL BAD(-1,0,'KNPT',KINPAT)                                      00004000
    9 CONTINUE                                                          00004100
C                                                                       00004200
C------EVALUATE THE SURFACE DIFFERENTIAL ELEMENTS AT UA,VA              00004300
C------PLACE THE ELEMENTS IN ARRAY SPV                                  00004400
C                                                                       00004500
      CALL CNSURF(UA,VA,B,SPV,IFLAG,1)                                  00004600
      IF(IDEBUG.EQ.0) GO TO 10                                          00004800
      CALL BAD(3,1,'SP  ',SPV)                                          00004900
      CALL BAD(-3,1,'SPN ',SPV(29))                                     00005000
      CALL BAD(3,1,'SPU ',SPV(5))                                       00005100
      CALL BAD(-3,1,'SP-V',SPV(9))                                      00005200
      CALL BAD(3,1,'SPUU',SPV(13))                                      00005300
      CALL BAD(-3,1,'SPVV',SPV(21))                                     00005400
      CALL BAD(-3,1,'SPUV',SPV(17))                                     00005500
   10 CONTINUE                                                          00005600
C                                                                       00005700
C                                                                       00005800
C------BEFORE SEEKING A NEW UV PAIR, CHECK THE ACCURACY OF THE          00005900
C------PRESENT SURFACE POINT,NORMAL                                     00006000
C------ ERROR COMPUTATIONS DEPEND ON THE VARIABLE MODE                  00006100
C------ MODE=-1, POSITIVE DDST. =0 SNXP OR CLOSEST POINT. =1            00006200
C------ DDST IN EITHER DIRECTION ALONG TOOL RAY.                        00006300
      DO 20 I=1,3                                                       00006400
   20 DIF(I)=TP(I)-SPV(I)                                               00006500
      CALL DOTF(D,DIF,DIF)                                              00006600
      D=DSQRT(D)                                                        00006700
C---      IF D IS TOO SMALL, THEN SET IT TO A LARGER VALUE              00006800
      D=DMAX1(D,VSMAL)                                                  00006900
      DO 25 I=1,3                                                       00007000
      DAF(I)=DIF(I)/D                                                   00007100
   25 CONTINUE                                                          00007200
C                                                                       00007300
      IF(MODE.NE.0) GO TO 30                                            00007400
C---      COMPUTE ANGLE BETWEEN DIF AND SURFACE NORMAL                  00007500
      CALL DOTF(DR,DAF,SPV(29))                                         00007600
      GO TO 35                                                          00007700
C                                                                       00007800
   30 CONTINUE                                                          00007900
C---      COMPUTE ANGLE BETWEEN DIF AND TOOL RAY                        00008000
      CALL DOTF(DR,DAF,TN)                                              00008100
C---      NORMALIZE ANGLE BY DIVIDING BY LENGTH OF DIF                  00008200
   35 CONTINUE                                                          00008300
      DR=DABS(DR)                                                       00008400
C                                                                       00008500
      IF(IDEBUG.EQ.0) GO TO 41                                          00008600
      CALL BAD(1,1,'ERR*',DR)                                           00008700
      CALL BAD(1,1,'DIST',D)                                            00008800
      CALL BAD(-3,1,'SPTP',DIF)                                         00008900
   41 CONTINUE                                                          00009000
C                                                                       00009100
C---      IF THE RAY IS AT RIGHT ANGLES TO THE SURFACE, QUIT NOW.       00009200
      IF(DR.LT.SMAL.AND.MODE.NE.0) GO TO 9999                           00009300
C---      ACCEPTANCE CRITERIA, ANGULAR LINEUP BETTER THAN FLIPCK        00009400
      IF(MODE.EQ.0.AND.DR.GT.FLCK0) GO TO 2000                          00009500
      IF(MODE.NE.0.AND.DR.GT.FLCK2) GO TO 2000                          00009510
      IF(DR.LT.SMAL) GO TO 63                                           00009520
      IF(DR.LT.DRMAX) GO TO 60                                          00009525
      DMAX=D                                                            00009527
      DRMAX = DR                                                        00009530
      UMAX = UA                                                         00009540
      VMAX = VA                                                         00009550
      IPMAX = IPNUM                                                     00009560
C                                                                       00009700
C------ ALL INDICATIONS ARE THAT U,V SHOULD BE R MODIFIED               00009800
   60 CONTINUE                                                          00009900
      CU = ZERO                                                         00009910
      CV = ZERO                                                         00009920
      DT=ZERO                                                           00010100
      ILEV = 3                                                          00010110
      IF (KRETRY.LT.5) ILEV=2                                           00010120
      CALL APRIX(CU,CV,DT,SPV,TP,TN,MODE,ILEV,IR,IDEBUG)                00010200
C---      IF IR.NE.0, THEN ARBITRARILY ALTER CU,CV SLIGHTLY             00010300
  640 IF(IR.EQ.0) GO TO 65                                              00010400
   63 DM=ZERO                                                           00010401
      CT=0.025D0                                                        00010402
      DO 649 IZ=1,2                                                     00010403
      DO 648 J=1,8                                                      00010404
      DHU=UA+CT*UCHG(J)                                                 00010405
      DHV=VA+CT*UCHG(J)                                                 00010406
      CALL CNSURF(DHU,DHV,B,SPV,IFLAG,1)                                00010407
      DO 641 I=1,3                                                      00010408
  641 DIF(I)=TP(I)-SPV(I)                                               00010409
      CALL DOTF(D,DIF,DIF)                                              00010410
      D=DSQRT(D)                                                        00010411
      D=DMAX1(D,VSMAL)                                                  00010412
      DO 642 I=1,3                                                      00010413
  642 DAF(I)=DIF(I)/D                                                   00010414
      IF(MODE.NE.0)  GO TO 643                                          00010415
      CALL DOTF(DT,DAF,SPV(29))                                         00010416
      GO TO 644                                                         00010417
  643 CALL DOTF(DT,DAF,TN)                                              00010418
  644 DT=DABS(DT)                                                       00010419
      IF(DT.LE.DM)  GO TO 648                                           00010420
      JMAX=J                                                            00010421
      CTM=CT                                                            00010422
      DM=DT                                                             00010423
  648 CONTINUE                                                          00010424
      CT=0.075D0                                                        00010425
  649 CONTINUE                                                          00010426
      IF(IDEBUG.NE.0) CALL BAD(1,1,'ERRT',DM)                           00010427
      IF(IDEBUG.NE.0) THEN                                              00010430
        CALL BAD(-1,0,' ',0)                                            00010431
        BADMSG=' AFTER UV CHANGE'                                       00010432
        CALL CPRINT(BADMSG)                                             00010433
      ENDIF                                                             00010434
      IF(1.1D0*DT.LT.DRMAX.OR.DT.LT.SMAL)  GO TO 1400                   00010440
      CU=UCHG(JMAX)*CTM                                                 00010500
      CV=VCHG(JMAX)*CTM                                                 00010600
   65 CONTINUE                                                          00010700
C                                                                       00010800
      U1=UA+CU                                                          00010900
      V1=VA+CV                                                          00011000
C                                                                       00011100
      IF(IDEBUG.EQ.0) GO TO 42                                          00011200
      CALL BAD(1,1,'UNXT',U1)                                           00011300
      CALL BAD(1,1,'VNXT',V1)                                           00011400
      CALL BAD(1,1,'UCHG',CU)                                           00011500
      CALL BAD(-1,1,'VCHG',CV)                                          00011600
   42 CONTINUE                                                          00011700
C                                                                       00011800
C------ SQRCUT DETERMINES IF A BOUNDARY IS BEING CROSSED.  IF IT IS,    00011900
C------ IT WILL THEN DETERMINE IF AN EXCHANGE SHOULD BE CONSIDERED      00012000
C------ ON THE BOUNDARY ICKBN.                                          00012100
C                                                                       00012200
      CALL SQRCUT(UA,VA,U1,V1,U,V,ICKBN)                                00012300
C---      SAVE THE NUMBER OF THE CURRENT PATCH                          00012400
      IPSAVE=IPNUM                                                      00012500
      IF(IDEBUG.EQ.0) GO TO 43                                          00012600
      CALL BAD(1,1,'UCUT',U)                                            00012700
      CALL BAD(1,1,'VCUT',V)                                            00012800
      CALL BAD(1,0,'ICKB',ICKBN)                                        00012900
      CALL BAD(-1,0,' ',0)                                              00013000
      BADMSG=' AFTER SQRCUT'                                            00013010
      CALL CPRINT(BADMSG)                                               00013020
   43 CONTINUE                                                          00013100
C---      RESTRICT A PARAMETER CHANGE WITHIN THE UNIT SQUARE            00013200
      IF(KINPAT.LE.1) GO TO 130                                         00013300
      IF(DABS(ULAST-HALF).GT.HALF) GO TO 130                            00013400
      IF(DABS(VLAST-HALF).GT.HALF) GO TO 130                            00013500
      IF(DABS(U-HALF).GT.HALF) GO TO 130                                00013600
      IF(DABS(V-HALF).GT.HALF) GO TO 130                                00013700
C---      BOTH POINTS ARE WITHIN THE UNIT SQUARE, SO CHECK FOR LENGTH   00013800
      STEP=(U-ULAST)**2+(V-VLAST)**2                                    00013900
      IF(STEP.LT.STEPMX) GO TO 130                                      00014000
C---      MODIFY STEP LENGTH TO AVOID TRAVERSING COMPLETE PATCH         00014100
      U=ULAST+STEPLN*(U-ULAST)                                          00014200
      V=VLAST+STEPLN*(V-VLAST)                                          00014300
      ICKBN=0                                                           00014400
      IF(IDEBUG.EQ.0) GO TO 130                                         00014500
      CALL BAD(1,1,'ULIM',U)                                            00014600
      CALL BAD(-1,1,'VLIM',V)                                           00014700
  130 CONTINUE                                                          00014800
C                                                                       00014900
C------ BONCHK WILL SEARCH BOUNDARY ICKBN AND IF ANOTHER PATCH IS       00015000
C------ FOUND, WILL EXCHANGE THE CURRENT PATCH VALUES.                  00015100
C                                                                       00015200
      IF(ICKBN.EQ.0) GO TO 110                                          00015300
C---                                                                    00015320
      CALL BONCHK(SS,B,U,V,IFLAG,ITOP,IPNUM,ICKBN,IDEBUG)               00015330
      IF(IPSAVE.NE.IPNUM) GO TO 1300                                    00015400
      GO TO 110                                                         00015410
C---      A PATCH EXCHANGE OCCURRED SO INCREMENT THE EXCHANGE COUNT     00015500
 1300 IEXCNT=IEXCNT+1                                                   00015600
C---      RESET COUNTER FOR ITERATIONS ON THIS PATCH TO ZERO            00015700
      KINPAT=0                                                          00015800
C                                                                       00015900
      IF(IDEBUG.EQ.0) GO TO 120                                         00016000
      CALL BAD(1,1,'UNEW',U)                                            00016100
      CALL BAD(1,1,'VNEW',V)                                            00016200
      CALL BAD(1,0,'PNUM',IPNUM)                                        00016300
      CALL BAD(1,0,'EXCT',IEXCNT)                                       00016400
      CALL BAD(-1,0,' ',0)                                              00016500
      BADMSG=' AFTER BONCHK'                                            00016510
      CALL CPRINT(BADMSG)                                               00016520
  120 CONTINUE                                                          00016600
C                                                                       00016700
      UA=U                                                              00016800
      VA=V                                                              00016900
  110 CONTINUE                                                          00017000
      IF(IEXCNT.GT.MEXCHG) GO TO 1400                                   00017100
C                                                                       00017200
 1100 ULAST=UA                                                          00017300
      VLAST=VA                                                          00017400
      UA=U                                                              00017500
      VA=V                                                              00017600
 1000 CONTINUE                                                          00017700
C---      ACCEPT A LESSER TOLERANCE, IF NECESSARY.                      00017800
 1400 IF(DRMAX.GT.FLCK2) GO TO 1500                                     00017810
      IF(DR.GT.FLCK2) GO TO 2000                                        00017900
 1410 KRETRY=KRETRY+1                                                   00018000
      IF (KRETRY.GT.4) THEN                                             00018100
        IF (KRETRY.GT.5) GOTO 9999                                      00018110
        UA=UMAX                                                         00018120
        VA=VMAX                                                         00018130
        IPNUM=IPMAX                                                     00018140
        CALL LODPCH(SS,B,IFLAG,ITOP,IPNUM,3)                            00018150
      ELSE                                                              00018160
        UA=UST                                                          00018212
        VA=VST                                                          00018213
        IF(KRETRY.EQ.1)  VA=-HALF                                       00018214
        IF(KRETRY.EQ.2)  UA=-HALF                                       00018215
        IF(KRETRY.EQ.3)  UA=1.5D0                                       00018216
        IF(KRETRY.EQ.4)  VA=1.5D0                                       00018217
        IPNUM=IPNST                                                     00018218
        CALL LODPCH(SS,B,IFLAG,ITOP,IPNUM,3)                            00018219
        CALL SQRCUT(UST,VST,UA,VA,U,V,ICKBN)                            00018220
        IF(ICKBN.EQ.0) GO TO 1410                                       00018221
        CALL BONCHK(SS,B,U,V,IFLAG,ITOP,IPNUM,ICKBN,IDEBUG)             00018223
        UA=U                                                            00018224
        VA=V                                                            00018225
        IF(KRETRY.EQ.1)  VA=VA-HALF                                     00018226
        IF(KRETRY.EQ.2)  UA=UA-HALF                                     00018227
        IF(KRETRY.EQ.3)  UA=UA+HALF                                     00018228
        IF(KRETRY.EQ.4)  VA=VA+HALF                                     00018229
      ENDIF                                                             00018230
      IF(IDEBUG.EQ.0)  GO TO 1                                          00018240
      CALL BAD(1,1,'UA  ',UA)                                           00018241
      CALL BAD(1,1,'VA  ',VA)                                           00018242
      CALL BAD(1,0,'PNUM',IPNUM)                                        00018243
      CALL BAD(-1,0,'RETY',KRETRY)                                      00018244
      GO TO 1                                                           00018245
C---      ERROR, ROUTINE FAILED TO DETERMINE SURFACE PT WITHIN TOLERANCE00018246
 9999 CONTINUE                                                          00018247
C.... FOR MODE=0 (CALC. SP WITH MINIMUM DISTANCE TO TE)                 00018250
C.... AND (DMAX.GT.10) AND (DRMAX.GT.0.8) TAKE BEST SOLUTION            00018252
      IF (((MODE.EQ.0).AND.(DMAX.GT.10.D0)).AND.(DRMAX.GT.0.8D0))       00018254
     +   GO TO 1500                                                     00018256
      IRR=7001                                                          00018338
      GO TO 3000                                                        00018339
C                                                                       00018340
C --- THE BEST LINE-UP IS ACCEPTED WITH A LESSER TOLERANCE              00018341
C                                                                       00018342
 1500 IPNUM = IPMAX                                                     00018343
      CALL LODPCH(SS,B,IFLAG,ITOP,IPNUM,3)                              00018344
      UA = UMAX                                                         00018345
      VA = VMAX                                                         00018346
      CALL CNSURF(UA,VA,B,SPV,IFLAG,1)                                  00018347
C                                                                       00018400
 2000 IRR=0                                                             00018500
      IF(NITS.NE.20) GO TO 2003                                         00018510
      NITS = 30                                                         00018520
      GO TO 1                                                           00018540
 2003 CONTINUE                                                          00018550
C                                                                       00018600
      IF (UA.LT.ZERO) THEN                                              00018602
        UDIST=-UA                                                       00018604
        UBOND=ZERO                                                      00018606
      ELSE                                                              00018608
        IF (UA.LE.ONE) THEN                                             00018610
          UDIST=ZERO                                                    00018612
          UBOND=UA                                                      00018614
        ELSE                                                            00018616
          UDIST=UA-ONE                                                  00018618
          UBOND=ONE                                                     00018620
        ENDIF                                                           00018622
      ENDIF                                                             00018624
C                                                                       00018630
      IF (VA.LT.ZERO) THEN                                              00018632
        VDIST=-VA                                                       00018634
        VBOND=ZERO                                                      00018636
      ELSE                                                              00018638
        IF (VA.LE.ONE) THEN                                             00018640
          VDIST=ZERO                                                    00018642
          VBOND=VA                                                      00018644
        ELSE                                                            00018646
          VDIST=VA-ONE                                                  00018648
          VBOND=ONE                                                     00018650
        ENDIF                                                           00018652
      ENDIF                                                             00018654
C                                                                       00018660
      UVDIST=UDIST + VDIST                                              00018670
C                                                                       00018680
      DIST=D                                                            00018690
C                                                                       00018691
      IF (UVDIST.GE.0.1D0) THEN                                         00018692
        CALL LODPCH(SS,B,IFLAG,ITOP,IPNUM,3)                            00018694
        CALL CNSURF(UBOND,VBOND,B,SPBOND,IFLAG,1)                       00018696
      ENDIF                                                             00018698
C                                                                       00018699
      DO 2005 I=1,3                                                     00018700
      SP(I)=SPV(I)                                                      00018800
      SN(I)=SPV(I+28)                                                   00018900
 2005 CONTINUE                                                          00019000
C                                                                       00019100
C---  LGEOM=.TRUE. SIGNIFIES A SPECIAL CALL FOR GEOMETRIC CONSTRUCTION  00019200
      IF (LGEOM) THEN                                                   00019300
        DO 2001 II=4,32                                                 00019400
        SP(II)=SPV(II)                                                  00019500
 2001   CONTINUE                                                        00019600
      END IF                                                            00019610
C---      SLX VECTOR IS SET IN THE DIRECTION OF THE CRSSPL VECTOR       00019700
C---      THIS IS FOR SPECIAL ARELEM TOOL AXIS PRORATING.               00019800
      CALL VNORM(SPV(9),SLX)                                            00019900
C                                                                       00020000
C                                                                       00020100
 3000 CONTINUE                                                          00020200
      RETURN                                                            00020300
      END                                                               00020400
**** SOURCE FILE : M0001084.W02   ***
*
      SUBROUTINE PUVLOC(BMAT,TP,TN,UST,VST,DIST,MODE,IFLAG)             00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C                                                                       00000300
C---      PURPOSE IS TO DETERMINE STARTUP U,V VALUES AND APPROXIMATE    00000400
C---      DISTANCE OF A PATCH FROM A TOOL RAY OR POINT.                 00000500
C---      SPECIAL ENTRY POINT PUVINT IS TO INITIALIZE PUV PARAMETERS    00000600
C---      ENTRY PUVLOC PARAMETERS                                       00000700
C---      INPUT TP   INPUT TOOL POINT                                   00000800
C---      INPUT TN   INPUT TOOL RAY VECTOR(SHOULD BE UNITIZED)          00000900
C---      INPUT MODE  =0 MEANS FIND CLOSEST POINT ON PATCH TO TP ONLY   00001000
C---                  =1 MEANS FIND CLOSEST POINT TO POSITIVE TOOL RAY  00001100
C---                  =-1 MEANS FIND CLOSEST POINT TO TOOL SPACE LINE.  00001200
C---      INPUT ILEV  =1 MEANS USE FIRST ORDER DERIVATIVES ONLY         00001300
C---                  =2 MEANS USE SECOND ORDER DERIVATIVES AS WELL     00001400
C---      INPUT NITS  NUMBER OF ITERATIONS TO DETERMINE CLOSEST POINT   00001500
C---      INPUT IFREE =0 MEANS NOT FREE - THAT IS KEEP SOLUTION WITHIN  00001600
C---                  UNIT SUARE. =1 MEANS OBTAIN SOLUTION ANYWHERE.    00001700
C                                                                       00001800
C---      INPUT BMAT COONS MATRIX COEFFICIENTS OR ELSE TYPE OF GENCUR   00001900
C---            SURFACE                                                 00002000
C---      INPUT IFLAG FLAGS FOR TYPE OF COORDINATE MATRIX OR LOCATION   00002100
C---            OF GENCUR DEFINING CURVES                               00002200
C---      OUTPUT UST,VST COMPUTED ROUGH LOCATION OF CLOSEST PATCH POINT 00002300
C---      OUTPUT DIST COMPUTED DISTANCE BETWEEN PATCH AND POINT OR RAY. 00002400
C                                                                       00002500
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00002600
C                                                                       00002610
      INCLUDE 'CHEKFL.INC'                                              00002620
C                                                                       00002700
      DIMENSION BMAT(64),TP(3),TN(3),IFLAG(4)                           00002800
      DIMENSION DIF(3),SPV(32)                                          00002900
      CHARACTER*20 BADMSG                                               00002910
C                                                                       00003000
      DATA ONE,HALF,BIG/1.0D0,0.5D0,1.0D+6/                             00003100
      DATA PLO,PHI/0.005D0,0.995D0/                                     00003200
      DATA ILEV,NITS,IFREE/1,1,0/                                       00003300
      DATA IDEBUG/0/                                                    00003400
C                                                                       00003500
C---      MAIN ENTRY POINT FOR PUVLOC                                   00003600
C                                                                       00003900
      DO 10 I=1,NITS                                                    00004000
C---      EVALUATE SURFACE POINT AND DERIVATIVES AT UST,VST             00004100
      CALL CNSURF(UST,VST,BMAT,SPV,IFLAG,1)                             00004200
C                                                                       00004300
C---      CALL APRIX TO COMPUTE A CLOSER LINEUP                         00004400
      CALL APRIX(DU,DV,DIST,SPV,TP,TN,MODE,ILEV,IRR,IDEBUG)             00004500
C---      IF AN ERROR OCCURRED THEN USE CURRENT SURFACE POINT           00004600
      IF(IRR.NE.0) GO TO 60                                             00004700
C---      IF IFREE IS 0, THEN INSURE PARAMETERS ARE IN UNIT SQUARE      00004800
      UST=UST+DU                                                        00004900
      VST=VST+DV                                                        00005000
      IF(IFREE.EQ.1) GO TO 10                                           00005100
C---      SELECT UST,VST IN UNIT SQUARE CLOSEST TO ESTIMATED UST,VST    00005200
      UST=DMAX1(UST,PLO)                                                00005300
      UST=DMIN1(UST,PHI)                                                00005400
      VST=DMAX1(VST,PLO)                                                00005500
      VST=DMIN1(VST,PHI)                                                00005600
C                                                                       00005700
   10 CONTINUE                                                          00005800
C                                                                       00005900
C---      NOW REEVALUATE SURFACE AT NEW UST,VST COORDINATES             00006000
      CALL CNSURF(UST,VST,BMAT,SPV,IFLAG,0)                             00006100
C                                                                       00006200
C---      ITERATION COMPLETE, NOW COMPUTE EFFECTIVE DISTANCE            00006300
   60 CONTINUE                                                          00006400
C---      COMPUTE DIFFERENCE BETWEEN EFFECTIVE POINT AND TP             00006500
      DO 90 J=1,3                                                       00006600
   90 DIF(J)=SPV(J)-TP(J)                                               00006700
C                                                                       00006800
      IF(MODE.NE.0) GO TO 120                                           00006900
C---      CASE OF CLOSEST POINT, MODE=0                                 00007000
      CALL DOTV(DIST,DIF,DIF)                                           00007100
      DIST=DSQRT(DIST)                                                  00007200
C                                                                       00007210
      CALL DOTV(D1,DIF,TN)                                              00007220
      CALL DOTV(D2,SPV(29),TN)                                          00007230
      IF ((D1.LT.ZERO).AND.(ICHEKF.EQ.1)) DIST=ABS(DIST)*BIG            00007240
      GO TO 190                                                         00007300
C                                                                       00007400
  120 CONTINUE                                                          00007500
C---      MODE=1 OR -1                                                  00007600
      CALL DOTV(D1,DIF,TN)                                              00007700
      IF(MODE.GT.0) GO TO 140                                           00007800
C---      MODE=-1                                                       00007900
C---      DISTANCE IS NORMAL DISTANCE FROM CALCULATED POINT TO TOOL RAY 00008000
      CALL CROSS(DIF,TN,DIF)                                            00008100
      CALL DOTV(DIST,DIF,DIF)                                           00008200
      DIST=DSQRT(DIST)                                                  00008300
      IF ((D1.LT.ZERO).AND.(ICHEKF.EQ.1)) DIST=ABS(DIST)*BIG            00008320
      GO TO 190                                                         00008400
C                                                                       00008500
  140 CONTINUE                                                          00008600
C---      MODE=1                                                        00008700
      IF(D1.LT.ZERO) DIST=ABS(DIST)*BIG                                 00008800
C                                                                       00008900
  190 CONTINUE                                                          00009000
C---      INCREASE DIST TO ADD A BIAS IN CASE AN ERROR OCCURRED EARLIER 00009100
      IF(IRR.GT.0) DIST=DIST*BIG                                        00009200
C---      CALCULATION OF UST,VST,DIST IS COMPLETE                       00009300
C                                                                       00009400
  999 CONTINUE                                                          00009500
C                                                                       00009600
      IF(IBUG.NE.2) GO TO 998                                           00009700
      CALL BAD(-1,0,' ',0)                                              00009800
      BADMSG=' AFTER PUVLOC'                                            00009810
      CALL CPRINT(BADMSG)                                               00009820
      CALL BAD(1,1,'UST ',UST)                                          00009900
      CALL BAD(1,1,'VST ',VST)                                          00010000
      CALL BAD(-1,1,'DIST',DIST)                                        00010100
C                                                                       00010200
  998 CONTINUE                                                          00010300
      RETURN                                                            00010400
      END                                                               00010500
**** SOURCE FILE : M0001095.V02   ***
*
      SUBROUTINE SQRCUT(U0,V0,U1,V1,U,V,ICKBN)                          00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C------INPUT IS AN OLD POINT U0,V0 IN UV SPACE AND A TRIAL              00000300
C------ NEW POINT U1,V1.  IF THESE TWO PTS ARE IN THE SAME              00000400
C------ SECTOR OF SPACE( UNIT SQUARE DIVIDES SPACE INTO NINE            00000500
C------ SECTORS) THEN U,V IS SET EQUAL TO U1,V1 AND NO                  00000600
C------ BOUNDARY CHECKING IS REQUIRED( I.E. SET ICKBN=0).               00000700
C------ OTHERWISE U,V IS SET EQUAL TO THE CLOSEST                       00000800
C------ BOUNDARY POINT TO U0,V0 WHICH LIES BETWEEN U0,V0 AND            00000900
C------ U1,V1.  IN ADDITION THE ROUTINE DETERMINES WHICH                00001000
C------  BOUNDARY OF THE PATCH SHOULD BE CHECKED.                       00001100
C                                                                       00001200
      DIMENSION IBCHK(4,4)                                              00001300
C---      ARRAY WHICH RECORDS BOUNDARY TO CHECK IN MOVING FROM SECTOR   00001400
C---      J TO SECTOR I (IBCHK(I,J)).                                   00001500
      DATA IBCHK/ 2,3,0,0,  1,0,4,0,  0,1,0,4,  0,0,2,3/                00001600
C                                                                       00001700
      DATA ZERO,ONE,TWO/0.0D0,1.0D0,2.0D0/                              00001800
      DATA VSMAL/1.0D-12/                                               00001900
C---      FUNCTION F GIVES SQUARE OF DISTANCE FROM (A,B) TO (C,D)       00002000
      F(A,B,C,D)=(C-A)**2+(D-B)**2                                      00002100
C---      FUNCTION G IS POSITIVE WHEN C IS OUTSIDE THE A,B INTERVAL     00002200
      G(A,B,C)=(A-C)*(B-C)                                              00002300
C                                                                       00002400
      ICKBN=0                                                           00002500
      U=U1                                                              00002600
      V=V1                                                              00002700
      IU=2                                                              00002800
      IF(U0.LT.ZERO)IU=1                                                00002900
      IF(U0.GT.ONE) IU=3                                                00003000
      IV=3                                                              00003100
      IF(V0.LT.ZERO)IV=0                                                00003200
      IF(V0.GT.ONE) IV=6                                                00003300
      IC0=IU+IV                                                         00003400
      IU=2                                                              00003500
      IF(U1.LT.ZERO)IU=1                                                00003600
      IF(U1.GT.ONE) IU=3                                                00003700
      IV=3                                                              00003800
      IF(V1.LT.ZERO)IV=0                                                00003900
      IF(V1.GT.ONE) IV=6                                                00004000
      IC1=IU+IV                                                         00004100
      IF(IC0.EQ.IC1) GO TO 999                                          00004200
C                                                                       00004300
C------DETERMINE THE BOUNDARY INTERCEPT CLOSEST TO U0,V0                00004400
C---      EQN OF LINE IS (U0-U1)*V+(V1-V0)*U+(V0*U1-U0*V1)=0            00004500
C---      EQN OF LINE IS      A1*V+     A2*U+     A3      =0            00004600
      A1=U0-U1                                                          00004700
      A2=V1-V0                                                          00004800
      A3=V0*U1-V1*U0                                                    00004900
C---      SET U,V AND DISTANCE D TO DEFAULT VALUES                      00005000
      U=U1                                                              00005100
      V=V1                                                              00005200
      D=F(U0,V0,U1,V1)                                                  00005300
C---      SET INITIAL VALUES FOR SECOND POINT BETWEEN P0 AND P1.        00005400
      D2=D                                                              00005500
      U2=U                                                              00005600
      V2=V                                                              00005700
C                                                                       00005800
C---      LINE IS HORIZONTAL, SKIP INTERCEPT CALCULATION WITH U=0 OR U=100005900
      IF(DABS(A1).LT.VSMAL) GO TO 100                                   00006000
      UT=ZERO                                                           00006100
      VT=-A3/A1                                                         00006200
      DT=F(U0,V0,UT,VT)                                                 00006300
      IF(G(U0,U1,UT).GE.ZERO.OR.DT.GT.D) GO TO 10                       00006400
      D=DT                                                              00006500
      U=UT                                                              00006600
      V=VT                                                              00006700
   10 CONTINUE                                                          00006800
      UT=ONE                                                            00006900
      VT=-(A2+A3)/A1                                                    00007000
      DT=F(U0,V0,UT,VT)                                                 00007100
      IF(G(U0,U1,UT).GE.ZERO.OR.DT.GE.D2) GO TO 100                     00007200
C---      SAVE THE SECOND CLOSEST INTERCEPT TO UO,VO FIRST              00007300
      IF(DT.LT.D) GO TO 20                                              00007400
C---      U2,V2 IS NEW SECOND CLOSEST INTERCEPT ( DT.GT.D)              00007500
      IF(DT.EQ.D) GO TO 100                                             00007600
      U2=UT                                                             00007700
      V2=VT                                                             00007800
      D2=DT                                                             00007900
      GO TO 100                                                         00008000
   20 CONTINUE                                                          00008100
C---      U2,V2 TAKES ON THE OLD U,V VALUE OF CLOSEST INTERCEPT         00008200
      U2=U                                                              00008300
      V2=V                                                              00008400
      D2=D                                                              00008500
C---      CLOSEST INTERCEPT U,V IS NOW UT,VT                            00008600
      U=UT                                                              00008700
      V=VT                                                              00008800
      D=DT                                                              00008900
C---      LINE IS VERTICAL, SKIP INTERCEPT CALC WITH V=0 OR V=1.        00009000
  100 IF(DABS(A2).LT.VSMAL) GO TO 200                                   00009100
      VT=ZERO                                                           00009200
      UT=-A3/A2                                                         00009300
      DT=F(U0,V0,UT,VT)                                                 00009400
      IF(G(V0,V1,VT).GE.ZERO.OR.DT.GE.D2) GO TO 110                     00009500
C---      SAVE THE SECOND CLOSEST INTERCEPT TO UO,VO FIRST              00009600
      IF(DT.LT.D) GO TO 40                                              00009700
C---      U2,V2 IS NEW SECOND CLOSEST INTERCEPT ( DT.GT.D)              00009800
      IF(DT.EQ.D) GO TO 110                                             00009900
      U2=UT                                                             00010000
      V2=VT                                                             00010100
      D2=DT                                                             00010200
      GO TO 110                                                         00010300
   40 CONTINUE                                                          00010400
C---      U2,V2 TAKES ON THE OLD U,V VALUE OF CLOSEST INTERCEPT         00010500
      U2=U                                                              00010600
      V2=V                                                              00010700
      D2=D                                                              00010800
C---      CLOSEST INTERCEPT U,V IS NOW UT,VT                            00010900
      U=UT                                                              00011000
      V=VT                                                              00011100
      D=DT                                                              00011200
  110 VT=ONE                                                            00011300
      UT=-(A1+A3)/A2                                                    00011400
      DT=F(U0,V0,UT,VT)                                                 00011500
      IF(G(V0,V1,VT).GE.ZERO.OR.DT.GE.D2) GO TO 200                     00011600
C---      SAVE THE SECOND CLOSEST INTERCEPT TO UO,VO FIRST              00011700
      IF(DT.LT.D) GO TO 60                                              00011800
C---      U2,V2 IS NEW SECOND CLOSEST INTERCEPT ( DT.GT.D)              00011900
      IF(DT.EQ.D) GO TO 200                                             00012000
      U2=UT                                                             00012100
      V2=VT                                                             00012200
      D2=DT                                                             00012300
      GO TO 200                                                         00012400
   60 CONTINUE                                                          00012500
C---      U2,V2 TAKES ON THE OLD U,V VALUE OF CLOSEST INTERCEPT         00012600
      U2=U                                                              00012700
      V2=V                                                              00012800
      D2=D                                                              00012900
C---      CLOSEST INTERCEPT U,V IS NOW UT,VT                            00013000
      U=UT                                                              00013100
      V=VT                                                              00013200
      D=DT                                                              00013300
  200 CONTINUE                                                          00013400
C---      DETERMINE UT,VT JUST INSIDE THE SECTOR BEYOND U,V             00013500
C---      ICKBN IS SET TO ZERO IF NO ADJACENT PATCH NEED BE CHECKED     00013600
C---      OTHERWISE ICKBN SHOULD POINT TO THE PATCH BOUNDARY (1,2,3,OR 400013700
C---      WHICH SHOULD BE CHECKED.                                      00013800
      ICKBN=0                                                           00013900
C---      NEXT DETERMINE THE SECTOR WHICH THE PATH FROM U0,V0 TO U,V    00014000
C---      IS ENTERING.                                                  00014100
      UT=(U+U2)/TWO                                                     00014200
      VT=(V+V2)/TWO                                                     00014300
      IF(G(ZERO,ONE,U0).NE.ZERO.AND.G(ZERO,ONE,V0).NE.ZERO) GO TO 210   00014400
C---      STARTING POINT IS ON BOUNDARY, SO CUT UT,VT BACK              00014500
      UT=(U0+U)/TWO                                                     00014600
      VT=(V0+V)/TWO                                                     00014700
  210 CONTINUE                                                          00014800
C                                                                       00014900
      IU=2                                                              00015000
      IF(UT.LT.ZERO) IU=1                                               00015100
      IF(UT.GT.ONE)  IU=3                                               00015200
      IV=3                                                              00015300
      IF(VT.LT.ZERO) IV=0                                               00015400
      IF(VT.GT.ONE)  IV=6                                               00015500
C---      IC2 IS THE SECTOR NUMBER ( 1 THRU 9) WHICH IS BEING ENTERED.  00015600
      IC2=IU+IV                                                         00015700
C---      IF THE CENTER SQUARE IS BEING ENTERED, THEN CHECK NO BOUNDARY 00015800
      IF(IC2.EQ.5) GO TO 999                                            00015900
      IF(MOD(IC2,2).EQ.0) GO TO 310                                     00016000
      IF(MOD(IC2,2).EQ.1) GO TO 320                                     00016100
C                                                                       00016200
  310 CONTINUE                                                          00016300
C---      AN EVEN-NUMBERED SECTOR IS BEING ENTERED -- BOUNDARY CALCULATI00016400
C---      IS STRAIGHT FORWARD.                                          00016500
      ICKBN=IC2/2                                                       00016600
      GO TO 999                                                         00016700
C                                                                       00016800
  320 CONTINUE                                                          00016900
C---      AN ODD SECTOR IS BEING ENTERED, BOUNDARY DEPENDS ON BOTH POINT00017000
C---      (I.E. ON SECTOR OF UT,VT AND ON SECTOR OF U0,V0)              00017100
      I1=IC2/3+1                                                        00017200
      IF(MOD(IC0,2).NE.0) GO TO 999                                     00017300
      I2=IC0/2                                                          00017400
      ICKBN=IBCHK(I1,I2)                                                00017500
      GO TO 999                                                         00017600
C                                                                       00017700
  999 CONTINUE                                                          00017800
      RETURN                                                            00017900
      END                                                               00018000
**** MODULE = REGMILL ****
**** SOURCE FILE : M0011443.W01   ***
*
      SUBROUTINE APT110(ARG1,ARG2)                                      00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C-- MAIN PROGRAM FOR REGIONAL MILLING(SMIL OR SCON)                     00000300
C-- PART PROGRAMMER INPUT LANGUAGE IS RESIDENT IN BLANK COMMON.         00000400
C                                                                       00000510
      INCLUDE 'BLANKCOM.INC'                                            00000520
C                                                                       00000530
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00000600
      CHARACTER*6 XSMIL,TEST,BADMSG*66                                  00000610
      DIMENSION XSMIL(7),FDUMMY(2)                                      00000700
      DATA XSMIL/'SCON  ','SMIL  ','GCLEAR','GOMILL',                   00000710
     +           'INTSEC','GOLOFT','PLOTFT'/                            00000720
      DATA ZERO/0.0D0/                                                  00000800
C                                                                       00000900
      NT=SSCAN(2)                                                       00001000
      NT=NT*2                                                           00001100
      IF(IBUG.EQ.11) CALL BAD(-NT,2,'CANN',SSCAN)                       00001200
      CALL HOLFRM(ARG1,TEST,1,6,NWD)                                    00001210
      DO 8 I=1,7                                                        00001300
      IF(TEST.NE.XSMIL(I))GOTO 8                                        00001400
      MODE=5                                                            00001405
      FDUMMY(1)=ZERO                                                    00001410
      FDUMMY(2)=SSCAN(2)-1.D0                                           00001415
      ZWI=SSCAN(1)                                                      00001420
      CALL APT094(MODE,FDUMMY,SSCAN)                                    00001425
      SSCAN(1)=ZWI                                                      00001430
      GOTO(1,2,3,4,5,6,6),I                                             00001435
    1 CALL SCON                                                         00001440
      GOTO 30                                                           00001445
    2 CALL SMIL                                                         00001450
      GOTO 30                                                           00001455
    3 CALL GCLEAR(ARG2)                                                 00001460
      GOTO 30                                                           00001465
    4 CALL GOMILL                                                       00001470
      GOTO 30                                                           00001475
    5 CALL INTSEC                                                       00001480
      GOTO 30                                                           00001485
    6 CALL GOLOVO(ARG2)                                                 00001490
      GOTO 30                                                           00001495
    8 CONTINUE                                                          00001500
   10 BADMSG=' ARGUMENT '//TEST//' NOT VALID IN CALL TO APT110'         00002300
      CALL CPRINT(BADMSG)                                               00002400
   30 RETURN                                                            00002500
      END                                                               00002600
**** SOURCE FILE : M0011518.V01   ***
*
CK    SUBROUTINE    ABW       FORT      3-D     GEOLAN       WEISS      M0000100
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++790724    M0000200
C   LETZTE AENDERUNG: D790724.T0835                                     M0000300
C     SUBROUTINE ABW(X1,X2,T1,T2,ERR)                                   M0000400
C     *********************************                                 M0000500
C                                                                       M0000600
C     KURZBESCHREIBUNG:                                                 M0000700
C     DAS UNTERPROGRAMM BERECHNET DIE MAXIMALE ABWEICHUNG EINER         M0000800
C     SPLINE-KURVE ZWISCHEN ZWEI PUNKTEN VON DER VERBINDENDEN           M0000900
C     GERADEN                                                           M0001000
C                                                                       M0001100
C     EINGABE:                                                          M0001200
C     X1      KOORDINATEN DES ERSTEN PUNKTES, BLOCK DER LAENGE 3        M0001300
C     X2      KOORDINATEN DES ZWEITEN PUNKTES, BLOCK DER LAENGE 3       M0001400
C     T1      TANGENTENVEKTOR IM ERSTEN PUNKT,BLOCK DER LAENGE 3        M0001500
C     T2      TANGENTENVEKTOR IM ZWEITEN PUNKT, BLOCK DER LAENGE 3      M0001600
C                                                                       M0001700
C     ERGEBNIS:                                                         M0001800
C     ERR     GESCHAETZTE ABSOLUTE ABWEICHUNG                           M0001900
C                                                                       M0002000
C     UNTERPROGRAMME: DOTF FUER SCALP                                   M0002100
C                                                                       M0002200
C     ERSTELLER: WEISS, GDT4                                            M0002300
C                PLARRE,CAMI-UMSTELLUNG                                 M0002400
C                                                                       M0002500
      SUBROUTINE ABW(X1,X2,T1,T2,ERR)                                   M0002600
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                M0002700
      DOUBLE PRECISION X1(3),X2(3),T1(3),T2(3),A(3)                     M0002800
      KQ = 6                                                            M0002900
      PI = 3.1415926535                                                 M0003000
      DO 1 I = 1,3                                                      M0003100
    1 A(I) = X2(I) - X1(I)                                              M0003200
      CALL DOTF(AL,A,A)                                                 M0003300
      AL = DSQRT(AL)                                                    M0003400
      CALL DOTF(COS1,A,T1)                                              M0003500
      COS1 = COS1/AL                                                    M0003600
      IF(DABS(COS1) .LE. 1.0) GOTO 3                                    M0003700
      IF (COS1 .GT. 1.0) COS1 = 1.0                                     M0003800
      IF (COS1 .LT. -1.0) COS1 = -1.0                                   M0003900
    3 B1  = DARCOS(COS1)                                                M0004000
      BETA = B1*180.0/PI                                                M0004100
      CALL DOTF(COS2,A,T2)                                              M0004200
      COS2 = COS2/AL                                                    M0004300
      IF (DABS(COS2) .LE. 1.0) GOTO 5                                   M0004400
      IF (COS2 .LT. -1.0) COS2 = -1.0                                   M0004500
      IF (COS2 .GT. 1.0) COS2 = 1.0                                     M0004600
    5 C1 = DARCOS(COS2)                                                 M0004700
      GAMMA = C1*180.0/PI                                               M0004800
      A1 = (180.0 - BETA - GAMMA)*PI/180.0                              M0004900
      C = AL*DSIN(C1)/DSIN(A1)                                          M0005000
      ERR = C*DSIN(B1)*0.1                                              M0005100
      ERR = DABS(ERR)                                                   M0005200
      IF (KQ .NE. 0) WRITE(KQ,2)X1,X2,T1,T2,ERR                         M0005300
    2 FORMAT(' ABW:X1,X2,T1,T2,ERR:',                                   M0005400
     */,1H ,13F10.4)                                                    M0005500
      RETURN                                                            M0005600
      END                                                               M0005700
**** SOURCE FILE : M0001038.X02   ***
*
      SUBROUTINE AXSET(MODE,FAX,VAX,AX)                                 00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000300
C--PURPOSE IS TO SET AXIS AX TO FAX IF MODE IS 0 OR VAX IF              00000400
C--MODE IS NOT ZERO.  IF VAX IS ZERO, AX WILL BE SET TO FAX             00000500
C.... IF MODE=2 THEN VAX WILL BE VARIED BY APPLYING ANGLE ALPHA         00000510
C                    IN DIRECTION INDICATED BY FAX                      00000520
      DIMENSION FAX(3),VAX(3),AX(4),FAXN(3)                             00000600
      CHARACTER*20 BADMSG                                               00000610
      INCLUDE 'TAC.INC'                                                 00000620
      DATA ONE,SMAL/1.0D0,1.0D-38/                                      00000700
C                                                                       00000800
      IF(MODE.NE.0) GO TO 50                                            00000900
C--FIXED AXIS CASE                                                      00001000
   10 CONTINUE                                                          00001100
      DO 20 I=1,3                                                       00001200
   20 AX(I)=FAX(I)                                                      00001300
      AX(4)=ONE                                                         00001400
      GO TO 100                                                         00001500
C                                                                       00001600
   50 CONTINUE                                                          00001700
C---VARIABLE AXIS CASE                                                  00001800
      CALL DOTF(SIZ,VAX,VAX)                                            00001900
      IF(SIZ.LT.SMAL) GO TO 10                                          00002000
      FAC=ONE/DSQRT(SIZ)                                                00002100
C--ADJUST SIGN OF AXIS ACCORDING TO SIGN OF MODE                        00002200
      IF(MODE.LT.0) FAC=-FAC                                            00002300
      DO 60 I=1,3                                                       00002400
   60 AX(I)=VAX(I)*FAC                                                  00002500
C...NOW APPLY ALPHA IF REQUIRED                                         00002510
      IF (ABS(MODE).EQ.2) THEN                                          00002520
C... NORMALIZE FAX                                                      00002530
        CALL VNORM(FAX,FAXN)                                            00002540
        DO 70 I=1,3                                                     00002550
          AX(I)=COSA*AX(I)+SINA*FAXN(I)                                 00002560
   70   CONTINUE                                                        00002570
      ENDIF                                                             00002580
C                                                                       00002600
  100 CONTINUE                                                          00002700
      IF(IBUG.NE.11) GO TO 1999                                         00002800
      CALL BAD(-1,0,' ',0)                                              00002910
      BADMSG=' AFTER AXSET'                                             00002920
      CALL CPRINT(BADMSG)                                               00002930
      CALL BAD(1,0,'MODE',MODE)                                         00003000
      CALL BAD(-3,1,'AX  ',AX)                                          00003100
 1999 CONTINUE                                                          00003200
      RETURN                                                            00003300
      END                                                               00003400
**** SOURCE FILE : M0001040.V02   ***
*
      SUBROUTINE BALLOC(B,IFLAG,ITOP,SIDE,TC,RAD,TD,U,V,DIST,           00000100
     X                  MAXREP,IFREE,IRR)                               00000200
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000300
      DIMENSION B(*),IFLAG(*),ITOP(6,4),TC(*),TD(*)                     00000400
      DIMENSION R(32)                                                   00000500
      DATA FAC/.999D0/,BIG/1.D+22/                                      00000600
C                                                                       00000700
C           /-PURPOSE IS TO FIND QUICK ESTIMATE OF LINEUP FROM          00000800
C           /-BALL TOOL TO SURFACE.                                     00000900
C                                                                       00001000
      U1=U                                                              00001100
      V1=V                                                              00001200
      DIST=BIG                                                          00001300
      IF(IFREE.EQ.0) GO TO 10                                           00001400
C            /-IF IFREE=1, INITIAL U,V SHOULD BE IN A VALID SECTOR      00001500
C            /-U,V SHOULD ALSO REMAIN IN A VALID SECTOR                 00001600
      IRR=1                                                             00001700
      CALL CHKTOP(U1,V1,ITOP,IOK)                                       00001800
      IF(IOK.NE.0) GO TO 999                                            00001900
C                                                                       00002000
   10 CONTINUE                                                          00002100
C           /-LOOP WITH LINEAR ESTIMATES FOR GOOD APPROXIMATION         00002200
      DO 20 I=1,MAXREP                                                  00002300
      CALL CNSURF(U1,V1,B,R,IFLAG,1)                                    00002400
      CALL BALONE(R,SIDE,TC,RAD,TD,DU,DV,DA,IRR)                        00002500
      IF(IRR.EQ.0) GO TO 30                                             00002600
C           /-ON FAILURE ACCEPT THE LAST GOOD U,V                       00002700
      IF(I.GT.1) GO TO 100                                              00002800
      IRR=2                                                             00002900
      GO TO 999                                                         00003000
C                                                                       00003100
   30 CONTINUE                                                          00003200
      IF(IFREE.EQ.0) GO TO 40                                           00003300
C           /-TRUNCATE U,V IF THEY LEAD TO A NEW SECTOR                 00003400
      CALL SQRBN(U1,V1,DU,DV,DU1,DV1,FAC,ISQR)                          00003500
      IF(ISQR.GT.0) DU=DU1                                              00003600
      IF(ISQR.GT.0) DV=DV1                                              00003700
   40 CONTINUE                                                          00003800
      U1=U1+DU                                                          00003900
      V1=V1+DV                                                          00004000
      DIST=DA                                                           00004100
   20 CONTINUE                                                          00004200
C                                                                       00004300
  100 CONTINUE                                                          00004400
      IRR=0                                                             00004500
      U=U1                                                              00004600
      V=V1                                                              00004700
  999 CONTINUE                                                          00004800
      RETURN                                                            00004900
      END                                                               00005000
**** SOURCE FILE : M0001041.V01   ***
*
      SUBROUTINE BALONE(R,SIDE,TC,RAD,TD,DU,DV,DIST,IRR)                00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C           /-PURPOSE TO USE LINEAR ESTIMATE OF SURFACE(STORED IN R ) TO00000300
C           /-CALCULATE DISTANCE TO MOVE BALL CUTTER CENTERED AT TC     00000400
C           /-IN DIRECTION TD TOWARD SURFACE                            00000500
C           /-INPUT FOLLOWS                                             00000600
C           /-R(1-32) CONTAINS SURFACE COORDS,FIRST AND SECOND DERIVATIV00000700
C           /-TC,TD DENOTE TOOL CENTER AND TOOL DIRECTION TO SURFACE    00000800
C           /-RAD DENOTES THE RADIUS OF THE BALL TOOL                   00000900
C           /-SIDE DENOTES NON MATERIAL SIDE OF SURFACE(+1 FOR U X V )  00001000
C           /-OUTPUT                                                    00001100
C           /-DIST DISTANCE TOOL CENTER SHOULD BE MOVED TO CONTACT PLANE00001200
C           /-DU,DV SURFACE COORDINATE CHANGES FOR TOOL CONTACT PT.     00001300
C           /-IRR IS NON ZERO ON OUTPUT IF AN ERROR OCCURRED HERE.      00001400
C                                                                       00001500
      DIMENSION TC(3),TD(3),R(32)                                       00001600
      DIMENSION RMOD(3),DEL(3)                                          00001700
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-18/                           00001800
C                                                                       00001900
C           /-COMPUTE MODIFIED SURFACE POINT FOR INTERSECTION PLANE     00002000
      FACTOR=SIDE*RAD                                                   00002100
      DO 10 I=1,3                                                       00002200
   10 RMOD(I)=R(I)+FACTOR*R(I+28)                                       00002300
C           /-COMPUTE DISTANCE OF TC ALONG TD TO THIS PLANE             00002400
C           /- DIST SATISFIES EQN, (TC+DIST*TD-RMOD,SN)=0               00002500
      CALL DOTF(TDSN,TD,R(29))                                          00002600
      IRR=1                                                             00002700
      IF(DABS(TDSN).LT.SMAL) GO TO 999                                  00002800
      DIST=ZERO                                                         00002900
      DO 20 I=1,3                                                       00003000
   20 DIST=DIST+(RMOD(I)-TC(I))*R(I+28)                                 00003100
      DIST=DIST/TDSN                                                    00003200
C           /-COMPUTE INCREMENTAL VECTOR FROM RMOD TO TC , TD PIERCE POI00003300
      DO 30 I=1,3                                                       00003400
   30 DEL(I)=TC(I)+DIST*TD(I)-RMOD(I)                                   00003500
C           /-COMPUTE CHANGE IN U,V TO REACH DEL                        00003600
      CALL DOTF(SUU,R(5),R(5))                                          00003700
      CALL DOTF(SUV,R(5),R(9))                                          00003800
      CALL DOTF(SVV,R(9),R(9))                                          00003900
      CALL DOTF(DELU,DEL,R(5))                                          00004000
      CALL DOTF(DELV,DEL,R(9))                                          00004100
      DISCR=SUU*SVV-SUV**2                                              00004200
      IRR=2                                                             00004300
      IF(DABS(DISCR).LT.SMAL) GO TO 999                                 00004400
      DU=(DELU*SVV-DELV*SUV)/DISCR                                      00004500
      DV=(SUU*DELV-SUV*DELU)/DISCR                                      00004600
      IRR=0                                                             00004700
  999 CONTINUE                                                          00004800
      RETURN                                                            00004900
      END                                                               00005000
**** SOURCE FILE : M0001042.V02   ***
*
      SUBROUTINE BALSCN(SURF,SIDE,TC,RAD,TD,U,V,DIST,NPAT,IRR)          00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C           /-PURPOSE IS TO SCAN ALL PATCHES IN SURFACE AND SELECT      00000300
C           /-BEST CANDIDATE FOR LINEUP WITH TOOL                       00000400
C           /-INPUT                                                     00000500
C           /-SURF- INPUT SCULPTURED SURFACE LARGE DATA ARRAY           00000600
C           /-OUTPUT                                                    00000700
C           /-NPAT PATCH NUMBER OF BEST CANDIDATE                       00000800
C           /-PATCH U,V COORDINATES AT ESTIMATED CONTACT POINT          00000900
C           /-DIST ESTIMATED DISPLACEMENT FROM CURRENT CUTTER POSN TO SU00001000
C                                                                       00001100
      DIMENSION SURF(*),TC(*),TD(*)                                     00001200
      DIMENSION B(64),IFLAG(6),ITOP(6,4)                                00001300
      DATA HALF,BIG/0.5D0,1.0D22/                                       00001400
C                                                                       00001500
      U=HALF                                                            00001600
      V=HALF                                                            00001700
      NPAT=1                                                            00001800
      DIST=BIG                                                          00001900
      IR=1                                                              00002000
      NUMPAT=SURF(4)                                                    00002200
C                                                                       00002300
      DO 10 I=1,NUMPAT                                                  00002400
C           /-LOAD THE ITH PATCH                                        00002500
      CALL LODPCH(SURF,B,IFLAG,ITOP,I,3)                                00002600
      MAXREP=5                                                          00002700
      IFREE=0                                                           00002800
      U1=HALF                                                           00002900
      V1=HALF                                                           00003000
      IRR=0                                                             00003100
      CALL BALLOC(B,IFLAG,ITOP,SIDE,TC,RAD,TD,U1,V1,DA,                 00003200
     X            MAXREP,IFREE,IRR)                                     00003300
      IF(IRR.NE.0) GO TO 20                                             00003400
      CALL CHKTOP(U1,V1,ITOP,IOK)                                       00003500
      IF(IOK.EQ.0) GO TO 30                                             00003600
   20 CONTINUE                                                          00003700
      IF(DABS(DIST).LT.BIG) GO TO 10                                    00003800
      U1=HALF                                                           00003900
      V1=HALF                                                           00004000
      MAXREP=1                                                          00004100
      IFREE=1                                                           00004200
      IRR=0                                                             00004300
      CALL BALLOC(B,IFLAG,ITOP,SIDE,TC,RAD,TD,U1,V1,DA,                 00004400
     X            MAXREP,IFREE,IRR)                                     00004500
      IF(IRR.NE.0) GO TO 10                                             00004600
   30 CONTINUE                                                          00004700
      IF(DABS(DIST).LT.DABS(DA))  GO TO 10                              00004800
C           /-UPDATE BEST PATCH BASED ON SMALLEST DISTANCE              00004900
      DIST=DA                                                           00005000
      U=U1                                                              00005100
      V=V1                                                              00005200
      NPAT=I                                                            00005300
      IR=0                                                              00005400
C           /-UPDATE ERROR FLAG TO INDICATE SUCCESS                     00005500
   10 CONTINUE                                                          00005600
C                                                                       00005700
      IRR=IR                                                            00005800
      RETURN                                                            00005900
      END                                                               00006000
**** SOURCE FILE : M0001043.V03   ***
*
      SUBROUTINE BALSRF(SURF,SIDE,TC,RAD,TD,NPAT,U,V,DIST,              00000100
     X                  R,TOL,MODE,IRR)                                 00000200
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000300
C           /-PURPOSE IS TO DETERMINE CONTACT POINT FROM TOOL TO SURFACE00000400
C           /-INPUT                                                     00000500
C           /-SURF INPUT SCULPTURED SURFACE                             00000600
C           /- 1 OR -1 TO INDICATE CUTTING SIDE OF SURFACE              00000700
C           /-TC,TD,RAD TOOL CENTER, RADIUS AND DIRECTION               00000800
C           /-TOL TOLERANCE FOR TOOL ALIGNMENT                          00000900
C           /-MODE 0 FOR FIRST CALL, 1 FOR CONTINUING CALLS             00001000
C           /-OUTPUT                                                    00001100
C           /-NPAT,U,V OUTPUT PATCH NUMBER AND U,V COORDS AT CONTACT    00001200
C           /-DIST DISTANCE TOOL MUST MOVE TO CONTACT POINT             00001300
C           /-R SURFACE DERIVATIVES AT POINT OF CONTACT                 00001400
C           /-IRR ERROR FLAG, 0 IF NO ERROR, NON ZERO OTHERWISE.        00001500
C                                                                       00001600
      DIMENSION SURF(*),TC(*),TD(*),R(*)                                00001700
      DIMENSION B(64),IFLAG(6),ITOP(6,4)                                00001800
      DATA ZERO,ONE,HALF,ONEBIG/0.0D0,1.0D0,0.5D0,1.00001D0/            00001900
      DATA ONELIT/0.99999D0/                                            00002000
      DATA MXSRCH,MXNITS,MXEXCH/1,25,15/                                00002100
C                                                                       00002200
C            /-ISRCH IS A COUNT OF CALLS FOR GLOBAL SEARCH              00002300
C            /-IEXCHG IS A COUNT OF PATCH EXCHANGES                     00002400
      ISRCH=0                                                           00002500
      IEXCHG=0                                                          00002600
      U1=U                                                              00002700
      V1=V                                                              00002800
C***  CALL BAD(-1,0,4HMODE,MODE)                                        00002900
C***  CALL BAD(1,0,4HU   ,U)                                            00003000
C***  CALL BAD(-1,0,4HV   ,V)                                           00003100
C                                                                       00003200
      IF(MODE.EQ.0) GO TO 20                                            00003300
   10 CONTINUE                                                          00003400
C           /-INITIAL ENTRY OR RELOAD PATH                              00003500
      ISRCH=ISRCH+1                                                     00003600
      IRR=1                                                             00003700
      IF(ISRCH.GT.MXSRCH) GO TO 999                                     00003800
C                                                                       00003900
      CALL BALSCN(SURF,SIDE,TC,RAD,TD,U1,V1,DIST,NPAT,IR)               00004000
C***  CALL BAD(1,0,4HBSCN,IR)                                           00004100
C***  CALL BAD(1,1,4HDIST,DIST)                                         00004200
C***  CALL BAD(1,1,4HU1  ,U1)                                           00004300
C***  CALL BAD(1,1,4HV1  ,V1)                                           00004400
C***  CALL BAD(-1,0,4HNPAT,NPAT)                                        00004500
      IRR=2                                                             00004600
      IF(IR.NE.0) GO TO 999                                             00004700
C                                                                       00004800
      CALL LODPCH(SURF,B,IFLAG,ITOP,NPAT,3)                             00004900
C                                                                       00005000
   20 CONTINUE                                                          00005100
C           /-SET ITERATION COUNTER FOR PATCH TO TOOL LINEUP            00005200
      NITS=0                                                            00005300
      IOKLAS=0                                                          00005400
C                                                                       00005500
   30 CONTINUE                                                          00005600
C***  CALL BAD(-1,0,4HNITS,NITS)                                        00005700
      NITS=NITS+1                                                       00005800
      IF(NITS.GT.MXNITS) GO TO 10                                       00005900
C           /-CALCULATE SURFACE DERIVATIVES AT THIS U,V                 00006000
      CALL CNSURF(U1,V1,B,R,IFLAG,1)                                    00006100
C***  CALL BAD(-12,1,4HCNSF,R)                                          00006200
C           /- DETERMINE IF PATCH IS WITHIN TOLERANCE OF TOOL YET       00006300
      CALL BALTOL(R,SIDE,TC,RAD,TD,DIST,TOL,IOK)                        00006400
C***  CALL BAD(1,1,4HTOL ,TOL)                                          00006500
C***  CALL BAD(1,1,4HDIST,DIST)                                         00006600
C***  CALL BAD(-1,0,4HIOK ,IOK)                                         00006700
      IF(IOK.NE.0) GO TO 40                                             00006800
C           /-TOOL IN TOLERANCE , EXAMINE U,V VALUES FURTHER            00006900
      CALL CHKTOP(U1,V1,ITOP,IOK)                                       00007000
C***  CALL BAD(2,2,4HU1  ,U1)                                           00007100
C***  CALL BAD(2,2,4HV1   ,V1)                                          00007200
C***  CALL BAD(-1,0,4HCTOP,IOK)                                         00007300
      IRR=0                                                             00007400
      IF(IOK.EQ.0) GO TO 100                                            00007500
C                                                                       00007600
   70 CONTINUE                                                          00007700
C***  CALL BAD(-1,0,4HEXCG,IEXCHG)                                      00007800
      IEXCHG=IEXCHG+1                                                   00007900
      IRR=3                                                             00008000
      IF(IEXCHG.GT.MXEXCH) GO TO 999                                    00008100
      NPAT=IOK                                                          00008200
C            /-IOK IS A CANDIDATE PATCH IF NON ZERO.                    00008300
      U1=HALF                                                           00008400
      V1=HALF                                                           00008500
      CALL LODPCH(SURF,B,IFLAG,ITOP,NPAT,3)                             00008600
      IFREE=0                                                           00008700
      MAXREP=5                                                          00008800
      CALL BALLOC(B,IFLAG,ITOP,SIDE,TC,RAD,TD,                          00008900
     X            U1,V1,DIST,MAXREP,IFREE,IRR)                          00009000
C***  CALL BAD(1,0,4HBLOC,IRR)                                          00009100
C***  CALL BAD(1,1,4HU1  ,U1)                                           00009200
C***  CALL BAD(1,1,4HV1  ,V1)                                           00009300
C***  CALL BAD(-1,1,4HDIST,DIST)                                        00009400
      IF(IRR.NE.0) GO TO 10                                             00009500
      GO TO 20                                                          00009600
C                                                                       00009700
   40 CONTINUE                                                          00009800
      CALL BALONE(R,SIDE,TC,RAD,TD,DU,DV,DA,IRR)                        00009900
C***  CALL BAD(1,0,4HBONE,IRR)                                          00010000
C***  CALL BAD(1,1,4HDU  ,DU)                                           00010100
C***  CALL BAD(1,1,4HDV  ,DV)                                           00010200
C***  CALL BAD(-1,1,4HDA  ,DA)                                          00010300
      DUK=DU                                                            00010400
      DVK=DV                                                            00010500
      MAXREP=25                                                         00010600
      CALL BALTWO(R,SIDE,TC,RAD,TD,DU,DV,DA,MAXREP,TOL,IRR)             00010700
C***  CALL BAD(1,0,4HBTWO,IRR)                                          00010800
C***  CALL BAD(1,1,4HDU  ,DU)                                           00010900
C***  CALL BAD(1,1,4HDV  ,DV)                                           00011000
C***  CALL BAD(-1,1,4HDA  ,DA)                                          00011100
      IF(IRR.EQ.0) GO TO 50                                             00011200
      DU=DUK                                                            00011300
      DV=DVK                                                            00011400
   50 CONTINUE                                                          00011500
C***  CALL BAD(2,2,4HU1  ,U1)                                           00011600
C***  CALL BAD(-2,2,4HV1  ,V1)                                          00011700
C***  CALL BAD(2,2,4HDU  ,DU)                                           00011800
C***  CALL BAD(-2,2,4HDV  ,DV)                                          00011900
      CALL SQRBN(U1,V1,DU,DV,DUK,DVK,ONE,IOK)                           00012000
C***  CALL BAD(2,2,4HDUK ,DUK)                                          00012100
C***  CALL BAD(-2,2,4HDVK ,DVK)                                         00012200
C***  CALL BAD(-1,0,4HSRBN,IOK)                                         00012300
      IF(IOK.EQ.0.OR.IOK.EQ.5) GO TO 60                                 00012400
      IF(IOKLAS.NE.0) GO TO 55                                          00012500
C             /-CASE.  IOK.NE.0.AND.IOKLAS.EQ.0                         00012600
C             /-CUT DU,DV TO LIE WITHIN PRESENT SECTOR AND PROCEED AGAIN00012700
      DU=DUK                                                            00012800
      DV=DVK                                                            00012900
      GO TO 60                                                          00013000
   55 CONTINUE                                                          00013100
C             /-CASE.  IOK.NE.0.AND.IOKLAS.NE.0                         00013200
C             /-SET DU,DV SO THAT POINT MOVES TO NEW SECTOR             00013300
C             /-CHECK TO SEE IF THE NEW MOVEMENT IS SMALL               00013400
      CALL DOTV(W,R(5),R(5))                                            00013500
      DU1=DU*DSQRT(W)                                                   00013600
      CALL DOTV(W,R(9),R(9))                                            00013700
      DV1=DV*DSQRT(W)                                                   00013800
      IF(DSQRT(DU1**2+DV1**2).GT.TOL/2.) GO TO 56                       00013900
C             /-MOVEMENT IS WITHIN TOLERANCE BAND                       00014000
      IOK=0                                                             00014100
      DU=DUK                                                            00014200
      DV=DVK                                                            00014300
      GO TO 60                                                          00014400
C                                                                       00014500
   56 CONTINUE                                                          00014600
      DU=DUK*ONEBIG                                                     00014700
      DV=DVK*ONEBIG                                                     00014800
      U2=U1+DU                                                          00014900
      V2=V1+DV                                                          00015000
C             /-CHECK TO SEE IF NEW U,V LIE IN LEGITIMATE REGION        00015100
C             /-ELSE, OBTAIN A NEW PATCH.                               00015200
      CALL CHKTOP(U2,V2,ITOP,IOK)                                       00015300
C***  CALL BAD(-1,0,4HCKTP,IOK)                                         00015400
C***  CALL BAD(2,2,4HU2  ,U2)                                           00015500
C***  CALL BAD(2,2,4HV2  ,V2)                                           00015600
C***  CALL BAD(1,1,4HU2  ,U2)                                           00015700
C***  CALL BAD(-1,1,4HV2  ,V2)                                          00015800
      IF(IOK.EQ.0) GO TO 60                                             00015900
      IOKLAS=0                                                          00016000
      NPAT=IOK                                                          00016100
      GO TO 70                                                          00016200
C                                                                       00016300
   60 CONTINUE                                                          00016400
      IOKLAS=IOK                                                        00016500
      U1=U1+DU                                                          00016600
      V1=V1+DV                                                          00016700
      DIST=DA                                                           00016800
C***  CALL BAD(1,0,4H101 ,IOK)                                          00016900
C***  CALL BAD(1,1,4HU1  ,U1)                                           00017000
C***  CALL BAD(1,1,4HV1  ,V1)                                           00017100
C***  CALL BAD(-1,1,4HDIST,DIST)                                        00017200
      IRR=0                                                             00017300
      GO TO 30                                                          00017400
C                                                                       00017500
  100 CONTINUE                                                          00017600
      U=U1                                                              00017700
      V=V1                                                              00017800
C                                                                       00017900
  999 CONTINUE                                                          00018000
      RETURN                                                            00018100
      END                                                               00018200
**** SOURCE FILE : M0001044.V02   ***
*
      SUBROUTINE BALTOL(R,SIDE,TC,RAD,TD,DIST,TOL,IOK)                  00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C           /-PURPOSE IS TO VERIFY THAT CUTTER IS WITHIN TOLERANCE OF   00000300
C           /-SURFACE AT THIS POINT                                     00000400
C           /-IOK=0 IF IT IS AND SET TO NON-ZERO VALUE OTHERWISE        00000500
C                                                                       00000600
      DIMENSION R(*),TC(*),TD(*)                                        00000700
      DIMENSION ST(3)                                                   00000800
      DATA ZERO,ONE,SMAL,FLIPCK/0.0D0,1.0D0,1.D-22,.99995D0/            00000900
C                                                                       00001000
      FAC=SIDE*RAD                                                      00001100
      DO 10 I=1,3                                                       00001200
   10 ST(I)=TC(I)+DIST*TD(I)-R(I)-FAC*R(I+28)                           00001300
      CALL DOTV(STLEN,ST,ST)                                            00001400
      IOK=0                                                             00001500
C            /-IF STLEN IS VERY SMALL, ACCEPT THIS RESULT               00001600
      IF(STLEN.LT.SMAL) GO TO 999                                       00001700
      STLEN=DSQRT(STLEN)                                                00001800
      IOK=1                                                             00001900
C            /-IF STLEN EXCEEDS TOLERANCE, DO NOT ACCEPT                00002000
      IF(STLEN.GT.TOL) GO TO 999                                        00002100
C            /-MEASURE ANGLE FROM NORMAL TO ST                          00002200
      DO 20 I=1,3                                                       00002300
   20 ST(I)=TC(I)+DIST*TD(I)-R(I)                                       00002400
      CALL DOTV(STLEN,ST,ST)                                            00002500
      IF(STLEN.LT.SMAL) GO TO 999                                       00002600
      CALL DOTV(ANG,ST,R(29))                                           00002700
      ANG=ANG/DSQRT(STLEN)*SIDE                                         00002800
      IOK=2                                                             00002900
C            /-VECTOR LINEUP IS REQUIRED ONLY FOR NON ZERO RADIUS       00003000
      IF(RAD.GT.SMAL.AND.ANG.LT.FLIPCK) GO TO 999                       00003100
      IOK=0                                                             00003200
  999 CONTINUE                                                          00003300
      RETURN                                                            00003400
      END                                                               00003500
**** SOURCE FILE : M0001045.W01   ***
*
      SUBROUTINE BALTWO(R,SIDE,TC,RAD,TD,U,V,A,MAXREP,TOL,IRR)          00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000300
      DIMENSION PS(3),SU(3),SV(3)                                       00000400
      DIMENSION CA(3),CU(3),CV(3),COEF(3)                               00000500
      DIMENSION TC(3),TD(3),R(32)                                       00000600
      CHARACTER*20 BADMSG                                               00000610
      DATA SMAL,SMAL1/1.D-3,1.D-4/                                      00000700
C           /-PURPOSE OF ROUTINE IS TO USE NEWTON RHAPSON METHOD        00000800
C           /-TO MOVE BALL CUTTER INTO CONTACT WITH 2ND ORDER EXPANSION 00000900
C           /-SURFACE ABOUT A POINT.                                    00001000
C           /-INPUT                                                     00001100
C           /-R SURFACE POINT, FIRST AND SECOND DERIVATIVES             00001200
C           /-TC,TD BALL CENTER, DIRECTION OF MOVEMENT                  00001300
C           /-RAD IS  RADIUS OF BALL                                    00001400
C           /- SIDE IS 1 IF RU X RV GIVES CUTTER SIDE OF SURF, -1 OTHERW00001500
C           /- MAXREP IS MAXIMUM NUMBER OF REPETITIIONS OF NEWNTON METHO00001600
C           /- TOL IS THE TOLERANCE SPECIFICATION FOR STOPPING ITERATION00001700
C                                                                       00001800
C           /- INPUT-OUTPUT                                             00001900
C           /-A IS DISTANCE CUTTER SHOULD MOVE IN TD DIRECTION          00002000
C           /-U,V ARE SURFACE COORDINATES DESCRIBING CONTACT            00002100
C                                                                       00002200
      NITS=0                                                            00002300
   10 CONTINUE                                                          00002400
      NITS=NITS+1                                                       00002500
      IF(NITS.GT.MAXREP) GO TO 999                                      00002600
C           /-EVALUATE QUANTITIES WHICH DEPEND ON CURRENT A,U,V         00002700
      HUSQ=U*U/2.                                                       00002800
      UV=U*V                                                            00002900
      HVSQ=V*V/2.                                                       00003000
      DO 20 I=1,3                                                       00003100
      PS(I)=TC(I)+A*TD(I)                                               00003200
     X     -(R(I)+U*R(I+4)+V*R(I+8)                                     00003300
     X     +HUSQ*R(I+12)+UV*R(I+16)+HVSQ*R(I+20))                       00003400
      SU(I)=R(I+4)+U*R(I+12)+V*R(I+16)                                  00003500
      SV(I)=R(I+8)+U*R(I+16)+V*R(I+20)                                  00003600
   20 CONTINUE                                                          00003700
C                                                                       00003800
C           /-USE SURFACE REPRESENTATION BY TAYLOR 2ND ORDER METHOD     00003900
C           /-S(U,V)=R+U*RU+V*RV+HUSQ*RUU+UV*RUV+HVSQ*RVV               00004000
C           /-NEWTON RHAPSON ITERATION IS USED TO SOLVE 3 EQNS IN 3 UNKN00004100
C           /-F(A,U,V)=(TC+A*TD-S(U,V))**2-RAD**2=0                     00004200
C           /-G(A,U,V)=(TC+A*TD-S(U,V),SU)=0                            00004300
C           /-H(A,U,V)=(TC+A*TD-S(U,V),SV)=0                            00004400
C           /-CHANGES IN A,U,V NAMELY DA,DU,DV ARE FOUND BY THE FOLLOWIN00004500
C           /- 0-F=DA*FA+DU*FU+DV*FV                                    00004600
C           /- 0-G=DA*GA+DU*GU+DV*GV                                    00004700
C           /- 0-H=DA*HA+DU*HU+DV*HV                                    00004800
C           /- CA(1)=FA, CA(2)=GA, CA(3)=HA, CU(1)=FU ETC.              00004900
C           /- COEF(1)=-F, COEF(2)=-G, COEF(3)=-H                       00005000
C                                                                       00005100
      CALL DOTF(CA(1),PS,TD)                                            00005200
      CA(1)=2.*CA(1)                                                    00005300
      CALL DOTF(CU(1),PS,SU)                                            00005400
      CU(1)=-2.*CU(1)                                                   00005500
      CALL DOTF(CV(1),PS,SV)                                            00005600
      CV(1)=-2.*CV(1)                                                   00005700
C                                                                       00005800
      CALL DOTF(CA(2),TD,SU)                                            00005900
      CALL DOTF(SUSQ,SU,SU)                                             00006000
      CALL DOTF(CU(2),PS,R(13))                                         00006100
      CU(2)=-SUSQ+CU(2)                                                 00006200
      CALL DOTF(SUV,SU,SV)                                              00006300
      CALL DOTF(CV(2),PS,R(17))                                         00006400
      CV(2)=-SUV+CV(2)                                                  00006500
C                                                                       00006600
      CALL DOTF(CA(3),TD,SV)                                            00006700
      CU(3)=CV(2)                                                       00006800
      CALL DOTF(SVSQ,SV,SV)                                             00006900
      CALL DOTF(CV(3),PS,R(21))                                         00007000
      CV(3)=CV(3)-SVSQ                                                  00007100
C                                                                       00007200
      CALL DOTF(PSQ,PS,PS)                                              00007300
      COEF(1)=-(PSQ-RAD**2)                                             00007400
C----     CALL DOTF(COEF(2),PS,SU)                                      00007500
      COEF(2)=CU(1)/2.                                                  00007600
C----     CALL DOTF(COEF(3),PS,SV)                                      00007700
      COEF(3)=CV(1)/2.                                                  00007800
C           /-3X3 EQN IS READY, FIRST CHECK DISCRIMINANT                00007900
      DISCR=DET3(CA,CU,CV)                                              00008000
      IF(DABS(DISCR).GT.SMAL) GO TO 50                                  00008100
C           /-DISCRIMINANT TOO SMALL, CHANGE A,U,V AND TRY AGAIN        00008200
      A=.9*A+SMAL1                                                      00008300
      U=.9*U+SMAL1                                                      00008400
      V=.9*V+SMAL1                                                      00008500
      GO TO 10                                                          00008600
C                                                                       00008700
   50 CONTINUE                                                          00008800
C           /-SOLVE FOR DA,DU,DV                                        00008900
      DA=DET3(COEF,CU,CV)/DISCR                                         00009000
      DU=DET3(CA,COEF,CV)/DISCR                                         00009100
      DV=DET3(CA,CU,COEF)/DISCR                                         00009200
      IF(IBUG.NE.11) GO TO 9991                                         00009300
      CALL BAD(-1,0,' ',0)                                              00009410
      BADMSG=' AFTER BALTWO'                                            00009420
      CALL CPRINT(BADMSG)                                               00009430
      CALL BAD(-3,1,'COEF',COEF)                                        00009500
 9991 CONTINUE                                                          00009600
      A=A+DA                                                            00009700
      U=U+DU                                                            00009800
      V=V+DV                                                            00009900
      W=DABS(COEF(1))                                                   00010000
      W=DSQRT(W)                                                        00010100
      W=W+DABS(COEF(2))+DABS(COEF(3))                                   00010200
      IF(W.GT.TOL) GO TO 10                                             00010300
  100 CONTINUE                                                          00010400
C                                                                       00010500
  999 CONTINUE                                                          00010600
      RETURN                                                            00010700
      END                                                               00010800
**** SOURCE FILE : M0001050.W01   ***
*
      SUBROUTINE CHKSET(IDTYPE,PDIR,PAR,IFIN)                           00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000300
      DIMENSION PLIM(4),PAR(*)                                          00000400
      CHARACTER*20 BADMSG                                               00000410
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-14/                           00000500
C---PURPOSE IS TO CHECK WHETHER PARAMETER PAIR PAR(1-2) IS              00000600
C--- WITHIN LEGITIMATE BOUNDS.  THESE BOUNDS ARE SET WHEN               00000700
C--- IFIN=-121 ON INPUT.  OTHERWISE IFIN NON ZERO ON OUTPUT             00000800
C--- MEANS THAT P IS OUT OF BOUNDS.  P WILL ALSO BE TRUNCATED           00000900
C--- TO LIE WITHIN BOUNDS.                                              00001000
C                                                                       00001100
      IF(IFIN.NE.-121) GO TO 15                                         00001200
      DO 10 I=1,4                                                       00001300
   10 PLIM(I)=PAR(I)                                                    00001400
      GO TO 999                                                         00001500
C                                                                       00001600
   15 CONTINUE                                                          00001700
      IFIN=0                                                            00001800
      ITYP=2                                                            00001900
      IF(IDTYPE.LT.2) ITYP=1                                            00002000
      I=ITYP                                                            00002100
      INDEX=2*I-1                                                       00002200
      IF(PAR(I).GT.PLIM(INDEX)+SMAL) GO TO 20                           00002300
      PAR(I)=PLIM(INDEX)                                                00002400
      IF(PDIR.GT.ZERO) GO TO 20                                         00002500
      IFIN=1                                                            00002600
   20 CONTINUE                                                          00002700
      INDEX=2*I                                                         00002800
      IF(PAR(I).LT.PLIM(INDEX)-SMAL) GO TO 40                           00002900
      PAR(I)=PLIM(INDEX)                                                00003000
      IF(PDIR.LT.ZERO) GO TO 40                                         00003100
      IFIN=1                                                            00003200
   40 CONTINUE                                                          00003300
C                                                                       00003400
  999 CONTINUE                                                          00003500
      IF(IBUG.NE.11) GO TO 1999                                         00003600
      CALL BAD(-1,0,' ',0)                                              00003710
      BADMSG=' AFTER CHKSET'                                            00003720
      CALL CPRINT(BADMSG)                                               00003730
      CALL BAD(1,1,'PDIR',PDIR)                                         00003800
      CALL BAD(1,0,'IFIN',IFIN)                                         00003900
      CALL BAD(-2,1,'PAR ',PAR)                                         00004000
 1999 CONTINUE                                                          00004100
      RETURN                                                            00004200
      END                                                               00004300
**** SOURCE FILE : M0001051.V01   ***
*
      SUBROUTINE CHKTOP(U,V,ITOP,IOK)                                   00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION ITOP(6,4)                                               00000300
      DATA ZERO,ONE/0.0D0,1.0D0/                                        00000400
      DIMENSION ICOMP(2,3,3)                                            00000500
      DATA ICOMP/ 1,2, 1,0, 1,3, 2,0, 0,0, 3,0, 2,4, 4,0, 4,3/          00000600
C           /-PURPOSE IS TO SEE IF U,V, VALUES OF PATCH WITH TOPOLOGY   00000700
C           /-TABLE ITOP ARE IN A VALID SECTOR FOR THIS SURFACE         00000800
C           /-IOK=0 MEANS SECTOR IS OKAY. OTHERWISE IOK POINTS TO INVALI00000900
C           /-SECTOR                                                    00001000
C           /-NOTE THAT UNIT SQUARE DIVIDES SPACE INTO 9 SECTORS        00001100
C                                                                       00001200
C           /-FIRST DETERMINE THE SECTOR OF U,V                         00001300
      IU=2                                                              00001400
      IF(U.LT.ZERO) IU=1                                                00001500
      IF(U.GT.ONE) IU=3                                                 00001600
      IV=2                                                              00001700
      IF(V.LT.ZERO) IV=1                                                00001800
      IF(V.GT.ONE) IV=3                                                 00001900
C           /-NOW COMPARE THIS SECTOR FOR FREE BOUNDARIES               00002000
      IOK=0                                                             00002100
      DO 10 J=1,2                                                       00002200
      K=ICOMP(J,IU,IV)                                                  00002300
      IF(K.EQ.0) GO TO 10                                               00002400
      IF(ITOP(2,K).NE.0) IOK=ITOP(2,K)                                  00002500
   10 CONTINUE                                                          00002600
      RETURN                                                            00002700
      END                                                               00002800
**** SOURCE FILE : M0001052.V02   ***
*
      SUBROUTINE CLIFT(TE,CLRPLN,TX)                                    00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      DIMENSION TE(*),CLRPLN(*),TX(*)                                   00000300
C---PURPOSE IS TO LIFT TOOL END TE TO POSITION TX ON CLEARANCE          00000400
C---PLANE CLRPLN.  MOVE IS IN DIRECTION OF PLANE NORMAL.                00000500
C                                                                       00000600
      DATA ZERO/0.D0/                                                   00000700
C                                                                       00000800
      SUM=ZERO                                                          00000900
      DO 10 I=1,3                                                       00001000
      SUM=(TE(I)-CLRPLN(4)*CLRPLN(I))*CLRPLN(I)+SUM                     00001100
   10 CONTINUE                                                          00001200
      DO 20 I=1,3                                                       00001300
   20 TX(I)=TE(I)-SUM*CLRPLN(I)                                         00001400
      RETURN                                                            00001500
      END                                                               00001600
**** SOURCE FILE : M0001053.W02   ***
*
      SUBROUTINE CLPUT(ATEX,ATAX,MODE)                                  00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C                                                                       00000299
      INCLUDE 'TOTAL.INC'                                               00001301
      INCLUDE 'FXCOR.INC'                                               00004101
      INCLUDE 'IFXCOR.INC'                                              00007001
C                                                                       00008400
      CHARACTER*20 BADMSG                                               00008410
      DIMENSION ATEX(3),ATAX(3)                                         00008500
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00008600
      INCLUDE 'SYMFIL.INC'                                              00008710
C                                                                       00009100
      INTEGER Z4E                                                       00009110
      PARAMETER (Z4E=1308622848)                                        00009120
      INTEGER BCDF                                                      00009130
      LOGICAL FIRST                                                     00009140
      SAVE FIRST,KCLDAT                                                 00009150
      DIMENSION KCLDAT(10)                                              00009200
      DATA KCLDAT/0,0,Z4E,0,Z4E,2,                                      00009300
     X            Z4E, 1,0,0/                                           00009400
      DATA FIRST/.TRUE./                                                00009410
C                                                                       00009500
C                                                                       00009510
      IF (FIRST)THEN                                                    00009520
        KCLDAT(1) = BCDF('CLDA')                                        00009530
        KCLDAT(2) = BCDF('TA  ')                                        00009540
        KCLDAT(9) = BCDF('GOTO')                                        00009550
        KCLDAT(10) = BCDF('    ')                                       00009560
        FIRST=.FALSE.                                                   00009570
      END IF                                                            00009580
C                                                                       00009590
      CALL RECORD(ISEQNO)                                               00009600
      IF(MODE.GE.0) GO TO 100                                           00009700
      IF(MODE.LT.-1) GO TO 999                                          00009800
C--OUTPUT HEADER FOR A RECORD OF CL DATA                                00009900
      KCLDAT(4)=ISEQNO                                                  00010000
      NR=0                                                              00010100
      CALL EWRITE(EXFILE,NR,KCLDAT,10,IR)                               00010200
      GO TO 999                                                         00010300
C                                                                       00010400
  100 CONTINUE                                                          00010500
      ICL=0                                                             00010600
      IF(MODE.EQ.0) ICL=2                                               00010700
      IF(MODE.EQ.1) ICL=3                                               00010800
      DO 110 I=1,3                                                      00010900
      TE(I)=ATEX(I)                                                     00011000
      TA(I)=ATAX(I)                                                     00011100
  110 CONTINUE                                                          00011200
      CALL ATAPE                                                        00011300
      GO TO 999                                                         00011400
C                                                                       00011500
  999 CONTINUE                                                          00011600
      IF(IBUG.NE.11) GO TO 1999                                         00011700
      CALL BAD(-1,0,' ',0)                                              00011810
      BADMSG=' AFTER CLPUT'                                             00011820
      CALL CPRINT(BADMSG)                                               00011830
      CALL BAD(-1,0,'MODE',MODE)                                        00011900
      CALL BAD(3,1,'ATEX',ATEX)                                         00012000
      CALL BAD(-3,1,'ATAX',ATAX)                                        00012100
 1999 CONTINUE                                                          00012200
C                                                                       00012300
      RETURN                                                            00012400
      END                                                               00012500
**** SOURCE FILE : M0001062.V06   ***
*
      SUBROUTINE CUTREG(WORD,CDIR,UST,VST,PDIR,IDTYPE,IQUAL,            00000100
     X   TUL,PTOLI,PTOLO,DTOL,AMAXDP,ELMAX,MAXCL,ISKP,IRR)              00000200
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000300
C---PURPOSE IS TO CALL PATH ROUTINE, SSPATH, TO GENERATE THE NECESSARY  00000400
C---CLRECORDS IN RESPONSE TO AN AREA CLEARANCE COMMAND                  00000500
C                                                                       00000600
C                                                                       00000700
      COMMON/IBUGG/IBUG,I1,I2                                           00000800
      COMMON/XDS/DGEOM(4),DLIM(4),TLDIR(3),DOFSET,ITLDIR,IDTOOL,NDS     00000900
      COMMON/XPS/PGEOM(4),PSIDE,PTHICK,IPTOOL,NPS                       00001000
      COMMON/XFEED/CLRPLN(4),FED(4),NCLRPL,NFEED                        00001100
      COMMON/XSTEPO/SSTEP(4),NSTEPO                                     00001200
      COMMON/XAXIS/AXIS(3),IAXIS,NAXIS                                  00001300
C                                                                       00001400
      INCLUDE 'BLANKCOM.INC'                                            00001510
C                                                                       00001600
      DIMENSION TUL(1),TE(3),TA(3),TD(3),PAR(2),PLIM(4)                 00001700
      DIMENSION PSAVE(2),ALIM(4),ADIR(2)                                00001800
      DIMENSION SVTE(3),SVTA(3),SVTD(3)                                 00001900
C                                                                       00002000
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-14/                           00002100
      DATA APICKF/166.D0/                                               00002200
      DATA AZIGZA/61.D0/                                                00002300
C                                                                       00002400
C---      COUNT OF MAXIMUM CALLS TO SSPATH                              00002410
      IPATHK=0                                                          00002420
C---      MAXIMUM NUMBER OF CALLS ALLOWED TO SSPATH                     00002430
      MXPATH=SSTEP(4)                                                   00002440
C---      MXPATH=0, MEANS ESSENTIALLY  NO LIMIT                         00002450
      IF(MXPATH.LE.0) MXPATH=1000000                                    00002460
      IF(WORD.EQ.APICKF) GO TO 500                                      00002500
      IF(WORD.EQ.AZIGZA) GO TO 100                                      00002600
      GO TO 999                                                         00002700
C                                                                       00002800
C---ZIGZAG PATTERN MACHINING                                            00002900
  100 CONTINUE                                                          00003000
      IPASS=1                                                           00003100
      IFIN=0                                                            00003200
      ICLSKP=0                                                          00003300
      IF(ISKP.EQ.1) ICLSKP=1                                            00003400
      IPART=PGEOM(4)                                                    00003500
      IDRIV=DGEOM(4)                                                    00003600
      PAR(1)=UST                                                        00003700
      PAR(2)=VST                                                        00003800
      DSTEP=ONE                                                         00003900
      SCALHT=SSTEP(1)                                                   00004000
      STEPMX=SSTEP(2)                                                   00004100
      STEPOV=ZERO                                                       00004200
C                                                                       00004300
  120 CONTINUE                                                          00004400
C---COMMON ENTRY POINT FOR ALL PASSES IN MAIN DIRECTION                 00004500
      IF(IBUG.NE.11) GO TO 105                                          00004600
      CALL BAD(-1,0,' ',0)                                              00004700
      CALL BAD(1,0,'PASS',IPASS)                                        00004800
      CALL BAD(-2,1,'PAR ',PAR)                                         00004900
  105 CONTINUE                                                          00005000
C                                                                       00005100
      DO 110 I=1,4                                                      00005200
  110 PLIM(I)=DLIM(I)                                                   00005300
      TPDIR=PDIR                                                        00005400
      IF(MOD(IPASS,2).EQ.0) TPDIR=-PDIR                                 00005500
      IRR=0                                                             00005600
      CALL CLPUT(TE,TA,-1)                                              00005700
C                                                                       00005800
      UST=PAR(1)                                                        00005900
      VST=PAR(2)                                                        00006000
      CALL SSPATH( COM(IDRIV), IDTYPE, TPDIR, DTOL, DSTEP, DOFSET,      00006100
     X           PLIM, IDTOOL, IAXIS, AXIS, ITLDIR,                     00006200
     X       TLDIR, COM(IPART), PSIDE, PTHICK, PTOLI, PTOLO, IPTOOL,    00006300
     X           TUL, UST,  VST, SCALHT, STEPOV, STEPMX,                00006400
     X           AMAXDP, ELMAX, MAXCL, ICLSKP, IQUAL,                   00006500
     X           TE, TA, TD, PAR, IRR )                                 00006600
      IF(IRR.NE.0) GO TO 999                                            00006610
C                                                                       00006700
C---      INCREMENT COUNT OF CALLS TO SSPATH, QUIT WHEN OVER LIMIT      00006750
      IPATHK=IPATHK+1                                                   00006760
      IF(IPATHK.GE.MXPATH) GO TO 999                                    00006770
C---IF FINAL FLAG HAS BEEN SET THEN QUIT NOW                            00006800
      IF(IFIN.EQ.1) GO TO 999                                           00006900
C---NOW CALCULATE PARAMETERS NECESSARY FOR A SIDE STEP                  00007000
      TPDIR=CDIR                                                        00007100
      MIDTYP=3-IDTYPE                                                   00007200
      ICR=2                                                             00007300
      IF(IDTYPE.EQ.2) ICR=1                                             00007400
      ILC=2*ICR-1                                                       00007500
      DO 210 I=1,2                                                      00007600
  210 PSAVE(I)=PAR(I)                                                   00007700
      CALL PCHG(PAR(ICR),CDIR,STEPOV)                                   00007800
      PAR(ICR)=PAR(ICR)+CDIR*STEPOV                                     00007900
      DO 220 I=1,4                                                      00008000
  220 PLIM(I)=DLIM(I)                                                   00008100
      IF(PAR(ICR).LT.DLIM(ILC)+SMAL.AND.CDIR.LT.ZERO) IFIN=1            00008200
      IF(PAR(ICR).LT.DLIM(ILC)+SMAL.AND.CDIR.LT.ZERO)PAR(ICR)=DLIM(ILC) 00008250
      IF(PAR(ICR).GT.DLIM(ILC+1)-SMAL.AND.CDIR.GT.ZERO) IFIN=1          00008300
      IF(PAR(ICR).GT.DLIM(ILC+1)-SMAL.AND.CDIR.GT.ZERO) PAR(ICR)=       00008350
     X   DLIM(ILC+1)                                                    00008355
C---NOW TEMPORARILY LOAD NEW LIMITS FOR SIDE STEPPING                   00008400
      IF(CDIR.LT.ZERO) GO TO 230                                        00008500
      PLIM(ILC)=PSAVE(ICR)                                              00008600
      PLIM(ILC+1)=PAR(ICR)                                              00008700
      GO TO 240                                                         00008800
C                                                                       00008900
  230 CONTINUE                                                          00009000
      PLIM(ILC)=PAR(ICR)                                                00009100
      PLIM(ILC+1)=PSAVE(ICR)                                            00009200
  240 CONTINUE                                                          00009300
C                                                                       00009400
      TSCALH=ZERO                                                       00009500
      TSTEPO=ZERO                                                       00009600
      TSTEPM=ZERO                                                       00009700
C---WHEN LIFTUP HAS NOT BEEN SPECIFIED, SKIP THE FIRST CUT VECTOR       00009800
      TPTHIC=SSTEP(3)+PTHICK                                            00009900
      MICLSK=1                                                          00010000
      IF(SSTEP(3).GT.SMAL) MICLSK=0                                     00010100
C                                                                       00010200
      IF(FED(2).GT.SMAL) CALL FEDPUT(FED(2))                            00010300
      CALL CLPUT(TE,TA,-1)                                              00010400
C                                                                       00010500
      IF(IBUG.NE.11) GO TO 250                                          00010600
      CALL BAD(-1,0,' ',0)                                              00010700
      CALL BAD(1,0,'STEP',IPASS)                                        00010800
      CALL BAD(2,1,'PSAV',PSAVE)                                        00010900
      CALL BAD(-2,1,'PAR ',PAR)                                         00011000
  250 CONTINUE                                                          00011100
C---GENERATE THE SIDE MOTION TO THE NEXT POSITION                       00011200
C                                                                       00011300
      CALL SSPATH( COM(IDRIV), MIDTYP, TPDIR, DTOL, DSTEP, DOFSET,      00011400
     X           PLIM, IDTOOL, IAXIS, AXIS, ITLDIR,                     00011500
     X       TLDIR, COM(IPART), PSIDE, TPTHIC, PTOLI, PTOLO, IPTOOL,    00011600
     X           TUL, PSAVE(1), PSAVE(2), TSCALH,TSTEPO, TSTEPM,        00011700
     X           AMAXDP, ELMAX, MAXCL, MICLSK, IQUAL,                   00011800
     X           TE, TA, TD, PAR, IRR)                                  00011900
      IF(IRR.NE.0) GO TO 999                                            00012000
C                                                                       00012100
C---      INCREMENT COUNT OF CALLS TO SSPATH, QUIT WHEN OVER LIMIT      00012110
      IPATHK=IPATHK+1                                                   00012120
      IF(IPATHK.GE.MXPATH) GO TO 999                                    00012130
C---IF THE THIRD FEED RATE IS AVAILABLE AND LIFTUP SPECIFIED            00012200
C---THEN USE THE PLUNGE PROCEDURE                                       00012300
      IF(SSTEP(3).LT.SMAL) GO TO 260                                    00012400
      IF(FED(3).GT.SMAL) CALL FEDPUT(FED(3))                            00012500
      MMAXCL=1                                                          00012600
      MICLSK=0                                                          00012700
      DO 270 I=1,4                                                      00012800
  270 PLIM(I)=DLIM(I)                                                   00012900
      CALL CLPUT(TE,TA,-1)                                              00013000
C---DROP BACK TO THE SURFACE AT THE PLUNGE FEED RATE                    00013100
C                                                                       00013200
      UST=PAR(1)                                                        00013300
      VST=PAR(2)                                                        00013400
      CALL SSPATH( COM(IDRIV), MIDTYP, TPDIR, DTOL, DSTEP, DOFSET,      00013500
     X           PLIM, IDTOOL, IAXIS, AXIS, ITLDIR,                     00013600
     X       TLDIR, COM(IPART),  PSIDE, PTHICK, PTOLI, PTOLO, IPTOOL,   00013700
     X            TUL, UST,  VST, TSCALH, TSTEPO, TSTEPM,               00013800
     X            AMAXDP, ELMAX, MMAXCL, MICLSK, IQUAL,                 00013900
     X            TE, TA, TD, PAR, IRR)                                 00014000
      IF(IRR.NE.0) GO TO 999                                            00014010
C                                                                       00014100
C---      INCREMENT COUNT OF CALLS TO SSPATH, QUIT WHEN OVER LIMIT      00014110
      IPATHK=IPATHK+1                                                   00014120
      IF(IPATHK.GE.MXPATH) GO TO 999                                    00014130
  260 CONTINUE                                                          00014200
C                                                                       00014300
C--- NOW CONTINUE BY ZAGGING DOWN NEXT CUT PATH                         00014400
  300 CONTINUE                                                          00014500
      IPASS=IPASS+1                                                     00014600
C---      MOD(IBUG,100) IS THE PASS NUMBER WHEN IBUG SHOULD BE RESET    00014610
      IBUGT=MOD(IBUG,100)                                               00014620
      IF(IBUG/100.EQ.IPASS) IBUG=IBUGT                                  00014630
      ICLSKP=1                                                          00014700
      DO 310 I=1,4                                                      00014800
  310 PLIM(I)=DLIM(I)                                                   00014900
      DSTEP=ONE                                                         00015000
      SCALHT=SSTEP(1)                                                   00015100
      STEPMX=SSTEP(2)                                                   00015200
      STEPOV=ZERO                                                       00015300
C                                                                       00015400
C---GENERATE FEED RATE FOR PATH MOTION                                  00015500
      IF(FED(1).GT.SMAL) CALL FEDPUT(FED(1))                            00015600
      GO TO 120                                                         00015700
C                                                                       00015800
C                                                                       00015900
  500 CONTINUE                                                          00016000
C---PICKFD PATTERN MACHINING                                            00016100
C---CUTTER ZIGS ALONG MAIN PATH COMPUTING SCALOP FOR NEXT PASS          00016200
C---IT THEN RETRACTS AT RAPID TO THE CLEARANCE PLANE                    00016300
C---RETRACTS TO A POSITION OVER THE FIRST POINT                         00016400
C---AND PLUNGES TO THE FIRST PATH POINT AT A REDUCED FEEDRATE           00016500
C---IT THEN STEPS OVER IN THE SAME MANNER AS THE ZIGZAG ROUTINE         00016600
C---AND PROCEEDS IN THE SAME DIRECTION DOWN THE NEXT PATH               00016700
      IPASS=1                                                           00016800
      IFIN=0                                                            00016900
      ICLSKP=0                                                          00017000
      IF(ISKP.EQ.1) ICLSKP=1                                            00017100
      IPART=PGEOM(4)                                                    00017200
      IDRIV=DGEOM(4)                                                    00017300
      PAR(1)=UST                                                        00017400
      PAR(2)=VST                                                        00017500
      DSTEP=ONE                                                         00017600
      SCALHT=SSTEP(1)                                                   00017700
      STEPMX=SSTEP(2)                                                   00017800
      STEPOV=ZERO                                                       00017900
C---GENERATE LIMITS BASED ON A SECTOR OF THE BOUNDED REGION             00018000
      I=1                                                               00018100
      IF(IDTYPE.EQ.2) I=2                                               00018200
      ADIR(I)=PDIR                                                      00018300
      ADIR(3-I)=CDIR                                                    00018400
      DO 750 I=1,2                                                      00018500
      IF(ADIR(I).LT.ZERO) GO TO 720                                     00018600
      ALIM(2*I-1)=PAR(I)                                                00018700
      ALIM(2*I)=DLIM(2*I)                                               00018800
      GO TO 750                                                         00018900
  720 CONTINUE                                                          00019000
      ALIM(2*I-1)=DLIM(2*I-1)                                           00019100
      ALIM(2*I)=PAR(I)                                                  00019200
  750 CONTINUE                                                          00019300
      IF(IBUG.EQ.11) CALL BAD(-4,1,'ALIM',ALIM)                         00019400
      IF(IBUG.EQ.11) CALL BAD(-2,1,'ADIR',ADIR)                         00019500
C                                                                       00019600
  520 CONTINUE                                                          00019700
C---COMMON ENTRY POINT FOR CONSECUTIVE PASSES IN MAIN DIRECTION.        00019800
      IF(IBUG.NE.11) GO TO 505                                          00019900
      CALL BAD(-1,0,' ',0)                                              00020000
      CALL BAD(1,0,'PASS',IPASS)                                        00020100
      CALL BAD(-2,1,'PAR ',PAR)                                         00020200
  505 CONTINUE                                                          00020300
C                                                                       00020400
      DO 510 I=1,4                                                      00020500
  510 PLIM(I)=ALIM(I)                                                   00020600
      TPDIR=PDIR                                                        00020700
      IRR=0                                                             00020800
      CALL CLPUT(TE,TA,-1)                                              00020900
C                                                                       00021000
C---FIRST DO A STARTUP TO SAVE THE FIRST PATH POINT                     00021100
      MICLSK=-1                                                         00021200
      MMAXCL=1                                                          00021300
C                                                                       00021400
      CALL SSPATH( COM(IDRIV), IDTYPE, TPDIR, DTOL, DSTEP, DOFSET,      00021500
     X           PLIM, IDTOOL, IAXIS, AXIS, ITLDIR,                     00021600
     X       TLDIR, COM(IPART), PSIDE, PTHICK, PTOLI, PTOLO, IPTOOL,    00021700
     X           TUL, PAR(1), PAR(2), SCALHT, STEPOV, STEPMX,           00021800
     X           AMAXDP, ELMAX, MMAXCL, MICLSK, IQUAL,                  00021900
     X          SVTE,SVTA,SVTD, PAR, IRR)                               00022000
      IF(IRR.NE.0) GO TO 999                                            00022100
C---      INCREMENT COUNT OF CALLS TO SSPATH, QUIT WHEN OVER LIMIT      00022110
      IPATHK=IPATHK+1                                                   00022120
      IF(IPATHK.GE.MXPATH) GO TO 999                                    00022130
C                                                                       00022200
C---NOW PROCEED DOWN PATH IN NORMAL FASHION                             00022300
      ICLSKP=0                                                          00022400
      IF(IPASS.EQ.1.AND.ISKP.GT.0) ICLSKP=1                             00022500
C                                                                       00022600
      UST=PAR(1)                                                        00022700
      VST=PAR(2)                                                        00022800
      CALL SSPATH( COM(IDRIV), IDTYPE, TPDIR, DTOL, DSTEP, DOFSET,      00022900
     X           PLIM, IDTOOL, IAXIS, AXIS, ITLDIR,                     00023000
     X       TLDIR, COM(IPART), PSIDE, PTHICK, PTOLI, PTOLO, IPTOOL,    00023100
     X           TUL, UST,  VST, SCALHT, STEPOV, STEPMX,                00023200
     X           AMAXDP, ELMAX, MAXCL, ICLSKP, IQUAL,                   00023300
     X           TE, TA, TD, PAR, IRR )                                 00023400
C                                                                       00023500
      IF(IRR.NE.0) GO TO 999                                            00023600
C---      INCREMENT COUNT OF CALLS TO SSPATH, QUIT WHEN OVER LIMIT      00023610
      IPATHK=IPATHK+1                                                   00023620
      IF(IPATHK.GE.MXPATH) GO TO 999                                    00023630
C---TERMINATE PROCESS WHEN IFIN IS NOT ZERO.                            00023700
      IF(IFIN.EQ.1) GO TO 999                                           00023800
C---RESTORE THE PARAMETERS TO THEIR INITIAL VALUES                      00023900
      PAR(1)=UST                                                        00024000
      PAR(2)=VST                                                        00024100
C---NOW RETRACT TO CLEARANCE PLANE AT RAPID                             00024200
      IF(FED(4).GT.SMAL) CALL FEDPUT(FED(4))                            00024300
C                                                                       00024400
      CALL CLPUT(TE,TA,-1)                                              00024500
      CALL CLIFT(TE,CLRPLN,TE)                                          00024600
      CALL CLPUT(TE,TA,0)                                               00024700
C---POSITION OVER BEGINNING CL POINT OF THIS PATH                       00024800
      CALL CLIFT(SVTE,CLRPLN,TE)                                        00024900
      CALL CLPUT(TE,SVTA,1)                                             00025000
C---NOW ACTIVATE THE PLUNGE FEED RATE                                   00025100
      IF(FED(3).GT.SMAL) CALL FEDPUT(FED(3))                            00025200
      CALL CLPUT(TE,TA,-1)                                              00025300
      CALL CLPUT(SVTE,SVTA,1)                                           00025400
C---NOW MAKE SIDE STEP MOVE FOR NEXT TOOL PASS                          00025500
      TPDIR=CDIR                                                        00025600
      MIDTYP=3-IDTYPE                                                   00025700
      ICR=2                                                             00025800
      IF(IDTYPE.EQ.2) ICR=1                                             00025900
      ILC=2*ICR-1                                                       00026000
      DO 610 I=1,2                                                      00026100
  610 PSAVE(I)=PAR(I)                                                   00026200
      CALL PCHG(PAR(ICR),CDIR,STEPOV)                                   00026300
      PAR(ICR)=PAR(ICR)+CDIR*STEPOV                                     00026400
      DO 620 I=1,4                                                      00026500
  620 PLIM(I)=ALIM(I)                                                   00026600
      IF(PAR(ICR).LT.ALIM(ILC)+SMAL.AND.CDIR.LT.ZERO) IFIN=1            00026700
      IF(PAR(ICR).LT.ALIM(ILC)+SMAL.AND.CDIR.LT.ZERO)PAR(ICR)=ALIM(ILC) 00026750
      IF(PAR(ICR).GT.ALIM(ILC+1)-SMAL.AND.CDIR.GT.ZERO) IFIN=1          00026800
      IF(PAR(ICR).GT.ALIM(ILC+1)-SMAL.AND.CDIR.GT.ZERO)PAR(ICR)=        00026850
     X   ALIM(ILC+1)                                                    00026855
C---NOW TEMPORARILY LOAD NEW LIMITS FOR SIDE STEPPING                   00026900
      IF(CDIR.LT.ZERO) GO TO 630                                        00027000
      PLIM(ILC)=PSAVE(ICR)                                              00027100
      PLIM(ILC+1)=PAR(ICR)                                              00027200
      GO TO 640                                                         00027300
C                                                                       00027400
  630 CONTINUE                                                          00027500
      PLIM(ILC)=PAR(ICR)                                                00027600
      PLIM(ILC+1)=PSAVE(ICR)                                            00027700
  640 CONTINUE                                                          00027800
C                                                                       00027900
      TSCALH=ZERO                                                       00028000
      TSTEPO=ZERO                                                       00028100
      TSTEPM=ZERO                                                       00028200
      TPTHIC=SSTEP(3)+PTHICK                                            00028300
      MICLSK=1                                                          00028400
      IF(SSTEP(3).GT.SMAL) MICLSK=0                                     00028500
C                                                                       00028600
      IF(FED(2).GT.SMAL) CALL FEDPUT(FED(2))                            00028700
      CALL CLPUT(TE,TA,-1)                                              00028800
C                                                                       00028900
      IF(IBUG.NE.11) GO TO 650                                          00029000
      CALL BAD(-1,0,' ',0)                                              00029100
      CALL BAD(1,0,'STEP',IPASS)                                        00029200
      CALL BAD(2,1,'PSAV',PSAVE)                                        00029300
      CALL BAD(-2,1,'PAR ',PAR)                                         00029400
  650 CONTINUE                                                          00029500
C                                                                       00029600
      CALL SSPATH( COM(IDRIV), MIDTYP, TPDIR, DTOL, DSTEP, DOFSET,      00029700
     X           PLIM, IDTOOL, IAXIS, AXIS, ITLDIR,                     00029800
     X       TLDIR, COM(IPART), PSIDE, TPTHIC, PTOLI, PTOLO, IPTOOL,    00029900
     X           TUL, PSAVE(1), PSAVE(2), TSCALH,TSTEPO, TSTEPM,        00030000
     X           AMAXDP, ELMAX, MAXCL, MICLSK, IQUAL,                   00030100
     X           TE, TA, TD, PAR, IRR)                                  00030200
      IF(IRR.NE.0) GO TO 999                                            00030300
C---      INCREMENT COUNT OF CALLS TO SSPATH, QUIT WHEN OVER LIMIT      00030310
      IPATHK=IPATHK+1                                                   00030320
      IF(IPATHK.GE.MXPATH) GO TO 999                                    00030330
C                                                                       00030400
C---IF THE THIRD FEED RATE IS AVAILABLE AND LIFTUP SPECIFIED            00030500
C---THEN USE THE PLUNGE PROCEDURE                                       00030600
      IF(SSTEP(3).LT.SMAL) GO TO 660                                    00030700
      IF(FED(3).GT.SMAL) CALL FEDPUT(FED(3))                            00030800
      MMAXCL=1                                                          00030900
      MICLSK=0                                                          00031000
      DO 670 I=1,4                                                      00031100
  670 PLIM(I)=ALIM(I)                                                   00031200
      CALL CLPUT(TE,TA,-1)                                              00031300
C                                                                       00031400
      UST=PAR(1)                                                        00031500
      VST=PAR(2)                                                        00031600
      CALL SSPATH( COM(IDRIV), MIDTYP, TPDIR, DTOL, DSTEP, DOFSET,      00031700
     X           PLIM, IDTOOL, IAXIS, AXIS, ITLDIR,                     00031800
     X       TLDIR, COM(IPART),  PSIDE, PTHICK, PTOLI, PTOLO, IPTOOL,   00031900
     X            TUL, UST,  VST, TSCALH, TSTEPO, TSTEPM,               00032000
     X            AMAXDP, ELMAX, MMAXCL, MICLSK, IQUAL,                 00032100
     X            TE, TA, TD, PAR, IRR)                                 00032200
      IF(IRR.NE.0) GO TO 999                                            00032210
C                                                                       00032300
C---      INCREMENT COUNT OF CALLS TO SSPATH, QUIT WHEN OVER LIMIT      00032310
      IPATHK=IPATHK+1                                                   00032320
      IF(IPATHK.GE.MXPATH) GO TO 999                                    00032330
  660 CONTINUE                                                          00032400
C                                                                       00032500
C---NOW RESET PARAMETERS FOR MOVING DOWN NEXT CUT PATH                  00032600
  700 CONTINUE                                                          00032700
      IPASS=IPASS+1                                                     00032800
C---      MOD(IBUG,100) IS THE PASS NUMBER WHEN IBUG SHOULD BE RESET    00032810
      IBUGT=MOD(IBUG,100)                                               00032820
      IF(IBUG/100.EQ.IPASS) IBUG=IBUGT                                  00032830
      ICLSKP=1                                                          00032900
      DO 710 I=1,4                                                      00033000
  710 PLIM(I)=ALIM(I)                                                   00033100
      DSTEP=ONE                                                         00033200
      SCALHT=SSTEP(1)                                                   00033300
      STEPMX=SSTEP(2)                                                   00033400
      STEPOV=ZERO                                                       00033500
C                                                                       00033600
      IF(FED(1).GT.SMAL) CALL FEDPUT(FED(1))                            00033700
      GO TO 520                                                         00033800
C                                                                       00033900
  999 CONTINUE                                                          00034000
      RETURN                                                            00034100
      END                                                               00034200
**** SOURCE FILE : M0001067.W02   ***
*
      SUBROUTINE DGEOM(DSURF,IDTYPE,U,V,IDAXIS,DAXIS,                   00000100
     X      ITLDIR,TLDIR,DTOL,DR,U1,V1,NPAT,CX)                         00000200
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000300
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000400
C--PURPOSE IS TO GENERATE ALL NECESSARY INFORMATION AT CURRENT          00000500
C--POINT U,V OF DRIVE GEOMETRY.  INPUT PARAMETERS ALL EXPLAINED         00000600
C--IN PATH                                                              00000700
C--OUTPUT                                                               00000800
C--DR  ARRAY CONTAINING ALL RELEVANT CURVE INFORMATION AT POINT U,V     00000900
C-- DR(1-3) = DRIVE GEOMETRY POINT                                      00001000
C-- DR(5-7) = DRIVE GEOMETRY TANSPL VECTOR                              00001100
C-- DR(9-11) = DRIVE GEOMETRY SECOND DERIVATIVE                         00001200
C-- DR(13-15) = DRIVE GEOMETRY UNIT TANGENT VECTOR                      00001300
C-- DR(17-19) = TOOL AXIS ORIENTATION                                   00001400
C-- DR(21-23) = TOOL DIRECTION TOWARD PART SURFACE                      00001500
C-- DR(25,26)  CURVATURE AND STEP SIZE BASED ON DTOL                    00001600
C--- DR(27) = MAXIMUM STEP IN THE DRIVE SURFACE DIRECTION.              00001610
C-- DR(29-31) = CRSSPL TANGENT(IF AVAILABLE)                            00001700
C-- DR(33-35) = DRIVE GEOMETRY SURFACE NORMAL(IF AVAILABLE)             00001800
C                                                                       00001900
      DIMENSION DSURF(*),DAXIS(*),TLDIR(*),DR(*)                        00002000
      DIMENSION CX(32)                                                  00002100
      DIMENSION B(64),IFLAG(6),ITOP(6,4)                                00002200
      DIMENSION VEC(3)                                                  00002300
      CHARACTER*20 BADMSG                                               00002310
      DATA NLAST/0/                                                     00002400
      DATA ZERO,ONE,SMAL,HSMAL/0.0D0,1.0D0,1.0D-38,1.D-19/              00002500
      DATA BIG/1.0D+10/                                                 00002600
      DATA ARECSV/0.0D0/,QSMAL/1.0D-6/                                  00002610
C                                                                       00002700
      DO 5 I=1,36                                                       00002800
    5 DR(I)=ZERO                                                        00002900
C--SEPARATE CURVE AND SURFACE CASES IMMEDIATLY                          00003000
      IF(IDTYPE.NE.0) GO TO 100                                         00003100
C--SCURV DRIVE GEOMETRY.  EVALUATE CROSS DERIVS ONLY IF VARIABLE        00003200
C--TOOL AXIS OR DIRECTION IS REQUESTED                                  00003300
      ICROS=1                                                           00003400
      IF(ITLDIR.NE.0.OR.IDAXIS.NE.0) ICROS=2                            00003500
      CALL CURFLO(U,DSURF,CX,ICROS,0)                                   00003600
      IF(IBUG.NE.11) GO TO 8809                                         00003700
      JLIM=ICROS*16                                                     00003800
      CALL BAD(-JLIM,1,'CFLO',CX)                                       00003900
 8809 CONTINUE                                                          00004000
      DO 10 I=1,16                                                      00004100
   10 DR(I)=CX(I)                                                       00004200
C--SET AXIS ACCORDING TO IDAXIS SETTING                                 00004300
      IF (ABS(IDAXIS).LE.1) THEN                                        00004310
      CALL AXSET(IDAXIS,DAXIS,CX(17),DR(17))                            00004400
      ELSE                                                              00004410
        CALL AXSET(IDAXIS,CX(13),CX(17),DR(17))                         00004420
      ENDIF                                                             00004430
C--SET THE TOOL DIRECTION NEXT                                          00004500
      CALL AXSET(ITLDIR,TLDIR,CX(17),DR(21))                            00004600
      GO TO 200                                                         00004700
C                                                                       00004800
  100 CONTINUE                                                          00004900
C--CASE OF MESH STRUCTURED DRIVE SURFACE.                               00005000
      CALL MESCON(DSURF,U,V,NPAT,U1,V1,1)                               00005100
      IF(NLAST.NE.NPAT.OR.DSURF(1).NE.ARECSV)  CALL                     00005200
     X      LODPCH(DSURF,B,IFLAG,ITOP,NPAT,3)                           00005210
      NLAST=NPAT                                                        00005300
      ARECSV=DSURF(1)                                                   00005310
      CALL CNSURF(U1,V1,B,CX,IFLAG,1)                                   00005400
C--PICK UP TANSPL FIRST AND SECOND DERIVATIVES IF IDTYPE=1              00005500
C--PICK UP CRSSPL FIRST AND SECOND DERIVATIVES IF IDTYPE=2              00005600
      JTAN=4                                                            00005700
      IF(IDTYPE.EQ.2) JTAN=8                                            00005800
      JACC=12                                                           00005900
      IF(IDTYPE.EQ.2) JACC=20                                           00006000
      JCRS=8                                                            00006100
      IF(IDTYPE.EQ.2) JCRS=4                                            00006200
      JNORM=28                                                          00006300
      DO 110 I=1,4                                                      00006400
      DR(I)=CX(I)                                                       00006500
      DR(I+4)=CX(JTAN+I)                                                00006600
      DR(I+8)=CX(JACC+I)                                                00006700
      DR(I+28)=CX(I+JCRS)                                               00006800
      DR(I+32)=CX(I+JNORM)                                              00006900
  110 CONTINUE                                                          00007000
      CALL DOTF(SIZ,DR(5),DR(5))                                        00007100
      IF(SIZ.LT.SMAL) GO TO 120                                         00007200
      SIZ=DSQRT(SIZ)                                                    00007300
      DO 130 I=1,3                                                      00007400
  130 DR(12+I)=DR(4+I)/SIZ                                              00007500
      DR(16)=ONE                                                        00007600
  120 CONTINUE                                                          00007700
C--SET THE TOOL AXIS FIRST                                              00007800
      IF (ABS(IDAXIS).LE.1) THEN                                        00007810
      CALL AXSET(IDAXIS,DAXIS,CX(29),DR(17))                            00007900
      ELSE                                                              00007910
        CALL AXSET(IDAXIS,DR(29),CX(29),DR(17))                         00007920
      ENDIF                                                             00007930
C--SET THE TOOL DIRECTION NEXT                                          00008000
      CALL AXSET(ITLDIR,TLDIR,CX(29),DR(21))                            00008100
C                                                                       00008200
  200 CONTINUE                                                          00008300
C--COMPUTE CURVATURE AND STEP SIZE OF CURVE AT THIS POINT               00008400
C                                                                       00008500
      CALL DOTF(TNSQ,DR(5),DR(5))                                       00008600
      IF(TNSQ.LT.HSMAL) GO TO 230                                       00008700
C                                                                       00009200
      CALL CROSS(DR(5),DR(9),VEC)                                       00009300
      CALL DOTF(VECSQ,VEC,VEC)                                          00009400
      IF(VECSQ.LT.SMAL) GO TO 230                                       00009500
      CK=DSQRT(VECSQ)/(DSQRT(TNSQ))**3                                  00009600
      IF(CK.GT.HSMAL) GO TO 240                                         00009700
  230 CONTINUE                                                          00009800
C--CURVATURE IS VERY SLIGHT                                             00009900
      CK=ZERO                                                           00010000
      STEP=BIG                                                          00010100
      GO TO 300                                                         00010200
C                                                                       00010300
  240 CONTINUE                                                          00010400
      RAD=ONE/CK                                                        00010500
      STEP=(RAD+RAD-DTOL)*DTOL                                          00010600
      IF(STEP.LT.QSMAL) GO TO 230                                       00010700
      STEP=2.*DSQRT(STEP)                                               00010800
C                                                                       00010900
  300 CONTINUE                                                          00011000
      DR(25)=CK                                                         00011100
      DR(26)=STEP                                                       00011200
      DR(27)=ONE                                                        00011210
      IF(TNSQ.GT.SMAL) DR(27)=STEP/DSQRT(TNSQ)                          00011220
C                                                                       00011300
  999 CONTINUE                                                          00011400
      IF(IBUG.NE.11) GO TO 1999                                         00011500
      CALL BAD(-1,0,' ',0)                                              00011610
      BADMSG=' AFTER DGEOM'                                             00011620
      CALL CPRINT(BADMSG)                                               00011630
      CALL BAD(1,1,'U   ',U)                                            00011700
      CALL BAD(1,1,'V   ',V)                                            00011800
      CALL BAD(1,0,'IDTP',IDTYPE)                                       00011900
      CALL BAD(1,0,'IDAX',IDAXIS)                                       00012000
      CALL BAD(-1,0,'ITLD',ITLDIR)                                      00012100
      DO  1998 I=1,33,4                                                 00012200
      CALL BAD(-4,1,'DR  ',DR(I))                                       00012300
 1998 CONTINUE                                                          00012400
 1999 CONTINUE                                                          00012500
      RETURN                                                            00012600
      END                                                               00012700
**** SOURCE FILE : M0001068.V05   ***
*
      SUBROUTINE FEDPUT(FEED)                                           00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000300
      INTEGER ITEMP(2),BCDF                                             00000410
      EQUIVALENCE (FEDRAT,ITEMP(1))                                     00000420
C                                                                       00000430
C                                                                       00000440
      ITEMP(1) = BCDF('FEDR')                                           00000450
      ITEMP(2) = BCDF('AT  ')                                           00000460
      CALL APT299(1,FEDRAT,1,FEED)                                      00000500
      IF(IBUG.NE.11) GO TO 999                                          00000600
      CALL BAD(-1,0,' ',0)                                              00000700
      CALL BAD(-1,1,'FEED',FEED)                                        00000800
      CALL BAD(-1,0,' ',0)                                              00000900
  999 CONTINUE                                                          00001000
      RETURN                                                            00001100
      END                                                               00001200
**** SOURCE FILE : M0001070.W02   ***
*
      SUBROUTINE GETAPT(TUL,PTOLI,PTOLO,DTOL,AMAXDP,ZELMAX,INUM,IRR)    00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C--PURPOSE IS TO FETCH ADDITIONAL APT VARIABLES REQUIRED FOR            00000300
C--SMIL TOOL PATH GENERATION.                                           00000400
C                                                                       00000499
      INCLUDE 'TOTAL.INC'                                               00001501
      INCLUDE 'FXCOR.INC'                                               00004301
      INCLUDE 'SV.INC'                                                  00008801
      INCLUDE 'IFXCOR.INC'                                              00010901
C                                                                       00012202
      DIMENSION TUL(7)                                                  00012300
      COMMON/ADDCOM/ADDCOM(25)                                          00012400
      EQUIVALENCE (ADDCOM(1), ELMAX)                                    00012500
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00012600
C                                                                       00012700
      DATA SMAL/1.0D-14/                                                00012800
C                                                                       00012900
C--FETCH TOOL AND VERIFY THAT IT IS ACCEPTABLE                          00013000
      TUL(1)=CUTDAT(2)                                                  00013100
      TUL(2)=CUTDAT(1)                                                  00013200
      TUL(3)=CUTDAT(3)                                                  00013300
      IF(TUL(1)**2+TUL(3)**2.LT.SMAL) TUL(3)=TUL(2)                     00013310
      TUL(4)=CUTDAT(4)-CUTDAT(2)                                        00013400
      TUL(5)=CUTDAT(5)                                                  00013402
      TUL(6)=CUTDAT(6)                                                  00013404
      TUL(7)=CUTDAT(7)                                                  00013406
      IF(IBUG.EQ.11) CALL BAD(-7,1,'CUTD',CUTDAT)                       00013410
C                                                                       00013500
      PTOLO=DABS(TAU1(IPS))                                             00013600
      PTOLI=DABS(TAU2(IPS))                                             00013700
      DTOL=DABS(TAU1(IDS))                                              00013800
      IF(DTOL.LT.SMAL) DTOL=DABS(TAU2(IDS))                             00013810
      AMAXDP=DPMAX                                                      00013900
      ZELMAX=ELMAX                                                      00014000
      INUM=NMPNTS                                                       00014100
      IRR=0                                                             00014200
      GO TO 999                                                         00014300
  998 CONTINUE                                                          00014400
      IF(IBUG.EQ.11) CALL BAD(-7,1,'CUTD',CUTDAT)                       00014500
C                                                                       00014600
  999 CONTINUE                                                          00014700
      RETURN                                                            00014800
      END                                                               00014900
**** SOURCE FILE : M0001072.W01   ***
*
      SUBROUTINE GFETCH(NBIG,MAXLDA,COM,DGEOM,PGEOM,IRR)                00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC                                   00000300
      DIMENSION DUMREC(3)                                               00000400
      DIMENSION COM(*),DGEOM(*),PGEOM(*)                                00000500
      LOGICAL CKDEF                                                     00000510
      EQUIVALENCE (JJ,AA)                                               00000600
      CHARACTER*20 BADMSG                                               00000610
      DATA ZERO,ONE,ASCURV,ASSURF/0.0D0,1.0D0,30.0D0,29.0D0/            00000700
      DATA DUMREC/3*0.0D0/                                              00000800
C--PURPOSE IS TO LOAD PART AND DRIVE GEOMETRY BOTH INTO THE             00000900
C--ARRAY COM.  THE ADDRESS OF EACH IS THEN PLACED IN THE 4TH            00001000
C--LOCATIONS OF DGEOM AND PGEOM RESPECTIVELY                            00001100
C                                                                       00001200
      NLO=41                                                            00001300
      NHI=NLO+NBIG-1                                                    00001400
      ILOC=NHI+1                                                        00001500
      DO 10 I=NLO,NHI                                                   00001600
   10 COM(I)=ZERO                                                       00001700
      IRR=1                                                             00001800
      N=PGEOM(2)+DGEOM(2)                                               00001900
      IF(PGEOM(1).EQ.DGEOM(1)) N=PGEOM(2)                               00002000
      N=N+NBIG                                                          00002100
      IF(N.GT.MAXLDA) GO TO 998                                         00002200
C---      WRITE A NULL RECORD TO LET APT094 KNOW THAT BLANK COMMON      00002300
C---      HAS BEEN ALTERED                                              00002400
      DUMREC(2)=0.0                                                     00002500
      DUMREC(3)=NBIG                                                    00002600
      JMODE=1                                                           00002700
      CALL APT094(JMODE,DUMREC(2),COM(41))                              00002800
      IRR=4                                                             00002900
      IF(CKDEF(DUMREC)) GO TO 998                                       00003000
C--LOAD PART GEOMETRY FIRST                                             00003100
      JMODE=3                                                           00003200
      CALL APT094(JMODE,PGEOM(1),JJ)                                    00003300
      IRR=2                                                             00003400
      IF(CKDEF(PGEOM)) GO TO 998                                        00003500
      PGEOM(4)=JJ                                                       00003600
C--CHECK WHETHER PART AND DRIVE GEOMETRY ARE THE SAME                   00003700
      IF(DGEOM(1).NE.PGEOM(1)) GO TO 110                                00003800
      DGEOM(4)=PGEOM(4)                                                 00003900
      GO TO 200                                                         00004000
C--LOAD DRIVE GEOMETRY INTO CORE                                        00004100
  110 CONTINUE                                                          00004200
      JMODE=3                                                           00004300
      CALL APT094(JMODE,DGEOM(1),JJ)                                    00004400
      IRR=3                                                             00004500
      IF(CKDEF(DGEOM)) GO TO 998                                        00004600
      DGEOM(4)=JJ                                                       00004700
  200 CONTINUE                                                          00004800
      IRR=0                                                             00004900
C                                                                       00005000
  998 CONTINUE                                                          00005100
      IF(IBUG.NE.11) GO TO 999                                          00005200
      CALL BAD(-1,0,' ',0)                                              00005310
      BADMSG=' AFTER  GFETCH'                                           00005320
      CALL CPRINT(BADMSG)                                               00005330
      CALL BAD(1,0,'IRR ',IRR)                                          00005400
      CALL BAD(1,0,'JMOD',JMODE)                                        00005500
      CALL BAD(-1,0,'ILOC',ILOC)                                        00005600
      CALL BAD(-4,1,'PGEM',PGEOM(1))                                    00005700
      CALL BAD(-4,1,'DGEM',DGEOM(1))                                    00005800
      CALL BAD(-3,1,'DREC',DUMREC)                                      00005900
C                                                                       00006000
  999 CONTINUE                                                          00006100
      RETURN                                                            00006200
      END                                                               00006300
**** SOURCE FILE : M0011490.ORG   ***
*
      SUBROUTINE GOMILL                                                 M0000100
C                                                                       M0000200
C      DUMMY ROUTINE.   SODO   M0009479               DESIGNATED        M0000300
C      TO PROCESS THE START UP, THE SINGLE CUT AND THE MULTI CUT        M0000400
C      SEQUENCE STATEMENT OF THE PROPOSED REGIONAL MILLING.             M0000500
C                                                                       M0000600
      RETURN                                                            M0000700
      END                                                               M0000800
**** SOURCE FILE : M0001074.V02   ***
*
      SUBROUTINE KURSRF(R,SIDE,CX)                                      00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C           /-INPUT                                                     00000300
C           /-SURFACE POINT, FIRST AND SECOND DERIVATIVES IN R          00000400
C           /-SIDE(CUTTER SIDE) OF SURFACE =1 OR -1.                    00000500
C           /-OUTPUT                                                    00000600
C           /-SURFACE CURVATURE ANALYSIS, ALL DATA STORED IN CX         00000700
C                                                                       00000800
C           /-PURPOSE TO COMPUTE PRINCIPAL CURVATURES AND OTHER QUANTITI00000900
C           /-RELATED TO SURFACE AT THIS POINT.                         00001000
C                                                                       00001100
      COMMON/IBUGG/IBUG,IPCOMC,IPCOLC                                   00001200
      DIMENSION R(32),CX(24)                                            00001300
      DIMENSION DVEC(3)                                                 00001400
      DATA DVEC/0.13D0,0.23D0,0.33D0/                                   00001500
      DATA ZERO,ONE/0.0D0,1.0D0/                                        00001600
      DATA SMAL/1.0D-19/                                                00001700
C                                                                       00001800
      DO 5 I=1,24                                                       00001900
    5 CX(I)=ZERO                                                        00002000
C                                                                       00002100
C           /-COMPUTE G11,G12,G22                                       00002200
      CALL DOTV(CX(13),R(5),R(5))                                       00002300
      CALL DOTV(CX(14),R(5),R(9))                                       00002400
      CALL DOTV(CX(15),R(9),R(9))                                       00002500
      CX(16)=ONE                                                        00002600
C           /-COMPUTE L11,L12,L22                                       00002700
      CALL DOTV(CX(17),R(13),R(29))                                     00002800
      CALL DOTV(CX(18),R(17),R(29))                                     00002900
      CALL DOTV(CX(19),R(21),R(29))                                     00003000
      DO 10 I=17,19                                                     00003100
   10 CX(I)=SIDE*CX(I)                                                  00003200
      CX(20)=ONE                                                        00003300
C           /-COMPUTE COEFFICIENTS OF CURVATURE EQUATION A.KSQ+B.K+C=0  00003400
C           /-A=DET(G),B=-(L11*G22-2*L12G12+L22*G11),C=DET(L)           00003500
      CX(21)=CX(13)*CX(15)-CX(14)**2                                    00003600
      CX(22)=-(CX(13)*CX(19)-2.*CX(14)*CX(18)+CX(15)*CX(17))            00003700
      CX(23)=CX(17)*CX(19)-CX(18)**2                                    00003800
      CX(24)=ONE                                                        00003900
C           /-SOLVE THIS EQUATION TO OBTAIN TWO PRINCIPAL CURVATURES    00004000
      DISC=CX(22)**2-4.*CX(21)*CX(23)                                   00004100
      DISC=DMAX1(ZERO,DISC)                                             00004200
      DISC=DSQRT(DISC)                                                  00004300
      DENOM=CX(21)+CX(21)                                               00004400
      CX(1)=(-CX(22)+DISC)/DENOM                                        00004500
      CX(2)=(-CX(22)-DISC)/DENOM                                        00004600
      CX(4)=ONE                                                         00004700
C           /-FINALLY DETERMINE SPATIAL DIRECTIONS OF THESE CURVATURES  00004800
C           /- THE DIRECTION OF K IS ACHIEVED BY (-L12+KG12,L11-KG11)   00004900
C           /- IMISS IS THE COUNT OF THE NUMBER OF MISSES               00005000
      IMISS=0                                                           00005100
      DO 20 I=1,2                                                       00005200
      A=-(CX(18)-CX(I)*CX(14))                                          00005300
      B=CX(17)-CX(I)*CX(13)                                             00005400
      L=4*I                                                             00005500
      IF(DABS(A)+DABS(B).GT.SMAL) GO TO 50                              00005600
C            /-TRY AGAIN TO OBTAIN A NON ZERO A,B                       00005700
      A=-(CX(19)-CX(I)*CX(15))                                          00005800
      B=CX(18)-CX(I)*CX(14)                                             00005900
      IF(DABS(A)+DABS(B).GT.SMAL) GO TO 50                              00006000
      IMISS=IMISS+1                                                     00006100
      GO TO 20                                                          00006200
   50 CONTINUE                                                          00006300
      DO 30 J=1,3                                                       00006400
   30 CX(L+J)=A*R(J+4)+B*R(J+8)                                         00006500
      CALL VNORM(CX(L+1),CX(L+1))                                       00006600
      CX(L+4)=ONE                                                       00006700
      GO TO 100                                                         00006800
   20 CONTINUE                                                          00006900
C                                                                       00007000
  100 CONTINUE                                                          00007100
      IF(IMISS.EQ.2) GO TO 130                                          00007200
C-- A GOOD VECTOR WAS OBTAINED, COMPUTE THE OTHER BY CROSS PRODUCT      00007300
      LNXT=L+4                                                          00007400
      IF(L.EQ.8) LNXT=L-4                                               00007500
      CALL CROSS(CX(L+1),R(29),CX(LNXT+1))                              00007600
      CALL VNORM(CX(LNXT+1),CX(LNXT+1))                                 00007700
      CX(LNXT+4)=ONE                                                    00007800
      GO TO 140                                                         00007900
C-- NO GOOD VECTORS AVAILABLE, GENERATE ANY TWO NORMAL TO R(29)         00008000
  130 CONTINUE                                                          00008100
      CALL CROSS(DVEC,R(29),CX(5))                                      00008200
      CALL VNORM(CX(5),CX(5))                                           00008300
      CALL CROSS(CX(5),R(29),CX(9))                                     00008400
      CALL VNORM(CX(9),CX(9))                                           00008500
      CX(8)=ONE                                                         00008600
      CX(12)=ONE                                                        00008700
C                                                                       00008800
  140 CONTINUE                                                          00008900
C                                                                       00009000
      IF(IBUG.NE.11) GO TO 60                                           00009100
      DO 70 I=1,21,4                                                    00009200
      CALL BAD(-4,1,'KRSF',R(I))                                        00009300
   70 CONTINUE                                                          00009400
      DO 80 I=1,9,4                                                     00009500
      CALL BAD(-4,1,'CX  ',CX(I))                                       00009600
   80 CONTINUE                                                          00009700
C                                                                       00009800
   60 CONTINUE                                                          00009900
      RETURN                                                            00010000
      END                                                               00010100
**** SOURCE FILE : M0001079.W01   ***
*
      SUBROUTINE MESCON(SURF,U,V,NPAT,U1,V1,MODE)                       00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000300
C--PURPOSE IS TO CONVERT GLOBAL MESH COORDINATES U,V                    00000400
C--INTO LOCAL PATCH NUMBER(NPAT) AND LOCAL PATCH COORDINATES            00000500
C--U1,V1 IF MODE IS 1.  OTHERWISE THE REVERSE IF MODE IS 2              00000600
      DIMENSION SURF(*)                                                 00000700
      CHARACTER*20 BADMSG                                               00000710
      DATA ONE/1.0D0/                                                   00000800
      DATA TWO/2.D0/                                                    00000900
C                                                                       00001000
      NUMSPL=SURF(9)                                                    00001100
      NUMCRS=SURF(10)                                                   00001200
      ACRS=SURF(10)-TWO                                                 00001300
      ASPL=SURF(9)-TWO                                                  00001400
C                                                                       00001500
      IF(MODE.GT.1) GO TO 100                                           00001600
C--CONVERT GLOBAL U,V TO LOCAL PATCH NUMBER NPAT AND LOCAL U1,V1        00001700
      IU=1                                                              00001800
      IF(U.LT.ONE) GO TO 10                                             00001900
      IU=NUMCRS-1                                                       00002000
      IF(U.GE.ACRS) GO TO 10                                            00002100
      IU=IDINT(U)+1                                                     00002200
   10 CONTINUE                                                          00002300
      BASE=IU-1                                                         00002400
      U1=U-BASE                                                         00002500
C                                                                       00002600
      IV=1                                                              00002700
      IF(V.LT.ONE) GO TO 20                                             00002800
      IV=NUMSPL-1                                                       00002900
      IF(V.GE.ASPL) GO TO 20                                            00003000
      IV=IDINT(V)+1                                                     00003100
   20 CONTINUE                                                          00003200
      BASE=IV-1                                                         00003300
      V1=V-BASE                                                         00003400
C                                                                       00003500
      NPAT=IU+(IV-1)*(NUMCRS-1)                                         00003600
      GO TO 999                                                         00003700
C                                                                       00003800
  100 CONTINUE                                                          00003900
C--CONVERT NPAT,U1,V1 TO GLOBAL U,V                                     00004000
      IU=MOD(NPAT-1,NUMCRS-1)+1                                         00004100
      IV=(NPAT-1)/(NUMCRS-1)+1                                          00004200
      U=U1+IU-1                                                         00004300
      V=V1+IV-1                                                         00004400
C                                                                       00004500
  999 CONTINUE                                                          00004600
      IF(IBUG.NE.11) GO TO 1999                                         00004700
      CALL BAD(-1,0,' ',0)                                              00004810
      BADMSG=' AFTER MESCON'                                            00004820
      CALL CPRINT(BADMSG)                                               00004830
      CALL BAD(1,1,'U   ',U)                                            00004900
      CALL BAD(1,1,'V   ',V)                                            00005000
      CALL BAD(1,0,'NPAT',NPAT)                                         00005100
      CALL BAD(1,1,'U1  ',U1)                                           00005200
      CALL BAD(-1,1,'V1  ',V1)                                          00005300
      CALL BAD(-1,0,'MODE',MODE)                                        00005400
 1999 CONTINUE                                                          00005500
      RETURN                                                            00005600
      END                                                               00005700
**** SOURCE FILE : M0001082.W01   ***
*
      SUBROUTINE PCHG(PCUR,PDIR,PDEL)                                   00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM                                   00000300
      CHARACTER*20 BADMSG                                               00000310
      DATA ZERO,ONE,HALF,SMAL/0.D0,1.D0,0.5D0,1.D-14/                   00000400
      DATA SMAL1/1.0D-10/                                               00000500
C--PURPOSE IS TO MODIFY THE PARAMETRIC CHANGE PDEL SO AS                00000600
C--TO HIT OR APPROACH A JUNCTION POINT SMOOTHLY.                        00000700
C                                                                       00000800
      PIN=PDEL                                                          00000900
      A=ZERO                                                            00001000
      XX=PCUR                                                           00001100
      I=IDINT(XX)                                                       00001200
      A=I                                                               00001300
      IF(DABS(A-PCUR).GT.SMAL) GO TO 10                                 00001400
      PDEL=DMIN1(HALF,PDEL)                                             00001500
      GO TO 999                                                         00001600
C                                                                       00001700
   10 CONTINUE                                                          00001800
      PTARG=ZERO                                                        00001900
      XX=PDIR+PCUR                                                      00002000
      I=IDINT(XX)                                                       00002100
      PTARG=I                                                           00002200
      PMAX=DABS(PTARG-PCUR)                                             00002300
      PDEL=DMIN1(PMAX,PDEL)                                             00002400
      PHALF=HALF*PMAX                                                   00002500
      IF(PDEL.LT.PMAX.AND.PDEL.GT.PHALF) PDEL=PHALF                     00002600
C                                                                       00002700
  999 CONTINUE                                                          00002800
      PDEL=PDEL+SMAL1                                                   00002900
      IF(IBUG.NE.11) GO TO 1999                                         00003000
      CALL BAD(-1,0,' ',0)                                              00003110
      BADMSG=' AFTER PCHG'                                              00003120
      CALL CPRINT(BADMSG)                                               00003130
      CALL BAD(1,1,'PCUR',PCUR)                                         00003200
      CALL BAD(1,1,'PDIR',PDIR)                                         00003300
      CALL BAD(1,1,'PDEL',PDEL)                                         00003400
      CALL BAD(-1,1,'PIN ',PIN)                                         00003500
 1999 CONTINUE                                                          00003600
      RETURN                                                            00003700
      END                                                               00003800
**** SOURCE FILE : M0002902.W03   ***
*
      SUBROUTINE SCON                                                   00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---PURPOSE IS TO PICK UP THE DATA STREAM FROM AN SCON/ COMMAND         00000300
C--- AND DEVELOP THE RELATED DATA INTO LABELLED COMMON.                 00000400
C--- THE TRANSLATED DATA IS AVAILABLE IN BLANK COMMON STARTING          00000500
C---AT LOCATION ISTART(=42) .  THE FIRST VALUE IS A FLOATING            00000600
C---WORD WHICH GIVES THE NUMBER OF PERTINENT DATA ITEMS WHICH           00000700
C---FOLLOW.  EACH APT WORD OR VARIABLE IS PRECEEDED BY ITS              00000800
C---WORD WORD IDENTIFICATION                                            00000900
C                                                                       00001000
      INCLUDE 'BLANKCOM.INC'                                            00001110
C                                                                       00001200
      LOGICAL CKDEF                                                     00001300
C                                                                       00001310
      CHARACTER*6 WALL,WAT,WAXIS,WCLDAT,WCROSS,WCRSSP,WCS,WDS,WFEED,    00001320
     1 WIN,WINCR,WINIT,WMINUS,WNORMA,WNORMD,WNORMP,WOFF,WON,WOUT,       00001321
     2 WPARAM,WPATH,WPICKF,WPLANE,WPLUS,WPOINT,WPOSN,WPS,WSCALA,        00001322
     3 WSCURV,WSSURF,WSTEPO,WTANSP,WTO,WVECTO,WZIGZA                    00001323
      CHARACTER*6 WATANG,WCUTAN,WLEAD,WLAG                              00001324
      CHARACTER*6 CTEST                                                 00001330
C                                                                       00001400
      COMMON/IBUGG/IBUG,I1,I2                                           00001500
      COMMON/XDS/DGEOM(4),DLIM(4),TLDIR(3),DOFSET,ITLDIR,IDTOOL,NDS     00001600
      COMMON/XPS/PGEOM(4),PSIDE,PTHICK,IPTOOL,NPS                       00001700
      COMMON/XFEED/CLRPLN(4),FED(4),NCLRPL,NFEED                        00001800
      COMMON/XSTEPO/SSTEP(4),NSTEPO                                     00001900
      COMMON/XAXIS/AXIS(3),IAXIS,NAXIS                                  00002000
      INCLUDE 'TAC.INC'                                                 00002050
      INCLUDE 'ZNUMBR.INC'                                              00002060
C                                                                       00002100
C                                                                       00002200
C--WORD MODE VALUES IN REAL FORM AND HOLLERITH FORM.                    00002300
C--THESE ARE WORDS USED IN SMIL AND SCON COMMANDS                       00002400
C                                                                       00002500
      DATA AALL/50.D0/,WALL/'ALL   '/                                   00002600
      DATA AAT/66.D0/,WAT/'AT    '/                                     00002700
      DATA AAXIS/146.D0/,WAXIS/'AXIS  '/                                00002800
      DATA ACLDAT/69.D0/,WCLDAT/'CLDATA'/                               00002900
      DATA ACROSS/40.D0/,WCROSS/'CROSS '/                               00003000
      DATA ACRSSP/137.D0/,WCRSSP/'CRSSPL'/                              00003100
      DATA ACS/1.D0/,WCS/'CS    '/                                      00003200
      DATA ADS/1.D0/,WDS/'DS    '/                                      00003300
      DATA AFEED/163.D0/,WFEED/'FEED  '/                                00003400
      DATA AIN/20.D0/,WIN/'IN    '/                                     00003500
      DATA AINCR/57.D0/,WINCR/'INCR  '/                                 00003600
      DATA AINIT/161.D0/,WINIT/'INIT  '/                                00003700
      DATA AMINUS/41.D0/,WMINUS/'MINUS '/                               00003800
      DATA ANORMA/13.D0/,WNORMA/'NORMAL'/                               00003900
      DATA ANORMD/151.D0/,WNORMD/'NORMDS'/                              00004000
      DATA ANORMP/152.D0/,WNORMP/'NORMPS'/                              00004100
      DATA AOFF/50.D0/,WOFF/'OFF   '/                                   00004200
      DATA AON/3.D0/,WON/'ON    '/                                      00004300
      DATA AOUT/21.D0/,WOUT/'OUT   '/                                   00004400
      DATA APARAM/144.D0/,WPARAM/'PARAM '/                              00004500
      DATA APATH/165.D0/,WPATH/'PATH  '/                                00004600
      DATA APICKF/166.D0/,WPICKF/'PICKFD'/                              00004700
      DATA APLANE/2.D0/,WPLANE/'PLANE '/                                00004800
      DATA APLUS/42.D0/,WPLUS/'PLUS  '/                                 00004900
      DATA APOINT/19.D0/,WPOINT/'POINT '/                               00005000
      DATA APOSN/164.D0/,WPOSN/'POSN  '/                                00005100
      DATA APS/1.D0/,WPS/'PS    '/                                      00005200
      DATA ASCALA/21.D0/,WSCALA/'SCALAR'/                               00005300
      DATA ASCURV/30.D0/,WSCURV/'SCURV '/                               00005400
      DATA ASSURF/29.D0/,WSSURF/'SSURF '/                               00005500
      DATA ASTEPO/162.D0/,WSTEPO/'STEPOV'/                              00005600
      DATA ATANSP/136.D0/,WTANSP/'TANSPL'/                              00005700
      DATA ATO/3.D0/,WTO/'TO    '/                                      00005800
      DATA AVECTO/20.D0/,WVECTO/'VECTOR'/                               00005900
      DATA AZIGZA/61.D0/,WZIGZA/'ZIGZAG'/                               00006000
      DATA AATANG/10.D0/,WATANG/'ATANGL'/                               00006010
      DATA ACUTAN/71.D0/,WCUTAN/'CUTANG'/                               00006020
      DATA ALEAD/74.D0/,WLEAD/'LEAD  '/                                 00006030
      DATA ALAG/75.D0/,WLAG/'LAG   '/                                   00006040
C                                                                       00006100
      DATA ZERO,ONE/0.D0,1.D0/                                          00006200
      DATA SMAL/1.D-38/                                                 00006300
      DATA IBEGIN/42/,NOGOOD/-121/                                      00006400
      DATA NLAST/0/,NBIG/50/,IOK/121/                                   00006500
      DATA IRBASE/3520/                                                 00006600
C                                                                       00006700
      IF(NCLRPL.NE.IOK) NCLRPL=NOGOOD                                   00006800
      ICUR=IBEGIN                                                       00006900
      NLEN=COM(ICUR)                                                    00007000
      NLAST=IBEGIN+NLEN-2                                               00007100
      COM(NLAST)=ZERO                                                   00007200
      ICUR=ICUR+1                                                       00007300
C****    INPUT FIELD MUST BE OF REASONABLE LENGTH                       00007400
      IF(NLEN.LT.3.OR.NLEN.GT.NBIG) GO TO 995                           00007500
C                                                                       00007600
   10 CONTINUE                                                          00007700
      IF(ICUR.GE.NLAST) GO TO 998                                       00007800
C                                                                       00007900
      WORD=COM(ICUR)                                                    00008000
      IF(WORD.EQ.AINIT) GO TO 100                                       00008100
      CALL HOLFRM(COM(ICUR+1),CTEST,1,6,NWD)                            00008190
      IF(CTEST.EQ.WDS) GO TO 200                                        00008200
      IF(CTEST.EQ.WPS) GO TO 300                                        00008300
      IF(WORD.EQ.AFEED) GO TO 400                                       00008400
      IF(WORD.EQ.ASTEPO) GO TO 500                                      00008500
      IF(WORD.EQ.AAXIS) GO TO 600                                       00008600
C****    ERROR, WORD COMMAND WORD NOT RECOGNIZED                        00008700
      GO TO 998                                                         00008800
C                                                                       00008900
C---INIT COMMAND, FOR INTIALIZING DATA AREAS                            00009000
  100 CONTINUE                                                          00009100
      ICUR=ICUR+2                                                       00009200
      WORD=COM(ICUR)                                                    00009300
      IF(WORD.EQ.ADS) WORD=COM(ICUR+1)                                  00009400
      IALL=0                                                            00009500
      IF(WORD.EQ.AALL) IALL=1                                           00009600
C                                                                       00009700
  110 CONTINUE                                                          00009800
      CALL HOLFRM(WORD,CTEST,1,6,NWD)                                   00009890
      IF(CTEST.EQ.WDS .OR. IALL.EQ.1) GO TO 120                         00009900
      IF(CTEST.EQ.WPS .OR. IALL.EQ.2) GO TO 130                         00010000
      IF(WORD.EQ.AFEED.OR.IALL.EQ.3) GO TO 140                          00010100
      IF(WORD.EQ.ASTEPO.OR.IALL.EQ.4) GO TO 150                         00010200
      IF(WORD.EQ.AAXIS.OR.IALL.EQ.5) GO TO 160                          00010300
      GO TO 998                                                         00010400
  120 CONTINUE                                                          00010500
      NDS=NOGOOD                                                        00010600
      GO TO 190                                                         00010700
  130 CONTINUE                                                          00010800
      NPS=NOGOOD                                                        00010900
      GO TO 190                                                         00011000
  140 CONTINUE                                                          00011100
      NFEED=NOGOOD                                                      00011200
      GO TO 190                                                         00011300
  150 CONTINUE                                                          00011400
      NSTEPO=NOGOOD                                                     00011500
      GO TO 190                                                         00011600
  160 CONTINUE                                                          00011700
      NAXIS=NOGOOD                                                      00011800
      GO TO 190                                                         00011900
C                                                                       00012000
  190 CONTINUE                                                          00012100
      IF(IALL.NE.0) IALL=IALL+1                                         00012200
      IF(IALL.EQ.0) ICUR=ICUR+2                                         00012300
      WORD=COM(ICUR)                                                    00012400
      IF(IALL.LT.5.AND.ICUR.LT.NLAST) GO TO 110                         00012500
      IF(IALL.GT.0) ICUR=ICUR+2                                         00012600
      IF(ICUR.NE.NLAST) GO TO 995                                       00012700
C---PROCESSING FINISHED FOR INIT COMMAND                                00012800
      GO TO 999                                                         00012900
C                                                                       00013000
C---ENTRY POINT FOR DRIVE GEOMETRY INPUT                                00013100
  200 CONTINUE                                                          00013200
      NDS=NOGOOD                                                        00013300
C---CHECK FOR NUMBER OF INPUT SCALARS TO DISTINGUISH CURV AND SURF      00013400
      ICUR=ICUR+2                                                       00013500
      IF(COM(ICUR).EQ.ASCURV) GO TO 220                                 00013600
      IF(COM(ICUR).EQ.ASSURF) GO TO 260                                 00013700
      GO TO 998                                                         00013800
C                                                                       00013900
C---CURVE DRIVE GEOMETRY                                                00014000
C-- SCON/DS,CURV,PARAM,UST,UEND,AT OR ON,CRSSPL OR VECTOR               00014100
  220 CONTINUE                                                          00014200
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00014300
      DGEOM(1)=COM(ICUR+1)                                              00014400
      DGEOM(2)=COM(ICUR+2)                                              00014500
      DGEOM(4)=ZERO                                                     00014600
      DGEOM(3)=ASCURV                                                   00014700
      ICUR=ICUR+3                                                       00014800
      IF(COM(ICUR).NE.APARAM) GO TO 998                                 00014900
      ICUR=ICUR+2                                                       00015000
      IF(COM(ICUR).NE.ASCALA.OR.COM(ICUR+2).NE.ASCALA) GO TO 998        00015100
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00015200
      IF(CKDEF(COM(ICUR+3))) GO TO 997                                  00015300
      IF(COM(ICUR+1).GT.COM(ICUR+3)) GO TO 996                          00015400
      DLIM(1)=COM(ICUR+1)                                               00015500
      DLIM(2)=COM(ICUR+3)                                               00015600
      DLIM(3)=ZERO                                                      00015700
      DLIM(4)=ONE                                                       00015800
      ICUR=ICUR+4                                                       00015900
      CALL HOLFRM(COM(ICUR+1),CTEST,1,6,NWD)                            00015990
      IF(COM(ICUR).NE.AAT .AND. CTEST.NE.WON) GO TO 998                 00016000
      IDTOOL=0                                                          00016100
      IF(COM(ICUR).EQ.AAT) IDTOOL=1                                     00016200
      ICUR=ICUR+2                                                       00016300
      IF(COM(ICUR).NE.AVECTO.AND.COM(ICUR).NE.ACRSSP) GO TO 998         00016400
      IF(COM(ICUR).EQ.AVECTO) GO TO 230                                 00016500
      ITLDIR=1                                                          00016600
      DO 240 I=1,3                                                      00016700
  240 TLDIR(I)=ZERO                                                     00016800
      ICUR=ICUR+2                                                       00016900
      GO TO 290                                                         00017000
  230 CONTINUE                                                          00017100
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00017200
      CALL DOTF(VSQ,COM(ICUR+1),COM(ICUR+1))                            00017300
      IF(VSQ.LT.SMAL) GO TO 998                                         00017400
      VSQ=DSQRT(VSQ)                                                    00017500
      DO 250 I=1,3                                                      00017600
  250 TLDIR(I)=COM(ICUR+I)/VSQ                                          00017700
      ITLDIR=0                                                          00017800
      ICUR=ICUR+4                                                       00017900
      GO TO 290                                                         00018000
C                                                                       00018100
C--- SCON/DS,SURF,PARAM,ULO,UHI,VLO,VHI,AT OR ON, NORMAL OR VECTOR      00018200
  260 CONTINUE                                                          00018300
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00018400
      DGEOM(1)=COM(ICUR+1)                                              00018500
      DGEOM(2)=COM(ICUR+2)                                              00018600
      DGEOM(3)=ASSURF                                                   00018700
      DGEOM(4)=ZERO                                                     00018800
      ICUR=ICUR+3                                                       00018900
      IF(COM(ICUR).NE.APARAM) GO TO 998                                 00019000
      ICUR=ICUR+2                                                       00019100
      DO 265 I=1,4                                                      00019200
      JCUR=ICUR+2*I-2                                                   00019300
      IF(COM(JCUR).NE.ASCALA) GO TO 998                                 00019400
      IF(CKDEF(COM(JCUR+1))) GO TO 997                                  00019500
      DLIM(I)=COM(JCUR+1)                                               00019600
  265 CONTINUE                                                          00019700
      IF(DLIM(1).GT.DLIM(2).OR.DLIM(3).GT.DLIM(4)) GO TO 996            00019800
      ICUR=ICUR+8                                                       00019900
C                                                                       00020000
      IDTOOL=-1                                                         00020100
      IF(COM(ICUR).EQ.AAT) IDTOOL=1                                     00020200
      CALL HOLFRM(COM(ICUR+1),CTEST,1,6,NWD)                            00020290
      IF(CTEST.EQ.WON) IDTOOL=0                                         00020300
      IF(IDTOOL.LT.0) GO TO 998                                         00020400
C                                                                       00020500
      ICUR=ICUR+2                                                       00020600
      IF(COM(ICUR).EQ.ANORMA) GO TO 280                                 00020700
      IF(COM(ICUR).NE.AVECTO) GO TO 998                                 00020800
C-- VECTOR                                                              00020900
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00021000
      ITLDIR=0                                                          00021100
      CALL DOTF(VSQ,COM(ICUR+1),COM(ICUR+1))                            00021200
      IF(VSQ.LT.SMAL) GO TO 996                                         00021300
      VSQ=DSQRT(VSQ)                                                    00021400
      DO 270 I=1,3                                                      00021500
  270 TLDIR(I)=COM(ICUR+I)/VSQ                                          00021600
      ICUR=ICUR+4                                                       00021700
      GO TO 290                                                         00021800
C                                                                       00021900
  280 CONTINUE                                                          00022000
      ICUR=ICUR+2                                                       00022100
C--NORMAL CASE                                                          00022200
      ITLDIR=1                                                          00022300
      DO 285 I=1,3                                                      00022400
  285 TLDIR(I)=ZERO                                                     00022500
      GO TO 290                                                         00022600
C                                                                       00022700
  290 CONTINUE                                                          00022800
C---      OPTIONAL DRIVE POINT OFFSET INSERTED HERE                     00022900
      DOFSET=ZERO                                                       00022920
      IF(ICUR.EQ.NLAST) GO TO 295                                       00022940
C---      LOOK FOR A SCALAR                                             00022960
      IF(COM(ICUR).NE.ASCALA) GO TO 998                                 00022980
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00023000
      DOFSET=COM(ICUR+1)                                                00023020
      ICUR=ICUR+2                                                       00023040
      IF(ICUR.NE.NLAST) GO TO 995                                       00023060
  295 CONTINUE                                                          00023080
      NDS=IOK                                                           00023100
      GO TO 999                                                         00023200
C                                                                       00023300
  300 CONTINUE                                                          00023400
      NPS=NOGOOD                                                        00023500
C---PART SURFACE SCON/PS,TO OR ON, SURF, PLUS OR MINUS, THICK           00023600
      ICUR=ICUR+2                                                       00023700
      IPTOOL=-1                                                         00023800
      CALL HOLFRM(COM(ICUR+1),CTEST,1,6,NWD)                            00023890
      IF(CTEST.EQ.WON) IPTOOL=1                                         00023900
      IF(CTEST.EQ.WTO) IPTOOL=0                                         00024000
      IF(IPTOOL.LT.0) GO TO 998                                         00024100
      ICUR=ICUR+2                                                       00024200
      IF(COM(ICUR).NE.ASSURF) GO TO 998                                 00024300
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00024400
      PGEOM(1)=COM(ICUR+1)                                              00024500
      PGEOM(2)=COM(ICUR+2)                                              00024600
      PGEOM(3)=ASSURF                                                   00024700
      PGEOM(4)=ZERO                                                     00024800
      ICUR=ICUR+3                                                       00024900
      PSIDE=ZERO                                                        00025000
      IF(COM(ICUR).EQ.APLUS) PSIDE=ONE                                  00025100
      IF(COM(ICUR).EQ.AMINUS) PSIDE=-ONE                                00025200
      IF(PSIDE.EQ.ZERO) GO TO 998                                       00025300
      ICUR=ICUR+2                                                       00025400
      IF(COM(ICUR).NE.ASCALA) GO TO 998                                 00025500
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00025600
      PTHICK=COM(ICUR+1)                                                00025700
      ICUR=ICUR+2                                                       00025800
      GO TO 390                                                         00025900
C                                                                       00026000
  390 CONTINUE                                                          00026100
      IF(ICUR.NE.NLAST) GO TO 995                                       00026200
      NPS=IOK                                                           00026300
      GO TO 999                                                         00026400
C                                                                       00026500
  400 CONTINUE                                                          00026600
C--- FEED RATE PROCESSING                                               00026700
      ICUR=ICUR+2                                                       00026800
      IF(COM(ICUR).NE.APLANE) GO TO 430                                 00026900
C---SPECIAL ROUTE FOR PROCESSING PICKFD CLEARANCE PLANE                 00027000
      NCLRPL=NOGOOD                                                     00027100
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00027200
      DO 410 I=1,4                                                      00027300
  410 CLRPLN(I)=COM(ICUR+I)                                             00027400
      ICUR=ICUR+5                                                       00027500
      IF(ICUR.NE.NLAST) GO TO 995                                       00027600
      NCLRPL=IOK                                                        00027700
      GO TO 999                                                         00027800
C                                                                       00027900
  430 CONTINUE                                                          00028000
      NFEED=NOGOOD                                                      00028100
      DO 420 I=1,4                                                      00028200
      NOW=ICUR+2*I-2                                                    00028300
      IF(COM(NOW).NE.ASCALA) GO TO 998                                  00028400
      IF(CKDEF(COM(NOW+1))) GO TO 997                                   00028500
      FED(I)=COM(NOW+1)                                                 00028600
  420 CONTINUE                                                          00028700
      ICUR=ICUR+8                                                       00028800
      GO TO 490                                                         00028900
C                                                                       00029000
  490 CONTINUE                                                          00029100
      IF(ICUR.NE.NLAST) GO TO 995                                       00029200
      NFEED=IOK                                                         00029300
      GO TO 999                                                         00029400
C                                                                       00029500
  500 CONTINUE                                                          00029600
      NSTEPO=NOGOOD                                                     00029700
C---STEPOVER PROCESSING                                                 00029800
      ICUR=ICUR+2                                                       00029900
      DO 510 I=1,4                                                      00030000
      NOW=ICUR+2*I-2                                                    00030100
      IF(COM(NOW).NE.ASCALA) GO TO 998                                  00030200
      IF(CKDEF(COM(NOW+1))) GO TO 997                                   00030300
      SSTEP(I)=COM(NOW+1)                                               00030400
  510 CONTINUE                                                          00030500
      ICUR=ICUR+8                                                       00030600
      GO TO 590                                                         00030700
C                                                                       00030800
  590 CONTINUE                                                          00030900
      IF(ICUR.NE.NLAST) GO TO 995                                       00031000
      NSTEPO=IOK                                                        00031100
      GO TO 999                                                         00031200
C                                                                       00031300
  600 CONTINUE                                                          00031400
C---AXIS PROCESSING FOLLOWS                                             00031500
      NAXIS=NOGOOD                                                      00031600
      ICUR=ICUR+2                                                       00031700
      IF(COM(ICUR).EQ.ANORMD) GO TO 650                                 00031800
      IF(COM(ICUR).EQ.AVECTO) GO TO 610                                 00031900
      IF(COM(ICUR).EQ.AATANG) GO TO 680                                 00031910
      GO TO 998                                                         00032000
  610 CONTINUE                                                          00032100
      IF(CKDEF(COM(ICUR+1))) GO TO 997                                  00032200
      CALL DOTF(VSQ,COM(ICUR+1),COM(ICUR+1))                            00032300
      IF(VSQ.LT.SMAL) GO TO 996                                         00032400
      VSQ=DSQRT(VSQ)                                                    00032500
      DO 620 I=1,3                                                      00032600
  620 AXIS(I)=COM(ICUR+I)/VSQ                                           00032700
      IAXIS=0                                                           00032800
      ITAC=0                                                            00032810
      ICUR=ICUR+4                                                       00032900
      IF(COM(ICUR).NE.APLUS.AND.COM(ICUR).NE.AMINUS) GO TO 690          00033000
      ICUR=ICUR+2                                                       00033100
      IF(COM(ICUR-2).NE.AMINUS) GO TO 690                               00033200
C---REVERSE THE VECTOR DIRECTION.                                       00033300
      DO 670 I=1,3                                                      00033400
  670 AXIS(I)=-AXIS(I)                                                  00033500
      GO TO 690                                                         00033600
C                                                                       00033700
  650 CONTINUE                                                          00033800
      ICUR=ICUR+2                                                       00033900
      IAXIS=1                                                           00034000
      ITAC=0                                                            00034010
      DO 660 I=1,3                                                      00034100
  660 AXIS(I)=ZERO                                                      00034200
      IF(COM(ICUR).NE.APLUS.AND.COM(ICUR).NE.AMINUS) GO TO 690          00034300
      IF(COM(ICUR).EQ.AMINUS) IAXIS=-1                                  00034400
      ICUR=ICUR+2                                                       00034500
      GO TO 690                                                         00034600
C                 PS                                                    00034601
C.... AXIS,ATANGL,DS,ALPHA,CUTANG,BETA                                  00034602
  680 ICUR=ICUR+2                                                       00034603
      CALL HOLFRM(COM(ICUR+1),CTEST,1,6,NWD)                            00034604
      IF (CTEST.EQ.WDS) THEN                                            00034605
        IAXIS=2                                                         00034606
        ITAC=1                                                          00034607
        DO 682 I=1,3                                                    00034608
         AXIS(I)=ZERO                                                   00034609
  682   CONTINUE                                                        00034610
      ELSE IF (CTEST.EQ.WPS) THEN                                       00034611
        IAXIS=0                                                         00034612
        ITAC=2                                                          00034613
        AXIS(1)=ZERO                                                    00034614
        AXIS(2)=ZERO                                                    00034615
        AXIS(3)=ONE                                                     00034616
      ELSE                                                              00034617
        GOTO 998                                                        00034618
      ENDIF                                                             00034619
                                                                        00034620
      ICUR=ICUR+2                                                       00034621
      IF (COM(ICUR).EQ.ASCALA) THEN                                     00034622
        IF (CKDEF(COM(ICUR+1))) THEN                                    00034623
          GOTO 997                                                      00034624
        ELSE                                                            00034625
          ALPHA=COM(ICUR+1)*DEGRAD                                      00034626
          COSA=COS(ALPHA)                                               00034627
          SINA=SIN(ALPHA)                                               00034628
          IF (COSA.LT.0) THEN                                           00034629
            IAXIS=-IAXIS                                                00034630
          ENDIF                                                         00034631
        ENDIF                                                           00034632
      ELSE                                                              00034633
        GOTO 998                                                        00034634
      ENDIF                                                             00034635
      ICUR=ICUR+2                                                       00034636
      IF (COM(ICUR).EQ.ACUTAN) THEN                                     00034637
        ICUR=ICUR+2                                                     00034638
        IF (COM(ICUR).EQ.ALEAD) THEN                                    00034639
         IFLG=1                                                         00034640
         ICUR=ICUR+2                                                    00034641
        ELSE IF (COM(ICUR).EQ.ALAG) THEN                                00034642
         IFLG=-1                                                        00034643
         ICUR=ICUR+2                                                    00034644
        ELSE                                                            00034645
         IFLG=1                                                         00034646
        ENDIF                                                           00034647
        IF (COM(ICUR).EQ.ASCALA) THEN                                   00034648
          IF (CKDEF(COM(ICUR+1))) THEN                                  00034650
            GOTO 997                                                    00034651
          ELSE                                                          00034652
            BETA=COM(ICUR+1)*DEGRAD*FLOAT(IFLG)                         00034653
            COSB=COS(BETA)                                              00034654
            SINB=SIN(BETA)                                              00034655
            ICUR=ICUR+2                                                 00034656
          ENDIF                                                         00034657
        ELSE                                                            00034658
          GOTO 998                                                      00034659
        ENDIF                                                           00034660
      ELSE                                                              00034661
        GOTO 998                                                        00034662
      ENDIF                                                             00034663
C                                                                       00034700
  690 CONTINUE                                                          00034800
      IF(ICUR.NE.NLAST) GO TO 995                                       00034900
      NAXIS=IOK                                                         00035000
      GO TO 999                                                         00035100
C                                                                       00035200
  995 CONTINUE                                                          00035300
C---ERROR, INPUT DATA FIELD OF INCORRECT LENGTH                         00035400
      IRR=4                                                             00035500
      GO TO 990                                                         00035600
C                                                                       00035700
  996 CONTINUE                                                          00035800
C---ERROR, INPUT PARAMETER VALUES ARE NOT LEGAL                         00035900
      IRR=3                                                             00036000
      GO TO 990                                                         00036100
  997 CONTINUE                                                          00036200
C---ERROR, INPUT CANON FORM IS UNDEFINED                                00036300
      IRR=2                                                             00036400
      GO TO 990                                                         00036500
  998 CONTINUE                                                          00036600
C---ERROR, ILLEGAL ARGUMENT IN INPUT STREAM                             00036700
      IRR=1                                                             00036800
      GO TO 990                                                         00036900
C                                                                       00037000
  990 CONTINUE                                                          00037100
      IRR=IRBASE+IRR                                                    00037200
      CALL ERROR(IRR,'SCON    ')                                        00037300
      CALL RECORD(ISQ)                                                  00037400
      CALL BAD(1,0,'ISEQ',ISQ)                                          00037700
      CALL BAD(1,0,'NLST',NLAST)                                        00037800
      CALL BAD(1,0,'NLEN',NLEN)                                         00037900
      CALL BAD(1,0,'IRR ',IRR)                                          00038000
      CALL BAD(1,0,'ICUR',ICUR)                                         00038100
      CALL BAD(-1,0,'IRBS',IRBASE)                                      00038200
C                                                                       00038300
      GO TO 999                                                         00038400
C                                                                       00038500
  999 CONTINUE                                                          00038600
      RETURN                                                            00038700
      END                                                               00038800
**** SOURCE FILE : M0001913.W04   ***
*
      SUBROUTINE SMIL                                                   00000100
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)                                00000200
C---   PURPOSE OF THE ROUTINE IS TO DECODE SMIL/ COMMANDS               00000300
C---   AND CALL THE PATH ROUTINE, SSPATH, TO GENERATE CLDATA            00000400
C---   ERRORS FROM SSPATH OR UNINITIALIZED DATA AREAS ARE               00000500
C---   DETECTED HERE AND CALLS ARE MADE TO AERR.                        00000600
C                                                                       00000710
      INCLUDE 'BLANKCOM.INC'                                            00000720
C                                                                       00000800
      COMMON/MAXLDA/MAXLDA                                              00000900
C                                                                       00001000
      LOGICAL CKDEF                                                     00001100
C                                                                       00001110
      CHARACTER*6 WALL,WAT,WAXIS,WCLDAT,WCROSS,WCRSSP,WCS,WDS,WFEED,    00001120
     1 WIN,WINCR,WINIT,WMINUS,WNORMA,WNORMD,WNORMP,WOFF,WON,WOUT,       00001121
     2 WPARAM,WPATH,WPICKF,WPLANE,WPLUS,WPOINT,WPOSN,WPS,WSCALA,        00001122
     3 WSCURV,WSSURF,WSTEPO,WTANSP,WTO,WVECTO,WZIGZA,WDISPL             00001123
      CHARACTER*8 RNAM1,RNAM2,RNAM3,RNAMA,RNAME                         00001130
      CHARACTER*6 CTEST,HPOCKT*8                                        00001140
      CHARACTER*20 BADMSG                                               00001142
      INTEGER IPOCKT(2),BCDF                                            00001150
C                                                                       00001180
      INTEGER IZAL1(7),IZAL2(4)                                         00001190
C                                                                       00001200
      COMMON/IBUGG/IBUG,I1,I2                                           00001300
      COMMON/XDS/DGEOM(4),DLIM(4),TLDIR(3),DOFSET,ITLDIR,IDTOOL,NDS     00001400
      COMMON/XPS/PGEOM(4),PSIDE,PTHICK,IPTOOL,NPS                       00001500
      COMMON/XFEED/CLRPLN(4),FED(4),NCLRPL,NFEED                        00001600
      COMMON/XSTEPO/SSTEP(4),NSTEPO                                     00001700
      COMMON/XAXIS/AXIS(3),IAXIS,NAXIS                                  00001800
                                                                        00001810
      INCLUDE 'RMFLGS.INC'                                              00001820
                                                                        00001830
      DIMENSION TUL(7),VEC(3),VINC(4),TE(3),TA(3),TD(3)                 00001900
      DIMENSION PTEM(2)                                                 00002000
C                                                                       00002100
C                                                                       00002200
      DATA     RNAM1   /'SMIL    '/,RNAM2   /'SSPATH  '/,               00002210
     *           RNAM3   /'CUTREC  '/,RNAMA   /'SMIL  ??'/,             00002211
     *           RNAME   /'        '/                                   00002212
      DATA   IMAX1/ 7/, IZAL1                                           00002220
     *         /3561,3562,3563,3564,3565,3566,3567/                     00002221
      DATA   IMAX2/ 4/, IZAL2                                           00002230
     *         /3551,3552,3553,3554/                                    00002231
C--WORD MODE VALUES IN REAL FORM AND HOLLERITH FORM.                    00002300
C--THESE ARE WORDS USED IN SMIL AND SCON COMMANDS                       00002400
C                                                                       00002500
      DATA AALL/50.D0/,WALL/'ALL   '/                                   00002600
      DATA AAT/66.D0/,WAT/'AT    '/                                     00002700
      DATA AAXIS/146.D0/,WAXIS/'AXIS  '/                                00002800
      DATA ACLDAT/69.D0/,WCLDAT/'CLDATA'/                               00002900
      DATA ACROSS/40.D0/,WCROSS/'CROSS '/                               00003000
      DATA ACRSSP/137.D0/,WCRSSP/'CRSSPL'/                              00003100
      DATA ACS/1.D0/,WCS/'CS    '/                                      00003200
      DATA ADS/1.D0/,WDS/'DS    '/                                      00003300
      DATA AFEED/163.D0/,WFEED/'FEED  '/                                00003400
      DATA AIN/20.D0/,WIN/'IN    '/                                     00003500
      DATA AINCR/57.D0/,WINCR/'INCR  '/                                 00003600
      DATA AINIT/161.D0/,WINIT/'INIT  '/                                00003700
      DATA AMINUS/41.D0/,WMINUS/'MINUS '/                               00003800
      DATA ANORMA/13.D0/,WNORMA/'NORMAL'/                               00003900
      DATA ANORMD/151.D0/,WNORMD/'NORMDS'/                              00004000
      DATA ANORMP/152.D0/,WNORMP/'NORMPS'/                              00004100
      DATA AOFF/50.D0/,WOFF/'OFF   '/                                   00004200
      DATA AON/3.D0/,WON/'ON    '/                                      00004300
      DATA AOUT/21.D0/,WOUT/'OUT   '/                                   00004400
      DATA APARAM/144.D0/,WPARAM/'PARAM '/                              00004500
      DATA APATH/165.D0/,WPATH/'PATH  '/                                00004600
      DATA APICKF/166.D0/,WPICKF/'PICKFD'/                              00004700
      DATA APLANE/2.D0/,WPLANE/'PLANE '/                                00004800
      DATA APLUS/42.D0/,WPLUS/'PLUS  '/                                 00004900
      DATA APOINT/19.D0/,WPOINT/'POINT '/                               00005000
      DATA APOSN/164.D0/,WPOSN/'POSN  '/                                00005100
      DATA APS/1.D0/,WPS/'PS    '/                                      00005200
      DATA ASCALA/21.D0/,WSCALA/'SCALAR'/                               00005300
      DATA ASCURV/30.D0/,WSCURV/'SCURV '/                               00005400
      DATA ASSURF/29.D0/,WSSURF/'SSURF '/                               00005500
      DATA ASTEPO/162.D0/,WSTEPO/'STEPOV'/                              00005600
      DATA ATANSP/136.D0/,WTANSP/'TANSPL'/                              00005700
      DATA ATO/3.D0/,WTO/'TO    '/                                      00005800
      DATA AVECTO/20.D0/,WVECTO/'VECTOR'/                               00005900
      DATA AZIGZA/61.D0/,WZIGZA/'ZIGZAG'/                               00006000
      DATA ADISPL/0.0D0/,WDISPL/'DISPLY'/                               00006010
C                                                                       00006100
      DATA ZERO,ONE/0.D0,1.D0/                                          00006200
      DATA SMAL/1.0D-14/                                                00006300
      DATA IBEGIN/42/,NOGOOD/-121/                                      00006400
      DATA NLAST/0/,NBIG/50/,IOK/121/                                   00006500
      DATA IRBASE/3550/                                                 00006600
      DATA HPOCKT/'POCKET'/                                             00006700
C                                                                       00006800
      IPOCKT(1)=BCDF(HPOCKT(1:4))                                       00006820
      IPOCKT(2)=BCDF(HPOCKT(5:8))                                       00006840
      CALL APT299(0,IPOCKT,0,0)                                         00006900
      DO 10 I=1,3                                                       00007000
      TE(I)=ZERO                                                        00007100
   10 TA(I)=ZERO                                                        00007200
      ICUR=IBEGIN                                                       00007300
      NLEN=COM(ICUR)                                                    00007400
      NLAST=IBEGIN+NLEN-2                                               00007500
      COM(NLAST)=ZERO                                                   00007600
      ICUR=ICUR+1                                                       00007700
      IF(NLEN.LT.3.OR.NLEN.GT.NBIG) GO TO 995                           00007800
C                                                                       00007900
      WORD=COM(ICUR)                                                    00008000
      CALL HOLFRM(COM(ICUR+1),CTEST,1,6,NWD)                            00008008
      IF(CTEST.EQ.WDISPL) WORD=COM(ICUR+1)                              00008010
      ICUR=ICUR+2                                                       00008100
      IF(WORD.EQ.APOSN) GO TO 100                                       00008200
      IF(WORD.EQ.APATH) GO TO 200                                       00008300
      IF(WORD.EQ.AZIGZA) GO TO 300                                      00008400
      IF(WORD.EQ.APICKF) GO TO 300                                      00008500
      CALL HOLFRM(WORD,CTEST,1,6,NWD)                                   00008508
      IF(CTEST.EQ.WDISPL) GO TO 300                                     00008510
      GO TO 998                                                         00008600
C                                                                       00008700
C--PROCESS THE SMIL/POSN COMMAND                                        00008800
  100 CONTINUE                                                          00008900
      CALL CLPUT(TE,TA,-1)                                              00009000
      CALL HOLFRM(COM(ICUR+1),CTEST,1,6,NWD)                            00009090
      IF(CTEST.NE.WDS) GO TO 998                                        00009100
(uafhcx) 13% 