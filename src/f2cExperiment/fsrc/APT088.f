**** SOURCE FILE : M0002722.V08   ***
*
C.....FORTRAN SUBROUTINE  ....APT088         8/68                 HG,RN
C.....FORTRAN SUBROUTINE             APT088...              3/1/68   GK
C                      VECTOR USED IN THE XYZ CASE TO GENERATE A
C                      CANTED TABCYL PARALLEL TO VV
C              JJ      INTEGER TRANSFORMATION INDICATOR
C                      1 = TRANSFORMATION MATRIX DESIRED
C                      0 = NO TRANSFORMATION
C              DD      ARRAY CONTAINING THE CANONICAL FORM OF THE
C                      TRANSFORMATION MATRIX
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT040
C              SUBROUTINE          APT087
C              SUBROUTINE          APT094
C              REAL FUNCTION       ATAN
C              REAL FUNCTION       ATAN2
C              LOGICAL FUNCTION    CKDEF
C              REAL FUNCTION       COS
C              SUBROUTINE          DOTF
C              SUBROUTINE          ERROR
C              REAL FUNCTION       MINO
C              REAL FUNCTION       SIN
C              REAL FUNCTION       SQRT
C              SUBROUTINE          TABTAP
C              LOGICAL FUNCTION    ZVECT
C
      SUBROUTINE APT088(A,MM,NN,KK,LL,JJ,DOTTAB)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
      DIMENSION DOTTAB(*)
C
      INCLUDE 'BLANKCOM.INC'
      DOUBLE PRECISION TAB(SSIZ)
      EQUIVALENCE(COM(41),TAB(1))
C
      LOGICAL CKDEF,ZVECT
      DIMENSION A(2),VV(3),DD(12),ROTM(9),TABLE(8),IHOL(3),IPR(103)
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DSHAR6.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR17.INC'
      INCLUDE 'KNUMBR.INC'
C
C
      EQUIVALENCE  (TAB(2),ROTM(1))
C
      INTEGER FORM1,FORM2,FORM3,FORM4,FORM5,FORM6,FORM7,FORM8,FORM9
C
      DIMENSION FORM1(28),FORM2(23),FORM3(30),FORM4(7),FORM5(1),FORM6(4)
     1,         FORM7(4),FORM8(5),FORM9(25)
C
      EQUIVALENCE  (TEMP,SL2SQ,A1,GA,PHI,U), (TEM(1),DY1,A2,R,AL,CEN1,
     1SQ),(TEM(2),DY2,B1,TA,S1,CEN2,CENTER),(TEM(3),SL1SQ,B2,GA1,
     2TB,T1,CURVRG),(DX1,DCMAX,D1,CMIN),(X2,SE2,CURTI1,X),(Y2,DELTA,
     3CURTI2,Y,CMAX)
C        ARITHMETIC STATEMENT FUNCTIONS
      DOUBLE PRECISION DY1,DY2
      DOUBLE PRECISION A1,B1,A2,B2,SL1,SL2
      DATA K21,K14,ZLIT1 /21,14,.707D0/
      SMAL(Z1)=DSIGN(DMAX1(DABS(Z1),Z1EM9),Z1)
      SLOP(Z1,Z2)=(Z1*DY2+Z2*DY1)/SMAL(Z1*DX2+Z2*DX1)
      TAN(Z1)=DSIN(Z1)/SMAL(DCOS(Z1))
      CRVA(Z1,Z2,Z3)=-(4.*TAN(Z1)+2.*TAN(Z2))*DABS(DCOS(Z1))**3/Z3
      CURV(SL1,SL2) = CRVA(A2,B2,SL2)+CRVA(B1,A1,SL1)
C        INITIALIZATION AND DIAGNOSTICS
      UNFLAG=.FALSE.
      N = NN
      I=K7*N+K21
      DO 99 I1=1,I
   99 TAB(I1)=DOTTAB(I1)
C        TEST SLOPE OR NORMAL AT FIRST POINT
      K=KK
      B=TAB(1)
      IF (K.LT.K2)GO TO 100
      B=TAN((B-Z90 )*DEGRAD)
      K=K1
C        TEST SLOPE OR NORMAL AT SECOND POINT
  100 L=LL
      C=TAB(2)
      IF(L.LT.K2) GO TO 110
      C=TAN((C-Z90)*DEGRAD)
      L=K1
C        TEST TRANSFORMATION MATRIX
  110 J=JJ
      IF (J.EQ.K1)GO TO 130
      DO 120 I1=2,12
  120 D(I1)=Z0
      D(1)=Z1
      D(6)=Z1
      D(11)=Z1
      GO TO 150
  130 DO 140 I1=1,12
  140 D(I1)=TAB(I1+5)
  150 IF(.NOT.CKDEF(D)) GO TO 160
      UNFLAG = .TRUE.
      CALL ERROR(14,'APT088  ')
C        SET NUMBER OF POINT COORDINATES. IF XYZ, TEST AXIS VECTOR AND
C        OMISSION OF SLOPES
  160 M=MM
      INC=K2
      IF (M.LT.K6)GO TO 180
      INC=K3
      KKKKK=I
      CALL APT040(V,TAB(3))
      I=KKKKK
      IF (ZVECT(V)) GO TO 170
      UNFLAG = .TRUE.
      CALL ERROR(K32,'APT088  ')
  170 IF (K+L.EQ. 0) GO TO 180
      UNFLAG = .TRUE.
      CALL ERROR(35,'APT088  ')
C        TEST WHETHER POINTS DEFINED
  180 LIM =N*INC
      DO 190 I1 =1,LIM,INC
      IF(CKDEF(TAB(I1+17))) GO TO 200
  190 CONTINUE
      GO TO 210
  200 UNFLAG = .TRUE.
      CALL ERROR(K33,'APT088  ')
C        TEST FOR IDENTICAL CONSECUTIVE POINTS
  210 NM1=INC+1
      DO 230 I1=NM1,LIM,INC
      KP=I1+INC-K1
      DO 220 J1=I1,KP
      L1=J1-INC+17
      IF (TAB(J1+17).NE.TAB(L1)) GO TO 230
  220 CONTINUE
      CALL ERROR(K34,'APT088  ')
      GO TO 240
  230 CONTINUE
      IF ( .NOT. UNFLAG) GO TO 250
  240 CALL APT094(4,A(1),TAB(1))
      RETURN
C        MOVE POINTS AND INITIALIZE FIRST PORTION OF CANONICAL FORM
  250 DO 260 I1= 1,LIM
      J1=LIM+K18-I1
      KP= I+K1-I1
  260 TAB(KP)=TAB(J1)
      TAB(1) =I
      TAB(11)=N+K2
      TAB(12)=K14
C        DEFINE ROTATION MATRIX
      IF (M.LT.K6)GO TO 280
      DO 270 I1=1,3
  270 CALL DOTF (ROTM(I1+6),V,D(4*I1-3))
      I=KKKKK
      GO TO 300
  280 DO 290 I1=1,3
  290 ROTM(I1+6)=Z0
      KP=MIN0(M,K3)
      ROTM(KP+6)=Z1
  300 KP=K0
      D1=ZM1
      IF (DABS(ROTM(9)).LE.ZLIT1) GO TO 310
      KP=KM1
      D1=Z1
  310 ROTM(KP+6)=D1*DSQRT(Z1-ROTM(KP+9)**2)
      KKKKK=1
      TEMP =    ROTM(KP+9)/ROTM(KP+6)
      KKKKK=2
      ROTM(4)=-TEMP*ROTM(7)
      ROTM(KP+3)=Z0
      TEM(1)=D1/ROTM(KP+6)
      KP=-KP
C---    CORRECTION TO ROTATION MATRIX FOR SOME TABCYLS
      ROTM(KP+5)=D1*TEMP*ROTM(KP+8)*KM1**KP
      ROTM(KP+2)=-ROTM(7)*TEM(1)
      ROTM(1)=ROTM(KP+8)*TEM(1)
C        MOVE POINTS TO PROPER PLACE IN CANONICAL FORM
      KP=I+K1-LIM
      L1=K19
      DO 330 I1=1,N
      DO 320 J1=1,INC
      L1=L1+K1
      TAB(L1)=TAB(KP)
  320 KP=KP+K1
      DO 330 J1=INC,6
      L1=L1+K1
  330 TAB(L1)=Z0
C        ZERO BALANCE OF CANONICAL FORM
      DO 340 I1=13,19
  340 TAB(I1)=Z0
      TAB(I-1)=Z0
      TAB(I)=Z0
C        TRANSFORM AND ROTATE POINTS, USING D MATRIX
      I1=0
  350 I1=I1+K7
      GO TO (390,390,390,380,375,360),M
C        XYZ CASE
  360 DO 370 J1=1,3
      CALL DOTF(TEM(J1),D(4*J1-3),TAB(I1+13))
  370 TEM(J1)=TEM(J1)+D(4*J1)
      CALL DOTF (TAB(I1+13),ROTM,TEM)
      CALL DOTF (TAB(I1+14),ROTM(4),TEM)
      TAB(I1+15)=Z0
      GO TO 410
C        RTHETA AND THETAR CASES-FIRST TRANSFORM TO RECTANGULAR
C        THETAR CASE
  375 TEM(3)=TAB(I1+14)
      TAB(I1+14)=TAB(I1+13)
      TAB(I1+13)=TEM(3)
  380 TEM(1)=TAB(I1+13)
      TEM(2)=TAB(I1+14)*DEGRAD
      TAB(I1+13)=TEM(1)*DCOS(TEM(2))
      TAB(I1+14)=TEM(1)*DSIN(TEM(2))
C        NOX, NOY, NOZ, RTHETA,AND THETAR CASES- TRANSFORM COORDINATES
  390 X2=TAB(I1+13)
      Y2=TAB(I1+14)
      D1=Z1
      GO TO 460
C        STORE ONLY DESIRED COORDINATES
  400 TAB (I1+13)=TEM(1)
      TAB (I1+14)=-TEM(3)
  410 IF (I1.LT.7*N) GO TO 350
C        TRANSFORM AND ROTATE SLOPES- CONSIDER AS POINTS.
      IF (K.EQ.0 )GO TO 450
      I1=0
  420 Y2=B
  430 CONTINUE
      D1=Z0
      X2=Z1
      GO TO 460
  440 B = -TEM(3)/SMAL(TEM(1))
  450 IF (L.EQ.0 )GO TO 490
      I1=K1
      Y2=C
      GO TO 430
C        POINT ROTATION ROUTINE
  460 KP=MIN0(M,K3)
      L1=MOD(KP,K3)
      KP=MOD(KP+1,K3)
      DO 470 J1=1,3
      TEM(J1)=X2*D(L1+1)+Y2*D(KP+1)+D1*D(4*J1)
      KP=KP+K4
  470 L1=L1+K4
C        SAVE ONLY DESIRED COORDINATES
      IF (M.EQ.K1)TEM(1) =-TEM(2)
      IF(M.GT.K2) TEM(3)=-TEM(2)
      IF (I1-K1)440,480,400
C        ROTATE SECOND SLOPE
  480 C= -TEM(3)/SMAL(TEM(1))
C        COMPUTE SEGMENT LENGTHS, SLOPES, AND SLOPE OF AVERAGE
  490 NM1=K7*(N-K1)
      DO 500 I1=7,NM1,7
      DX2=(TAB(I1+20)-TAB(I1+13))
      DY2=TAB(I1+21)-TAB(I1+14)
      SL2SQ=DX2**2+DY2**2
      TAB(I1+17)=DSQRT(SL2SQ)
      TAB(I1+16)=DATAN2(DY2,DX2)
C        CALCULATE SLOPE OF CIRCLE THRU P(N-1),P(N),P(N+1)
      IF (I1.NE.K7) TAB(I1+15)=DATAN(SLOP (SL1SQ,SL2SQ) )
      DX1=DX2
      DY1=DY2
  500 SL1SQ=SL2SQ
C        CALCULATION OF ANGLES AND CURVATURE DIFFERENCES
      B1=TAB(29)-TAB(23)
      IF (K.EQ.0 )GO TO 510
      TAB(22)=DATAN(B)
      A1=TAB(22)-TAB(23)
      GO TO 520
  510 A1=      PI-B1
      TAB(22)=TAB(23)-B1
      IF(NM1.LT.21) GO TO 531
  520 DO 530 I1=21,NM1,7
      A2=TAB(I1+8)-TAB(I1+9)
      B2=TAB(I1+15)-TAB(I1+9)
      TAB(I1+11)=CURV(TAB(I1+3),TAB(I1+10))
      A1=A2
  530 B1=B2
C        CALCULATE TERMINAL SLOPE AND EXTERIOR ANGLE
  531 A2=TAB(I-13)-TAB(I-12)
      IF (L.EQ.0 )GO TO 540
      TAB(I-6)=DATAN(C)
      B2=TAB(I-6)-TAB(I-12)
      GO TO 550
  540 B2= PI-A2
      TAB(I-6) = TAB(I-12)+B2
  550 TAB(I-10)= CURV(TAB(I-18),TAB(I-11))
      CALL APT089 (A)
      RETURN
      END
