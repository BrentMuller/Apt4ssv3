**** SOURCE FILE : M0006639.W01   ***
*
C
C              FORTRAN SUBROUTINE INPAT
C
C LINKAGE      SUBROUTINE INPAT(IACT,BIGCNT)
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    ALARM           SUBROUTINE    RECOG
C          SUBROUTINE    CALLZZ
C          INTEGER FCT.  GETTMP
C          SUBROUTINE    BCDBIN
C          LOGICAL FCT.  IFTMP
C          SUBROUTINE    MCXTRN
C          SUBROUTINE    ARGCVT
C          INTEGER FCT.  NAME
C          INTEGER FCT.  NUMB
C          SUBROUTINE    OPCODE
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          INTEGER FCT.  SEARCH
C          SUBROUTINE    TWOARG
C          SUBROUTINE    BINBCD
C
      SUBROUTINE INPAT(IACT,BIGCNT)
C
      IMPLICIT INTEGER (A-Z)
C
C              FUNCTION DECLARATION
C
      LOGICAL IFTMP
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),COMMA(2),NUMBER(2),TEMP(2),PERMID(2),VBL(2),ID
     *          ENT(2)
C COMMA:       (1)=CODE CLASS  1000,(2)=NAMTBL INDEX OF ',     '
      EQUIVALENCE (COMMA(1),CODE(1))
C NUMBER:      (1)=CODE CLASS 14000,(2)=NAMTBL INDEX OF 'NUMBER'
      EQUIVALENCE (NUMBER(1),CODE(27))
C TEMP:        (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODE(33))
C PERMID:      (1)=CODE CLASS 20000,(2)=NAMTBL INDEX OF 'PERMID'
      EQUIVALENCE (PERMID(1),CODE(39))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C IDENT:       (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODE(69))
C
C        4.    PRODUCTION TABLE
C
      COMMON/SRCTBL/SRCTBL
      DIMENSION SRCTBL(502),META(50)
C META:        CONTAINS INTERNAL BIT CODES FOR METALINGUISTIC CLASSES
      EQUIVALENCE (META(1),SRCTBL(3))
C
C        8.    NAME TABLE POINTERS TO BCD LITERALS
C
      COMMON/BCDPTR/BCDPTR
      DIMENSION BCDPTR(7)
C DOTTAB:      NAMTBL POINTER TO ALPHAMERIC LITERAL '$$TAB'
      EQUIVALENCE (DOTTAB,BCDPTR(7))
C
C        9.    NAME TABLE POINTERS TO NUMBERS
C
      COMMON/NUMPTR/NUMPTR
      DIMENSION NUMPTR(12),ZERO(1)
C ZERO:        NAMTBL POINTER TO '0     '
      EQUIVALENCE (ZERO(1),NUMPTR(1))
C ZEROPT:      NAMTBL POINTER TO '0.    '
      EQUIVALENCE (ZEROPT,NUMPTR(2))
C ONE:         NAMTBL POINTER TO '1     '
      EQUIVALENCE (ONE,NUMPTR(3))
C TWO:         NAMTBL POINTER TO '2     '
      EQUIVALENCE (TWO,NUMPTR(5))
C FOUR:        NAMTBL POINTER TO '4     '
      EQUIVALENCE (FOUR,NUMPTR(7))
C
C       10.    TABLE STORAGE FOR GEOMETRIC FUNCTION PROCESSOR
C
      INCLUDE 'GMTY.INC'
C GEOLOC:      GEOMETRIC PRODUCTION STARTING INDEX IN GEOMTB
C PMIDTB:      INTERNAL BIT REPRESENTATIONS FOR EACH ELEMENT OF GEOMTB
C GEOMTB:      GEOMETRIC FORMAT PRODUCTIONS ARRANGED BY SURFACE TYPE
C
C       12.    LARGE DATA ARRAY STORAGE REQUIREMENTS
C
      COMMON/CFSIZE/CFSIZE
      DIMENSION CFSIZE(205),MAXSIZ(2),CANSIZ(2,100)
C CANTOP:      POINTER TO THE LAST CANSIZ ENTRY
      EQUIVALENCE (CANTOP,CFSIZE(1))
C MAXSIZ:      SIZE OF THE LAST LARGEST LARGE DATA ARRAY
      EQUIVALENCE (MAXSIZ(1),CFSIZE(4))
C CANSIZ:      NUMBER OF ITEMS A. NAMTBL INDEX OF EACH LARGE DATA ARRAY
      EQUIVALENCE (CANSIZ(1,1),CFSIZE(6))
C
C       16.    LITERALS FOR I. L. OPERATION CODES
C
      COMMON/IL/IL
      DIMENSION IL(21)
C MOVE:        CONTAINS COMMAND CODE (19) FOR MOVE COMMAND
      EQUIVALENCE (MOVE,IL(19))
C
C       17.    MODE CODES
C
      COMMON/MODX/MODX
      DIMENSION MODX(32)
C POINT:       MODE CODE (19) FOR POINT
      EQUIVALENCE (POINT,MODX(19))
C REAL:        MODE CODE (24) FOR A SCALAR
      EQUIVALENCE (REAL,MODX(21))
C PATERN:      MODE CODE (26) FOR PATTERN
      EQUIVALENCE (PATERN,MODX(26))
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      DIMENSION MACXX1(71)
C INTMED:      0=NO -,-1=INTERMEDIATE-,+1=FINAL MACRO PROCESSING
      EQUIVALENCE (INTMED,MACXX1(22))
C
C       27.    OPERAND MODIFIERS
C
      COMMON/OPMOD/OPMOD
      DIMENSION OPMOD(6)
C DLR:         CONTAINS OPERAND TYPE CODE 1
      EQUIVALENCE (DLR,OPMOD(2))
C
C       28.    OPERAND MODIFIERS
C
      COMMON/SUBLST/SUBLST
      DIMENSION SUBLST(136),APTXXX(120)
C APTXXX:      NAMTBL POINTERS FOR XECUTION SUBROUTINE NAMES
      EQUIVALENCE (APTXXX(1),SUBLST(1))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C
C       41.    NUMBER TABLE OVERFLOW VARIABLES
C
      COMMON/NTBL/NTBL
      DIMENSION NTBL(6)
C NLAST:       LAST NEW BLOCK NUMBER OF NUMBER TABLE ON THE EXTERN FILE
      EQUIVALENCE (NLAST,NTBL(4))
C*
C     PURPOSE       TO VALIDATE THE FORMAT OF PATTERN DEFINITION
C                   STATEMENTS AND GENERATE APPROPRIATE INTER-
C                   MEDIATE LANGUAGE
C
C     RESTRICTIONS  CURRENTLY CANNOT HANDLE NESTED DEFINITIONS
C                   OR SUBSTITUTION OF MACRO VARIABLES FOR
C                   MINOR WORDS.
C
      DIMENSION BIGSTK(20)
      LOGICAL FOULUP,INCLST
      CHARACTER*6 HDOLSC
      CHARACTER*4 HPERI,XLANK
      DIMENSION ARGS(5)
      CHARACTER BUFF*12,DECPT*1
      external alarm
      DIMENSION KTYPES(12)
C                   LINEAR    LINEAR    LINEAR    ARC       ARC
C                   POINT     POINT     POINT     CIRCLE    CIRCLE
C                   POINT     VECTOR    VECTOR    REAL      REAL
C                   REAL      REAL      INCR      REAL      CLW,CCLW
C                                                 CLW,CCLW  INCR
C                                                 REAL
     0DATA KTYPES  /      101,      102,      103,      201,      202,
C
C                   GRID      GRID      GRID      RANDOM    PERIM
C                   PATERN    PATERN    PATERN    POINT,    PATERN
C                   PATERN    VECTOR    VECTOR      PATERN  PATERN
C                             REAL      INCR
     1                    301,      302,      303,      401,      501,
C
C                   PERIM     PERIM
C                   PATERN    PATERN
C                   VECTOR    VECTOR
C                   REAL      INCR
     2                    502,      503/
C
      DATA HPERI/'PERI'/, HDOLSC/'$SCRTH'/,XLANK/'    '/
      DATA DECPT/'.'/
C**
C
C.......                      IF FIRST TIME THROUGH FOR THIS DEFINITION,
C.......                      DO INITIALIZATIONS
C
      IF (BIGCNT.NE.1) GO TO 100
C                             INITIALIZE INDEX FOR NEXT BIGSTK ENTRY
      BIGNXT=20
C                             SET LOCAL FLAG - NO FORMAT ERRORS YET
      FOULUP=.FALSE.
C                             INITIALIZE WORD COUNT FOR EXTERNAL FORM
      NWDS=4
C                             SET LOCAL FLAG - NOT PROCESSING INCR LIST
C                             YET
      INCLST=.FALSE.
C                             MOVE FIRST ARGUMENT INTO BIGSTK
      ASSIGN 100 TO IPUSH
      ERRPT=TOP-3
      ELMENT=STACK(1,ERRPT)
      GO TO 1000
C
C.......            BRANCH IF END OF DEFINITION
C
  100 IF(IACT.GE.103) GO TO 200
C                             IF ERROR HAS ALREADY OCCURRED, SKIP
C                             PROCESSING
      IF (FOULUP) GOTO 2020
C
C.......            PROCESS ELEMENT OF ARGUMENT LIST
C
C                             MOVE LATEST ARGUMENT INTO BIGSTK
      ASSIGN 110 TO IPUSH
      ERRPT=TOP-1
      ELMENT=STACK(1,ERRPT)
      GO TO 1000
C                             SEARCH FOR MATCHING PATERN GEOMETRIC
C                             PRODUCTION IN BIGSTK.
  110 J=GEOLOC(PATERN)
      EPT=10
      KSERCH=SEARCH(BIGSTK,20,GEOMTB(J),EPT)
C                             IF ACTION NUMBER=200, NO MATCHING PRODUC-
C                             TION WAS FOUND.  RETURN FOR MORE OF ARG
C                             LIST, UNLES 6 ELEMENTS ARE ACCUMULATED.
      IF (KSERCH.LE.11 ) GO TO 120
      IF (BIGNXT.LT.(2*EPT)) GOTO 1990
      IF (BIGNXT.GT.8) GOTO 2020
      GO TO 1990
C                             BRANCH IF PROCESSING INCREMENT LIST
  120 IF (INCLST) GO TO 170
C                             DETERMINE TYPE CODE FROM ACTION NUMBER
C                             AND FIRST WORD FOLLOWING SLASH
      IFIRST=BIGSTK(19)
      K=KSERCH
      IF(CNAMTB(IFIRST)(1:4).EQ.HPERI)GO TO 1980
      KTYPE=KTYPES(K)
C                             SAVE ARGUMENTS FOR CALL TO DEFINITION
C                             REDUCTION ROUTINE
      DO 130 I=1,5
      J=19-2*I
      ARGS(I)=BIGSTK(J)
      IF (J.LE.BIGNXT) ARGS(I)=ZEROPT
  130 CONTINUE
C
C.......            TAKE APPROPRIATE BRANCH-
C.......                 FOR RANDOM TYPE, GO PROCESS ARG.
C.......                 FOR INCR TYPE, GO SET UP INCR.
C.......                 FOR OTHERS, GO DETERMINE SIZE OF EXTERNAL
C.......                 CANONICAL FORM.
C       KTYPE 101  102  103  201  202  301  302  303  401  501  502  503
     0GO TO (3010,3010,3020,3030,3025,3040,3050,3060, 140,3040,3050,3060
     1      ),K
C                             LINEAR PATERN-INITIAL BLOCK
C                                            POINT AND VECTOR
 3010 NWDS=NWDS+6
C                             INCREMENTS
 3012 INAMTB=BIGSTK(BIGNXT+1)
      ASSIGN 3015 TO IRET
      GO TO 4000
C                             RETURN, EXPECT END OF DEFINITION
 3015 BIGNXT=18
      GOTO 2020
C                             LINEAR PATERNS- ADD STORAGE FOR INITIAL
C                                    BLOCK AND BRANCH TO PROCESS INCR
C                                    LIST
 3020 NWDS=NWDS+6
      GO TO 150
C                             ARC PATERNS- ADD STORAGE FOR INITIAL BLOCK
C                                    AND BRANCH TO PROCESS INCR LIST
 3025 NWDS=NWDS+6
      GO TO 150
C                             ARC PATERNS-INITIAL BLOCK
 3030 NWDS=NWDS+6
C                             BRANCH TO ADD INCREMENTS
      GO TO 3012
C                             GRID/PERIM PATERNS-ADD STORAGE FOR TWO
C                                                COMPONENT PATERNS
 3040 INAMTB=BIGSTK(15)
      ASSIGN 3042 TO IRET
      GO TO 5000
 3042 NWDS=NWDS+CANSIZ(1,ICANX)
 3043 INAMTB=BIGSTK(17)
      ASSIGN 3044 TO IRET
      GO TO 5000
 3044 NWDS=NWDS+CANSIZ(1,ICANX)+1
      GO TO 3015
C                             GRID/PERIM PATERNS- ADD STORAGE FOR ONE
C                                    COMPONENT PATERN AND ONE INCREMENT
 3050 INAMTB=BIGSTK(13)
      ASSIGN 3052 TO IRET
      GO TO 4000
 3052 GO TO 3043
C                             GRID/PERIM PATERNS- ADD STORAGE FOR ONE
C                                    COMPONENT PATERN AND BRANCH TO
C                                    PROCESS INCREMENT LIST
 3060 INAMTB=BIGSTK(17)
      ASSIGN 3062 TO IRET
      GO TO 5000
 3062 NWDS=NWDS+12+CANSIZ(1,ICANX)
      GO TO 150
C
C...                PROCESS RANDOM TYPE ARGUMENT
C
C                             IF FIRST TIME THROUGH FOR THIS DEFINITION,
C                             GENERATE INITIALIZATION CALL TO APT100
  140 IF(BIGCNT.NE.1) GO TO 145
      CALL CALLZZ(APTXXX(73))
      CALL TWOARG(1,ZERO)
      CALL TWOARG(1,ZERO)
      CALL RLSLIN
C                             INITIALIZE ARGUMENT COUNTER
      IRANDG=0
C                             GENERATE CALL TO PRE-PATERN DEFINTION
C                             ROUTINE APT 100
  145 CALL CALLZZ(APTXXX(73))
C                             SET FLAG FOR POINT OR PATERN
      IF(BIGSTK(BIGNXT+2).EQ.PMIDTB(POINT)) K=ONE
      IF(BIGSTK(BIGNXT+2).EQ.PMIDTB(PATERN)) K=TWO
      CALL TWOARG(1,K)
      CALL ARGCVT(ELMENT)
      CALL RLSLIN
      IF(IFTMP(ELMENT))CALL PUTTMP(MOD(NAMTBL(ELMENT),MODULO))
C                             UPDATE EXTERNAL CANONICAL FORM WORD COUNT
      IF (K.EQ.ONE) GO TO 148
      INAMTB=BIGSTK(17)
      ASSIGN 147 TO IRET
      GO TO 5000
  147 NWDS=NWDS+CANSIZ(1,ICANX)
      GO TO 149
C
  148 NWDS=NWDS+4
  149 CONTINUE
C                             INCREMENT ARGUMENT COUNTER
      IRANDG=IRANDG+1
C                             COMPRESS LAST ARG OUT OF BIGSTK
      BIGNXT=BIGNXT+2
      BIGSTK(BIGNXT)=-1
C                             RETURN
      GOTO 2020
C
C...                SET UP FOR INCR LIST PROCESSING
C
C                             SET FLAG
  150 INCLST=.TRUE.
C                             IF NOT ALREADY DONE, DECLARE ARRAY OF
C                             SCRATCH STORAGE IN PART PROGRM, OF LENGTH
C                             102 AND NAME $SCRTH
      KSCRTH=NAME(HDOLSC)
      IF (NAMTBL(KSCRTH).NE.0) GO TO 160
      NAMTBL(KSCRTH)=VBL(1)
      CALL RESRVZ(KSCRTH,0,102,1)
C                             SET PROPER ARG TO SCRATCH STORAGE ARRAY
  160 IARG=(20-BIGNXT)/2
      ARGS(IARG)=KSCRTH
C                             INITIALIZE COUNTER FOR INCR LIST
      INCCNT=0
C                             PUT INCR AT TOP OF BIGSTK
      BIGSTK(20)=BIGSTK(BIGNXT+2)
      BIGSTK(18)=-1
      BIGNXT=18
C                             RETURN
      GOTO 2020
C
C......             PROCESS TERM OF INCR LIST
C
C                             BRANCH IF REAL-AT-REAL TYPE
  170 IF (KSERCH.EQ.11) GO TO 180
C                             BRANCH IF EXCESS INCR ARGS
      IF(INCCNT+1.GE.102)GO TO 195
C                             GENERATE CODE TO MOVE FIRST REAL ARG
C                               MOVE   HDOLSC(INCCNT+1),ARG
      CALL OPCODE(MOVE)
      CALL TWOARG(-(INCCNT+2),KSCRTH)
      CALL ARGCVT(BIGSTK(17))
      CALL RLSLIN
C                             COMPRESS BIGSTK
      BIGSTK(18)=BIGSTK(16)
      BIGSTK(17)=BIGSTK(15)
      BIGNXT=16
C                             UPDATE INCR TERM COUNTER
      INCCNT=INCCNT+1
C                             UPDATE EXTERNAL CANONICAL FORM WORD COUNT
      NWDS=NWDS+1
C                             RETURN
      GOTO 2020
C                             BRANCH IF EXCESS INCR ARGS
  180 IF(INCCNT+3.GE.102)GO TO 195
C                             GENERATE CODE TO MOVE ARGS
      CALL OPCODE(MOVE)
      CALL TWOARG(-(INCCNT+2),KSCRTH)
      DO 190 I=1,3
      J=19-2*I
      CALL ARGCVT(BIGSTK(J))
  190 CONTINUE
      CALL RLSLIN
C                             UPDATE EXTERNAL CANONICAL FORM WORD COUNT
      INAMTB=BIGSTK(17)
      ASSIGN 197 TO IRET
      GO TO 4000
  197 CONTINUE
C                             COMPRESS BIGSTK
      BIGNXT=18
      BIGSTK(18)=-1
C                             UPDATE INCR TERM COUNTER
      INCCNT=INCCNT+3
C                             RETURN
      GOTO 2020
C                             ERROR - EXCESS INCR ARGS
  195 IERROR= 2041
      GO TO 2000
C
C......             PROCESS END OF DEFINITION
C
C                             FIND NAME TABLE INDEX OF RESULT.
C                             IF AN UNNAMED NESTED DEF, SET UP TEMPORARY
  200 IF (IACT.NE.105) GO TO 210
      RESULT=GETTMP(PATERN)
      GO TO 222
C                             IF CLASS NOT PERMANENTLY SET, DEFINE NOW
  210 RESULT=STACK(1,TOP-5)
      ICLASS=MODULO*(NAMTBL(RESULT)/MODULO)
      IF (ICLASS.EQ.VBL(1) .OR. ICLASS.EQ.TEMP(1)) GOTO 220
      NAMTBL(RESULT)=VBL(1)+PATERN
      CALL RESRVZ(RESULT,PATERN,2,1)
C...                          IF THIS VARIABLE HAS BEEN PREVIOUSLY
C...                          DEFINED WITH ANOTHER MODE, ISSUE
C...                          ERROR AND TERMINATE PROCESSING
  220 IF(MODE(RESULT).EQ.PATERN) GO TO 221
      IERROR=1001
      ERRPT=TOP-6
      GOTO 2045
C...                          IF THIS VARIABLE HAS BEEN PREVIOUSLY
C...                          DEFINED WITH THE SAME MODE, ISSUE
C...                          WARNING AND CONTINUE PROCESSING
  221 IF(ICLASS.EQ.VBL(1).AND.INTMED.EQ.0)CALL ALARM(50,TOP-5,4,
     * 'INPAT   ')
C                             IF WE WERE PROCESSING AN INCR LIST, CHECK
C                             FORMAT OF RESIDUE IN BIGSTK, AND MOVE
C                             FINAL ARG IF NECESSARY.
  222 IF(.NOT.INCLST)GO TO 230
      IF (BIGNXT.EQ.18) GO TO 225
      IF (BIGNXT.NE.16 .OR. BIGSTK(18).NE.PMIDTB(REAL)) GO TO 2030
      CALL OPCODE(MOVE)
      CALL TWOARG(-(INCCNT+2),KSCRTH)
      CALL ARGCVT(BIGSTK(17))
      CALL RLSLIN
      INCCNT=INCCNT+1
C                             UPDATE EXTERNAL CANONICAL FORM WORD COUNT
      NWDS=NWDS+1
      BIGNXT=18
C                             GENERATE CODE TO STORE INCR LIST COUNT
  225 BUFF=XLANK
      CALL BINBCD(INCCNT,BUFF,ICNT)
      BUFF (ICNT+1:ICNT+1)=DECPT
      INUMB=NUMB(BUFF)+NAMMAX
      CALL OPCODE(MOVE)
      CALL TWOARG(-1,KSCRTH)
      CALL ARGCVT(INUMB)
      CALL RLSLIN
C                             IF RANDOM TYPE, SET ARG1 TO THE NUMBER
C                             OF ARGUMENTS
  230 IF (KTYPE.NE.401) GO TO 250
      BUFF=XLANK
      CALL BINBCD (IRANDG,BUFF,ICNT)
      BUFF(ICNT+1:ICNT+1)=DECPT
      INUMB=NUMB(BUFF)+NAMMAX
      ARGS(1)=INUMB
      DO 235 I=2,5
      ARGS(I)=ZEROPT
  235 CONTINUE
C                             VERIFY BIGSTK CLEANED UP AT THIS POINT
  250 IF (BIGNXT.NE.18) GO TO 2030
C                             IF NO ERRORS ENCOUNTERED PREVIOUSLY,
C                             GENERATE CALL TO PATERN DEFINITION ROUTINE
      IF (FOULUP) GO TO 2050
      CALL CALLZZ(APTXXX(100))
      CALL TWOARG(5,1)
      CALL ARGCVT(RESULT)
      CALL TWOARG(5,KTYPE)
      DO 310 I=1,5
      CALL ARGCVT(ARGS(I))
      K=ARGS(I)
      IF(IFTMP(K))CALL PUTTMP(MOD(NAMTBL(K),MODULO))
  310 CONTINUE
      CALL RLSLIN
C                             STORE THE NUMBER OF WORDS IN THE EXTERNAL
C                             CANONICAL FORM IN CANSIZ.
      IF (NWDS.LE.0) NWDS=200
      INAMTB=RESULT
      ASSIGN 311 TO IRET
      GO TO 5000
  311 CANSIZ(1,ICANX)=NWDS
      CANSIZ(2,ICANX)=RESULT
C                             UPDATE SIZES OF TWO LARGEST EXTERNAL FORMS
      IF(NWDS.LE.(IABS(MAXSIZ(2))))GO TO 315
      IF(NWDS.LE.(IABS(MAXSIZ(1))))GO TO 312
      MAXSIZ(2)=MAXSIZ(1)
      MAXSIZ(1)=NWDS
      GO TO 315
  312 MAXSIZ(2)=NWDS
C
C                             ADJUST THE STACK AND RETURN
  315 IF (IACT-104) 335,320,340
  320 TOP=TOP-6
  330 STACK(1,TOP) = RESULT
      K=NAMTBL(RESULT)/MODULO
      STACK(2,TOP) = META(K)
  335 RETURN
  340 TOP=TOP-4
      GO TO 330
C
C
C
C-----------------------------------------------------------------------
C
C              PURPOSE   TO ADD ELEMENT TO BIGSTK
C                                       FIND CORRECT INDEX TO USE WHEN
C                                       ACCESSING TABLE OF INTERNAL BIT
C                                       REPRESENTATIONS FOR GEOMETRIC
C                                       PRODUCTIONS.
C                                       IF NOT IN NAME PORTION, INDEX IS
C                                       MODE REAL
C
 1000 IF(ELMENT.GT.NAMMAX) GO TO 1030
      IERROR=1008
C                                       CLASS
      ICLASS=MODULO*(NAMTBL(ELMENT)/MODULO)
C                                       MODE
      IMODE = NAMTBL(ELMENT)-ICLASS
C                                       STRIP OFF INDIRECT ADDRESS
C                                       INCREMENT IF PRESENT
      IF(IMODE.GE.500) IMODE=IMODE-500
      IF(IMODE.EQ.0) GOTO 2010
      IF (ICLASS.NE.IDENT(1)) GO TO 1025
      ICLASS=PERMID(1)
      NAMTBL(ELMENT)=NAMTBL(ELMENT)-IDENT(1)+PERMID(1)
C                                       ADD PERMANENT IDENTIFIER INCRE-
C                                       MENT IF APPROPRIATE
 1025 IF (ICLASS.EQ.PERMID(1)) IMODE=IMODE+50
     0 IF (ICLASS.EQ.VBL(1)    .OR.
     1    ICLASS.EQ.PERMID(1).OR.
     2    ICLASS.EQ.TEMP(1)  ) GO TO 1050
      IF (ICLASS.NE.NUMBER(1)) GO TO 2010
 1030 IMODE=REAL
C
C...                          STORE INTERNAL REPRESENTATION IN BIGSTK
C
 1050 BIGSTK(BIGNXT)=PMIDTB(IMODE)
C                             STORE NAMTABL INDEX
      BIGSTK(BIGNXT-1)=ELMENT
C                                       RESET STACK POINTER
      BIGNXT=BIGNXT-2
C                                       STORE DUMMY VALUE TO TERMINATE
C                                       SCANS
      BIGSTK(BIGNXT)=-1
C                                       RETURN
      GO TO IPUSH,(100,110)
C
C...                          INVALID FORMAT- ISSUE DIAGNOSTIC AND SET
C...                          LOCAL FLAG
C
 1980 ERRPT=TOP-3
 1990 IERROR=1041
C
C......             ERROR- ISSUE DIAGNOSTIC, SET LOCAL FLAG, AND RETURN
C
 2000 IF(FOULUP)GOTO 2020
      FOULUP=.TRUE.
 2010 CALL ALARM(IERROR,ERRPT,8,'INPAT   ')
C                             COMPRESS LAST ARGUMENT AND PRECEEDING
C                             DELIMITER FROM STACK.
 2020 STACK(1,TOP-2)=STACK(1,TOP)
      STACK(2,TOP-2)=STACK(2,TOP)
      TOP=TOP-2
      RETURN
C
C...                FINAL ERROR PROCESSING, GENERATE CALL TO APT094
C...                TO UNDEFINE THE SUFACE
C
 2030 ERRPT=TOP+1
      STACK(1,TOP)=COMMA(2)
 2040 IF(FOULUP)GOTO 2050
      IERROR=1041
 2045 TOP=TOP+1
      CALL ALARM(IERROR,ERRPT,8,'INPAT   ')
      TOP=TOP-1
 2050 CALL CALLZZ(APTXXX(68))
      CALL TWOARG(DLR,FOUR)
      CALL ARGCVT(RESULT)
      CALL TWOARG(0,DOTTAB)
      CALL RLSLIN
      GO TO 315
C-----------------------------------------------------------------------
C
C     PURPOSE  TO COMPUTE NUMBER OF INCREMENTS STORED WITH CANONICAL
C              FORM OF A PATERN, ARC OR LINEAR, AND ADD TO NWDS
C
C     ARGUMENTS     INAMTB    NAMTBL INDEX OF FINAL ARGUMENT OF PATERN
C                             DEFINITION
C
C                             IF LAST ARG NOT A NUMERIC, FLAG BY SETTING
C                                NWDS-10000. LATER A STANDARD MAX INSERT
 4000 IF(INAMTB.LE.NAMMAX) GO TO 4010
C.... DECREMENT BY NAMMAX FOR ADDRESS IN NUMBER TABLE, CNUMTB
      INAMTB=INAMTB-NAMMAX
      IF(NLAST.GT.0)CALL MCXTRN(5,INAMTB,IDUMMY)
      CALL BCDBIN(CNUMTB(INAMTB),I,IDUM)
      GO TO 4020
C
 4010 I=-10000-NWDS
 4020 NWDS=NWDS+I
      GO TO IRET,(3015,3052,197)
C-----------------------------------------------------------------------
C
C     PURPOSE  TO LOOK UP A PATERN IN THE CANSIZ TABLE, RETURN THE INDEX
C              OF THE LOCATION WHERE IT IS FOUND (OR WILL BE PLACED).
C
C     ARGUMENTS     INAMTB    NAMTBL INDEX OF THE PATERN
C
 5000 ICANX=1+MOD(INAMTB,CANTOP)
      DO 5010 I=1,CANTOP
      IF (CANSIZ(1,ICANX).EQ.0 .OR. CANSIZ(2,ICANX).EQ.INAMTB) GOTO 5020
      ICANX=1+MOD(ICANX,CANTOP)
 5010 CONTINUE
C                             TABLE FULL, ISSUE DIAGNOSTIC
      IERROR=53
      ERRPT=TOP-5
      GO TO 2010
 5020 GO TO IRET,(3042,3044,3060,147,311,3062)
      END
