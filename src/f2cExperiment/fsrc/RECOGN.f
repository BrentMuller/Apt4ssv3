**** SOURCE FILE : M0006673.V06   ***
*
C
C              FORTRAN SUBROUTINE RECOGN
C
C LINKAGE      SUBROUTINE RECOGN(I,IASNRT)
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    MACLBL          SUBROUTINE    RECOG
C          SUBROUTINE    ARGCVT
C          INTEGER FCT.  NAME
C          SUBROUTINE    ALARM
C          INTEGER FCT.  GETTMP
C          SUBROUTINE    ONEARG
C          SUBROUTINE    OPCODE
C          SUBROUTINE    CALLZZ
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    REFGEN
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          SUBROUTINE    SETMOD
C          LOGICAL FCT.  IFTMP
C          SUBROUTINE    TWOARG
C
      SUBROUTINE RECOGN(I,IASNRT)
C
      IMPLICIT INTEGER (A-Z)
C
C              FUNCTION DECLARATION
C
      LOGICAL IFTMP
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99),ARGSTK(99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C ARGTOP:      POINTER TO LAST ARGSTK ENTRY
      EQUIVALENCE (ARGTOP,STKLST(2))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C ARGSTK:      ARGUMENT STACK
      EQUIVALENCE (ARGSTK(1),STKLST(202))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),SLASH(2),GEOM(2),TEMP(2),VBL(2),IDENT(2),
     *          CONGEO(2),CONPRO(2),CONBIG(2),CANON(2),BIGGEO(2)
C SLASH:       (1)=CODE CLASS  5000,(2)=NAMTBL INDEX OF '/     '
      EQUIVALENCE (SLASH(1),CODE(9))
C GEOM:        (1)=CODE CLASS 16000,(2)=NAMTBL INDEX OF 'GEOM  '
      EQUIVALENCE (GEOM(1),CODE(31))
C TEMP:        (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODE(33))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C IDENT:       (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODE(69))
C CONGEO:      (1)=CODE CLASS 39000,(2)=NAMTBL INDEX OF 'CONGEO'
      EQUIVALENCE (CONGEO(1),CODE(77))
C CONPRO:      (1)=CODE CLASS 40000,(2)=NAMTBL INDEX OF 'CONPRO'
      EQUIVALENCE (CONPRO(1),CODE(79))
C CONBIG:      (1)=CODE CLASS 43000,(2)=NAMTBL INDEX OF 'CONBIG'
      EQUIVALENCE (CONBIG(1),CODE(85))
C CANON:       (1)=CODE CLASS 42000,(2)=NAMTBL INDEX OF 'CANON '
      EQUIVALENCE (CANON(1),CODE(83))
C BIGGEO:      (1)=CODE CLASS 44000,(2)=NAMTBL INDEX OF 'BIGGEO'
      EQUIVALENCE (BIGGEO(1),CODE(87))
C
C        4.    PRODUCTION TABLE
C
      COMMON/SRCTBL/SRCTBL
      DIMENSION SRCTBL(502),META(50)
C META:        CONTAINS INTERNAL BIT CODES FOR METALINGUISTIC CLASSES
      EQUIVALENCE (META(1),SRCTBL(3))
C
C        5.    PROGRAM CONTROL FLAGS
C
      COMMON/FLAGS/FLAGS
      LOGICAL REFFLG
      DIMENSION FLAGS(4)
C REFFLG:      TRUE WHEN A REFSYS COMMAND ENCOUNTERED
      EQUIVALENCE (REFFLG,FLAGS(4))
C
C        6.    GHOST STACK FOR OBJECT TIME TEMPORARY ALLOCATION
C              LENGTH AND CURRENT NUMBER OF ACTIVE TEMPORARY STORAGE
      COMMON/TMP/TXXXX
      DIMENSION TXXXX(2,32)
C
C        9.    NAME TABLE POINTERS TO NUMBERS
C
      COMMON/NUMPTR/NUMPTR
      DIMENSION NUMPTR(12)
C ZERO:        NAMTBL POINTER TO '0     '
      EQUIVALENCE (ZERO,NUMPTR(1))
C ONE:         NAMTBL POINTER TO '1     '
      EQUIVALENCE (ONE,NUMPTR(3))
C TWO:         NAMTBL POINTER TO '2     '
      EQUIVALENCE (TWO,NUMPTR(5))
C THREE:       NAMTBL POINTER TO '3     '
      EQUIVALENCE (THREE,NUMPTR(6))
C FOUR:        NAMTBL POINTER TO '4     '
      EQUIVALENCE (FOUR,NUMPTR(7))
C FIVE:        NAMTBL POINTER TO '5     '
      EQUIVALENCE (FIVE,NUMPTR(8))
C
C       15.    ARRAY LIMIT STORAGE
C
      COMMON/SBSCPT/SBSCPT
      DIMENSION SBSCPT(101),RANGE(100)
C RNGPT:       POINTER TO NEXT RANGE ENTRY
      EQUIVALENCE (RNGPT,SBSCPT(1))
C RANGE:       STORAGE FOR APT RESERVE STATEMENT INFORMATION
      EQUIVALENCE (RANGE(1),SBSCPT(2))
C
C       16.    LITERALS FOR I. L. OPERATION CODES
C
      COMMON/IL/IL
      DIMENSION IL(21)
C REPL:        CONTAINS COMMAND CODE (17) FOR REPL COMMAND
      EQUIVALENCE (REPL,IL(17))
C MOVE:        CONTAINS COMMAND CODE (19) FOR MOVE COMMAND
      EQUIVALENCE (MOVE,IL(19))
C
C       17.    MODE CODES
C
      COMMON/MODX/MODX
      DIMENSION MODX(32)
C RLDSRF:      MODE CODE (12) FOR RULED SURFACE
      EQUIVALENCE (RLDSRF,MODX(12))
C POINT:       MODE CODE (19) FOR POINT
      EQUIVALENCE (POINT,MODX(19))
C REAL:        MODE CODE (24) FOR A SCALAR
      EQUIVALENCE (REAL,MODX(21))
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      DIMENSION MACXX1(71)
C INTMED:      0=NO -,-1=INTERMEDIATE-,+1=FINAL MACRO PROCESSING
      EQUIVALENCE (INTMED,MACXX1(22))
C
C       27.    OPERAND MODIFIERS
C
      COMMON/OPMOD/OPMOD
      DIMENSION OPMOD(6)
C TRPDLR:      CONTAINS OPERAND TYPE CODE 3
      EQUIVALENCE (TRPDLR,OPMOD(4))
C QUIDLR:      CONTAINS OPERAND TYPE CODE 5
      EQUIVALENCE (QUIDLR,OPMOD(6))
C
C       28.    OPERAND MODIFIERS
C
      COMMON/SUBLST/SUBLST
      DIMENSION SUBLST(136),APTXXX(120)
C APTXXX:      NAMTBL POINTERS FOR XECUTION SUBROUTINE NAMES
      EQUIVALENCE (APTXXX(1),SUBLST(1))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C MODHLF:      NORMAL MODE CODE LIMIT 500
      EQUIVALENCE (MODHLF,MODULI(2))
C
C       42.    COMMON BLOCK FOR CANON AND OBTAIN ARGUMENT STORAGE
C
      COMMON/CANSTR/CANSTR
      DIMENSION CANSTR(18),CANSTK(16)
C CANPTR:      POINTER TO LAST CANSTK ENTRY
      EQUIVALENCE (CANPTR,CANSTR(1))
C CANCHK:      CONTAINS DIMENSION OF ARRAY CANSTK
      EQUIVALENCE (CANCHK,CANSTR(2))
C CANSTK:      ARGUMENT STACK FOR CANON AND OBTAIN STATEMENTS
      EQUIVALENCE (CANSTK(1),CANSTR(3))
C*
C ARGUMENTS    I       CURRENT PRODUCTION NUMBER
C              IASNRT  INTEGER USED BY RECOG TO BRANCH TO THE
C              APPROPRIATE CODING AFTER RETURN FROM RECOGN
C
      LOGICAL CANFLG,ERRFLG
      CHARACTER*6 PPOINT
      external alarm
      DATA CANFLG/.FALSE./,STMTYP,CANDAT/2*0/
      DATA PPOINT /'POINT'/
C**
      INDEX=I-40
      GO TO(4100,4200,4300,4400,4500,4600,4700,4800,4900),INDEX
C
C...  STORE NEXT ELEMENT
C
 4100 N5=STACK(1,TOP-5)
      IF(CANPTR.NE.0)GO TO 4150
      J=NAMTBL(N5)-GEOM(1)
      IF(J.EQ.RLDSRF)GO TO 4110
      J=J-MODHLF
      IF(J.NE.RLDSRF)GO TO 4150
 4110 N5=GETTMP(RLDSRF)
      NAMTBL(N5)=BIGGEO(1)+J
      STACK(1,TOP-5)=N5
      J=BIGGEO(1)/MODULO
      STACK(2,TOP-5)=META(J)
      GO TO 220
 4150 CANPTR=CANPTR+1
      CANDAT=CANDAT+1
      IF(CANPTR.EQ.1)GOTO 4175
 4155 IF(CANPTR.NE.CANERR)GOTO 4156
      CALL ALARM(III,TOP-1,8,'RECOGN  ')
      GOTO 4403
 4156 IF(CANPTR.LE.CANCHK)GO TO 4160
      IF(CANPTR.EQ.CANCH)CALL ALARM(19,TOP-1,8,'RECOGN  ')
      GO TO 4170
 4160 J=STACK(1,TOP-1)
      KK=MODE(J)
      IF(STMTYP.NE.3)GOTO 4161
      IF(J.GT.NAMMAX)GOTO 4172
      JJ=NAMTBL(J)/MODULO*MODULO
      IF(JJ.NE.VBL(1).AND.JJ.NE.TEMP(1))GOTO 4165
 4161 IF(KK.NE.REAL)GOTO 4172
 4165 CANSTK(CANPTR) = STACK(1,TOP-1)
 4170 STACK(1,TOP-2) = STACK(1,TOP)
      STACK(2,TOP-2) = STACK(2,TOP)
      TOP = TOP-2
      GOTO 220
 4172 CALL ALARM(KKK,TOP-1,8,'RECOGN  ')
      ERRFLG=.TRUE.
      GOTO(4165,4212),INDEX
C
C...  STORE NEGATIVE MODIFIER
C
 4200 CANPTR=CANPTR+1
      IF(CANPTR.EQ.1)GOTO 4175
 4205 IF(CANPTR.NE.CANMAX)GOTO 4206
 4207 CALL ALARM(III,TOP,8,'RECOGN  ')
      GOTO 4403
 4206 IF(CANPTR.LE.CANCHK)GO TO 4210
      IF(CANPTR.EQ.CANCH)CALL ALARM(19,TOP,8,'RECOGN  ')
      GO TO 4220
 4210 IF(STMTYP.EQ.1)GOTO 4230
 4212 CANSTK(CANPTR) = -CANPTR
 4220 STACK(1,TOP-1)=STACK(1,TOP)
      STACK(2,TOP-1)=STACK(2,TOP)
      TOP = TOP-1
      GOTO 220
 4230 III=1008
      GOTO 4207
C
 4175 TP=TOP-6+INDEX
      ERRFLG=.FALSE.
      IF(STACK(1,TP+1).EQ.SLASH(2))GOTO 4180
      TP=TP-2
      STMTYP=2
      GOTO 4185
 4180 STMTYP=3
      IF(NAMTBL(STACK(1,TP+2)).EQ.CANON(1))STMTYP=1
 4185 MODC=MOD(NAMTBL(STACK(1,TP)),MODHLF)
      CANMAX=TXXXX(1,MODC)
      CANERR=CANMAX+1
      CANCH =CANCHK+1
      III=2032
      KKK=2033
      IF(STMTYP.NE.3)GOTO 4190
      III=1035
      KKK=2051
 4190 GOTO(4155,4205),INDEX
C
C...  REMOVE VARIABLE NAME FROM CANON DEFINITION
C
 4300 CANNAM = STACK(1,TOP-3)
      J = STACK(1,TOP-5)
      JJ=MODE(CANNAM)
      MODC=MOD(NAMTBL(J),MODULO)
      IF (JJ.EQ.MODC)GOTO 4301
      CALL ALARM(1024,TOP-3,8,'RECOGN  ')
      GOTO 4403
 4301 CANFLG = .TRUE.
      CANMAX=TXXXX(1,MODC)
      STACK(1,TOP-3) = STACK(1,TOP-1)
      STACK(2,TOP-3) = STACK(2,TOP-1)
      STACK(1,TOP-2) = STACK(1,TOP)
      STACK(2,TOP-2) = STACK(2,TOP)
      TOP = TOP-2
      GOTO 220
C
C...  END OF CANON DEFINITION STATEMENT
C
 4400 CANEND=1
 4401 IF(ERRFLG)GOTO 4403
      IF(ARGTOP.GT.0)GOTO 4415
      IF(STMTYP.EQ.2.OR.CANDAT.EQ.CANMAX)GOTO 4411
      IF(CANDAT.EQ.0)GOTO 4416
 4402 CALL ALARM(2032,0,8,'RECOGN  ')
      GOTO 4403
 4415 CALL ALARM(2013,-ARGTOP,8,'RECOGN  ')
      GOTO 4403
 4416 CALL ALARM(2032,0,4,'RECOGN  ')
 4411 J = STACK(1,TOP-5)
      JJ = MODULO*(NAMTBL(J)/MODULO)
      K = STACK(1,TOP-3)
      KK = NAMTBL(K)-GEOM(1)
      IF(KK.GE.MODHLF)KK=KK-MODHLF
 4420 IF(JJ.NE.VBL(1). AND .JJ.NE.TEMP(1))GO TO 4425
      IF(MODE(J).EQ.KK)GO TO 4404
      CALL ALARM(1001,TOP-5,8,'RECOGN  ')
 4403 CANFLG = .FALSE.
      GOTO 600
C
 4425 CALL RESRVZ(J,KK,CANMAX,1)
      CALL SETMOD(TOP-5,VBL(1))
      NAMTBL(J) = NAMTBL(J)+KK
C
C...  CHECK FOR REFSYS
C
 4404 IF(JJ.EQ.VBL(1).AND.INTMED.EQ.0)CALL ALARM(50,TOP-5,4,'RECOGN  ')
      IREF=0
      REFSAV=0
      IF(.NOT.REFFLG)GO TO 4445
      IF(KK.LT.1.OR.KK.GT.20)GO TO 4445
      GO TO(4431,4431,4432,4432,4433,4434,4434,4434,4435,4434,4445,
     /      4445,4445,4434,4445,4445,4445,4445,4433,4436),KK
 4431 IR=FOUR
      IREF=4
      GO TO 4440
 4432 IR=FIVE
      IREF=2
      GO TO 4440
 4433 IR=TWO
      IREF=1
      GO TO 4440
 4434 IR=ONE
      IREF=5
      GO TO 4440
 4435 IR=FIVE
      IREF=2
      GO TO 4440
 4436 IR=THREE
      IREF=3
 4440 IF(.NOT.CANFLG)GO TO 4445
C
C...  GENERATE CALL TO TRANSF TO MOVE REFERENCED C.F. TO LOCAL SYSTEM
C
      REFSAV=CANNAM
      CANNAM=GETTMP(KK)
      CALL CALLZZ(APTXXX(103))
      CALL ARGCVT(CANNAM)
      CALL ARGCVT(REFSAV)
      CALL ARGCVT(IR)
      CALL TWOARG(QUIDLR,CANMAX)
      CALL ARGCVT(ZERO)
      CALL RLSLIN
 4445 CALL OPCODE(MOVE)
      CALL ARGCVT(J)
      IF(CANPTR.EQ.0)GO TO 4414
      DO 4405 II=1,CANPTR
      IF(CANSTK(II))4406,4406,4407
 4406 IF (CANFLG) GOTO 4408
      III=2033
      GOTO 4403
 4408 CALL TWOARG(CANSTK(II),CANNAM)
      GOTO 4405
 4407 CALL ARGCVT(CANSTK(II))
      IF(IFTMP(CANSTK(II)))CALL PUTTMP(MODE(CANSTK(II)))
 4405 CONTINUE
      IF(.NOT.CANFLG)GO TO 4410
      IF(CANPTR.EQ.CANMAX)GO TO 4480
 4414 JJ=CANPTR+1
      DO 4409 II=JJ,CANMAX
 4409 CALL TWOARG(-II,CANNAM)
 4480 IF(IFTMP(CANNAM))CALL PUTTMP(MODE(CANNAM))
      IF(REFSAV.EQ.0)GO TO 4410
      IF(IFTMP(REFSAV))CALL PUTTMP(MODE(REFSAV))
 4410 CALL RLSLIN
C
C...  IF REFSYS APPLIES,GENERATE I.L. TO MOVE RESULT TO BASE SYSTEM
C
      IF(IREF.NE.0)CALL REFGEN(IREF,J)
      GO TO(600,4412,4413),CANEND
 4412 STACK(1,TOP-6) = STACK(1,TOP-5)
      STACK(2,TOP-6) = STACK(2,TOP-5)
      TOP = TOP-6
      GOTO 2900
 4413 STACK(1,TOP-4) = CANTMP
      L = TEMP(1)/MODULO
      STACK(2,TOP-4) = META(L)
      TOP = TOP-4
      GOTO 2900
C
C...  END OF NESTED NAMED CANON DEFINITION
C
 4500 CANEND=2
      GOTO 4401
C
C...  END OF NESTED UNNAMED CANON DEFINITION
C
C
 4600 K = STACK(1,TOP-3)
      KK=NAMTBL(K)-GEOM(1)
      IF(KK.GE.MODHLF)KK=KK-MODHLF
      J = GETTMP(KK)
      JJ = TEMP(1)
      CANTMP = J
      CANEND = 3
      GOTO 4420
C
C **********   O B T A I N   P R O C E S S I N G   **********
C
 4700 J = STACK(1,TOP-1)
      IF(ARGTOP.GT.0)GO TO 7015
      IF(CANDAT.GT.0)GO TO 7010
      CALL ALARM(18,0,8,'RECOGN  ')
      GO TO 7080
 7010 IF(MODE(J).EQ.MODC) GO TO 7020
C
C... VARIABLE ASSIGNED WRONG MODE.
C
      CALL ALARM(1050,TOP-1,8,'RECOGN  ')
      GO TO 7080
 7015 CALL ALARM(2013,-ARGTOP,8,'RECOGN  ')
      GO TO 7080
 7020 IF(ERRFLG)GOTO 7080
      IF (MOD(NAMTBL(J),MODULO) .LE. MODHLF)  GO TO 7030
      J = GETTMP(MODE(J))
      CALL OPCODE(REPL)
      CALL ONEARG(TXXXX(1,MODC))
      CALL TWOARG(0,J)
      CALL TWOARG(TRPDLR,STACK(1,TOP-1))
      CALL RLSLIN
C
C...  IF REFSYS APPLIES,MOVE C.F. TO LOCAL SYSTEM
C
 7030 REFSAV=0
      IF(.NOT.REFFLG)GO TO 7032
      JJ=MODE(J)
      IF(JJ.LT.1.OR.JJ.GT.20)GO TO 7032
      GO TO(7061,7061,7062,7062,7063,7064,7064,7064,7062,7064,7032,
     /      7032,7032,7064,7032,7032,7032,7032,7063,7066),JJ
 7061 IR=FOUR
      GO TO 7070
 7062 IR=FIVE
      GO TO 7070
 7063 IR=TWO
      GO TO 7070
 7064 IR=ONE
      GO TO 7070
 7066 IR=THREE
 7070 REFSAV=J
      J=GETTMP(JJ)
      CALL CALLZZ(APTXXX(103))
      CALL ARGCVT(J)
      CALL ARGCVT(REFSAV)
      CALL ARGCVT(IR)
      CALL TWOARG(QUIDLR,TXXXX(1,JJ))
      CALL ARGCVT(ZERO)
      CALL RLSLIN
C
 7032 DO 7050 N=1,CANPTR
      K=CANSTK(N)
      IF(K.LT.0)GO TO 7050
      L=(NAMTBL(K)/MODULO)*MODULO
      IF((L.NE.IDENT(1)).AND.(L.NE.CONGEO(1)).AND.
     /   (L.NE.CONBIG(1)).AND.(L.NE.CONPRO(1)))GO TO 7035
      CALL RESRVZ(K,REAL,TXXXX(1,REAL),1)
      NAMTBL(K)=VBL(1)+REAL
      GO TO 7040
 7035 IF((L.EQ.VBL(1)).AND.(MODE(K).EQ.REAL))GO TO 7040
      IF((MOD(NAMTBL(K),MODULO).GT.MODHLF)
     / .AND.(MODE(K).EQ.REAL))GO TO 7045
 7040 CALL OPCODE(MOVE)
      CALL TWOARG(0,K)
 7043 CALL TWOARG(-N,J)
      CALL RLSLIN
      GO TO 7050
 7045 CALL OPCODE(MOVE)
      CALL TWOARG(TRPDLR,K)
      GO TO 7043
 7050 CONTINUE
      IF(REFSAV.EQ.0)GO TO 7080
      IF(IFTMP(REFSAV))CALL PUTTMP(MODE(REFSAV))
 7080 IF(IFTMP(J))CALL PUTTMP(MODE(J))
      GO TO 600
C
C
C... SUBSCRIPTED ARGUMENT IN OBTAIN STATEMENT
C
 4800 I=STACK(1,TOP-4)
      IF(MODE(I).NE.0)GO TO 1000
      NAMTBL(I)=NAMTBL(I)+REAL
      III=1
 7110 IF(III.GE.RNGPT)GO TO 1000
      IF(RANGE(III).EQ.I)GO TO 7120
      III=III+2
      GO TO 7110
 7120 CALL RESRVZ(I,REAL,TXXXX(1,REAL),RANGE(III+1))
      GO TO 1000
C
C... RETURN TO RECOG
C
  220 IASNRT=2
      GO TO 9000
  600 IASNRT=3
      GO TO 8900
 1000 IASNRT=4
      GO TO 9000
 2900 IASNRT=5
      CANFLG = .FALSE.
 8900 CANPTR=0
      STMTYP=0
      CANDAT=0
 9000 RETURN
C
C...  SPECIAL POINT DEFINITION
C
 4900 K=STACK(1,TOP-1)
      ARGTOP=ARGTOP+1
      ARGSTK(ARGTOP)=K
      IF(IFTMP(K))CALL PUTTMP(MODE(K))
      STACK(1,TOP-1)=STACK(1,TOP-3)
      STACK(2,TOP-1)=STACK(2,TOP-3)
      K=NAME(PPOINT)
      CALL MACLBL(K,0,K)
      NAMTBL(K)=GEOM(1)+POINT
      STACK(1,TOP-3)=K
      K=GEOM(1)/MODULO
      STACK(2,TOP-3)=META(K)
      STACK(1,TOP-2)=SLASH(2)
      K=SLASH(1)/MODULO
      STACK(2,TOP-2)=META(K)
      GO TO 220
C
      END
