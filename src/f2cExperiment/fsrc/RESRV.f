**** SOURCE FILE : M0000959.W01   ***
*
C.....FORTRAN SUBROUTINE  ....RESRV          8/68                 HG
C.....FORTRAN ROUTINE              ..RESRV..   HL GRAY 3/68         *ID*
      SUBROUTINE RESRV
C
C FORTRAN SUBROUTINE 'RESRV'--PROCESS INTERMEDIATE LANGUAGE RESRV
C              INSTRUCTION
C
C PURPOSE      TO ESTABLISH STORAGE FOR CANONICAL FORMS AND BLANK COMMON
C              TO PLACE POINTERS IN NAME TABLE
C
C LINKAGE      CALL RESRV
C
C ARGUMENTS    THROUGH COMMON
C
C METHOD       ALL ELEMENTS ARE STORED IN THE CANONICAL FORMS ARRAY   OR
C              BLANK COMMON.  SEPERATE POINTERS ARE MAINTAINED FOR---
C
C                   SCALARS
C                   SCALAR ARRAYS
C                   NONSCALARS
C                   INTERNAL ARRAYS
C                   BLANK COMMON
C
C              MODE AND NUMBER ARE EXAMINED TO DETERMINE WHICH
C              TYPE OF PROCESSING IS REQUIRED.
C
C--------------------------------------------------------------CDE PAK
C
C
C
C UNLABELED COMMON
C
C
      INCLUDE 'BLANKCOM.INC'
      INCLUDE 'INTRPEQ.INC'
C
C
C
C STOR--COMMON CONTAINING STORAGE PARAMETERS
C
C
      COMMON/STOR/  NTB,      FPB,      PPB,      COMN,      CFB
      INTEGER       NTB,      FPB,      PPB,      COMN,      CFB
C
C
C WORK--COMMON CONTAINING WORKING VARIABLES
C
C
      COMMON/WORK/  PGC,      PGCN,     ILC,      IXC
      INTEGER       PGC,      PGCN,     ILC,      IXC
C
      COMMON/WORK/  SCP,      SAP,      NSP,      IAP,   CFP,   COMP
      INTEGER       SCP,      SAP,      NSP,      IAP,   CFP,   COMP
C
      COMMON/WORK/         NTP,   LNA,   RTP
      INTEGER  FPP,    NTP,    LNA,    RTP
      EQUIVALENCE  (FPP,   NTP)
      DIMENSION                   LNA(2,20)
C
C
C CONST--COMMON CONTAINING CONSTANTS
C
      COMMON/CONST/KCOMT,KCOMF,CILPRT,KCBN
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'LDEF.INC'
C
C
C---------------------------------------------------------------------
C
      EXTERNAL XCANON,BCDF
      INTEGER  K,M,N,MODE,P,SIZ,R,P1,P0,R1,R0,XCANON,RR,BCDF
      DIMENSION  P(4),R(4),RR(2)
      DOUBLE PRECISION  NDEX,RR1
      EQUIVALENCE  (P(1),SCP),(RR(1),RR1)
      DATA R/4*128/,RR/2*0/
C
C
      N=PP(ILC+5)
C
      SIZ=PP(ILC+4)+1
      MODE=PP(ILC+3)
      MD=MODE
      IF (MODE.EQ.23)MODE=21
      NTP=NTB+PP(ILC+2)
C        IF MODE IS ZERO, PROCESS AS AN INTERNAL ARRAY
      IF(MODE.NE.0) GOTO 5
      M = 4
      SIZ = SIZ-1
C        IF MODE .GT. 0 AND .NE. 21, PROCESS AS NON-SCALAR
    5 IF(MODE.GT.0 .AND. MODE.NE.21) M=3
C        IF MODE .LT. 0, PROCESS AS BLANK COMMON
      IF(MODE.LT.0) GOTO 50
C        IF MODE IS 21, PROCESS AS A NON- OR SUB- SCRIPTED SCALAR
      IF(MODE.EQ.21 .AND. N.GT.1) M=2
      IF(MODE.NE.21.OR.N.NE.1)GOTO  7
      M=1
      SIZ=SIZ-1
C        CALCULATE INDEX AND REMAINING SPACE IN BLOCK(R0).
    7 NDEX = (MD*100+SIZ-1)*10000
      IF(N.EQ.1)NDEX=NDEX-1.0
      R0 = R(M)
      R1 = 0
C  OBTAIN CURRENT VERTUAL(P0) AND ACTUAL(P1) POINTERS TO BLOCK M.
      P0 = P(M)
      P1 = P0
      IF(.NOT.CANFLG) GOTO 30
   10 P0 = P0 + R1
C        WILL CANNONICAL FORM FIT IN BLOCK
      IF((R0-SIZ*N) .GE. (2-M/4)) GOTO 25
C        NO,SPLIT IF INDEXED
C        HOW MANY ELEMENTS OF ARRAY FIT
      K = (R0-1)/SIZ
C        ENTIRE CANNONICAL FORM CAN NOT FIT
      IF(K.EQ.N ) K = K-1
C        IF NO ELEMENTS FIT, BEGIN NEW BLOCK
      IF(K.NE.0) GOTO 15
      P0 = P0+R0
      R0 = KCBN
      GOTO 10
C        DETERMINE SPACE NOT OCCUPIED
   15 R1 = R0-K*SIZ-1
C        DETERMINE REMAINING SPACE WHICH CAN BE OCCUPPIED
      R0 = R0-R1
      P1 = XCANON(P0)
C        FLAG SPACE THAT IS NOT OCCUPIED
   20 RR(1) = R1
      RR(2) = (P0-CFB)/KCBN+1+BCDF('BK')
      CF(P1) = RR1
C        ADVANCE POINTER
      P0 = P0+R1
   25 P1 = XCANON(P0)
C        INITIALIZE CANNONICAL FORM
   30 GOTO (31,32,33,34), M
C        NON-SUBSCRIPTED SCALAR
   31 CALL TRASH(CF(P1))
      GOTO 34
C        SUBSCRIPTED SCALAR
   32 CALL TRASH(CF(P1))
      CF(P1+1)= N
      GOTO 34
C        NON-SCALAR
   33 CF(P1) = NDEX+N
      CALL TRASH(CF(P1+1))
C        INTERNAL ARRAY REQUIRES NO INITIALIZATION
   34 P1 = P1+SIZ
      P0 = P0+SIZ
      R0 = R0-SIZ
      N = N-1
C        IF NOT ENOUGH SPACE OR NO MORE FORMS OR NOT
C        ENOUGH SPACE FOR LAST FORM, START NEW BLOCK
      IF(CANFLG)GO TO 38
      IF(N.GE.1)GO TO 30
      GO TO 40
   38 IF((R0-SIZ.GE.1).AND.(N.GT.1))GO TO 30
      IF((R0-SIZ.GE.2-M/4).AND.(N.EQ.1)) GOTO 30
C        SAVE SPACE COUNT, INDICATE NEW BLOCK
      R1 = R0
      R0 = KCBN
      RR(1) = R1
      RR(2) = (P0-CFB)/KCBN+1+BCDF('BK')
      CF(P1) = RR1
C        STILL MORE FORMS
      IF(N.GE.1) GOTO 10
C        NO, STORE NAME IF REQUIRED
   40 GO TO (41,41,41,42), M
   41 CF(P1) = NB(NTP)
      P1=P1+1
      P0   = P0+1
      R1   = R1-1
C
   42 IF(.NOT.CANFLG)GOTO 43
      RR(1) = R1
      RR(2)=(P0-CFB)/KCBN+1+BCDF('BK')
      CF(P1) = RR1
   43 P(M) = P0
      R(M) = R1
C         STORE POINTER TO FORM(S)
      IF(M.LE.2)SIZ=SIZ+1
   45 NT(1,NTP) = P0  -SIZ
      RETURN
C
C        BLANK COMMON
C
 50   NTP = NTB + PP(ILC+2)
      NT(1,NTP) = COMP
      COMP = COMP + PP(ILC +5)
      RETURN
      END
