**** SOURCE FILE : M0006663.V03   ***
*
C
C              FORTRAN SUBROUTINE PATH
C
C LINKAGE      SUBROUTINE PATH
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    CALMCX          SUBROUTINE    INPUT
C          SUBROUTINE    MACLBL          SUBROUTINE    PRO020
C                                        SUBROUTINE    PRO026
C                                        SUBROUTINE    RECOG
C                                        SUBROUTINE    REPLAC
C
      SUBROUTINE PATH
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      DIMENSION MACXX1(71)
      LOGICAL SHOULD
C MCSAVP:      PRESENT NEST LEVEL DURING MACRO PROCESSING
      EQUIVALENCE (MCSAVP,MACXX1(5))
C WAY:         INDICATES TYPE OF MACRO PROCESSING
      EQUIVALENCE (WAY,MACXX1(26))
C LNUSDP:      INDEX OF LAST LINUSD ENTRY
      EQUIVALENCE (LNUSDP,MACXX1(51))
C NUMARG:      NUMBER OF MACRO VARIABLES+1 FOR CURRENT MACRO
      EQUIVALENCE (NUMARG,MACXX1(61))
C PATHLN:      CURRENT ACTUAL BRANCHING EXPRESSION. INITIALLY=NUMARG
      EQUIVALENCE (PATHLN,MACXX1(68))
C NXTLN:       POINTER TO NEXT LINUSD POSITION TO BE EXAMINED
      EQUIVALENCE (NXTLN,MACXX1(69))
C SHOULD:      MACRO INDICATOR. NORMALLY FALSE
      EQUIVALENCE (SHOULD,MACXX1(70))
C PATHCH:      CURRENT ACTUAL BRANCHING EXPRESSION. INITIALLY=NUMARG
      EQUIVALENCE (PATHCH,MACXX1(71))
C
C      26A.    MACRO PROCESSING ARRAYS
C
      COMMON/MACXX7/MACXX7
      DIMENSION MACXX7(182),LINUSD(50)
C LINUSD:      NUMBERS OF EXPRESSIONS REQUIRING BRANCHING FOR MACROS
      EQUIVALENCE (LINUSD(1),MACXX7(1))
C**
      PATHLN=PATHLN+1
      IF(NUMARG.EQ.0)GO TO 1
      IF(NXTLN.LE.LNUSDP)GO TO 3
    1 SHOULD=.TRUE.
    2 RETURN
    3 IF(PATHLN.NE.LINUSD(NXTLN))GO TO 1
      PATHCH=PATHCH+1
      CALL MACLBL(-MCSAVP,-PATHCH,I)
      NAMTBL(I)=1
      J=0
      IF(WAY.EQ.5)J=MCSAVP
      CALL CALMCX(I,J,2)
      SHOULD=.FALSE.
      NXTLN = NXTLN + 1
      RETURN
       END
