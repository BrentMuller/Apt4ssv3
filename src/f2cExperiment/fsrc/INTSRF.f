**** SOURCE FILE : M0012321.V02   ***
*
      SUBROUTINE INTSRF(SP,TOL,PT,NPT,IRC)
C
C     EXECUTIVE ROUTINE TO COMPUTE THE INTERSECTION BETWEEN TWO
C     ARBITRARY SURFACES.
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C SS - ARELEM - COMMON
      COMMON/SSARLM/BB(64,4),UU(4),VV(4),
     *              IITOP(6,4,4),IIFLAG(4,4),IPNUM(4)
C
C   COMMON FOR 2 SURFACE INTERSECTION
      COMMON/INTCOM/IKEEP(255)
C   EVALUATION VECTOR FOR PS AND DS
      DOUBLE PRECISION SPV(4,8,2)
      EQUIVALENCE (IKEEP(  1),SPV(1,1,1))
C   LAST THREE U,V PAIRS OF PS AND DS
      DOUBLE PRECISION UV(2,3,2)
      EQUIVALENCE (IKEEP(129),UV(1,1,1))
C   HISTORY OF UNIT NORMALS AT INTERSECTION POINTS ON PS AND DS
      DOUBLE PRECISION UN(18)
      EQUIVALENCE (IKEEP(165),UN(1))
C   POINT OF INTERSECTION
      DOUBLE PRECISION PXYZ(3)
      EQUIVALENCE (IKEEP(205),PXYZ(1))
C   PLANE PERPENTICULAR TO INTERSECTION DIRECTION
      DOUBLE PRECISION CTP(4)
      EQUIVALENCE (IKEEP(233),CTP(1))
C   MULTIBLE OF ABSOLUT TOLERANCE
      DOUBLE PRECISION CK
      EQUIVALENCE (IKEEP(241),CK)
C   MAXIMUM STEP
      DOUBLE PRECISION STEPMX
      EQUIVALENCE (IKEEP(243),STEPMX)
C   STEP LENGTH
      DOUBLE PRECISION STEP
      EQUIVALENCE (IKEEP(245),STEP)
C   OLD STEP LENGTH
      DOUBLE PRECISION OSTEP
      EQUIVALENCE (IKEEP(247),OSTEP)
C   INTERNAL POINT COUNT
      EQUIVALENCE (IKEEP(250),IPTKNT)
C   MAXIMUM NUMBER OF POINTS
      EQUIVALENCE (IKEEP(251),NPTS)
C   OUT OF BOUND SIGNAL FOR PS AND DS
      INTEGER ISFER(2)
      EQUIVALENCE (IKEEP(252),ISFER(1))
C
C ARGUMENTS
      DIMENSION SP(3),PT(9,1)
C
C LOCAL VARIABLES
      LOGICAL LXBND1, LXBND2, START
C
      INCLUDE 'XUNITS.INC'
C
      DOUBLE PRECISION SCALE(4)
C
C                  MM    CM    INCH   FEET
      DATA SCALE/25.4D0,2.54D0,1.D0,0.0833333333D0/
C
C AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
C
      NPTS = NPT
      LXBND1 = .FALSE.
      LXBND2 = .FALSE.
      IRC=0
      NPT=0
C
C         INITIAL STARTUP INFO
      CTP(1)=1.D0
      CTP(2)=1.D0
      CTP(3)=1.D0
      CTP(4)=1.D0
      PXYZ(1)=SP(1)
      PXYZ(2)=SP(2)
      PXYZ(3)=SP(3)
      PT(1,1)=SP(1)
      PT(2,1)=SP(2)
      PT(3,1)=SP(3)
      TL=DABS(TOL)
      IF(TL.LT..00001D0) TL=.00001D0
      CK=TL*8.D0
      STEPMX=.01D0*SCALE(IOLD) + TL*1000.D0
C MAX. STEP IS <= 4.0 INCHES *** AEQUIVALENT TO 100 MM
      SMAX = 4.D0 * SCALE(IOLD)
C
      IF(STEPMX.GT.SMAX) STEPMX=SMAX
      STEP=0.D0
      OSTEP=STEP
C TURN CUT FLAG OFF FOR PASS 1:
      MCUT=1
      DO 10 I=1,18
      UN(I)=0.D0
   10 CONTINUE
C
C I N I T I A L I Z A T I O N
C  LOOP UNTIL START POINT "PXYZ" CONVERGES (MAX. 15 LOOPS) ****
      DO 130 II=1,15
      ITIM=II
      IF (II.GT.2) GOTO 60
C
C ON FIRST TWO ITERATIONS, SCAN SURFACES FOR START U,V:
      DO 50 I=1,2
C
C IF SURFACE IS A PLANE, FORGET IT
      IF (IIFLAG(1,I).LE.0) GOTO  50
C
C SCAN SURFACE FOR PT. ON SURFACE CLOSEST TO "PXYZ":
      DIS=90.D20
      V=-.1D0
      DO 40 J=1,5
      U=-.1D0
      V=V+.2D0
      DO 30 K=1,5
      U=U+.2D0
      CALL CNSURF(U,V,BB(1,I),SPV(1,1,I),IIFLAG(1,I),0)
      D1=(PXYZ(1)-SPV(1,1,I))**2 + (PXYZ(2)-SPV(2,1,I))**2
     *                           + (PXYZ(3)-SPV(3,1,I))**2
      IF (DIS.LT.D1) GOTO 30
      DIS=D1
C
C SAVE UV OF SURFACE
      DO 20 L=1,3
      UV(1,L,I)=U
      UV(2,L,I)=V
   20 CONTINUE
   30 CONTINUE
   40 CONTINUE
   50 CONTINUE
C
C UV OF SURFACE IS KNOWN; COMPUTE A SINGLE INTERSECTION PT.:
   60 CONTINUE
      KS=-1
      DO 70 L=1,3
      CALL INTCON(PT,NP,KS)
      IF (L.GT.2) GOTO 70
      PT(1,1)=PXYZ(1)
      PT(2,1)=PXYZ(2)
      PT(3,1)=PXYZ(3)
   70 CONTINUE
C
C IF POINT NOT OVER DS, MOVE IT TO DS BOUNDARY
      IF (ISFER(2).GE.0) GOTO 80
      NS=2
C SET SURFACE 2 BOUNDARY FLAG:
      LXBND2 = .TRUE.
C
C IF POINT NOT OVER PS, MOVE IT TO PS BOUNDARY
      GOTO 90
   80 CONTINUE
      IF (ISFER(1).GE.0) GOTO 100
      NS=1
C SET SURFACE 1 BOUNDARY FLAG:
      LXBND1 = .TRUE.
  100 CONTINUE
   90 CONTINUE
C
      IF (.NOT. LXBND1.AND..NOT. LXBND2) GOTO 110
C FIND AN INTERSECTION PT. ON THE BOUNDARY:
      CALL INTBND(NS,IRC)
C STILL OUT OF BOUNDS? ***
      IF (IRC.LT.0) GOTO 130
  110 CONTINUE
C
C EXIT IF NO CHANGE IN PXYZ
      DSQ=(PT(1,1)-PXYZ(1))**2 + (PT(2,1)-PXYZ(2))**2
     *                         + (PT(3,1)-PXYZ(3))**2
      START = (DSQ.LT.1.D-8.AND.II.GT.1)
      IF (START) GOTO 140
      PT(1,1)=PXYZ(1)
      PT(2,1)=PXYZ(2)
      PT(3,1)=PXYZ(3)
  130 CONTINUE
  140 CONTINUE
C END OF LOOP TO FIND START POINT
C  IF HERE; CANNOT FIND A START INTERS. POINT
      IF(.NOT.START)GOTO 999
C
C COMPUTE START UP DIR OF YA YB YC
C  SET DIR. FROM CURRENT POS. TO UV=.5
      HX=PXYZ(1)
      HY=PXYZ(2)
      HZ=PXYZ(3)
      KS=1
      ITIM=0
C IF S1 IS A PLANE, USE S2 FOR START DIRECTION:
      IF(IIFLAG(1,2).LE.0) GOTO 120
C IF NEAR EDGE OF S2, USE S2 FOR START DIRECTION:
      IF(LXBND2.AND..NOT.LXBND1) GOTO 120
C
C USE SURFACE 1 FOR START DIR.
      CALL CNSURF(.5D0,.5D0,BB(1,2),SPV(1,1,1),IIFLAG(1,2),0)
      GOTO 135
C
C USE SURFACE 2 FOR START DIR.
  120 CALL CNSURF(.5D0,.5D0,BB(1,1),SPV(1,1,1),IIFLAG(1,1),0)
C
C COMPUTE DIR. FROM PXYZ TO TO SPV(1-3,1,1)
  135 DX=SPV(1,1,1)-PXYZ(1)
      DY=SPV(2,1,1)-PXYZ(2)
      DZ=SPV(3,1,1)-PXYZ(3)
      SEC=DSQRT(DX*DX + DY*DY + DZ*DZ)
      IF(SEC.EQ.0.D0) SEC=1.D0
      DX=DX/SEC
      DY=DY/SEC
      DZ=DZ/SEC
      CS=DX*CTP(1) + DY*CTP(2) + DZ*CTP(3)
C IS "YABC" ORIENTED TOWARD MIDDLE OF SURFACE?
      IF (CS.GE.0.D0) GOTO 150
C
C  FLIP CURRENT DIR. OF YA YB YC
      CTP(1)=-CTP(1)
      CTP(2)=-CTP(2)
      CTP(3)=-CTP(3)
      CTP(4)=-CTP(4)
  150 CONTINUE
  160 CONTINUE
C
C P A S S   1  &  2
C  COMPUTE POINTS UNTIL A BOUNDARY IS INTERSECTED
      CALL INTCON(PT,NP,KS)
      ITIM=ITIM+1
C ERROR?
      IF (IPTKNT.GT.0) GOTO 220
C
C NORMAL ENDUP IF IPTKNT.LT.0
C   IS INTERSECTION PASS 2 COMPLETE?
      IF (MCUT.NE.0) GOTO 190
C
C IF POINTS, EXIT; ELSE TURN FORWARD AROUND AND REDO
      IF (NP.GT.2) GOTO  220
      IF(ITIM.GT.2)GO TO 999
      IF (ITIM.NE.2) GOTO 180
C
C RELOAD FIRST START POSITION & UV
      PXYZ(1)=HTX
      PXYZ(2)=HTY
      PXYZ(3)=HTZ
      DO 170 I=1,3
      UV(1,I,1)=U1
      UV(2,I,1)=V1
      UV(1,I,2)=U2
      UV(2,I,2)=V2
  170 CONTINUE
C
C FLIP CURRENT DIR. OF YA YB YC
      CTP(1)=-CTP(1)
      CTP(2)=-CTP(2)
      CTP(3)=-CTP(3)
      CTP(4)=-CTP(4)
  180 CONTINUE
      GOTO 210
  190 CONTINUE
C
C PASS 1 COMPLETE; REVERSE DIRECTION & DO PASS 2.
C  SAVE CURRENT POSITION:
      HTX=PXYZ(1)
      HTY=PXYZ(2)
      HTZ=PXYZ(3)
      IF (NP.GT.2) GOTO 200
      PXYZ(1)=HX
      PXYZ(2)=HY
      PXYZ(3)=HZ
      HTX=PXYZ(1)
      HTY=PXYZ(2)
      HTZ=PXYZ(3)
  200 CONTINUE
      U1=UV(1,2,1)
      V1=UV(2,2,1)
      U2=UV(1,2,2)
      V2=UV(2,2,2)
      KS=0
C SET CUT FLAG ON FOR PASS 2:
      MCUT=0
      CK=TL*4.D0
C
C FLIP CURRENT DIR. OF YA YB YC
      CTP(1)=-CTP(1)
      CTP(2)=-CTP(2)
      CTP(3)=-CTP(3)
      CTP(4)=-CTP(4)
  210 CONTINUE
      GO TO 160
  220 CONTINUE
C
C MAX. POINT REACHED, IF CUT ON, RETURN THESE
      IF(MCUT.EQ.1) GOTO 999
      NPT=NP
C
  999 RETURN
      END
