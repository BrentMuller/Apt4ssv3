**** SOURCE FILE : M0002233.V12   ***
*
C.....FORTRAN SUBROUTINE  ....APT089         8/68                 HG,RN
C.....FORTRAN SUBROUTINE             APT089...              3/1/68   GK
C          PART 2 OF APT088
C              FORTRAN SUBROUTINE APT089
C
C PURPOSE      TO GENERATE THE CANONICAL FORM OF A TABULATED
C              CYLINDER DEFINED BY THE POINTS THROUGH WHICH IT
C              MUST PASS BY THE FOLLOWING APT STATEMENT
C                TABCYL/*, V, TRFORM, MI, P1, **, K1, P2,
C                   P3, ..., PN, ***, KN
C                * = NOX, NOY, NOZ, XYZ, RTHETA, OR THETAR
C                ** = SLOPE OR NORMAL
C                 *** = SLOPE OR NORMAL
C
C LINKAGE      CALL APT089 (A)
C
C
C ARGUMENTS    A       ARRAY CONTAINING THE INFORMATION NECESSARY
C                      TO PLACE THE TABCYL CANONICAL FORM ON TAPE
C                      AND LATER RETRIEVE IT FROM TAPE
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          APT040
C              SUBROUTINE          APT087
C              SUBROUTINE          APT094
C              REAL FUNCTION       ATAN
C              REAL FUNCTION       ATAN2
C              LOGICAL FUNCTION    CKDEF
C              REAL FUNCTION       COS
C              SUBROUTINE          DOTF
C              SUBROUTINE          ERROR
C              REAL FUNCTION       MINO
C              REAL FUNCTION       SIN
C              REAL FUNCTION       SQRT
C              SUBROUTINE          TABTAP
C              LOGICAL FUNCTION    ZVECT
C
C        ADDITIONS FOR PRINT /TABPRT,ON OR OFF
C        TABPRT FLAG IS CHECKED  EACH TIME BEFORE PRINTING
C        FLAG IS SET IN PRINT ROUTINE AND INITIALIZED IN APT227
      SUBROUTINE APT089(A)
      IMPLICIT DOUBLE PRECISION (A-H),DOUBLE PRECISION (O-Z)
C
      INCLUDE 'BLANKCOM.INC'
C
      LOGICAL CKDEF,ZVECT
      DOUBLE PRECISION TAB(SSIZ)
      EQUIVALENCE (COM(41),TAB(1))
      DIMENSION A(2),VV(3),DD(12),ROTM(9),TABLE(8)
      INCLUDE 'DARRAY.INC'
      DOUBLE PRECISION DY1,DY2
      DOUBLE PRECISION A1,B1,A2,B2,SL1,SL2
C
C
C
C
      INCLUDE 'TOTAL.INC'
      INCLUDE 'DSHAR6.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISHR17.INC'
      INCLUDE 'KNUMBR.INC'
      INCLUDE 'XUNITS.INC'
C
C
      EQUIVALENCE (TAB(2),ROTM(1))
C
      CHARACTER FORM1*112,FORM2*92,FORM3*120,FORM4*28
      CHARACTER FORM5*4,FORM7*16,FORM9*100
C
      DATA FORM1/
     1' NUM        THETA        RADIUS         X-CORD         Y-CORD
     2      SEG LENGTH       SEG ANGLE      EXT ANGLE'/
      DATA FORM2/
     1' NUM     SLOPE        NORMAL      ALPHA   TANGENT A   TANGENT B
     2   CURVA    DELTA CURV     '/
      DATA FORM3/
     1'    CURVATURE    .+........................+.....................
     2...+........................+........................+.'/
      DATA FORM4/' EXTENSION INTERSECTION U=  '/
      DATA FORM5/' V= '/
      DATA FORM7/' ROTATION MATRIX'/
      DATA FORM9/
     1'0      U              V              A             B            L
     2ENGTH         MAX           MIN    '/
      DATA TABLE/0.05D0,.1D0,.2D0,.5D0,1.D0,2.D0,5.D0,10.D0/
      DATA ZLIT2,ZLIT3,ZLIT4,ZLIT6
     C    /1.D10,50.D0,52.5001D0,5.D-5/
C        ARITHMETIC STATEMENT FUNCTIONS
      SMAL(Z1)=DSIGN(DMAX1(DABS(Z1),Z1EM9),Z1)
      SLOP(Z1)=(DY2+DY1*Z1)/SMAL(DX2+DX1*Z1)
      TAN(Z1)=DSIN(Z1)/SMAL(DCOS(Z1))
      CRVA(Z1,Z2,Z3)=-(4.*TAN(Z1)+2.*TAN(Z2))*DABS(DCOS(Z1))**3/Z3
      CURV(SL1,SL2) = CRVA(A2,B2,SL2)+CRVA(B1,A1,SL1)
      L1=0
  560 DCMAX =Z0
      DO 570 I1=14,NM1,7
      IF (DABS(TAB(I1+18)).LT.DCMAX) GO TO 570
      DCMAX = DABS(TAB(I1+18))
      J1=I1
  570 CONTINUE
C        MINIMIZE MAXIMUM CURVATURE, USING NEWTON'S METHOD
      IF (DCMAX.LE.Z1EM3.OR.L1.GE.K4*I) GO TO 640
      A1= TAB(J1+8)-TAB(J1+9)
      A2= TAB(J1+15)-TAB(J1+16)
      B2= TAB(J1+22)-TAB(J1+16)
      DCP= -4.*(TAB(J1+10)+TAB(J1+17))/TAB(J1+10)/TAB(J1+17)
C        OBTAIN NEW APPROXIMATION FOR SLOPE AT P(J1), NEW CURVATURE
      DO 580 I1=1,4
      A2=DATAN(TAN(A2)-TAB(J1+18)/DCP)
      TAB(J1+15)= A2+ TAB(J1+16)
      B1 =TAB(J1+15)-TAB(J1+9)
      TAB(J1+18) =CURV(TAB(J1+10),TAB(J1+17))
      IF (DABS(TAB(J1+18)).LE.Z1EM3) GO TO 590
  580 CONTINUE
C        CHANGE IN A2 - CHANGE IN CURVATURE AT P(J1-1), P(J1+1)
C        AT START OR END OF TABCYL, REFLECT ANGLE
  590 X2=A2
      Y2=B2
      L1=L1+K1
      IF (J1+K-K15)620,630,600
  600 IF(J1+L-NM1) 610,601,630
  601 B2=PI-A2
      TAB(I-6)=TAB(I-12)+B2
      TAB(I-10)= CURV(TAB(I-18),TAB(I-11))
  610 A2= A1
      B2= B1
      A1= TAB(J1+1)-TAB(J1+2)
      B1= TAB(J1+8)-TAB(J1+2)
      TAB(J1+11) = CURV(TAB(J1+3),TAB(J1+10))
      GO TO 630
  620 A1= PI-B1
      TAB(22)=TAB(23)+A1
      TAB(32)=CURV(TAB(24),TAB(31))
  630 IF (J1.EQ.NM1) GO TO 560
      A1= X2
      B1= Y2
      A2= TAB(J1+22)-TAB(J1+23)
      B2= TAB(J1+29)-TAB(J1+23)
      TAB(J1+25) =CURV(TAB(J1+17),TAB(J1+24))
      GO TO 560
C        SAVE END SLOPES AND WRITE OUT DATA
  640 IF(L.NE.0) GO TO 642
      A1=TAB(I-20)-TAB(I-19)
      B1=TAB(I-13)-TAB(I-19)
      A2=TAB(I-13) - TAB(I-12)
      B2=PI-A2
      TAB(I-6)=TAB(I-12)+B2
      TAB(I-10)=CURV(TAB(I-18),TAB(I-11))
  642 SB=TAN(TAB(22))
      SE2= TAN(TAB(I-6))
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 643
C...     CALL PRINT TO OUTPUT ISN AND TABCYL IDENTIFICATION INFORMATION
      CALL PRINT(15,A,1)
C
      CALL CFORM(FORM1,DARRAY,1,112)
      CALL CPRINT(DARRAY)
  643 DO 672 I1=1,N
      J1=K7*I1
      CALL APT087(TEM,TAB(J1+13))
      TAB(J1+19)=TEM(2)
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 672
C        GA IS SEGMENT ANGLE, XA EXTERIOR ANGLE
      GA1 =GA
      IF (I1.EQ.N) GO TO 650
      GA=TAB(J1+16)/DEGRAD
      IF (I1.EQ.K1)GO TO 660
      XA= GA -GA1
      IF(DABS(XA).GT.Z2*Z90) XA=XA-DSIGN(360.0D0,XA)
      GO TO 670
C        NO SEGMENT ANGLE FOR LAST POINT
  650 GA=Z0
  660 XA=Z0
  670 CALL ICONV(I1,DARRAY,1,4)
      CALL FCONV(TEM(2),DARRAY,5,15,4)
      CALL FCONV(TEM(1),DARRAY,20,15,6)
      CALL FCONV(TAB(J1+13),DARRAY,35,15,6)
      CALL FCONV(TAB(J1+14),DARRAY,50,15,6)
      CALL FCONV(TAB(J1+17),DARRAY,65,15,6)
      CALL FCONV(GA,DARRAY,80,15,4)
      CALL FCONV(XA,DARRAY,95,15,4)
      CALL CPRINT(DARRAY)
  672 CONTINUE
C        WRITE MATCHED CURVATURES
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 674
      CALL CFORM('0',DARRAY,1,1)
      CALL CFORM(FORM2,DARRAY,2,92)
      CALL CPRINT(DARRAY)
  674 CMIN=ZLIT2
      CMAX=-ZLIT2
      DO 690 I1=1,N
      J1=K7*I1
      IF (I1.EQ.N) GO TO 675
      TA = TAB(J1+15)-TAB(J1+16)
      TB = TAB(J1+22)-TAB(J1+16)
      TEM(2)=CRVA(TA,TB,TAB(J1+17))
      GO TO 680
  675 TA=Z0
      TB = Z0
      TAB(25) =Z0
      TEM(2)=0.0
  680 TA=TAN(TA)
      TB=TAN(TB)
      TAB(J1+15) = TAN(TAB(J1+15))
      PHI=DATAN(ZM1/SMAL(TAB(J1+15)))/DEGRAD
      AL = PHI -TAB(J1+19)
      TAB(J1+19)=TEM(2)
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 685
      CALL ICONV(I1,DARRAY,1,4)
      CALL FCONV(TAB(J1+15),DARRAY,5,12,5)
      CALL FCONV(PHI,DARRAY,17,12,4)
      CALL FCONV(AL,DARRAY,29,12,4)
      CALL FCONV(TA,DARRAY,41,12,7)
      CALL FCONV(TB,DARRAY,53,12,7)
      CALL FCONV(TAB(J1+19),DARRAY,65,10,4)
      CALL FCONV(TAB(J1+18),DARRAY,75,13,4)
      CALL CPRINT(DARRAY)
C        PLOT CURVATURES
  685 TAB(J1+15)=TA
      TAB(J1+16)=TB
      CMIN=DMIN1(CMIN,TAB(J1+19))
  690 CMAX=DMAX1(CMAX,TAB(J1+19))
      CEN2=(CMAX-CMIN)/Z2
      DO 700 J1=1,7
      I1=J1
      IF (CEN2.LE.TABLE(J1)) GO TO 710
  700 CONTINUE
      I1=8
  710 CURVRG= TABLE(I1)
      CEN1=50.0/CURVRG
      CENTER= CEN2+CMIN
      IDUMY=CENTER*CEN1+DSIGN(Z5EM1,CENTER)
      CENTER=IDUMY
      CENTER=CENTER/CEN1
      CURTI1 =CENTER -CURVRG
      CURTI2=CENTER-Z5EM1*CURVRG
      TEMP=CENTER+Z5EM1*CURVRG
      TEM(1) =CENTER + CURVRG
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 732
      CALL CFORM('0',DARRAY,1,1)
      CALL FCONV(CURTI1,DARRAY,17,7,4)
      CALL FCONV(CURTI2,DARRAY,42,7,4)
      CALL FCONV(CENTER,DARRAY,67,7,4)
      CALL FCONV(TEMP,DARRAY,92,7,4)
      CALL FCONV(TEM(1),DARRAY,113,7,4)
      CALL CPRINT(DARRAY)
C
      CALL CFORM(FORM3,DARRAY,1,119)
      CALL CPRINT(DARRAY)
      KP=K7*N
      DO 730 I1=7,KP,7
      CALL CFORM('.',DARRAY,18,1)
      CALL CFORM('.',DARRAY,119,1)
      J1=ZLIT4-ZLIT3*CENTER/CURVRG
      J1=MIN0(MAX0(J1,2),102)+17
      CALL CFORM('.',DARRAY,J1,1)
      J1=ZLIT3*(TAB(I1+19)-CENTER)/CURVRG+ZLIT4
      J1=MIN0(MAX0(J1,2),102)+17
      CALL CFORM('*',DARRAY,J1,1)
      L1=I1/7
      CALL ICONV(L1,DARRAY,1,3)
      CALL FCONV(TAB(I1+19),DARRAY,4,12,6)
  730 CALL CPRINT(DARRAY)
      CALL CFORM(FORM3(17:),DARRAY,17,103)
      CALL CPRINT(DARRAY)
C        FIT CUBICS TO GIVEN SLOPES - TRANSLATE AND ROTATE TO ELIMINATE
C        CONSTANT TERM
  732 DO 771  I1=7,NM1,7
      TLENGT=TAB(I1+17)
      S1=TAB(I1+15)
      T1=TAB(I1+16)
C        COMPUTE COEFFICIENTS OF CUBIC, STORE IN TAB ARRAY
      TAB(I1+15) =(T1+S1)/TAB(I1+17)**2
      TAB(I1+16)= (-Z2*S1-T1)/TAB(I1+17)
      TAB(I1+17) =S1
C        COMPUTE MAXIMUM AND MINIMUM VALUES ON EACH CURVE
      IF (DABS(TAB(I1+15)).GT.Z1EM7) GO TO 750
      TAB(I1+19)= Z0
      TAB(I1+15)= Z0
      IF(DABS(TAB(I1+16)).GT.Z1EM7) GO TO 740
C        EQUATION IS LINEAR - MUST BE  Y = 0
      TAB(I1+16)= Z0
      TAB(I1+17)= Z0
      TAB(I1+18)= Z0
      GO TO 770
C        EQUATION IS QUADRATIC - EXTREMUM AT  -C/2B
  740 TAB(I1+18)= -TAB(I1+17)**2/(4.*TAB(I1+16))
      GO TO 760
C        EQUATION IS CUBIC - SOLVE FOR FIRST DERIVATIVE ZERO
  750 TEMP =TAB(I1+16)**2
      TEM1=3.*TAB(I1+15)*S1
      TEM3=(TEMP-TEM1)*DSQRT(TEMP-TEM1)*2.0
      TEM2=TAB(I1+16)*(2.*TEMP-3.*TEM1)
      TEM4=TEM2+DSIGN(TEM3,TEM2)
      TEM3=S1**2*(1.3333333*TEM1-TEMP)
      TEMP=TEM4/((TAB(I1+15)**2)*27.)
      IF(Z1) 760,760,755
  755 CONTINUE
      TEM1=TEM3/TEM4
      TAB(I1+18)=TEMP
      TAB(I1+19)=TEM1
C        TEST FOR MAX GREATER THAN MIN
  760 IF(TAB(I1+18).GE.TAB(I1+19)) GO TO 769
      TEMP =TAB(I1+18)
      TAB(I1+18)=TAB(I1+19)
      TAB(I1+19)=TEMP
C        MAX OR MIN MUST BE WITHIN INTERVAL
  769 IF(S1.LE.Z0.AND.T1.GE.Z0) TAB(I1+18)=Z0
      IF (S1.GE.Z0.AND.T1.LE.Z0) TAB(I1+19)  =Z0
  770 TAB(I1+18)=TAB(I1+18)/TLENGT
      TAB(I1+19)=TAB(I1+19)/TLENGT
      TAB(I1+17)=TLENGT
  771 CONTINUE
C        COMPUTE EXTENSION INTERVALS
C        EXTENSION EQUIVALENT TO  10 INCH. REGARDLESS OF UNITS
      DST = TABEXT
      DELTA = DST/DSQRT(Z1+SB**2)
      IF ((TAB(21)-TAB(28))*SB+TAB(20)-TAB(27).LT.Z0) DELTA= -DELTA
      TAB(13)=TAB(20)+ DELTA
      TAB(14)=TAB(21)+ DELTA*SB
      DELTA = DST/DSQRT(Z1+SE2**2)
      IF ((TAB(I-7)-TAB(I-14))*SE2+TAB(I-8)-TAB(I-15).LT.Z0)DELTA=-DELTA
      TAB(I-1)= TAB(I-8)+DELTA
      TAB(I) = TAB(I-7)+DELTA*SE2
      DO 780 I1=15,19
      TAB(I1) =Z0
      J1=K7*N +I1
  780 TAB(J1)=Z0
C        REDUCE EXTENSION IF NECESSARY
      IF (DABS(SB-SE2).LT.ZLIT6) GO TO 790
      X =(TAB(I-7)-TAB(14)+SB*TAB(13)-SE2*TAB(I-8))/(SB-SE2)
      A1=X-TAB(13)
      B1=SB*A1
      IF ( A1**2+B1**2.GT.DST**2 ) GO TO 790
      Y= B1+TAB(14)
      IF ( (X-TAB(I-8))**2+(Y-TAB(I-7))**2.GT.DST**2 ) GO TO 790
      IF ((X-TAB(20))*(TAB(27)-TAB(20))
     1  + (Y-TAB(21))*(TAB(28)-TAB(21)).GT.Z0) GO TO 790
      IF ((X-TAB(I-8))*(TAB(I-15)-TAB(I-8))
     1  + (Y-TAB(I-7))*(TAB(I-14)-TAB(I-7)).GT.Z0) GO TO 790
      TAB(13) =X-Z1EM2*(X-TAB(20))
      TAB(14) =Y-Z1EM2*(Y-TAB(21))
      TAB(I-1)=X-Z1EM2*(X-TAB(I-8))
      TAB(I)= Y -Z1EM2*(Y-TAB(I-7))
      CALL CFORM(FORM4,DARRAY,1,26)
      CALL FCONV(X,DARRAY,27,15,8)
      CALL CFORM(FORM5,DARRAY,46,3)
      CALL FCONV(Y,DARRAY,49,15,8)
      CALL CPRINT(DARRAY)
  790 TAB(17)=DSQRT((TAB(20)-TAB(13))**2+(TAB(21)-TAB(14))**2)
      TAB(I-4)=DSQRT((TAB(I)-TAB(I-7))**2+(TAB(I-1)-TAB(I-8))**2)
C        CHECK TABPRT FLAG
      IF(TABPRT) GO TO 796
      CALL CFORM(FORM7,DARRAY,1,16)
      CALL CPRINT(DARRAY)
      L=1
      DO 791 I1=2,10
      CALL FCONV(TAB(I1),DARRAY,L,13,6)
  791 L=L+13
      CALL CPRINT(DARRAY)
      CALL CFORM(FORM9,DARRAY,1,100)
      CALL CPRINT(DARRAY)
      DO 9095 I1=13,I,7
      L=1
      DO 9096 J1=1,7
      L1=I1+J1-1
      IF(L1.GT.I) GO TO 9094
      CALL FCONV(TAB(L1),DARRAY,L,15,8)
 9096 L=L+15
 9094 CALL CPRINT(DARRAY)
 9095 CONTINUE
  796 A(2)=TAB(1)
      CALL APT094(1,A(1),TAB(1))
      RETURN
       END
