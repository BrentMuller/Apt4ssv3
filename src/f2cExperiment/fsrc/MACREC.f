**** SOURCE FILE : M0006651.W03   ***
*
C
C              FORTRAN SUBROUTINE MACREC
C
C LINKAGE      SUBROUTINE MACREC(IPROD)
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    HELP            SUBROUTINE    RECOG
C          SUBROUTINE    ALARM
C          INTEGER FCT.  BCDF
C          SUBROUTINE    BINBCD
C          LOGICAL FCT.  IFTMP
C          SUBROUTINE    CALLZZ
C          SUBROUTINE    LABELZ
C          SUBROUTINE    MACLBL
C          SUBROUTINE    CALMCX
C          SUBROUTINE    MACTAB
C          SUBROUTINE    COMSTR
C          SUBROUTINE    MCXTRN
C          SUBROUTINE    MNPROC
C          INTEGER FCT.  NAME
C          SUBROUTINE    ONEARG
C          SUBROUTINE    OPCODE
C          SUBROUTINE    ARGCVT
C          SUBROUTINE    ASNADZ
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          SUBROUTINE    EPILOG
C
      SUBROUTINE MACREC(IPROD)
C
      IMPLICIT INTEGER (A-Z)
C
C              FUNCTION DECLARATION
C
      LOGICAL IFTMP
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C NUMBST:      NAMTBL INDEX OF BEGINNING OF NUMBER SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),RTERM(2),GEOM(2),TEMP(2),FCN(2),PROCED(2),
     *          PERMID(2),LABEL(2),IMPLAB(2),VBL(2),MACNAM(2),IDENT(2),
     *          MACVBL(2),CONGEO(2),CONPRO(2),DIGIT(2)
C RTERM:       (1)=CODE CLASS  4000,(2)=NAMTBL INDEX OF 'RTERM '
      EQUIVALENCE (RTERM(1),CODE(7))
C DIGIT:       (1)=CODE CLASS 10000,(2)=NAMTBL INDEX OF 'DIGIT '
      EQUIVALENCE (DIGIT(1),CODE(19))
C GEOM:        (1)=CODE CLASS 16000,(2)=NAMTBL INDEX OF 'GEOM  '
      EQUIVALENCE (GEOM(1),CODE(31))
C TEMP:        (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODE(33))
C FCN:         (1)=CODE CLASS 18000,(2)=NAMTBL INDEX OF 'FCN   '
      EQUIVALENCE (FCN(1),CODE(35))
C PROCED:      (1)=CODE CLASS 19000,(2)=NAMTBL INDEX OF 'PROCED'
      EQUIVALENCE (PROCED(1),CODE(37))
C PERMID:      (1)=CODE CLASS 20000,(2)=NAMTBL INDEX OF 'PERMID'
      EQUIVALENCE (PERMID(1),CODE(39))
C LABEL:       (1)=CODE CLASS 22000,(2)=NAMTBL INDEX OF 'LABEL '
      EQUIVALENCE (LABEL(1),CODE(43))
C IMPLAB:      (1)=CODE CLASS 23000,(2)=NAMTBL INDEX OF 'IMPLAB'
      EQUIVALENCE (IMPLAB(1),CODE(45))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C MACNAM:      (1)=CODE CLASS 34000,(2)=NAMTBL INDEX OF 'MACNAM'
      EQUIVALENCE (MACNAM(1),CODE(67))
C IDENT:       (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODE(69))
C MACVBL:      (1)=CODE CLASS 36000,(2)=NAMTBL INDEX OF 'MACVBL'
      EQUIVALENCE (MACVBL(1),CODE(71))
C CONGEO:      (1)=CODE CLASS 39000,(2)=NAMTBL INDEX OF 'CONGEO'
      EQUIVALENCE (CONGEO(1),CODE(77))
C CONPRO:      (1)=CODE CLASS 40000,(2)=NAMTBL INDEX OF 'CONPRO'
      EQUIVALENCE (CONPRO(1),CODE(79))
C
C        5.    PROGRAM CONTROL FLAGS
C
      COMMON/FLAGS/FLAGS
      LOGICAL NEWSTM
      DIMENSION FLAGS(4)
C NEWSTM:      TRUE WHEN NEXT SOURCE STATEMENT REQUESTED FOR PROCESS
      EQUIVALENCE (NEWSTM,FLAGS(2))
C
C        6.    GHOST STACK FOR OBJECT TIME TEMPORARY ALLOCATION
C              LENGTH AND CURRENT NUMBER OF ACTIVE TEMPORARY STORAGE
      COMMON/TMP/TXXXX
      DIMENSION TXXXX(2,32)
C
C       11.    SEQUENCE NUMBER STORAGE
C
      COMMON/SEQCOM/SEQCOM
      DIMENSION SEQCOM(3),SEQNUM(2)
C SEQNO:       INTERNALLY GENERATED STATEMENT NUMBER
      EQUIVALENCE (SEQNO,SEQCOM(1))
C SEQNUM:      ALPHANUMERIC REPRESENTATION OF CURRENT STATEMENT NUMBER
      EQUIVALENCE (SEQNUM(1),SEQCOM(2))
C
C       14.    I. L. LIST OPTION FLAGS
C
      COMMON/PRT/PRT
      LOGICAL MCHDNG
      DIMENSION PRT(7)
C MCHDNG:      TRUE IF START OF NEW MACRO PROCESSING
      EQUIVALENCE (MCHDNG,PRT(7))
C
C       16.    LITERALS FOR I. L. OPERATION CODES
C
      COMMON/IL/IL
      DIMENSION IL(21)
C REPL:        CONTAINS COMMAND CODE (17) FOR REPL COMMAND
      EQUIVALENCE (REPL,IL(17))
C
C       17.    MODE CODES
C
      COMMON/MODX/MODX
      DIMENSION MODX(32)
C SUBSCR:      MODE CODE (24) FOR SUBSCRIPT
      EQUIVALENCE (SUBSCR,MODX(24))
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      LOGICAL MACLDD,CALLON,CALLMV,ILHLT,MVMAC,MACRED,MVTRUE,FINMAC,
     *          MACEND
      DIMENSION MACXX1(71)
C MACDFP:      POINTER TO LAST ENTRY IN MACDF1 AND MACDF2 ARRAYS
      EQUIVALENCE (MACDFP,MACXX1(1))
C MCNMB:       NUMBER OF DEFINED MACROS
      EQUIVALENCE (MCNMB,MACXX1(2))
C MCHSTP:      POINTER TO LAST MACHST ENTRY
      EQUIVALENCE (MCHSTP,MACXX1(3))
C MCTXTP:      POINTER TO LAST MACTXT TABLE ENTRY
      EQUIVALENCE (MCTXTP,MACXX1(4))
C MCSAVP:      PRESENT NEST LEVEL DURING MACRO PROCESSING
      EQUIVALENCE (MCSAVP,MACXX1(5))
C MNMVBP:      POINTER TO LAST MNMVB AND MNMVC TABLE ENTRY
      EQUIVALENCE (MNMVBP,MACXX1(6))
C MACLDD:      TRUE WHEN MACRO TEXT IS TO BE LOAD INTO MCBUFF TABLE
      EQUIVALENCE (MACLDD,MACXX1(7))
C TEMP1:       MACRO TEMPORARY STORAGE
      EQUIVALENCE (TEMP1,MACXX1(8))
C CALLON:      TRUE AT A NESTED CALL DURING INTERMED. MACRO PROCESSING
      EQUIVALENCE (CALLON,MACXX1(10))
C CALLMV:      TRUE IF A CALL/MACRO VARIABLE STATEMENT IS ENCOUNTERED
      EQUIVALENCE (CALLMV,MACXX1(11))
C MVSEG:       CONTAINS POSITION NUMBER OF MACRO VBL IF CALLMV IS TRUE
      EQUIVALENCE (MVSEG,MACXX1(12))
C CALLPT:      MACTXT INDEX OF CURRENT CALL STATEMENT
      EQUIVALENCE (CALLPT,MACXX1(13))
C ILHLT:       TRUE IF I.L. SHOULD NOT BE PLACED IN ILFILE
      EQUIVALENCE (ILHLT,MACXX1(14))
C TEXTST:      POINTER TO MCBUFF OF MACRO TEXT WORD BEING PROCESSED
      EQUIVALENCE (TEXTST,MACXX1(15))
C MVPNT:       CONTAINS POINTER-1 OF FIRST MACRO VARIABLE VBLSAV
      EQUIVALENCE (MVPNT,MACXX1(16))
C MVMAC:       TRUE IF IN NESTED CALL LIST MACROVBL = MACRO VBL
      EQUIVALENCE (MVMAC,MACXX1(17))
C MACRED:      SET TRUE TO INDICATE INPUT FROM MCBUFF TABLE
      EQUIVALENCE (MACRED,MACXX1(18))
C MVTRUE:      TRUE IF SOME ASSIGNED VALUE IS A MACRO NAME
      EQUIVALENCE (MVTRUE,MACXX1(19))
C BRANCH:      SET 2 IF MACRO IS TO UNDERGO INTERMEDIATE PROCESSING.
      EQUIVALENCE (BRANCH,MACXX1(20))
C INTMED:      0=NO -,-1=INTERMEDIATE-,+1=FINAL MACRO PROCESSING
      EQUIVALENCE (INTMED,MACXX1(22))
C FINMAC:      TRUE IF SECOND FINAL PASS OF MACRO PROCESSING
      EQUIVALENCE (FINMAC,MACXX1(24))
C MCDFDM:      DIMENSION OF ARRAYS MACDF1,MACDF2 AND MACTBL
      EQUIVALENCE (MCDFDM,MACXX1(32))
C MHSTDM:      CONTAINS DIMENSION OF ARRAY MACHST
      EQUIVALENCE (MHSTDM,MACXX1(33))
C MCSVDM:      DIMENSION OF ARRAYS MACSV1,MACSV2 AND MACSV3
      EQUIVALENCE (MCSVDM,MACXX1(34))
C MNMVDM:      CONTAINS DIMENSION OF MNMVB AND MNMVC
      EQUIVALENCE (MNMVDM,MACXX1(35))
C MSEQDM:      CONTAINS DIMENSION OF THE ARRAY MACSEQ
      EQUIVALENCE (MSEQDM,MACXX1(36))
C MCSRCH:      AT FINAL MACRO PRECESSING MACDF1 POINTER
      EQUIVALENCE (MCSRCH,MACXX1(59))
C NUMARG:      NUMBER OF MACRO VARIABLES+1 FOR CURRENT MACRO
      EQUIVALENCE (NUMARG,MACXX1(61))
C MACEND:      TRUE WHEN ALL MACRO PROCESSING IS FINISHED
      EQUIVALENCE (MACEND,MACXX1(62))
C WHCHMN:      EQUAL TO NUMBER OF CURRENT MACRO BEING PROCESSED
      EQUIVALENCE (WHCHMN,MACXX1(63))
C VBLSVP:      POINTER TO LAST VBLSAV ENTRY
      EQUIVALENCE (VBLSVP,MACXX1(66))
C IVSVDM:      DIMENSION OF ARRAY VBLSAV
      EQUIVALENCE (IVSVDM,MACXX1(67))
C PATHLN:      CURRENT ACTUAL BRANCHING EXPRESSION. INITIALLY=NUMARG
      EQUIVALENCE (PATHLN,MACXX1(68))
C NXTLN:       POINTER TO NEXT LINUSD POSITION TO BE EXAMINED
      EQUIVALENCE (NXTLN,MACXX1(69))
C PATHCH:      CURRENT ACTUAL BRANCHING EXPRESSION. INITIALLY=NUMARG
      EQUIVALENCE (PATHCH,MACXX1(71))
C
C       24.    MACRO PROCESSING ARRAYS
C
      COMMON/MACXX3/MACXX3
      DIMENSION MACXX3(2630),MACDF1(400),MACDF2(400),MACHST(1800),MACSV1
     *         (10),MACSV3(10),MACSV2(10)
C MACDF1:      STORES MACRO NAME AND ALL MACRO VBL NAMTBL POINTERS
      EQUIVALENCE (MACDF1(1),MACXX3(1))
C MACDF2:      STORES NORMAL VALUES FOR ALL MACRO VARIABLES
      EQUIVALENCE (MACDF2(1),MACXX3(401))
C MACHST:      MACRO CALL HISTORY TABLE
      EQUIVALENCE (MACHST(1),MACXX3(801))
C MACSV1:      CONTAINS MACRO NEST LEVEL INFORMATIONS
      EQUIVALENCE (MACSV1(1),MACXX3(2601))
C MACSV2:      CONTAINS MACRO NEST LEVEL INFORMATIONS
      EQUIVALENCE (MACSV2(1),MACXX3(2611))
C MACSV3:      CONTAINS MACRO NEST LEVEL INFORMATIONS
      EQUIVALENCE (MACSV3(1),MACXX3(2621))
C
C       25.    MACRO PROCESSING ARRAYS
C
      COMMON/MACXX4/MACXX4
      DIMENSION MACXX4(100),MNMVB(25),MNMVC(25),MACSEQ(50)
C MNMVB:       INDICATES MACROS IN WHICH ARE ASSIGNED VALUES
      EQUIVALENCE (MNMVB(1),MACXX4(1))
C MNMVC:       CALLED MACRO FOR WHICH CORRESPONDING MNMVB ENTRY IS MADE
      EQUIVALENCE (MNMVC(1),MACXX4(26))
C MACSEQ:      PRESERVES INITIAL SEQUENCE NUMBERS OF THE MACROS
      EQUIVALENCE (MACSEQ(1),MACXX4(51))
C
C       26.    MACRO PROCESSING ARRAYS
C
      COMMON/MACXX6/MACXX6
      DIMENSION MACXX6(1300),MACTBL(400),VBLSAV(900)
C MACTBL:      NAMTBL POINTERS OF THE ASSIGNED VALUES FOR MACRO CALL
      EQUIVALENCE (MACTBL(1),MACXX6(1))
C VBLSAV:      SAVES MACRO VBL ASSIGNED VALUES DURING INTERMED. PROCESS
      EQUIVALENCE (VBLSAV(1),MACXX6(401))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C MODHLF:      NORMAL MODE CODE LIMIT 500
      EQUIVALENCE (MODHLF,MODULI(2))
C
C       36.    SYSTEM MACRO AND SEGMENT READ VARIABLES
C
      COMMON/MACSEG/MACSEG
      DIMENSION MACSEG(6)
C ITMPCT:      NUMBER OF INTERNAL SYMBOLS GENERATED IN TRANSLATION
      EQUIVALENCE (ITMPCT,MACSEG(5))
C
C       38.    COMMON BLOCK MACRO CALL STATEMENT
C              INDICATES A MACRO CALL BEING PROCESSED
      COMMON/CALFLG/ICALLF
C
C       44.    ERROR POSITION TABLE
C
      COMMON/ERRPOS/ERRPOS
      INTEGER ERRPOS,ESTACK
      DIMENSION ERRPOS(302),ESTACK(100)
C ESTACK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN STACK
      EQUIVALENCE (ESTACK(1),ERRPOS(103))
C
C       45.    NUMBER TABLE INDICES
C
      INCLUDE 'NUMBLK.INC'
C MNMBND:      LAST NAME TABLE ENTRY TO MACRO ASSIGNED NUMBER SECTION
C NUMIDX:      NAMTBL INDEX OF A NUMBER GIVEN IN THE CURRENT STATEMENT
C MASGND:      NAMTBL INDEX OF SECTION END FOR NUMBERS ASSIGNED TO MACRO
C*
C PURPOSE    EXECUTIVE ROUTINE FOR ALL PRODUCTIONS RELATED TO
C            APT MACRO PROCESSING
C
C ARGUMENT   IPROD  NUMBER ASSOCIATED WITH CURRENTLY MATCHED PRODUCTION
C NOTES      IPROD IS 50 LESS THAN ORIGINAL PRODUCTION NUMBER
C
C   MACRO-SPEZIAL-STACK FUER 50 MACROVARIABLE
      DIMENSION MRGSTK(150),ISEQ(3)
      CHARACTER*6 HCALL,I296
      LOGICAL JLHLT
      INTEGER ICNUM,BCDF
      external alarm
      DATA HCALL/'CALL  '/,MRGTOP/0/,IMRGDM/150/
      DATA I296,J296/'APT296',19205/
C**
      K = TOP
      GO TO(4100,4200,4300,4400,4500,4600,4700,4800,
     X      4900,5000,4300,4420), IPROD
 4100 I = STACK(1,TOP-1)
      IF(I.GT.NAMMAX)GO TO 4102
      J = NAMTBL(I)
      IF(J/MODULO.NE.TEMP(1)/MODULO)GO TO 4101
      M=J-TEMP(1)
      ITMPCT=ITMPCT+1
      CALL MACLBL(I,-ITMPCT,II)
      IF(M.GT.MODHLF)M=SUBSCR
      NAMTBL(II)=VBL(1)+M
      CALL RESRVZ(II,M,TXXXX(1,M),1)
      STACK(1,TOP-1) = II
      IF(M.EQ.SUBSCR)GO TO 4120
      CALL OPCODE(REPL)
      CALL ONEARG(TXXXX(1,M))
      CALL ARGCVT(II)
      CALL ARGCVT(I)
      CALL RLSLIN
      GO TO 4125
 4120 M=J-TEMP(1)
      CALL ASNADZ(II,I)
 4125 IF(IFTMP(I))CALL PUTTMP(MODE(I))
      NAMTBL(II)=VBL(1)+M
 4101 IF(MRGTOP+3.LE.IMRGDM)GO TO 4103
 4104 CALL ALARM(32,TOP-1,8,'MACREC  ')
      IPROD=4
      GO TO 4420
 4102 MNMBND=MNMBND+1
      IF(MNMBND.LT.MASGND)GOTO 4106
      IF(MNMBND.EQ.MASGND)CALL ALARM(3002,TOP-1,8,'MACREC  ')
      MNMBND=MASGND+1
 4106 STACK(1,TOP-1)=MNMBND + NAMMAX
      CNUMTB(MNMBND)=CNUMTB(I-NAMMAX)
      GOTO 4101
 4103 MRGSTK(MRGTOP+3)=STACK(1,TOP-1)
      TOP = TOP-2
 4110 I = STACK(1,TOP-1)
      MRGSTK(MRGTOP+1) = I
      MRGSTK(MRGTOP+2) = NAMTBL(I)
      MRGTOP=MRGTOP+3
      ICALLF=1
      NAMTBL(I) = MACVBL(1)+MRGTOP/3
      TOP = TOP - 2
      STACK(1,TOP) = STACK(1,K)
      STACK(2,TOP) = STACK(2,K)
      GO TO 1
 4200 IF(MRGTOP+3.GT.IMRGDM)GO TO 4104
      MRGSTK(MRGTOP+3)=0
      GO TO 4110
 4300 IF(MCSAVP)4310,4320,4310
 4310 CALL ALARM(1016,TOP-3,8,'MACREC  ')
      GO TO 4360
 4320 IF((MACDFP+3+MRGTOP/3).LE.MCDFDM)GO TO 4325
      CALL ALARM(21,0,8,'MACREC  ')
      CALL HELP
 4325 IF(MRGTOP)4350,4350,4330
 4330 DO 4340 I=3,MRGTOP,3
      J=MACDFP+I/3
      MACDF1(J+3)=MRGSTK(I-2)
 4340 MACDF2(J+3)=MRGSTK(I)
      MACDF1(MACDFP+3) = J+3
 4350 L = STACK(1,TOP-3)
      IF (IPROD.EQ.11) L=STACK(1,TOP-4)
      MACDF1(MACDFP+1)=L
      MCNMB=MCNMB+1
      MACDF2(MACDFP+2) = MCNMB
C
C...     PRESERVE INITIAL SEQUENCE NO. FOR THIS MACRO
C
      IF(MCNMB.LE.MSEQDM)GO TO 4355
      CALL ALARM(27,0,8,'MACREC  ')
      CALL HELP
 4355 MACSEQ(MCNMB)=SEQNO
      NAMTBL(L) = MACNAM(1)+MCNMB
      MACDF1(MACDFP+2) = MCTXTP
 4360 MACLDD=.TRUE.
  600 NEWSTM = .TRUE.
    1 RETURN
 4400 MACLDD=.FALSE.
 4410 MACDFP=MACDFP+3
      IF(MRGTOP.NE.0)MACDFP=MACDF1(MACDFP)
      CALL MCXTRN(1,MCTXTP+1,STACK(1,TOP-1))
      CALL MCXTRN(1,MCTXTP+2,RTERM(2))
      MCTXTP=MCTXTP+2
 4415 IF(MRGTOP)600,600,4420
 4420 DO 4430 I=3,MRGTOP,3
      J= MRGSTK(I-2)
 4430 NAMTBL(J) = MRGSTK(I-1)
      MRGTOP = 0
      ICALLF=0
      GO TO 600
 4500 I=STACK(1,TOP-1)
      MCTXTP = MCTXTP+1
      IF(I.GT.NAMMAX)GO TO 1410
      IF(CNAMTB(I).EQ.HCALL)I=0
      IF(NAMTBL(I)/MODULO.EQ.MACVBL(1)/MODULO
     /) I=MACVBL(1) - NAMTBL(I)
      CALL MCXTRN(1,MCTXTP,I)
      GOTO 1420
 1410 J=NUMBST+NAMMAX
      CALL MCXTRN(1,MCTXTP,J)
      DO 1415 J=1,9,4
        MCTXTP=MCTXTP+1
        ICNUM=BCDF(CNUMTB(I-NAMMAX)(J:J+3))
        CALL MCXTRN(1,MCTXTP,ICNUM)
 1415 CONTINUE
 1420 I=STACK(1,TOP)
      IF(I.GT.NAMMAX)GOTO 1450
      CALL MCXTRN(1,MCTXTP+1,I)
      IF (I.EQ.RTERM(2)) GOTO 4501
 1430 TOP=TOP-2
      NUMIDX=MNMBND
      GO TO 5010
 1440 TOP=TOP+1
 1450 J=NUMBST+NAMMAX
       CALL MCXTRN(1,MCTXTP+1,J)
      DO 1425 J=1,9,4
        MCTXTP=MCTXTP+1
        ICNUM=BCDF(CNUMTB(I-NAMMAX)(J:J+3))
        CALL MCXTRN(1,MCTXTP+1,ICNUM)
 1425 CONTINUE
      GOTO 1430
 4501 IPROD = 6
      GOTO 4601
 4600 CALL MCXTRN(1,MCTXTP+1,RTERM(2))
 4601 MCTXTP = MCTXTP+1
      GO TO 600
 4700 I=STACK(1,TOP-3)
      ICALLF=0
      IF(CNAMTB(I).EQ.HCALL)GOTO 4701
      CALL ALARM(1017,TOP-3,8,'MACREC  ')
      GO TO 4415
 4701 BRANCH=1
      J=STACK(1,TOP-1)
 4702 MVMAC=.FALSE.
      MVTRUE=.FALSE.
      CALLON=.FALSE.
      IF(MCHSTP+4.LE.MHSTDM)GO TO 4780
 4782 CALL ALARM(22,0,8,'MACREC  ')
      CALL HELP
 4780 TEMP1=MCHSTP
      I=1
      CALL MACTAB(J,I)
 4704 J2=MACDF1(I+2)
      MACSV2(MCSAVP+1)=VBLSVP+1
      MACSV1(MCSAVP+1)=I
      IF(J2)4728,4728,4705
 4705 J1=I+3
      M1=0
      KK=0
      DO 4731 J=J1,J2
      K=IABS(MACDF1(J))
      M1=M1+100000
      KK=KK+1
      GO TO (4790,4802),BRANCH
 4790 IF(K.GT.NAMMAX)GO TO 15
C   MACRO-CALL OHNE ARGUMENTE
      IF(MRGTOP.EQ.0)GO TO 15
      IF(NAMTBL(K)/MODULO.NE.MACVBL(1)/MODULO)GO TO 15
 4706 DO 4707 L=3,MRGTOP,3
      IF(K.EQ.MRGSTK(L-2))GO TO 4708
 4707 CONTINUE
 4708 IF(MCSAVP)4715,4715,4709
 4709 M=MACSV1(MCSAVP)
      N2=MACDF1(M+2)
      IF(N2)4715,4715,4710
 4710 N1=M+3
      DO 4711 N=N1,N2
      IF(MRGSTK(L).EQ.IABS(MACDF1(N)))GO TO 4712
 4711 CONTINUE
      GO TO 4715
 4712 N3=N-N1+MACSV2(MCSAVP)
      VBLSAV(VBLSVP+1)=VBLSAV(N3)
      MACHST(MCHSTP+4)=-(M1+N-N1+1)
      MVMAC=.TRUE.
 4713 MCHSTP=MCHSTP+1
      IF(MCHSTP+4.GT.MHSTDM)GO TO 4782
 4714 MRGSTK(L)=-1
      NAMTBL(K) = MRGSTK(L-1)
      GO TO 4717
 4715 IF(MACDF2(J).EQ.MRGSTK(L))GO TO 4716
      VBLSAV(VBLSVP+1)=MRGSTK(L)
      MACHST(MCHSTP+4) = M1 + MRGSTK(L)
      GO TO 4713
 4716 VBLSAV(VBLSVP+1)=MACDF2(J)
      GO TO 4714
   15 VBLSAV(VBLSVP+1) = MACDF2(J)
 4717 N=VBLSAV(VBLSVP+1)
      IF(N.GT.NAMMAX)GO TO 4718
      IF ((NAMTBL(N)/MODULO).EQ.(MACNAM(1)/MODULO)) GOTO 4720
 4718 IF(MACDF1(J))4719,4727,4727
 4719 CALL ALARM(1018,0,8,'MACREC  ')
      GO TO 4720
 4720 IF(MACDF1(J)*MACDF2(I))4723,4722,4721
 4721 CALL ALARM(1019,0,8,'MACREC  ')
      GO TO 4723
 4722 MACDF1(J)=-MACDF1(J)
 4723 L=1
      CALL MACTAB(N,L)
      IF(MACDF2(L).EQ.0)MVTRUE=.TRUE.
      IF(MNMVBP)4726,4726,4724
 4724 DO 4725 K=1,MNMVBP
      IF((MNMVB(K).EQ.N).AND.(MNMVC(K).EQ.I))GO TO 4727
 4725 CONTINUE
 4726 MNMVBP=MNMVBP+1
      IF(MNMVBP.LE.MNMVDM)GO TO 4786
      CALL ALARM(28,0,8,'MACREC  ')
      CALL HELP
 4786 MNMVB(MNMVBP)=N
      MNMVC(MNMVBP)=I
      IF((MACDF2(L).NE.0).AND.(MACDF2(L).LE.(MCSAVP+1)))MACDF2(L)=MCSAVP
     1+2
 4727 IF(MACDF2(J).NE.0.OR.MACHST(MCHSTP+3)/100000.EQ.KK) THEN
        CONTINUE
      ELSE
      JLHLT=ILHLT
      ILHLT=.FALSE.
      DO 4744 N3=1,3
        ISEQ(N3)=SEQCOM(N3)
 4744 CONTINUE
      N3=MACDF2(J1-2)
      SEQNO=MACSEQ(N3)
      CALL BINBCD(SEQNO,SEQNUM,N3)
      STACK(1,TOP+1)=MACDF1(J1-3)
      STACK(1,TOP+2)=MACDF1(J)
      CALL ALARM(2055,0,8,'MACREC  ')
      ILHLT=JLHLT
      DO 4745 N3=1,3
        SEQCOM(N3)=ISEQ(N3)
 4745 CONTINUE
      ENDIF
      VBLSVP=VBLSVP+1
 4731 CONTINUE
      IF(VBLSVP.LT.IVSVDM)GO TO 4728
 4788 CALL ALARM(29,0,8,'MACREC  ')
      CALL HELP
 4728 GO TO(4752,4739),BRANCH
 4752 IF(MRGTOP)4729,4732,4729
 4729 DO 4730 L=3,MRGTOP,3
      IF(MRGSTK(L).NE.(-1))CALL ALARM(1020,0,8,'MACREC  ')
 4730 CONTINUE
 4732 IF(CALLMV) GO TO 4735
      IF(MVMAC)  GO TO 4736
      MACDF2(I+2)=MACDF2(I+2)+1
      MACHST(TEMP1+3)=MACDF2(I+2)
      MCHSTP=MCHSTP+3
      IF(MCHSTP+4.GT.MHSTDM)GO TO 4782
      IF(MCSAVP)4733,4733,4734
 4733 IF(J2.NE.0)GO TO 1010
      CALL MACLBL(-1,MACDF1(I),J)
      NAMTBL(J)=LABEL(1)
      CALL CALMCX(J,0,1)
      GO TO 1020
 1010 CALL CALMCX(MACDF1(I),0,2)
      CALL MACLBL(MACDF1(I),-MACDF2(I+2),L)
      NAMTBL(L) = IMPLAB(1)
      CALL CALMCX(L,0,1)
 1020 MACHST(TEMP1+1)=0
      GO TO 4742
 4734 CALL MCXTRN(1,CALLPT+1,MACDF2(I+2))
      CALL MCXTRN(1,CALLPT+2,I)
      GO TO 4703
 4735 CALL MCXTRN(1,CALLPT+2,-MVSEG)
      CALLMV=.FALSE.
      GO TO 4737
 4736 CALL MCXTRN(1,CALLPT+2,I)
 4737 CALL MCXTRN(1,CALLPT+1,0)
      IF(TEMP1.EQ.MCHSTP)GO TO 4739
      M=MCHSTP-1
      DO 4738 L=TEMP1,M
      CALL MCXTRN(1,CALLPT+3,MACHST(L+4))
 4738 CALLPT=CALLPT+1
 4739 MCHSTP=TEMP1+3
      MACHST(MCHSTP)=0
 4703 MACHST(TEMP1+1)=MACSV1(MCSAVP)
      GO TO(4740,4742),BRANCH
 4740 CALL MCXTRN(1,CALLPT+3,TEXTST)
 4741 MACSV3(MCSAVP)=TEXTST
 4742 MACHST(TEMP1+2)=I
      IF(MACDF2(I))4743,4760,4743
 4743 IF(MACDF2(I).GT.MCSAVP) GO TO 4749
      MACDF2(I)=MCSAVP+1
 4749 IF(MVTRUE)GO TO  4757
      IF(MACDF1(I+2))4754,4754,4767
 4767 SWITCH=2
      GO TO 4762
 4754 IF(MCSAVP)4759,4415,4759
 4760 IF(MACDF1(I+2))4757,4757,4761
 4761 SWITCH=1
 4762 J=MACSV2(MCSAVP+1)
      J1=I+3
      J2=MACDF1(I+2)
      DO 4766 K=J1,J2
      GO TO(4765,4763),SWITCH
 4763 L=VBLSAV(J)
      M = MACTBL(K)
      IF (L.GT.NAMMAX) GOTO 4766
      N = MODULO*(NAMTBL(L)/MODULO)
      IF (M.GT.NAMMAX) GOTO 4777
      M = MODULO*(NAMTBL(M)/MODULO)
      IF(N.NE.CONGEO(1))GO TO 4791
      IF(M.EQ.GEOM(1))GO TO 4798
      GO TO 4793
 4791 IF(N.NE.CONPRO(1))GO TO 4792
      IF(M.EQ.PROCED(1))GO TO 4798
      GO TO 4793
 4777 M = VBL(1)
 4792 IF(N.NE.IDENT(1) .AND. N.NE.PERMID(1))GO TO 4793
      IF (M .EQ. PERMID(1)) GO TO 4798
      IF (M. NE. FCN(1)) GO TO 4793
 4798 NAMTBL(L) = M + NAMTBL(L) - N
      GO TO 4766
 4793 IF(M.NE.VBL(1))GO TO 4766
      SWITCH=1
      GO TO 4766
 4765 MACTBL(K)=VBLSAV(J)
 4766 J=J+1
      GO TO(4757,4754),SWITCH
 4757 INTMED=-1
      MACRED=.TRUE.
      ILHLT=.TRUE.
      MVPNT=MACSV2(MCSAVP+1)-1
      MCSAVP=MCSAVP+1
      IF(MCSAVP.LT.MCSVDM)GO TO 4784
      CALL ALARM(24,0,8,'MACREC  ')
      CALL HELP
 4784 MACDF2(I)=MCSAVP
      WHCHMN=MACDF2(I+1)
      GO TO(4758,4808),BRANCH
 4758 TEXTST = MACDF1(I+1)
 4759 GO TO(4415,4812),BRANCH
 4800 CALL MCXTRN(2,TEXTST+2,J)
      JJ = TEXTST + 3
 4820 CALL MCXTRN(2,JJ,MCTXWD)
      IF((MCTXWD/100000).EQ.0)GO TO 4821
      JJ = JJ + 1
      GO TO 4820
 4821 BRANCH = 2
      IF(J)4801,4801,4702
 4801 J=MVPNT-J
      J=VBLSAV(J)
      GO TO 4702
 4802 SAVE=TEXTST+3
 4803 CALL MCXTRN(2,SAVE,MCTXWD)
      SAVE1=MCTXWD/100000
      IF(SAVE1)4804,4851,4804
 4851 VBLSAV(VBLSVP+1)=MACDF2(J)
      GO TO 4717
 4804 IF(100000*IABS(SAVE1).EQ.M1)GO TO 4805
      SAVE=SAVE+1
      GO TO 4803
 4805 IF(SAVE1)4806,4807,4807
 4806 SAVE1=MACSV2(MCSAVP)-(M1+MCTXWD)-1
      VBLSAV(VBLSVP+1)=VBLSAV(SAVE1)
      GO TO 4717
 4807 VBLSAV(VBLSVP+1)=MCTXWD-M1
      GO TO 4717
 4808 CALL MCXTRN(2,JJ,MACSV3(MCSAVP-1))
      TEXTST=MACDF1(I+1)
 4811 STACK(1,TOP) = RTERM(2)
      GO TO 4415
 4812 CALL MCXTRN(2,JJ,TEXTST)
      GO TO 4811
 4900 IF(INTMED)4901,4904,4905
 4901 MCSAVP=MCSAVP-1
      L=MACSV1(MCSAVP+1)
      MACTBL(L)=1
      VBLSVP=MACSV2(MCSAVP+1)-1
      IF(VBLSVP.GE.IVSVDM)GO TO 4788
      IF(MCSAVP)4904,4902,4903
 4904 CALL ALARM(37,0,8,'MACREC  ')
      CALL HELP
 4902 ILHLT=.FALSE.
      MACRED=.FALSE.
      INTMED=0
      WHCHMN=0
      GO TO 600
 4903 TEXTST=MACSV3(MCSAVP)
      MVPNT=MACSV2(MCSAVP)-1
      L=MACSV1(MCSAVP)
      WHCHMN=MACDF2(L+1)
      GO TO 600
 4905 IF(FINMAC)GO TO 4906
      FINMAC=.TRUE.
C
C...  BEGIN FINAL MACRO PROCESSING FOR THIS MACRO
C
      J = MACDF2(MCSRCH+1)
      SEQNO=MACSEQ(J)
      ILHLT=.FALSE.
      TEXTST=MACDF1(MCSRCH+1)
      PATHLN=NUMARG
      NXTLN=1
      PATHCH=NUMARG
      CALL MACLBL(-1,MACDF1(MCSRCH),J)
      NAMTBL(J) = LABEL(1)
      MCHDNG=.TRUE.
      CALL LABELZ(J)
      J=NAME(I296)
      NAMTBL(J)=J296
      CALL CALLZZ(J)
      CALL RLSLIN
      GO TO 600
 4906 CALL COMSTR
      CALL MNPROC
      IF(.NOT.MACEND)GO TO 600
      CALL EPILOG
      MACRED = .FALSE.
      GOTO 600
 5000 I=STACK(1,TOP)
      IF(I.GT.NAMMAX)GOTO 1440
      IF(NAMTBL(I)/MODULO.EQ.MACVBL(1)/MODULO)I=MACVBL(1)-NAMTBL(I)
      CALL MCXTRN(1,MCTXTP+1,I)
      TOP=TOP-1
 5010 MCTXTP=MCTXTP+1
      GO TO 1
       END
