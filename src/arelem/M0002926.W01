**** SOURCE FILE : M0002926.W01   ***
*
C.....FORTRAN SUBROUTINE  ....DDTABC         8/68                    RN
C.....FORTRAN SUBROUTINE             DDTABC...              3/1/68   GK
      SUBROUTINE DDTABC(D)
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
C
C
C
C
      INCLUDE 'TOTAL.INC'
C...  ALL REFERENCES TO ARRAY R, HAVE BEEN CHANGED TO R0,
C...  BECAUSE R OCCURS IN DSHAR4.INC
      INCLUDE 'DSHAR4.INC'
      INCLUDE 'FXCOR.INC'
      INCLUDE 'SV.INC'
      INCLUDE 'ZNUMBR.INC'
      INCLUDE 'LDEF.INC'
      INCLUDE 'ISV.INC'
      INCLUDE 'IFXCOR.INC'
      INCLUDE 'KNUMBR.INC'
C
C
C
      DIMENSION R0(9)
C
      EQUIVALENCE (TEM(1),H2),(TEM(2),G2),(TEM(3),SQ),(TEM(4),A1),
     1            (TEM(5),B1),(TEM(6),C1),(TEM(7),UP),(TEM(8),VP),
     2            (TEM(9),UN),(TEM(10),VN)
      DIMENSION X(3)
      EQUIVALENCE (PARAM(4),X(1)),(PARAM(1),SINN),(PARAM(2),COSS)
      EQUIVALENCE (SEG(3),ACF),(SEG(4),BCF),(SEG(5),CCF)
      DIMENSION D(*)
      DIMENSION IITBSG(4)
      DOUBLE PRECISION XA
      DATA IITBSG,ISQLS/5*0/
      DATA ICOUNT/0/
      DATA ZLIT1,ZLIT2,KLIT3/.2D0,1.D-20,14/
C
C...  DEFINITIONS OF ARITHMETIC STATEMENT FUNCTIONS
C
      CUBIC(XA)=((ACF*XA+BCF)*XA+CCF)*XA
      CUBC1(XA)=((ACF*XA+BCF)*XA+(CCF-SLOPE))*XA-VINT
C
C...  INITIALIZE DIRECTED DISTANCE
C
C
C
C
C...  TRANSFORM TOOL POINT AND TOOL NORMAL INTO U-V-W COORD. SYSTEM
C
      I=1
   10 R0(I)=D(I+2)
      I=I+1
      IF(I.LT.10) GO TO 10
C
C
      IER=0
      S(IS)=1.0D+38
      UP = R0(1)*TP(1,IS)+R0(2)*TP(2,IS)+R0(3)*TP(3,IS)
      VP = R0(4)*TP(1,IS)+R0(5)*TP(2,IS)+R0(6)*TP(3,IS)
      WP=R0(7)*TP(1,IS)+R0(8)*TP(2,IS)+R0(9)*TP(3,IS)
      UN = R0(1)*TN(1,IS)+R0(2)*TN(2,IS)+R0(3)*TN(3,IS)
      VN = R0(4)*TN(1,IS)+R0(5)*TN(2,IS)+R0(6)*TN(3,IS)
      UQ=DSQRT(UN**2+VN**2)
      IF(UQ.EQ.0.)GO TO 1002
      UN=UN/UQ
      VN=VN/UQ
C
C...  CHECK TO SEE IF TOOL NORMAL IS PARALLEL TO AXIS OF TABCYL
C
      IF(DABS(UN)+DABS(VN)-Z1EM6) 1002,1002,600
C
C...  SET INDEXES AND BEGIN EXAMINING TABCYL SEGMENTS
C
  600 NWDS=D(12)*7.0+6.0
      I = D(13)
      IIP=IS-1
      IF(JENT(IS).EQ.0.AND.ISQLS.EQ.ISEQNO) I=IITBSG(IIP)
  602 ICHECK = 0
      NMBSEG=D(12)
      NMBSEG=NMBSEG-K1
      DO 1001 L=1,NMBSEG
C
C...  STORE CANONICAL INFORMATION FOR SEGMENT IN SEG(K)
C
 2501 J = I
      DO 500 K=1,9
      SEG(K)=D(J)
  500 J=J+K1
      SEG(6)=SEG(6)*SEG(5)
      SEG(7)=SEG(7)*SEG(5)
      SEG(5)=-SEG(5)*(SEG(3)*SEG(5)+SEG(4))
C
C...  TRANSFORM POINTS AND VECTOR INTO U-V COORD. SYSTEM OF SEGMENT
C
      H2=SEG(8)-SEG(1)
      G2=SEG(9)-SEG(2)
      SQROOT=DSQRT(H2*H2+G2*G2)
      SINN=G2/SQROOT
      COSS=H2/SQROOT
      H2=UP-SEG(1)
      G2=VP-SEG(2)
      UPP=H2*COSS+G2*SINN
      VPP=-H2*SINN+G2*COSS
      UNN=UN*COSS+VN*SINN
      VNN=-UN*SINN+VN*COSS
C
C...  TEST FOR INTERSECTION OF DIRECTED LINE WITH RECTANGLE
C...  SURROUNDING TABCYL SEGMENT
C
      IF(Z1E6*DABS(UNN)-DABS(VNN)) 603,603,604
  603 SLOPE=Z1E6
      IF(UPP-SQROOT) 4410,4410,1000
 4410 IF(UPP) 1000,4411,4411
 4411 TEM(1)=UPP
      TEM(2)=SEG(6)
      GO TO 700
  604 SLOPE=VNN/UNN
      IF(DABS(SLOPE)-Z1EM6) 605,605,4419
  605 SLOPE=Z0
      IF(VPP-SEG(6))606,4419,1000
  606 IF(SEG(7)-VPP)4419,4419,1000
C
C...  U AND V COORDS. OF INTERSECTION WITH RECTANGLE ARE STORED
C...  IN TEM AND TEM(2)
C
 4419 TEM(1)=0.
      M=K7
      IF(UPP)4420,4420,4429
 4420 TEM(2)=VPP+SLOPE*(TEM(1)-UPP)
 4421 IF(SEG(7)-TEM(2))4426,4424,4432
 4426 IF(SEG(6)-TEM(2))4435,4424,4424
 4435 M=K6
 4432 TEM(1)=(SEG(M)-VPP)/SLOPE+UPP
C---  CII UPDATE TO ENABLE INTERSEC AT A TAB PT, NIU-APR/75
      IF(DABS(TEM(1)).LT.5.0D-17)TEM(1)=Z0
      IF(-TEM(1)) 4433,4425,1000
 4433 IF(TEM(1)-SQROOT) 4425,4425,1000
 4425 TEM(2)=SEG(M)
 4424 TEM(3)=DSQRT((TEM(1)-UPP)**2+(TEM(2)-VPP)**2)
C
C...  IF DIRECTED DISTANCE TO RECTANGLE IS LESS THAN DIR. DIST.
C...  TO CUBIC OF LAST SEGMENT,GO AHEAD AND CALC. DIR. DIST.
C...  TO CUBIC FOR THIS SEGMENT
C
      IF(TEM(3)-DABS(S(IS))) 4436,1000,1000
 4429 IF(UPP-SQROOT)4431,4430,4430
 4431 IF(SEG(7)-VPP)4434,700,4432
 4434 IF(VPP-SEG(6))700,700,4435
 4430 TEM(1)=SQROOT
      GO TO 4420
 4436 IF(IOP(IS)) 700,700,4437
 4437 IF(UNN*(UPP-TEM(1))+VNN*(VPP-TEM(2))) 700,700,1000
C
C...  CALC. DIRECTED DISTANCE TO CUBIC OF SEGMENT
C
C...  J IS SET TO KEEP A RECORD OF THE NUMBER OF INTERSECTIONS WITH
C...  THE CUBIC
C
  700 J=K1
      IF(Z1E6-SLOPE)607,607,609
C
C...  SOLVE DIRECTLY FOR INTERSECTION WITH VERTICAL LINE
C
  607 X(1)=UPP
      GO TO 48
  609 VINT=VPP-SLOPE*UPP
      IF(Z1EM6-DABS(VINT)) 612,618,618
C
C...  TEST FOR DEGENERATE CASES OF CUBIC
C
  612 IF(SEG(3))630,613,630
  613 IF(SEG(4))616,617,616
C
C...  DOES DIRECTED LINE CROSS U AXIS WITHIN SEGMENT
C
  614 IF(VINT*SLOPE)615,635,635
  615 IF (VINT/SLOPE+SQROOT) 635,635,5041
C
C...  DEGENERATE CUBIC ---- QUADRATIC EQUATION
C
  616 C1=-VINT
      A1=SEG(4)
      B1=SEG(5)-SLOPE
  622 J = 0
      GO TO 623
C
C...  DEGENERATE CUBIC ---- LINEAR EQUATION
C
  617 X(1)=-VINT/SLOPE
      GO TO 48
C
C...  FACTOR OUT THE ROOT,X=0,AND CREATE THE RESULTING QUADRATIC
C
  699 IF(B1.EQ.0.)GO TO 629
      X(2)=-C1/B1
      K=K2
      GO TO 629
  618 X(1)=0.
      K=K1
      C1=SEG(5)-SLOPE
      B1=SEG(4)
      IF(DABS(SEG(3)).LT.Z1EM9) GO TO 699
  643 A1=SEG(3)
C
C...  SOLVE THE QUADRATIC EQUATION FOR ROOTS
C
  623 SQ=B1**2-4.0*A1*C1
      IF(DABS(SQ)-Z1EM7) 624,624,625
  624 X(2)=-B1/(Z2*A1)
C
C...  K IS SET TO KEEP A RECORD OF THE NUMBER OF ROOTS
C...  OF THE QUADRATIC, 0=0 ROOTS, 2=1 ROOT, 3=2 ROOTS
C
      K=K2
      GO TO 629
  625 IF(SQ)621,621,627
  621 K=K0
      GO TO 629
  627 SQ=-B1-DSIGN(DSQRT(SQ),B1)
      X(2)=Z2*C1/SQ
      X(3)=  SQ/(Z2*A1)
      K=K3
  629 IF(J)614,631,631
C
C...  REJECT ROOTS NOT IN SEGMENT AND UPDATE RECORDS
C
  631 N=K1
  750 N=N+K1
      IF(N-K)751,751,752
  751 IF(X(N).LT.-1.D-5) GO TO 750
      IF(X(N).GT.1.D-5) GO TO 633
      GO TO 634
  633 IF((X(N)-SQROOT).GT.1.D-5) GO TO 750
  634 X(J+1)=X(N)
      J=J+K1
      GO TO 750
  752 IF(J)1000,1000,48
C
C...  TRUE CUBIC, PREPARE TO DETERMINE ROOT
C
C...  DIFFERENTIATE CUBIC AND SOLVE FOR MAX AND MIN POINTS
C
  630 J=-K1
  620 A1=Z3*SEG(3)
      B1=Z2*SEG(4)
      C1=SEG(5)-SLOPE
      GO TO 623
C
C...  ELIMINATE MAX AND MIN POINTS NOT IN THE SEGMENT
C
  635 N=K1
  753 N=N+K1
      IF(N-K)754,754,1000
  754 IF(X(N).GT.1.D-5) GO TO 637
      GO TO 753
  637 IF((X(N)-SQROOT).GT.1.D-5) GO TO 753
C
C...  LOOK FOR TANGENCY AND MULTIPLE INTERSECTION CASES
C
  638 TEM(1)=CUBC1(X(N))
      IF(DABS(TEM(1))-Z1EM5) 639,640,640
C
C...  TANGENCY
C
  639 X(1)=X(N)
      J=K1
      GO TO 48
  641 J=K1
  642 B1=SEG(3)*X(1)+SEG(4)
      C1=B1*X(1)+SEG(5)-SLOPE
      GO TO 643
C
C...  IS THERE A POSSIBLE MULTIPLE INTERSECTION
C
  640 IF(VINT*TEM(1)) 753,5041,5041
C
C...  CALCULATE VALUE OF X WHICH WILL ASSURE CONVERGENCE TO A ROOT
C
 5041 IF(K-K2)5090,5090,5050
 5090 X(1)=Z5EM1*SQROOT
      GO TO 5100
 5050 DO 5060 J=1,2
 5060 TEM(J)=CUBC1(X(J+1))
      IF(TEM(1)*TEM(2)) 5061,5062,5062
 5061 X(1)=(X(2)+X(3))*Z5EM1
      GO TO 5100
 5062 IF(DABS(TEM(1))-DABS(TEM(2))) 5063,5064,5064
 5063 X(1)=Z12EM1*X(3)-ZLIT1*X(2)
      GO TO 5100
 5064 X(1)=Z12EM1*X(2)-ZLIT1*X(3)
C
C...  ITERATE FOR ROOT OF CUBIC
C
 5100 X(1)=DMIN1(DMAX1(X(1),Z0),SQROOT)
      TEM(1)=Z3*SEG(3)
      TEM(2)=Z2*SEG(4)
      TEM(3)=SEG(5)-SLOPE
      DO 5200 M=1,100
      TEM(4)=(TEM(1)*X(1)+ TEM(2))*X(1)+TEM(3)
      IF(DABS(TEM(4))-ZLIT2) 4008,4009,4009
 4008 X(1)=X(1)+Z1EM6
      GO TO 5200
 4009 TEM(4)=CUBC1(X(1))/TEM(4)
C
C...  ACCEPT ROOT WHEN CORRECTION TERM IS LESS THAN .000001*X
C
      IF(DABS(TEM(4)).LT.Z1EM6*DABS(X(1))) GO TO 5300
 5110 X(1)=X(1)-TEM(4)
 5200 CONTINUE
      CALL AERR (-28801,'DDTABC  ')
      GO TO 1000
C
C...  IF THE ROOT IS WITHIN THE SEGMENT,
C...  FACTOR OUT THE ROOT X,FOUND BY ITERATION, AND SOLVE
C...  THE RESULTING QUADRATIC
C
 5300 IF(X(1)) 636,641,644
  636 J = 0
      GO TO 642
  644 IF(X(1)-SQROOT) 641,641,636
   48 DO 51 K=1,J
C
C...  USING U COORD. OF INTERSECTION POINT,SOLVE CUBIC FOR V COORD.
C
      PARAM(3)=CUBIC(X(K))
C
C...  CALCULATE DIR. DIST. TO CUBIC AND TEST AGAINST PRESENT VALUE
C
      TEM(1)=DSQRT((X(K)-UPP)**2+(PARAM(3)-VPP)**2)
      IF(TEM(1)-DABS(S(IS))) 49,51,51
   49 TEM(1)=DSIGN(TEM(1),(X(K)-UPP)     *UNN+(PARAM(3)-VPP)*VNN)
      IF(IOP(IS)) 52,52,50
   50 IF(TEM(1)) 51,52,52
   52 S(IS)=TEM(1)
C
C...  SAVE SUBSCRIPT OF U COORD. OF FIRST POINT OF SEGMENT
C
      ISEG=I
C
C...  SAVE U COORD. OF SURFACE POINT
C
      SAVPAR(4)=X(K)
C
C...  SAVE SINN AND COSS FOR SEGMENT AND V COORD. OF SURFACE POINT
C
      DO 53 N=1,3
   53 SAVPAR(N)=PARAM(N)
      SAVC=SEG(5)
   51 CONTINUE
      IF (SUBFLG) GO TO 9000
C
C...  SET INDEX TO LOOK AT NEXT SEGMENT OR FIRST SEGMENT
C
 1000 IF (ICHECK) 2010,2020,2000
 2000 I = I - K7
      GO TO 1001
 2010 I = I + K7
      GO TO 1001
 2020 I=I+K7*L*(K2*MOD(L,K2)-K1)
      IF(I.LT.KLIT3) GOTO 2030
      IF (I.LT.NWDS) GO TO 1001
      ICHECK = 1
      I=I-K7*L-K7
      GO TO 1001
 2030 ICHECK = -1
      I=I+K7*L+K7
 1001 CONTINUE
      IF(DABS(S(IS))-Z1E38) 9000,1002,1002
C
C...  CALCULATE SURFACE NORMAL IN U-V-W COORD. SYSTEM
C
 9000 AARG1=(Z3*D(ISEG+2)*SAVPAR(4)+Z2*D(ISEG+3))*SAVPAR(4)+SAVC
      AARG2 = DATAN(AARG1)
      TEM(3) = Z0 - DSIN(AARG2)
      TEM(5) =  DCOS(AARG2)
      TEM(4) = TEM(3)*SAVPAR(2)-TEM(5)*SAVPAR(1)
      TEM(5) = TEM(3)*SAVPAR(1)+TEM(5)*SAVPAR(2)
C
C...  TRANSFORM SURFACE POINT INTO U-V-W COORD. SYSTEM
C
      PARAM(1)=SAVPAR(4)*SAVPAR(2)-SAVPAR(3)*SAVPAR(1)+D(ISEG)
      PARAM(2)=SAVPAR(4)*SAVPAR(1)+SAVPAR(3)*SAVPAR(2)+D(ISEG+1)
C
C...  TRANSFORM SURFACE POINT AND NORMAL INTO X-Y-Z COORD. SYSTEM
C
      J=IS
      DO 9001 I = 1,3
      SPL(I,J)=SP(1,J)
      SNL(I,J)=SN(1,J)
      SP(I,J)=R0(I)*PARAM(1)+R0(I+3)*PARAM(2)+R0(I+6)*WP
      TEM(I+7)=R0(I)*TEM(4)+R0(I+3)*TEM(5)
      SN(I,J)=TEM(I+7)
 9001 CONTINUE
C
C...  SAVE SEGMENT INDEX
C
      D(13)=ISEG
      ISQLS=ISEQNO
      IITBSG(IIP)=ISEG
C
C...  CALCULATE 3D DIRECTED DISTANCE
C
      S(IS)=DSIGN(DSQRT((SP(1,IS)-TP(1,IS))**2+(SP(2,IS)-TP(2,IS))**2+
     1      (SP(3,IS)-TP(3,IS))**2),S(IS))
      ICOUNT = ICOUNT + 1
   29 CONTINUE
      RETURN
C
C...  UNABLE TO FIND DIRECTED DISTANCE
C
 1002 IER=K1
      GO TO 29
       END
