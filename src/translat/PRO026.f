**** SOURCE FILE : M0007341.W06   ***
*
C
C              FORTRAN SUBROUTINE PRO026
C
C LINKAGE      SUBROUTINE PRO026
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    JUMPZZ          SUBROUTINE    RECOG
C          SUBROUTINE    LABCON
C          SUBROUTINE    ARGGEN
C          SUBROUTINE    MACLBL
C          SUBROUTINE    MATCH
C          INTEGER FCT.  CLMODE
C          SUBROUTINE    MCXTRN
C          SUBROUTINE    MNPROC
C          INTEGER FCT.  MODE
C          INTEGER FCT.  GETTMP
C          SUBROUTINE    MOTION
C          SUBROUTINE    ALARM
C          INTEGER FCT.  NAME
C          INTEGER FCT.  NUMB
C          SUBROUTINE    ARGCVT
C          SUBROUTINE    OPCODE
C          SUBROUTINE    GOPAT
C          SUBROUTINE    PATH
C          SUBROUTINE    PRO027
C          SUBROUTINE    PRO028
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    EPILOG
C          SUBROUTINE    READ
C          SUBROUTINE    REFGEN
C          SUBROUTINE    REFREF
C          SUBROUTINE    RESERV
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          SUBROUTINE    CALLZZ
C          SUBROUTINE    TSSMIL
C          SUBROUTINE    TWOARG
C          SUBROUTINE    BCDBIN
C
      SUBROUTINE PRO026
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C IFIXST:      NAMTBL INDEX OF BEGINNING OF FIXED POINT NUMBER SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99),ARGSTK(99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C ARGTOP:      POINTER TO LAST ARGSTK ENTRY
      EQUIVALENCE (ARGTOP,STKLST(2))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C ARGSTK:      ARGUMENT STACK
      EQUIVALENCE (ARGSTK(1),STKLST(202))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),TEMP(2),PROCED(2),PERMID(2),LABEL(2),IMPLAB(
     *          2),VBL(2)
C TEMP:        (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODE(33))
C PROCED:      (1)=CODE CLASS 19000,(2)=NAMTBL INDEX OF 'PROCED'
      EQUIVALENCE (PROCED(1),CODE(37))
C PERMID:      (1)=CODE CLASS 20000,(2)=NAMTBL INDEX OF 'PERMID'
      EQUIVALENCE (PERMID(1),CODE(39))
C LABEL:       (1)=CODE CLASS 22000,(2)=NAMTBL INDEX OF 'LABEL '
      EQUIVALENCE (LABEL(1),CODE(43))
C IMPLAB:      (1)=CODE CLASS 23000,(2)=NAMTBL INDEX OF 'IMPLAB'
      EQUIVALENCE (IMPLAB(1),CODE(45))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C
C        4.    PRODUCTION TABLE
C
      COMMON/SRCTBL/SRCTBL
      DIMENSION SRCTBL(501),META(50)
C META:        CONTAINS INTERNAL BIT CODES FOR METALINGUISTIC CLASSES
      EQUIVALENCE (META(1),SRCTBL(3))
C
C        5.    PROGRAM CONTROL FLAGS
C
      COMMON/FLAGS/FLAGS
      LOGICAL NEWSTM,APTRAN
      DIMENSION FLAGS(4)
C NEWSTM:      TRUE WHEN NEXT SOURCE STATEMENT REQUESTED FOR PROCESS
      EQUIVALENCE (NEWSTM,FLAGS(2))
C APTRAN:      TRUE IF APTRAN CARD READ AND IN EFFECT
      EQUIVALENCE (APTRAN,FLAGS(3))
C
C        8.    NAME TABLE POINTERS TO BCD LITERALS
C
      COMMON/BCDPTR/BCDPTR
      DIMENSION BCDPTR(7)
C DOTAC:       NAMTBL POINTER TO ALPHAMERIC LITERAL '.AC.  '
      EQUIVALENCE (DOTAC,BCDPTR(1))
C FEDRAT:      NAMTBL POINTER TO ALPHAMERIC LITERAL 'FEDRAT'
      EQUIVALENCE (FEDRAT,BCDPTR(2))
C TO:          NAMTBL POINTER TO ALPHAMERIC LITERAL 'TO'
      EQUIVALENCE (TO,BCDPTR(3))
C ERASB:       NAMTBL POINTER TO ALPHAMERIC LITERAL 'APTER'
      EQUIVALENCE (ERASB,BCDPTR(5))
C DOTTAB:      NAMTBL POINTER TO ALPHAMERIC LITERAL '$$TAB'
      EQUIVALENCE (DOTTAB,BCDPTR(7))
C
C        9.    NAME TABLE POINTERS TO NUMBERS
C
      COMMON/NUMPTR/NUMPTR
      DIMENSION NUMPTR(12),ZERO(1)
C ZERO:        NAMTBL POINTER TO '0     '
      EQUIVALENCE (ZERO(1),NUMPTR(1))
C ZEROPT:      NAMTBL POINTER TO '0.    '
      EQUIVALENCE (ZEROPT,NUMPTR(2))
C ONE:         NAMTBL POINTER TO '1     '
      EQUIVALENCE (ONE,NUMPTR(3))
C ONEPT:       NAMTBL POINTER TO '1.    '
      EQUIVALENCE (ONEPT,NUMPTR(4))
C TWO:         NAMTBL POINTER TO '2     '
      EQUIVALENCE (TWO,NUMPTR(5))
C THREE:       NAMTBL POINTER TO '3     '
      EQUIVALENCE (THREE,NUMPTR(6))
C FOUR:        NAMTBL POINTER TO '4     '
      EQUIVALENCE (FOUR,NUMPTR(7))
C FIVE:        NAMTBL POINTER TO '5     '
      EQUIVALENCE (FIVE,NUMPTR(8))
C SIX:         NAMTBL POINTER TO '6     '
      EQUIVALENCE (SIX,NUMPTR(9))
C NINE:        NAMTBL POINTER TO '9     '
      EQUIVALENCE (NINE,NUMPTR(12))
C
C       11.    SEQUENCE NUMBER STORAGE
C
      COMMON/SEQCOM/SEQCOM
      DIMENSION SEQCOM(3)
C SEQNO:       INTERNALLY GENERATED STATEMENT NUMBER
      EQUIVALENCE (SEQNO,SEQCOM(1))
C
C       12.    LARGE DATA ARRAY STORAGE REQUIREMENTS
C
      COMMON/CFSIZE/CFSIZE
      DIMENSION CFSIZE(205),MAXSIZ(2)
C MAXSIZ:      SIZE OF THE LAST LARGEST LARGE DATA ARRAY
      EQUIVALENCE (MAXSIZ(1),CFSIZE(4))
C
C       13.    NAMTBL POINTERS TO NEGATIVE NUMBERS
C              NAMTBL POINTER TO -1.
      COMMON/NEGPTR/NONEPT
C
C       14.    I. L. LIST OPTION FLAGS
C
      COMMON/PRT/PRT
      LOGICAL CILPRT,ILPRT,PRTERR
      DIMENSION PRT(7)
C CILPRT:      TRUE WHEN COMPRESSED I.L. PRINTING REQUESTED
      EQUIVALENCE (CILPRT,PRT(1))
C ILPRT:       TRUE INDICATES I.L. PRINTING (PPOPTN/INTLNG,ON)
      EQUIVALENCE (ILPRT,PRT(2))
C PRTERR:      TRUE IF PPOPTN/PRTER,ON. PRINTOUT OF STACK OR ARGSTK
      EQUIVALENCE (PRTERR,PRT(6))
C
C       16.    LITERALS FOR I. L. OPERATION CODES
C
      COMMON/IL/IL
      DIMENSION IL(21)
C REPL:        CONTAINS COMMAND CODE (17) FOR REPL COMMAND
      EQUIVALENCE (REPL,IL(17))
C MOVE:        CONTAINS COMMAND CODE (19) FOR MOVE COMMAND
      EQUIVALENCE (MOVE,IL(19))
C VBLJMP:      CONTAINS COMMAND CODE (20) FOR VBLJMP COMMAND
      EQUIVALENCE (VBLJMP,IL(20))
C
C       17.    MODE CODES
C
      COMMON/MODX/MODX
      DIMENSION MODX(32)
C PLANE:       MODE CODE ( 2) FOR PLANE SURFACE
      EQUIVALENCE (PLANE,MODX(2))
C POINT:       MODE CODE (19) FOR POINT
      EQUIVALENCE (POINT,MODX(19))
C VECTOR:      MODE CODE (20) FOR VECTOR
      EQUIVALENCE (VECTOR,MODX(20))
C REAL:        MODE CODE (24) FOR A SCALAR
      EQUIVALENCE (REAL,MODX(21))
C PATERN:      MODE CODE (26) FOR PATTERN
      EQUIVALENCE (PATERN,MODX(26))
C OBJECT:      MODE CODE (28) FOR OBJECT
      EQUIVALENCE (OBJECT,MODX(28))
C SSURF:       MODE CODE (29) FOR SSURF
      EQUIVALENCE (SSURF,MODX(29))
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      LOGICAL ILHLT,MACRED,FINMAC,ENTRY,MACEND,SHOULD
      DIMENSION MACXX1(71)
C MACDFP:      POINTER TO LAST ENTRY IN MACDF1 AND MACDF2 ARRAYS
      EQUIVALENCE (MACDFP,MACXX1(1))
C ILHLT:       TRUE IF I.L. SHOULD NOT BE PLACED IN ILFILE
      EQUIVALENCE (ILHLT,MACXX1(14))
C MACRED:      SET TRUE TO INDICATE INPUT FROM MCBUFF TABLE
      EQUIVALENCE (MACRED,MACXX1(18))
C INTMED:      0=NO -,-1=INTERMEDIATE-,+1=FINAL MACRO PROCESSING
      EQUIVALENCE (INTMED,MACXX1(22))
C MAJWRD:      CONTAINS ACTUAL MAJOR WORD
      EQUIVALENCE (MAJWRD,MACXX1(23))
C FINMAC:      TRUE IF SECOND FINAL PASS OF MACRO PROCESSING
      EQUIVALENCE (FINMAC,MACXX1(24))
C WAY:         INDICATES TYPE OF MACRO PROCESSING
      EQUIVALENCE (WAY,MACXX1(26))
C ENTRY:       FALSE ON FIRST ENTRY TO MATCH FOR A MACRO EXPRESSION
      EQUIVALENCE (ENTRY,MACXX1(40))
C MAJOR:       CURRENT CALL ASSIGNED VALUE IF MAYWRD IS MACRO VARIABLE
      EQUIVALENCE (MAJOR,MACXX1(44))
C MACEND:      TRUE WHEN ALL MACRO PROCESSING IS FINISHED
      EQUIVALENCE (MACEND,MACXX1(62))
C WHCHMN:      EQUAL TO NUMBER OF CURRENT MACRO BEING PROCESSED
      EQUIVALENCE (WHCHMN,MACXX1(63))
C SHOULD:      MACRO INDICATOR. NORMALLY FALSE
      EQUIVALENCE (SHOULD,MACXX1(70))
C
C       27.    OPERAND MODIFIERS
C
      COMMON/OPMOD/OPMOD
      DIMENSION OPMOD(8)
C NOUGHT:      CONTAINS OPERAND TYPE 0
      EQUIVALENCE (NOUGHT,OPMOD(1))
C DLR:         CONTAINS OPERAND TYPE CODE 1
      EQUIVALENCE (DLR,OPMOD(2))
C DBLDLR:      CONTAINS OPERAND TYPE CODE 2
      EQUIVALENCE (DBLDLR,OPMOD(3))
C QUIDLR:      CONTAINS OPERAND TYPE CODE 5
      EQUIVALENCE (QUIDLR,OPMOD(6))
C
C       28.    OPERAND MODIFIERS
C
      COMMON/SUBLST/SUBLST
      DIMENSION SUBLST(136),APTXXX(120)
C APT200:      NAMTBL POINTER FOR APT200
      EQUIVALENCE (APT200,SUBLST(127))
C APT298:      NAMTBL POINTER FOR APT298
      EQUIVALENCE (APT298,SUBLST(130))
C APT299:      NAMTBL POINTER FOR APT299
      EQUIVALENCE (APT299,SUBLST(131))
C ERROR:       NAMTBL POINTER TO EXECUTION SUBROUTINE ERROR
      EQUIVALENCE (ERROR,SUBLST(132))
C PSIS:        NAMTBL POINTER FOR XECUTION SUBROUTINE PSIS
      EQUIVALENCE (PSIS,SUBLST(133))
C TLAXIS:      NAMTBL POINTER FOR XECUTION SUBROUTINE TLAXIS
      EQUIVALENCE (TLAXIS,SUBLST(135))
C APTXXX:      NAMTBL POINTERS FOR XECUTION SUBROUTINE NAMES
      EQUIVALENCE (APTXXX(1),SUBLST(1))
C APT001:      NAMTBL POINTER FOR APT001
      EQUIVALENCE (APT001,SUBLST(49))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C MODHLF:      NORMAL MODE CODE LIMIT 500
      EQUIVALENCE (MODHLF,MODULI(2))
C
C       31.    COMMON BLOCK FOR PRO026 AND MOTION
C
      COMMON/COMP26/COMP26
      LOGICAL FMTERR
      DIMENSION COMP26(16)
C ARGCNT:      POINTER FOR CURRENT ARGSTK ELEMENT
      EQUIVALENCE (ARGCNT,COMP26(2))
C CSPNTR:      CONTAINS NAMTBL POINTER TO CS
      EQUIVALENCE (CSPNTR,COMP26(3))
C NUMBCS:      NUMBER OF CHECK SURFACES
      EQUIVALENCE (NUMBCS,COMP26(5))
C TEST:        NAMTBL INDEX OF CURRENT ARGUMENT
      EQUIVALENCE (TEST,COMP26(6))
C TEST1:       CLASS OF CURRENT ARGUMENT
      EQUIVALENCE (TEST1,COMP26(7))
C FMTERR:      ERROR FLAG FOR CERTAIN MOTION STATEMENTS
      EQUIVALENCE (FMTERR,COMP26(9))
C K:           NAMTBL POINTER TO MAJOR WORD
      EQUIVALENCE (K,COMP26(12))
C LERR:        ERROR TYPE INDICATOR
      EQUIVALENCE (LERR,COMP26(13))
C
C       35.    COMMON BLOCK FOR BOUNDED GEOMETRY AND CFSAVE
C
      COMMON/BGEOM/BGEOM
      DIMENSION BGEOM(4)
C IFDUMP:      VALUE 0=NO CFSAVE COMMAND,1=ALL,2=SCALAR,3=GEOM PROGRAM
      EQUIVALENCE (IFDUMP,BGEOM(2))
C J:           PASSES PUNCH/ARGUMENT FROM PRO026 TO PRO027
      EQUIVALENCE (J,BGEOM(3))
C L:           PASSES PUNCH/LISTON OR NOLIST FROM PRO026 TO PRO027
      EQUIVALENCE (L,BGEOM(4))
C
C       40.    PARAMETERS REQUIRED BY SUPERVISOR
C
      COMMON/SUPER/SUPER
      LOGICAL CFLAGS,FINI
      DIMENSION SUPER(36),CFLAGS(4)
C CFLAGS:      CONDITION OF TERMINATION OF THE PHASES
      EQUIVALENCE (CFLAGS(1),SUPER(1))
C FINI:        FLAG ON INDICATES A FINI CARD HAS BEEN READ
      EQUIVALENCE (FINI,SUPER(7))
C
C       41.    NUMBER TABLE OVERFLOW VARIABLES
C
      COMMON/NTBL/NTBL
      DIMENSION NTBL(6)
C NLAST:       LAST NEW BLOCK NUMBER OF NUMBER TABLE ON THE EXTERN FILE
      EQUIVALENCE (NLAST,NTBL(4))
C
C       43.    DO LOOP CONTROL VALUES
C
      COMMON/DOLOOP/DOLOOP
      DIMENSION DOLOOP(8)
C JUMPTO:      MARKER SET AFTER JUMPTO OR IF FOR LABEL CONTROL
      EQUIVALENCE (JUMPTO,DOLOOP(1))
C DOJUMP:      VBL FOR COMPUTED GOTO AT LOOP PROCESSING
      EQUIVALENCE (DOJUMP,DOLOOP(6))
C
C       44.    ERROR POSITION TABLE
C
      COMMON/ERRPOS/ERRPOS
      INTEGER ERRPOS,ESTACK,ERGSTK
      DIMENSION ERRPOS(302),ESTACK(100),ERGSTK(100)
C ESTACK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN STACK
      EQUIVALENCE (ESTACK(1),ERRPOS(103))
C ERGSTK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN ARGSTK
      EQUIVALENCE (ERGSTK(1),ERRPOS(203))
C
C       45.    NUMBER TABLE INDICES
C
      INCLUDE 'NUMBLK.INC'
C LSTCHR:      LAST CHARACTER OF A NUMBER
C*
C...           PROGRAM VARIABLES
C
      CHARACTER*6 ICNTRL(4)
      CHARACTER*6 IPPOPT(5),START,NOMORE,NORMAL
      LOGICAL   LTEMP
      CHARACTER*6 DON
      LOGICAL DSFIND,PSFIND
      LOGICAL ERAS,ODD,ODD1,ODD2
      CHARACTER*6 SRPRNT,FINIT,BLK,CONTIN
      CHARACTER*6 HALL,HON,HOFF,HAT,HPS
      CHARACTER*6 HOUT,HIN,GOLO,PLOT
      DATA DON/'ON    '/
      DATA SRPRNT,START,NOMORE/'PRINT ','START ','NOMORE'/
      DATA ERAS/.FALSE./,ODD,ODD1,ODD2/3*.TRUE./,NORMAL/'NORMAL'/
      DATA FINIT/'FINI'/,BLK/'    '/,CONTIN/'CONT'/
      DATA ICNTRL/'ERR ','TR  ','XC  ','CL  '/
      DATA IPPOPT(1)/'INTLNG'/,
     1     IPPOPT(2)/'PRTER '/,
     2     IPPOPT(3)/'REFMOT'/,
     3     IPPOPT(4)/'ALTMLT'/,
     4     IPPOPT(5)/'CILPRT'/
      DATA HALL,HON,HOFF,HAT,HPS/'ALL   ','ON    ','OFF   ','AT    ',
     1     'PS    '/
      DATA HOUT,HIN,GOLO,PLOT/'OUT   ','IN    ','GOLOFT','PLOTFT'/
      external alarm
C*********************************************************************
      K=STACK(1,TOP-1)
      IF(INTMED.NE.1)GO TO 6052
      WAY=2
      IF(FINMAC)GO TO 6051
      ERGSTK(100)=TOP-1
      MAJWRD=K
 6002 CALL MATCH
      IF(.NOT.ENTRY)GO TO 6053
      K=MAJOR
      GO TO 6052
 6051 CALL PATH
      IF(.NOT.SHOULD)GO TO 6053
 6052 HOP=NAMTBL(K)-PROCED(1)
      IF(HOP.GE.MODHLF)HOP=HOP-MODHLF
      IF(HOP.EQ.0)GO TO 30
C... TLLFT, TLRGT, TLON, TLONPS, TLOFPS, MULTAX, NOPS, AUTOPS, CUT,
C    DNTCUT, NDTEST, COMP3D, GOUGCK
      IF(HOP.LE.13)GO TO 10
      HOP=HOP-13
C           CLPRNT APTRAN
      GO TO (   80,  1918,
C
C           APTREN REFSYS   FINI RESERV CONTRL    SYN DYNDMP  ZSURF
     2          22,  1923,  1924,  1926,   500,  2800,   180,     1,
C
C           JUMPTO
C           TRANTO     GO GODLTA  TOLER  INTOL OUTTOL CUTTER  MAXDP
     3        1925,  1904,   700,  1909,  1909,  1909,  1912,   200,
C
C                         GOBACK
C                         GODOWN
C                          GOFWD
C                          GOLFT
C                          GORGT
C           NUMPTS  THICK   GOUP   GOTO   FROM INDIRV SRFVCT TLAXIS
     4         190,  1909,  1901,   800,   801,  1922,  1922,  1913,
C
C           INDIRP   PSIS  PRINT   CALL LOOPST LOOPND MACHIN NOPOST
     5        1921,  1914,  1942,  4300,    22,    23,   100,   110,
C
C           POCKET TITLES  PUNCH 2DCALC 3DCALC TLNDON CFSAVE PPOPTN
     6        1968,  8200,  8100,    11,    12,     3,  8100,   600,
C                                         GOLOFT
C           PTONLY                 INTSEC PLOTFT
C           REMARK                 GCLEAR GOMILL
C           TUNEUP   READ  UNITS   SCON   SMIL  UNUSED TLPROJ CLDAT
     7          22,  5700,  5800,  9100,  9100,     1,  2100,  2000,
C           CHKSRF AVCTRL REGION
     8        2200,  9100, 2100),HOP
C
C... PICK UP NAMTBL POINTER TO TLON
    3 K=APTXXX(98)
   10 IF ((HOP.NE.6).AND.(HOP.NE.13)) GOTO 9
      IF(ARGTOP.GT.1) CALL ALARM(2002,1-ARGTOP,4,'PRO026  ')
      IF(ARGTOP.NE.0) GOTO 8
      ARGTOP=1
      ARGSTK(1)=NAME(DON)
    8 IF(CNAMTB(ARGSTK(ARGTOP)).NE.HON .AND.CNAMTB(ARGSTK(ARGTOP)).
     * NE.HOFF)CALL ALARM(2002,-ARGTOP,4,'PRO026  ')
      GOTO 3000
    9 IF (ARGTOP.NE.0) CALL ALARM(2028,-ARGTOP,4,'PRO026  ')
      GO TO 3000
C... PICK UP NAMTBL POINTER TO NDTEST
   11 K=APTXXX(96)
      GO TO 10
C... PICK UP NAMTBL POINTER TO COMP3D
   12 K=APTXXX(97)
      GO TO 10
    1 ASSIGN 22 TO IRET
      IF(ARGTOP-1)9991,2,9989
    2 IF (MODE(ARGSTK(1)) .EQ. PLANE) GO TO 3000
      CALL ALARM(2029,-1,8,'PRO026  ')
      GO TO 22
 9100 IF (CNAMTB(K).EQ.GOLO.OR.CNAMTB(K).EQ.PLOT) THEN
        CALL GOLOFT
      ELSE
        CALL TSSMIL
      ENDIF
      GO TO 7080
C
C     *************** PROCESS POST PROCESSOR STATEMENT *****************
C
C
C... SET L = NUMBER OF CALLS TO APT299 TO BE GENERATED.
C
   30 SUB=APT299
   35 L = 1 + (ARGTOP/2)
C
C... GENERATE CALLS.
C
      DO 70  I = 1,L
      CALL CALLZZ(SUB)
C
C... INSERT TWO PAIRS OF ARGUMENTS IN ARGUMENT LIST.
C
      DO 60  J = 1,2
C
C... THE FIRST PAIR IN THE FIRST CALL CONSISTS OF THE TOTAL NUMBER OF
C... ARGUMENT PAIRS EXCLUSIVE OF THE FIRST PAIR AND THE MAJOR WORD IN
C... PART PROGRAM STATEMENT.
C
      IF ((I+J) .GT. 2)  GO TO 40
      CALL TWOARG(QUIDLR,ARGTOP)
      CALL ARGCVT(K)
      GO TO 60
C
C... IF ARGSTK HAS BEEN EXHAUSTED,FILL OUT ARGUMENT LIST WITH ZEROS.
C
   40 IF (ARGTOP .GT. 0)  GO TO 50
      CALL TWOARG(DLR,ZERO)
      CALL TWOARG(DLR,ZERO)
      GO TO 60
C
C... DETERMINE THE CLASS AND MODE OF THE NEXT ARGSTK ELEMENT AND SET
C... N = THE CORRESPONDING CLMODE. IF THE ELEMENT IS INVALID,ISSUE A
C... WARNING MESSAGE AND TREAT IT AS A PERMANENT IDENTIFIER.
C
   50 N = CLMODE(ARGSTK(ARGTOP))
      IF (N .NE. 2)  GO TO 52
      IF (MOD(NAMTBL(ARGSTK(ARGTOP)),MODHLF).EQ.0)GOTO 53
   52 IF (N .NE. 0)  GO TO 55
   53 IF(HOP.NE.61.AND.HOP.NE.33)CALL ALARM(2002,-ARGTOP,8,'PRO026  ')
      N = 2
C
C... INSERT CLMODE AND ARGSTK ELEMENT AS THE NEXT PAIR IN THE
C... ARGUMENT LIST.
C
   55 CALL TWOARG(QUIDLR,N)
      CALL ARGCVT(ARGSTK(ARGTOP))
      ARGTOP = ARGTOP - 1
   60 CONTINUE
C
C... RELEASE GENERATED I.L.
C
      CALL RLSLIN
   70 CONTINUE
      GO TO 22
C
C *********** SPECIAL PATH FOR CLPRNT,MACHIN AND NOPOST COMANDS ********
C
C... CLPRNT COMMAND
C... IF THERE ARE NO ARGUMENTS,CALL APT298, IF THERE IS A SINGLE
C... ARGUMENT WHICH IS EITHER ON OR OFF,PROCESS LIKE A POSTPROCESSOR
C... COMMAND. OTHERWISE CALL ALARM.
C
   80 IF (ARGTOP .EQ. 0) GO TO 90
      ERRPT=1-ARGTOP
      IF(ARGTOP.GT.1)GOTO 85
      L = ARGSTK(1)
      IF(L.GT.NAMMAX)GOTO 84
      IF (CNAMTB(L) .EQ. HON .OR. CNAMTB(L) .EQ. HOFF)  GO TO 30
   84 ERRPT=-1
   85 CALL ALARM(2001,ERRPT,8,'PRO026  ')
      GO TO 22
   90 N = ONE
      GO TO 120
C
C... MACHIN COMMAND
C... IF THERE ARE NO ARGUMENTS,CALL ALARM. OTHERWISE CALL APT298
C
  100 ERRPT=TOP-1
      IF (ARGTOP .EQ. 0) GO TO 85
      N = THREE
      IF (ARGTOP .GT. 1)  GO TO 130
      ARGTOP = 2
      ARGSTK(2) = ARGSTK(1)
      ARGSTK(1) = 0
      GO TO 130
C... NOPOST COMMAND
  110 IF (ARGTOP .GT. 0)  CALL ALARM(2002,-ARGTOP,4,'PRO026  ')
      N = TWO
  120 ARGSTK(1) = ZEROPT
      ARGSTK(2) = ZEROPT
      ARGTOP = 2
  130 CALL CALLZZ(APT298)
      CALL TWOARG(DLR,N)
      CALL ARGCVT(ARGSTK(ARGTOP))
      CALL ARGCVT(ARGSTK(ARGTOP-1))
      CALL RLSLIN
C... IF COMMAND IS MACHIN, GO TO POSTPROCESSOR PROCESSING NEXT.
C... OTHERWISE TAKE NORMAL EXIT.
C
      IF(HOP.EQ.33)GO TO 30
      GO TO 22
C
C... CONTRL STATEMENT
C
  500 IF(JUMPTO.NE.0)JUMPTO=SEQNO+2
      IF(ARGTOP.EQ.0)GO TO 550
      DO 540 I=1,ARGTOP
      K=ARGSTK(I)
      IF(K.GT.NAMMAX)GO TO 530
      DO 520 J=1,4
      IF(CNAMTB(K).NE.ICNTRL(J))GO TO 520
      CFLAGS(J)=.TRUE.
      GO TO 540
  520 CONTINUE
  530 CALL ALARM(2042,-I,4,'PRO026  ')
  540 CONTINUE
      GO TO 22
  550 CALL ALARM(2030,TOP-1,4,'PRO026  ')
      GO TO 22
C
C... PPOPTN STATEMENT
C
  600 IF(JUMPTO.NE.0)JUMPTO=SEQNO+2
      IF(ARGTOP.EQ.0)GO TO 550
      ERRPT=-1
      IF(2*(ARGTOP/2).NE.ARGTOP)GO TO 690
C        CHECK EACH ARGUMENT PAIR
      DO 680 I=2,ARGTOP,2
      K=ARGSTK(I-1)
      ERRPT=1-I
      IF(K.GT.NAMMAX)GO TO 690
      IF(CNAMTB(K).NE.HON)GO TO 605
      LTEMP=.TRUE.
      GO TO 610
  605 IF(CNAMTB(K).NE.HOFF)GO TO 690
      LTEMP=.FALSE.
  610 K=ARGSTK(I)
      ERRPT=-I
C
      DO 620 J=1,5
      IF(CNAMTB(K).NE.IPPOPT(J))GOTO 620
      HOP=J
      GO TO 625
  620 CONTINUE
      GO TO 690
C
  625 GO TO (630,640,650,660,670),HOP
C        INTLNG
  630 ILPRT=LTEMP
      GO TO 680
C        PRTER
  640 PRTERR=LTEMP
      GO TO 680
C        REFMOT
  650 J=TWO
      IF(LTEMP)J=ONE
      GO TO 665
C        ALTMLT
  660 J=FOUR
      IF(LTEMP)J=THREE
      GO TO 665
C         CILPRT
  670 CONTINUE
      J=SIX
      IF(LTEMP) J=FIVE
C---     COMPRESSED IL PRINT IS TURNED ON FROM -ON- INPUT.
      IF(LTEMP) CILPRT=.TRUE.
  665 CALL CALLZZ(APTXXX(18))
      CALL TWOARG(DLR,J)
      CALL RLSLIN
  680 CONTINUE
      GO TO 22
C
C        ERROR IN PPOPTN STATEMENT
  690 CALL ALARM(2039,ERRPT,8,'PRO026  ')
      GO TO 22
C
C... CALLED MACRO HAS NOT BEEN DEFINED.  CHECK FOR SYSTEM MACRO.
C
 4300 IGOTO=5
      GO TO 99
C
C...  DYNDMP , NUMPTS OR MAXDP STATEMENT
C
  180 J=3
      GOTO 201
  200 J=2
      IF(ARGTOP.NE.1)GOTO 201
      ARGSTK(2)=ARGSTK(1)
      ARGSTK(1)=ZEROPT
      ARGTOP=2
      GOTO 202
  190 J=1
  201 IF(ARGTOP.EQ.0)GO TO 209
      IF(ARGTOP.LE.J)GO TO 202
      ERRPT=J-ARGTOP
      GOTO 210
  202 DO 203 I=1,ARGTOP
      ERRPT=-I
      IF(MODE(ARGSTK(I)).NE.REAL)GOTO 205
  203 CONTINUE
      GOTO 3000
  205 CALL ALARM(2021,ERRPT,8,'PRO026  ')
      GOTO 22
  209 ERRPT=TOP-1
  210 CALL ALARM(2052,ERRPT,8,'PRO026  ')
      GOTO 22
C
 3000 CALL CALLZZ(K)
      IF (ARGTOP .NE. 0)  CALL ARGGEN
 7080 CALL RLSLIN
      IF(CNAMTB(K).EQ.FINIT)GOTO 151
   22 IF(ENTRY)GO TO 6002
 6053 NEWSTM=.TRUE.
      ARGTOP=0
      RETURN
   23 IF(CNAMTB(STACK(1,TOP-1)).NE.CONTIN)GOTO 22
      DOJUMP=3
      CALL LOOP
      GOTO 22
C
C... GODLTA STATEMENT
C
  700 ASSIGN 22 TO IRET
      IF(ARGTOP.LT.1)GO TO 9991
      ERRPT=4-ARGTOP
      IF(ARGTOP.GT.4)GO TO 9990
      GO TO(750,720,730,720),ARGTOP
  720 TEST=ARGSTK(1)
      ILIST=1
      IF(MODE(TEST).NE.REAL)GO TO 9992
      ASSIGN 725 TO ASNVAR
      GO TO 7002
C
  725 ARGTOP=ARGTOP-1
      DO 728 I=1,ARGTOP
      ERGSTK(I)=ERGSTK(I+1)
  728 ARGSTK(I)=ARGSTK(I+1)
      IF(ARGTOP.EQ.1)GO TO 750
C
  730 L=ZEROPT
  732 J=GETTMP(VECTOR)
      CALL OPCODE(MOVE)
      CALL ARGCVT(J)
      DO 740 I=1,3
      IF(ARGTOP.EQ.0)GO TO 735
      TEST=ARGSTK(ARGTOP)
      ILIST=ARGTOP
      IF(MODE(TEST).NE.REAL)GO TO 9992
      ARGTOP=ARGTOP-1
      GO TO 736
  735 TEST=ZEROPT
  736 CALL ARGCVT(TEST)
  740 CONTINUE
      CALL RLSLIN
      IF(L.EQ.ZEROPT)CALL REFGEN(3,J)
      GO TO 760
C
  750 J=ARGSTK(ARGTOP)
      ARGTOP=ARGTOP-1
      ILIST=ARGTOP
      L=MODE(J)
      IF(L.NE.REAL)GO TO 755
      L=J
      GO TO 732
C
  755 IF(L.NE.VECTOR)GO TO 790
      L=ZEROPT
  760 CALL CALLZZ(K)
      CALL ARGCVT(J)
      CALL ARGCVT(L)
      CALL RLSLIN
      GO TO 22
C
  790 CALL ALARM(2003,-ILIST,8,'PRO026  ')
      GO TO 22
C
C...  ENTRY FOR*FROM* AND*GOTO*
C                             IF FIRST ELEMENT IS PATERN, PROCESS
C                             GOTO/PATERN STATEMENT.
  800 IF(MODE(ARGSTK(ARGTOP)).NE.PATERN)GO TO 801
      CALL GOPAT
      GO TO 22
C
  801 ASSIGN 22 TO IRET
      IF(ARGTOP.LT.1)GO TO 9991
      ERRPT=7-ARGTOP
      IF(ARGTOP.GT.7)GO TO 9990
      TEST=ARGSTK(1)
      N=MODE(TEST)
      ILIST=1
      GO TO(860,830,825,820,805,845,805),ARGTOP
C
C... FEEDRATE RECOGNITION
C
  805 IF(N.NE.REAL)GO TO 9992
  810 ASSIGN 815 TO ASNVAR
      GO TO 7002
  815 ARGTOP=ARGTOP-1
      DO 818 I=1,ARGTOP
      ERGSTK(I)=ERGSTK(I+1)
  818 ARGSTK(I)=ARGSTK(I+1)
      TEST=ARGSTK(1)
      N=MODE(TEST)
      GO TO(870,842,863,840,9997,845),ARGTOP
C
  820 IF(N.NE.REAL)GO TO 840
      IF(MODE(ARGSTK(ARGTOP)).NE.REAL)GO TO 845
      GO TO 810
  825 IF(N.NE.REAL)GO TO 9992
      IF(MODE(ARGSTK(2)).NE.VECTOR)GO TO 863
      GO TO 810
  830 IF(N.EQ.VECTOR)GO TO 842
      IF(N.NE.REAL)GO TO 9992
      IF(MODE(ARGSTK(ARGTOP)).NE.POINT)GO TO 863
      GO TO 810
C
C... TLAXIS RECOGNITION
C
  840 IF(N.NE.VECTOR)GO TO 845
  842 KK=K
      K=TLAXIS
      DSTYPE=3
      ASSIGN 848 TO ASNVAR
      GO TO 1988
  845 KK=K
      K=TLAXIS
      DSTYPE=3
      ASSIGN 850 TO ASNVAR
      GO TO 1952
  848 DSTYPE=1
  850 K=KK
      ARGTOP=ARGTOP-DSTYPE
      DO 855 I=1,ARGTOP
      L=I+DSTYPE
      ERGSTK(I)=ERGSTK(L)
  855 ARGSTK(I)=ARGSTK(L)
C
C... GENERATE CALL TO FROM OR GOTO
C
      IF(ARGTOP.NE.1)GO TO 862
      TEST=ARGSTK(1)
      N=MODE(TEST)
  860 ERRPT=-1
      IF(N.NE.POINT)GO TO 890
      GO TO 870
  862 ILIST=ARGTOP
      IF(ARGTOP.NE.3)GO TO 9997
  863 L=GETTMP(POINT)
      CALL OPCODE(MOVE)
      CALL ARGCVT(L)
      CALL PUTTMP(POINT)
      J=3
      IF(ARGTOP.EQ.2)J=2
      DO 865 I=1,J
      TEST=ARGSTK(ARGTOP)
      ILIST=ARGTOP
      IF(MODE(TEST).NE.REAL)GO TO 9992
      CALL ARGCVT(TEST)
  865 ARGTOP=ARGTOP-1
      CALL RLSLIN
      TEST=L
      IF(J.NE.2)GO TO 867
      CALL CALLZZ(APT001)
      CALL ARGCVT(L)
      CALL RLSLIN
      GO TO 870
  867 CALL REFGEN(1,TEST)
  870 CALL CALLZZ(K)
      CALL ARGCVT(TEST)
      CALL RLSLIN
      ARGTOP=0
      GO TO 22
C
  890 CALL ALARM(2011,ERRPT,8,'PRO026  ')
      GO TO 22
C
C...  GO UP/
C...  INITIALIZE CHECK SURFACE COUNT
 1901 CALL MOTION
      IF(LERR) 9999,7080,7080
C...  GO/ COMMAND
C     INITIALIZATION
 1904 ARGCNT=ARGTOP
      DSFIND=.FALSE.
      PSFIND=.FALSE.
      FMTERR=.FALSE.
      NUMBCS=0
      IDRECT=0
C...  TEST FOR EXHAUSTION OF AGRUMENT LIST
  400 IF(ARGTOP.GE.1)GO TO 401
C...  THE ARGUMENT LIST IS EXHAUSTED. IF A DS WAS FOUND, TAKE NORMAL OUT
      IF(DSFIND) GO TO 415
C...  ARGUMENT LIST EXHAUSTED WITHOUT FINDING A DRIVE SURFACE.
      CALL ALARM(2004,TOP-1,8,'PRO026  ')
C...  TAKE RESTART ERROR EXIT
      FMTERR=.TRUE.
      IERROR=2001
      GO TO 499
  401 TEST=ARGSTK(ARGTOP)
      TEST1 = MODE(TEST)
      IF (TEST1.EQ.REAL) GOTO 5000
      IF ((NAMTBL(TEST)/MODULO).EQ.(PERMID(1)/MODULO)) GOTO 402
C...  NOT PERMANENT IDENTIFIER (TO,ON,PAST). TRY FOR SURFACE.
      IF((TEST1.GE.1.AND. TEST1.LE.17) .OR.
     1   (TEST1.GE.29 .AND. TEST1.LE.30)) GO TO 406
 5000 IF (.NOT.DSFIND) GOTO 420
      IF(TEST1.NE.REAL)GO TO 414
      ASSIGN 415 TO ASNVAR
      GO TO 7002
  414 CALL ALARM(2005,-ARGTOP,8,'PRO026  ')
      IF(FMTERR)GO TO 415
      IERROR=2002
      FMTERR=.TRUE.
      GO TO 415
C...  ITEM IS PERMANENT IDENTIFIER MAY BE TO,ON OR PAST
  402 IF (((NAMTBL(TEST)-PERMID(1)).EQ.3) .OR. ((NAMTBL(TEST)-PERMID
     /(1)).EQ.503)) GOTO 404
C...  NO MATCH,ILLEGAL FORMAT. TO ASSUMED
      CALL ALARM(2006,-ARGTOP,8,'PRO026  ')
      IF(FMTERR) GO TO 405
      IERROR=2003
      FMTERR=.TRUE.
      GO TO 405
C...  TO,ON OR PAST. SET IDRECT TO INDICATE MODE OF THIS SURFACE.
  404 IDRECT=TEST
C...  INCREMENT POINTER TO NEXT ITEM. THEN INSPECT REST OF STATEMENT
  405 ARGTOP=ARGTOP-1
      GO TO 400
C...  A SURFACE HAS BEEN DETECTED. IF THE FIRST, STORE DATA FOR LATER OU
C     TPUT. IF NOT, SEND OUT PART AND CHECK SURFACE CALLS
C
C...  CONVERT SURFACE TYPE TO BCD
C...  IF DRIVE SURFACE WAS FOUND ALREADY, THIS MAY BE A PART SURFACE.
  406 IF(DSFIND)GO TO 407
C...  FIRST SURFACE NOTED IS DRIVE SURFACE
      DSFIND=.TRUE.
      HMOD=IDRECT
      CSPNTR=TEST
C...  GO BACK FOR REST OF STATEMENT
      GO TO 6006
C...  IF PART SURFACE WAS FOUND ALREADY, THIS IS A CHECK SURFACE
  407 IF(PSFIND)GO TO 409
C...  SECOND SURFACE NOTED IS PART SURFACE
      PSFIND=.TRUE.
      CALL CALLZZ(PSIS)
      IF(IDRECT)6012,6012,6013
 6012 CALL TWOARG(DBLDLR,TO)
      GO TO 6014
 6013 CALL ARGCVT(IDRECT)
 6014 CALL ARGCVT(TEST)
  408 CALL RLSLIN
 6006 IDRECT=0
      GO TO 405
C...  CHECK SURFACES
  409 NUMBCS=NUMBCS+1
      IF (NUMBCS.EQ.1) GOTO 410
      CALL ALARM(2008,-ARGTOP,8,'PRO026  ')
      GOTO 6006
  410 CALL CALLZZ(APT200)
      IF(IDRECT)6015,6015,6016
 6015 CALL TWOARG(DBLDLR,TO)
      GO TO 6017
 6016 CALL ARGCVT(IDRECT)
 6017 CALL ARGCVT(TEST)
      CALL ARGCVT(ONEPT)
      GO TO 408
C...  NESTED FEDRAT
 7002 CALL CALLZZ (APT299)
      CALL TWOARG (QUIDLR,1)
      CALL TWOARG(DBLDLR,FEDRAT)
      CALL TWOARG (QUIDLR,1)
      CALL ARGCVT(TEST)
      CALL RLSLIN
      GO TO ASNVAR,(415,725,815)
C...  STATEMENT SHOULD NOW BE COMPLETELY PROCESSED
  415 IF(ARGTOP.GT.1)CALL ALARM(2007,1-ARGTOP,4,'PRO026  ')
C...  ANY FORMAT ERRORS ENCOUNTERED
      IF(FMTERR) GO TO 499
C...  OUTPUT GO/ CALL
 7007 CALL CALLZZ(K)
      IF(HMOD)6018,6018,6019
 6018 CALL TWOARG(DBLDLR,TO)
      GO TO 6020
 6019 CALL ARGCVT(HMOD)
 6020 CALL ARGCVT(CSPNTR)
      IF(HMOD.GE.0)GOTO 7080
      CALL ARGCVT(ARGSTK(2))
      CALL ARGCVT(ARGSTK(1))
      GO TO 7080
  420 CALL ALARM(2009,-ARGTOP,8,'PRO026  ')
      IF(FMTERR) GO TO 405
      FMTERR=.TRUE.
      IERROR=2004
      GO TO 405
C...  ERROR IN GO/ COMMAND SIGNAL RESTART WITH FIRST UNRECOVERABLE ERROR
  499 CALL CALLZZ(ERROR)
      CALL TWOARG(QUIDLR,IERROR)
      GO TO 7080
C
C...     TLAXIS
 1913 CALL PRO028(ERAS)
      GOTO 22
C
 1952 TEST=GETTMP(VECTOR)
      CALL OPCODE(MOVE)
      CALL TWOARG(NOUGHT,TEST)
      DO 1954 I=1,3
      ILIST=4-I
      M=ARGSTK(ILIST)
      IF(MODE(M).NE.REAL)GO TO 9992
 1954 CALL ARGCVT(M)
      CALL RLSLIN
      CALL REFGEN(3,TEST)
      CALL PUTTMP(VECTOR)
      GO TO 1988
C
C...     CUTTER
 1912 ERRPT=7-ARGTOP
      ASSIGN 9999 TO IRET
      IF(ARGTOP.GT.7)GO TO 9990
      IF(ARGTOP.LT.1)GO TO 9991
      GO TO 1970
C
C...     INTOL, OUTTOL, THICK, TOLER
 1909 ERRPT=4-ARGTOP
      ASSIGN 9999 TO IRET
      IF(ARGTOP.GT.4) GOTO 9990
      IF (ARGTOP.EQ.4) GOTO 1970
      IF(ARGTOP.LT.1)GO TO 9991
      DO 1911 I=1,4
        N=ARGTOP+1-I
        IF (N.LE.0) THEN
          N=1
          IF (ARGSTK(1).GT.NAMMAX) THEN
            LSTCHR=0
            ARGSTK(1)=NUMB(CNUMTB(ARGSTK(1)-NAMMAX))+NAMMAX
          ENDIF
        ENDIF
        ARGSTK(5-I)=ARGSTK(N)
 1911 CONTINUE
      ARGTOP=4
 1970 DSTYPE=ARGTOP
      N=ARGTOP
C...     CHECK FOR SCALARS
      DO 1980 ILIST=1,N
      TEST=ARGSTK(ILIST)
      IF(MODE(TEST).NE.REAL)GO TO 9992
 1980 CONTINUE
C...     MOVE ARGUMENTS TO APTER ARRAY
      IF(ERAS)GO TO 1982
      CALL RESRVZ(ERASB,0,9,1)
      ERAS=.TRUE.
 1982 CALL OPCODE(MOVE)
      CALL TWOARG(NOUGHT,ERASB)
      CALL ARGGEN
      CALL RLSLIN
      TEST=ERASB
      ASSIGN 22 TO ASNVAR
C...     GENERATE CALL TO SUBROUTINE
 1988 CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,DSTYPE)
      IF (K.EQ.TLAXIS) CALL TWOARG(QUIDLR,7)
      CALL ARGCVT(TEST)
      CALL RLSLIN
      GO TO ASNVAR,(22,848,850)
C...     PARAMETER LIST TOO LONG
 9989 ERRPT=1-ARGTOP
 9990 CALL ALARM(2012,ERRPT,8,'PRO026  ')
 9999 CALL CALLZZ(ERROR)
      CALL TWOARG(QUIDLR,83)
      CALL RLSLIN
      ARGTOP=0
      GO TO 22
C...     NO PARAMETERS GIVEN
 9991 CALL ALARM(12,TOP-1,8,'PRO026  ')
      GO TO  9200
C...     ILLEGAL ARGUMENT
 9992 CALL ALARM(2013,-ILIST,8,'PRO026  ')
      GO TO  9200
C...     WRONG CLDAT SEQUENCE
 9995 CALL ALARM(2046,-ARGTOP,8,'PRO026  ')
      GO TO  9200
C...  TOOL TO SURFACE RELATIONSHIPS
 1923 CALL REFREF
      GO TO 22
 9997 CALL ALARM(2052,-ILIST,8,'PRO026  ')
 9200 GOTO IRET,(22,9999)
C
C...     CLDAT/.....................
 2000 ASSIGN 22 TO IRET
      IF(ARGTOP.EQ.0)GOTO 9991
 2002 J=ARGSTK(ARGTOP)
      L=ARGSTK(1)
      IF(MODE(J).NE.REAL)GOTO 2004
C...     IT MUST BE CLDAT/0.,1.,3.,(ON-OFF)
      ERRPT=-1
      IF(ARGTOP.LT.4)GOTO 9997
      ERRPT=4-ARGTOP
      IF(ARGTOP.GT.4)GOTO 9990
      ILIST=1
      IF(CNAMTB(L).NE.HON.AND.CNAMTB(L).NE.HOFF)GOTO 9992
      DO 2003 I=2,3
      ILIST=ARGTOP-I
      IF(MODE(ARGSTK(I)).NE.REAL)GOTO 9992
 2003 CONTINUE
      GOTO 30
C...
 2004 SUB=K
      IF(CNAMTB(J).NE.START)GOTO 2012
C...     IT MUST BE CLDAT/START,INDEX,.........
      ERRPT=11-ARGTOP
      IF(ARGTOP.GT.11)GOTO 9990
      IF(.NOT.ODD1.OR..NOT.ODD2)GOTO 9995
      ODD=.FALSE.
 2005 ILIST=ARGTOP
      IF(ARGTOP.LT.2)GOTO 9997
      ILIST=ARGTOP-1
      IF(MODE(ARGSTK(ILIST)).NE.REAL)GOTO 9992
      J=ARGTOP-2
      IF(J.LT.1)GOTO 2009
 2006 DO 2008 ILIST=1,J
      N=NAMTBL(ARGSTK(ILIST))-PERMID(1)
      IF(N.GT.MODHLF)N=N-MODHLF
      IF(N.LT.180.OR.N.GT.188)GOTO 9992
 2008 CONTINUE
 2009 IF(J.EQ.ARGTOP)GOTO 2010
      ODD1=ODD
      GOTO 35
 2010 ODD2=.FALSE.
      GOTO 35
C...
 2012 IF(CNAMTB(J).NE.NOMORE)GOTO 2014
C...     IT MUST BE CLDAT/NOMORE,INDEX,.........
      IF(ODD1)CALL ALARM(2046,-ARGTOP,4,'PRO026  ')
      ODD=.TRUE.
      GOTO 2005
C...
 2014 IF(CNAMTB(J).NE.NORMAL)GOTO 2016
C...     IT MUST BE CLDAT/NORMAL
      IF(ODD2)CALL ALARM(2046,-ARGTOP,4,'PRO026  ')
      IF(ARGTOP.GT.1)GOTO 9989
      ODD2=.TRUE.
      GOTO 35
C...     IT MUST BE CLDAT/TP,TA,TV,PDS,PPS,NDS,NPS,UVPDS,UVPPS
 2016 ILIST=ARGTOP
      IF(.NOT.ODD1.OR..NOT.ODD2)GOTO 9995
      ERRPT=9-ARGTOP
      IF(ARGTOP.GT.9)GOTO 9990
      J=ARGTOP
      GOTO 2006
C
C...     TLPROJ/....................
C...     REGION/....................
 2100 IF(ARGTOP.EQ.0)GOTO 9991
      ERRPT=2-ARGTOP
      IF(ARGTOP-2)2110,2120,9990
 2110 ARGTOP=2
      ARGSTK(ARGTOP)=ZEROPT
      IF(ARGSTK(1).LE.NAMMAX) THEN
        IF (CNAMTB(ARGSTK(1)).EQ.HOFF) GOTO 3000
      ENDIF
      GOTO 2130
 2120 ILIST=ARGTOP
      J=ARGSTK(ARGTOP)
      IF (J.LE.NAMMAX) THEN
        IF(CNAMTB(J).EQ.HON.OR.CNAMTB(J).EQ.HAT)GOTO 2130
      ENDIF
      IF (MODE(J).NE.REAL) GOTO 9992
      ILIST=1
      J=ARGSTK(ILIST)
      IF (J.LE.NAMMAX) THEN
        IF(CNAMTB(J).EQ.HIN.OR.CNAMTB(J).EQ.HOUT) GOTO 3000
      ENDIF
      GOTO 9992
 2130 ILIST=1
      J=ARGSTK(ILIST)
      IF(MODE(J).EQ.VECTOR)GOTO 3000
      IF (J.LE.NAMMAX)THEN
       IF(CNAMTB(J).EQ.NORMAL)GOTO 3000
      ENDIF
      GOTO 9992
C
C... CHKSRF/....
C
 2200 IF (ARGTOP.EQ.0) GOTO 9991
      ERRPT=-1
      IF (MOD(ARGTOP,2).NE.0) THEN
        CALL ALARM(2055,ERRPT,8,'PRO026')
      ELSE
C... CHECK ARGUMENT PAIRS
        DO 2280 I=2,ARGTOP,2
C... 2ND ARGUMENT OF PAIR SHOULD BE 'ON' OR 'OFF'
          J=ARGSTK(I-1)
          ERRPT=1-I
          IF (J.GT.NAMMAX) THEN
            CALL ALARM(2056,ERRPT,8,'PRO026')
            GOTO 22
          ELSE IF ((CNAMTB(J).EQ.HON).OR.(CNAMTB(J).EQ.HOFF)) THEN
            JMOD=J
          ELSE
            CALL ALARM(2056,ERRPT,8,'PRO026')
            GOTO 22
          ENDIF
C... 1ST ARGUMENT OF PAIR SHOULD BE 'PS' OR A SSURF
          J=ARGSTK(I)
          ERRPT=-I
          IF (J.GT.NAMMAX) THEN
            CALL ALARM(2057,ERRPT,8,'PRO026')
            GOTO 22
          ELSE
            TEST1=MODE(J)
            IF ((CNAMTB(J).EQ.HPS).OR.(TEST1.EQ.SSURF)) THEN
              CALL CALLZZ(K)
              CALL ARGCVT(J)
              CALL ARGCVT(JMOD)
              CALL RLSLIN
            ELSE
              CALL ALARM(2057,ERRPT,8,'PRO026')
              GOTO 22
            ENDIF
          ENDIF
 2280   CONTINUE
      ENDIF
      GOTO 22
C
C... RESERVE SPACE FOR THE TWO LARGEST LARGE DATA ARRAYS.
C
 1924 CALL LABCON(0)
      DOJUMP=5
      CALL LOOP
      IF(MAXSIZ(1) .EQ. 0) GO TO 1920
C
      MAXTWO=IABS(MAXSIZ(1))+IABS(MAXSIZ(2))
C
C
      CALL RESRVZ(DOTTAB,-1,MAXTWO,1)
 1920 IF (IFDUMP .NE. 0) GO TO 8300
      GO TO 3000
C... INDICATE FINI STATEMENT HAS BEEN PROCESSED
  151 FINI = .TRUE.
C
      IF(MACDFP.EQ.0) GOTO 7777
      CALL MNPROC
      IF(MACEND)GO TO 7777
      MACRED = .TRUE.
      INTMED = 1
      GO TO 6053
 7777 CALL EPILOG
      GOTO 6053
 1918 APTRAN = .TRUE.
C     CALL READ         CAUSES ABNORMAL END
      GO TO 22
C...  PSIS/SURFACE
 1914 IF(ARGTOP.GT.0)GOTO 1400
      CALL ALARM(13,TOP-1,8,'PRO026  ')
      GO TO 22
 1400 ILIST=ARGTOP-3
      IF(ARGTOP.GT.3)GOTO 9997
C...  COMPUTE POINTER AND MODE
      CSPNTR=ARGSTK(ARGTOP)
      CSTYPE=MODE(CSPNTR)
C...  IS THE FIRST ITEM A LEGITIMATE SURFACE
      IF((CSTYPE.GE.1 .AND. CSTYPE.LE.17) .OR.
     1   (CSTYPE.GE.29 .AND. CSTYPE.LE.30)) GO TO 1401
      CALL ALARM(2015,-ARGTOP,8,'PRO026  ')
      GO TO 22
 1401 HMOD=-1
      IF(ARGTOP.GT.1)GOTO 1402
C...  FORMAT OK
      ARGSTK(2)=ZERO(1)
 1404 ARGSTK(1)=ZERO(1)
      ARGSTK(3)=CSPNTR
      GO TO 7007
C     MORE THAN ONE ITEM FOLLOW THE SLASH
 1402 ILIST=ARGTOP-1
      J=ARGSTK(ILIST)
      IF(ARGTOP.EQ.3)GOTO 1405
      IF(NAMTBL(J).NE.20029)GOTO 9992
      ARGSTK(2)=ARGSTK(1)
      GO TO 1404
C     LIMIT AND SCALAR SHOULD FOLLOW
 1405 IF(NAMTBL(J).NE.20139)GOTO 9992
      ILIST=ARGTOP-2
      IF(MODE(ARGSTK(1)).NE.REAL)GOTO 9992
      GO TO 7007
C
 1925 ERRPT=TOP-1
      IF(ARGTOP.LT.1)GOTO 2411
      ERRPT=1-ARGTOP
      M=1
      IF(ARGTOP-2)6040,2411,6038
 6038 J=ARGSTK(1)
      M=2
      IF (J.LE.NAMMAX) THEN
        IF (NAMTBL(J)/MODULO*MODULO.EQ.TEMP(1)) GOTO 6039
      ENDIF
      IF(MODE(J).NE.REAL)GOTO 1928
 6039 CALL RESRVZ(DOTAC,REAL,1,1)
      CALL OPCODE(REPL)
      CALL ONEARG(1)
      CALL ARGCVT(DOTAC)
      CALL ARGCVT(J)
      CALL RLSLIN
      CALL OPCODE(VBLJMP)
      CALL ARGCVT(DOTAC)
 6040 DO 6045 I=M,ARGTOP
      ERRPT=ARGTOP+M-I
      CSPNTR=ARGSTK(ERRPT)
      IF (CSPNTR.GT.NAMMAX) GOTO 5001
      TEST1=MODULO*(NAMTBL(CSPNTR)/MODULO)
      IF((TEST1.EQ.TEMP(1)).OR.(TEST1.EQ.VBL(1)))GO TO 2410
      IF(TEST1.NE.LABEL(1) .AND. TEST1.NE.IMPLAB(1))
     / NAMTBL(CSPNTR)=IMPLAB(1)
      IF(WHCHMN.EQ.0)GO TO 6044
      GO TO 6046
C.... DECREMENT BY NAMMAX FOR ADDRESS IN NUMBER TABLE, CNUMTB
 5001 CSPNTR=CSPNTR-NAMMAX
      IF(NLAST.GT.0)CALL MCXTRN(5,CSPNTR,IDUMMY)
      CALL BCDBIN(CNUMTB(CSPNTR),KK,ICOUNT)
      CSPNTR=KK+10000
 6046 CALL MACLBL(CSPNTR,-WHCHMN,CSPNTR)
      IF(NAMTBL(CSPNTR).EQ.0)NAMTBL(CSPNTR)=IMPLAB(1)+WHCHMN
 6044 IF(ARGTOP.GT.1)GOTO 6041
      CALL JUMPZZ(CSPNTR)
      GOTO 6042
 6041 CALL ONEARG(CSPNTR)
 6042 CALL LABCON(CSPNTR)
 6045 CONTINUE
      IF(ARGTOP.GT.1)CALL RLSLIN
      GOTO 22
 2410 IF(ARGTOP.GT.1)CALL RLSLIN
 2411 CALL ALARM(2017,-ERRPT,8,'PRO026  ')
      GO TO 22
 1928 CALL ALARM(1008,-1,8,'PRO026  ')
      GO TO 22
C
C...     UNITS STATEMENT
 5800 ERRPT=1-ARGTOP
      IF(ARGTOP-1)5801,3000,5802
 5801 ERRPT=TOP-1
 5802 CALL ALARM(2052,ERRPT,8,'PRO026  ')
      GOTO 22
C
 8100 IF (ARGTOP .GT. 0) GO TO 8120
      CALL ALARM(2030,TOP-1,4,'PRO026  ')
      GO TO 22
 8200 K=NAME(SRPRNT)
      CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,9)
      CALL ARGCVT(ARGSTK(ARGTOP))
      CALL TWOARG(QUIDLR,1)
      CALL RLSLIN
      GO TO 22
 1926 IF(FINMAC)GOTO 1927
      IF(.NOT.ILHLT)CALL RESERV
      GO TO 22
 1927 CALL ALARM(2045,0,8,'PRO026  ')
      GO TO 22
 2800 IGOTO=1
      GO TO 99
 1942 IGOTO=2
      GO TO 99
 1968 IGOTO=3
      GO TO 99
C
C     PUNCH
C
 8110 IGOTO=4
      GO TO 99
 1921 IGOTO=7
      GO TO 99
 1922 IGOTO=8
      GO TO 99
 5700 IGOTO=6
   99 CALL PRO027(IGOTO)
      GO TO 22
C
C...  P R O C E S S I N G   F O R   C F S A V E   A N D   P U N C H
C
 8120 I = ARGSTK(ARGTOP)
C
C     CHECK IF FIRST ARGUMENT IS A DIGIT.
C
      L=I
      IF (I .LE. NAMMAX) GO TO 8150
C.... DECREMENT BY NAMMAX FOR ADDRESS IN NUMBER TABLE, CNUMTB
      I=I-NAMMAX
      IF(NLAST.GT.0)CALL MCXTRN(5,I,IDUMMY)
      CALL BCDBIN(CNUMTB(I),J,L)
C
C     FIRST ARGUMENT IS A DIGIT.  CHECK IF IT IS LEGAL.
C
      IF (J .LE. 3) GO TO 8140
 8130 CALL ALARM(2031,-ARGTOP,4,'PRO026  ')
      GO TO 22
C
 8140 IF(ARGTOP.EQ.1)GOTO 8130
      ARGTOP=ARGTOP-1
      I = ARGSTK(ARGTOP)
C
C     CHECK IF SECOND ARGUMENT IS 'ALL'.
C
      IF(CNAMTB(I).NE.HALL)GOTO 8130
      GOTO 8180
C
C     DETERMINE THE FIRST ARGUMENT
C  PUNCH/ALL
 8150 J=1
      IF(CNAMTB(I).EQ.HALL)GOTO 8180
C  PUNCH/SCALAR , PUNCH/GEOM  ,  PUNCH/LISTON  , PUNCH/NOLIST
      M=MOD(NAMTBL(I),MODHLF)
      J=M-124
      IF(J.GT.1.AND.J.LT.6)GOTO 8180
C  PUNCH/RANDOM,...
      J=7
      IF(M.EQ.56)GOTO 8180
C  PUNCH/RETAIN,...
      J=8
      IF(M.EQ.65)GOTO 8180
C  MUST BE A LIST OF VARIABLE NAMES.
      J=6
C
C     CHECK IF PUNCH WAS SPECIFIED.
C
 8180 IF(HOP.EQ.37)GO TO 8110
C
C     CFSAVE
C
      GO TO (8240,8240,8240,8130,8130,8220), J
 8220 IF  (MODE(I) .NE. OBJECT) GO TO 8130
      J = I
C
 8240 IFDUMP = J
      GO TO 22
C
C...  GENERATE CALL TO APT104 IF IFDUMP IS INDEX TO OBJECT.
C
 8300 IF (IFDUMP .LE. 3) GO TO 3000
      CALL CALLZZ(APTXXX(85))
      CALL ARGCVT (IFDUMP)
      CALL RLSLIN
      GO TO 3000
      END
