*
C
C              FORTRAN SUBROUTINE REPLAC
C
C LINKAGE      SUBROUTINE  REPLAC
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    ARGCVT          SUBROUTINE    RECOG
C          SUBROUTINE    MATCH           SUBROUTINE    LOOP
C          SUBROUTINE    ONEARG
C          SUBROUTINE    OPCODE
C          SUBROUTINE    PATH
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    ALARM
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          SUBROUTINE    SETMOD
C          LOGICAL FCT.  IFTMP
C
      SUBROUTINE  REPLAC
C
      IMPLICIT INTEGER (A-Z)
C
C              FUNCTION DECLARATION
C
      LOGICAL IFTMP
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99),ARGSTK(99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C ARGTOP:      POINTER TO LAST ARGSTK ENTRY
      EQUIVALENCE (ARGTOP,STKLST(2))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C ARGSTK:      ARGUMENT STACK
      EQUIVALENCE (ARGSTK(1),STKLST(202))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),VBL(2),IDENT(2),CONGEO(2),CONPRO(2),RELAT(2)
C RELAT:       (1)=CODE CLASS 27000,(2)=NAMTBL INDEX OF 'RELAT '
      EQUIVALENCE (RELAT(1),CODE(53))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C IDENT:       (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODE(69))
C CONGEO:      (1)=CODE CLASS 39000,(2)=NAMTBL INDEX OF 'CONGEO'
      EQUIVALENCE (CONGEO(1),CODE(77))
C CONPRO:      (1)=CODE CLASS 40000,(2)=NAMTBL INDEX OF 'CONPRO'
      EQUIVALENCE (CONPRO(1),CODE(79))
C
C        6.    GHOST STACK FOR OBJECT TIME TEMPORARY ALLOCATION
C              LENGTH AND CURRENT NUMBER OF ACTIVE TEMPORARY STORAGE
      COMMON/TMP/TXXXX
      DIMENSION TXXXX(2,32)
C
C       16.    LITERALS FOR I. L. OPERATION CODES
C
      COMMON/IL/IL
      DIMENSION IL(21)
C REPL:        CONTAINS COMMAND CODE (17) FOR REPL COMMAND
      EQUIVALENCE (REPL,IL(17))
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      LOGICAL FINMAC,ENTRY,SHOULD
      DIMENSION MACXX1(71)
C INTMED:      0=NO -,-1=INTERMEDIATE-,+1=FINAL MACRO PROCESSING
      EQUIVALENCE (INTMED,MACXX1(22))
C MAJWRD:      CONTAINS ACTUAL MAJOR WORD
      EQUIVALENCE (MAJWRD,MACXX1(23))
C FINMAC:      TRUE IF SECOND FINAL PASS OF MACRO PROCESSING
      EQUIVALENCE (FINMAC,MACXX1(24))
C WAY:         INDICATES TYPE OF MACRO PROCESSING
      EQUIVALENCE (WAY,MACXX1(26))
C ENTRY:       FALSE ON FIRST ENTRY TO MATCH FOR A MACRO EXPRESSION
      EQUIVALENCE (ENTRY,MACXX1(40))
C SHOULD:      MACRO INDICATOR. NORMALLY FALSE
      EQUIVALENCE (SHOULD,MACXX1(70))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C
C       44.    ERROR POSITION TABLE
C
      COMMON/ERRPOS/ERRPOS
      INTEGER ERRPOS,ESTACK,ERGSTK
      DIMENSION ERRPOS(302),ESTACK(100),ERGSTK(100)
C ESTACK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN STACK
      EQUIVALENCE (ESTACK(1),ERRPOS(103))
C ERGSTK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN ARGSTK
      EQUIVALENCE (ERGSTK(1),ERRPOS(203))
C**
      K = STACK(1,TOP-1)
      MAJWRD=STACK(1,TOP-3)
      ERGSTK(100)=TOP-3
      IF(INTMED.NE.1)GO TO 30
      WAY=4
      IF(FINMAC)GO TO 20
      ARGTOP=1
      ARGSTK(1)=K
   10 CALL MATCH
      K=ARGSTK(1)
      IF(.NOT.ENTRY)GO TO 210
      GO TO 30
   20 CALL PATH
      IF (.NOT.SHOULD) GOTO 210
   30 MODXX=MODE(K)
C          CHANGE CLASS IF IDENTIFIER
      J = MODULO*(NAMTBL(MAJWRD)/MODULO)
       IF((J.NE.IDENT(1)).AND.(J.NE.CONPRO(1)).AND.(J.NE.CONGEO(1)).AND.
     /(J.NE.RELAT(1)))GOTO 100
  150 CALL RESRVZ(MAJWRD,MODXX,TXXXX(1,MODXX),1)
      CALL SETMOD(TOP-3,VBL(1))
      NAMTBL(MAJWRD) = NAMTBL(MAJWRD)+MODXX
      GO  TO  200
  100 IF(MODE(MAJWRD).EQ.MODXX)GO TO 200
      CALL ALARM(1012,TOP-1,8,'REPLAC  ')
C
  200 CALL OPCODE(REPL)
      CALL ONEARG(TXXXX(1,MODXX))
      CALL ARGCVT(MAJWRD)
      CALLARGCVT(K)
      CALL RLSLIN
      IF(ENTRY)GO TO 10
  210 ARGTOP=0
      IF(IFTMP(K))CALL PUTTMP(MODE(K))
  300 RETURN
       END
