**** SOURCE FILE : M0006640.W01   ***
*
C
C              FORTRAN SUBROUTINE INPUT
C
C LINKAGE      SUBROUTINE INPUT
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    ALARM           SUBROUTINE    RECOG
C          SUBROUTINE    BOOLIF
C          SUBROUTINE    CALMCX
C          SUBROUTINE    HELP
C          SUBROUTINE    MACLBL
C          SUBROUTINE    MACTAB
C          SUBROUTINE    MATCH
C          SUBROUTINE    MCXTRN
C          INTEGER FCT.  NAME
C          SUBROUTINE    PATH
C          SUBROUTINE    READ
C
      SUBROUTINE INPUT
C
      IMPLICIT INTEGER (A-Z)
C
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99),ARGSTK(99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C ARGTOP:      POINTER TO LAST ARGSTK ENTRY
      EQUIVALENCE (ARGTOP,STKLST(2))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C ARGSTK:      ARGUMENT STACK
      EQUIVALENCE (ARGSTK(1),STKLST(202))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),RTERM(2),SLASH(2),NUMBER(2),LABEL(2),IMPLAB(
     *          2),MACNAM(2),MCLTRM(2)
C RTERM:       (1)=CODE CLASS  4000,(2)=NAMTBL INDEX OF 'RTERM '
      EQUIVALENCE (RTERM(1),CODE(7))
C SLASH:       (1)=CODE CLASS  5000,(2)=NAMTBL INDEX OF '/     '
      EQUIVALENCE (SLASH(1),CODE(9))
C NUMBER:      (1)=CODE CLASS 14000,(2)=NAMTBL INDEX OF 'NUMBER'
      EQUIVALENCE (NUMBER(1),CODE(27))
C LABEL:       (1)=CODE CLASS 22000,(2)=NAMTBL INDEX OF 'LABEL '
      EQUIVALENCE (LABEL(1),CODE(43))
C IMPLAB:      (1)=CODE CLASS 23000,(2)=NAMTBL INDEX OF 'IMPLAB'
      EQUIVALENCE (IMPLAB(1),CODE(45))
C MACNAM:      (1)=CODE CLASS 34000,(2)=NAMTBL INDEX OF 'MACNAM'
      EQUIVALENCE (MACNAM(1),CODE(67))
C MCLTRM:      (1)=CODE CLASS 38000,(2)=NAMTBL INDEX OF 'MCLTRM'
      EQUIVALENCE (MCLTRM(1),CODE(75))
C
C        4.    PRODUCTION TABLE
C
      COMMON/SRCTBL/SRCTBL
      DIMENSION SRCTBL(502),META(50)
C META:        CONTAINS INTERNAL BIT CODES FOR METALINGUISTIC CLASSES
      EQUIVALENCE (META(1),SRCTBL(3))
C
C        5.    PROGRAM CONTROL FLAGS
C
      COMMON/FLAGS/FLAGS
      LOGICAL ENDFLG,NEWSTM
      DIMENSION FLAGS(4)
C ENDFLG:      TRUE WHEN  SOURCE STATEMENT TOTALLY IN STACK
      EQUIVALENCE (ENDFLG,FLAGS(1))
C NEWSTM:      TRUE WHEN NEXT SOURCE STATEMENT REQUESTED FOR PROCESS
      EQUIVALENCE (NEWSTM,FLAGS(2))
C
C        7.    STRING STORAGE AREA
C              POINTER TO THE LAST PROCESSED CHARACTER OF A STATEMENT
      COMMON/INPTR/CNT
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      LOGICAL CALLON,CALLMV,MACRED,FINMAC,ENTRY,SHOULD
      DIMENSION MACXX1(71)
C MCHSTP:      POINTER TO LAST MACHST ENTRY
      EQUIVALENCE (MCHSTP,MACXX1(3))
C MCSAVP:      PRESENT NEST LEVEL DURING MACRO PROCESSING
      EQUIVALENCE (MCSAVP,MACXX1(5))
C CALLON:      TRUE AT A NESTED CALL DURING INTERMED. MACRO PROCESSING
      EQUIVALENCE (CALLON,MACXX1(10))
C CALLMV:      TRUE IF A CALL/MACRO VARIABLE STATEMENT IS ENCOUNTERED
      EQUIVALENCE (CALLMV,MACXX1(11))
C MVSEG:       CONTAINS POSITION NUMBER OF MACRO VBL IF CALLMV IS TRUE
      EQUIVALENCE (MVSEG,MACXX1(12))
C CALLPT:      MACTXT INDEX OF CURRENT CALL STATEMENT
      EQUIVALENCE (CALLPT,MACXX1(13))
C TEXTST:      POINTER TO MCBUFF OF MACRO TEXT WORD BEING PROCESSED
      EQUIVALENCE (TEXTST,MACXX1(15))
C MVPNT:       CONTAINS POINTER-1 OF FIRST MACRO VARIABLE VBLSAV
      EQUIVALENCE (MVPNT,MACXX1(16))
C MACRED:      SET TRUE TO INDICATE INPUT FROM MCBUFF TABLE
      EQUIVALENCE (MACRED,MACXX1(18))
C INTMED:      0=NO -,-1=INTERMEDIATE-,+1=FINAL MACRO PROCESSING
      EQUIVALENCE (INTMED,MACXX1(22))
C FINMAC:      TRUE IF SECOND FINAL PASS OF MACRO PROCESSING
      EQUIVALENCE (FINMAC,MACXX1(24))
C WAY:         INDICATES TYPE OF MACRO PROCESSING
      EQUIVALENCE (WAY,MACXX1(26))
C MHSTDM:      CONTAINS DIMENSION OF ARRAY MACHST
      EQUIVALENCE (MHSTDM,MACXX1(33))
C ENTRY:       FALSE ON FIRST ENTRY TO MATCH FOR A MACRO EXPRESSION
      EQUIVALENCE (ENTRY,MACXX1(40))
C MCSTRT:      INDEX IN MACSPD OF CURRENT CALL BEING EXAMINED
      EQUIVALENCE (MCSTRT,MACXX1(43))
C MCSRCH:      AT FINAL MACRO PRECESSING MACDF1 POINTER
      EQUIVALENCE (MCSRCH,MACXX1(59))
C NUMARG:      NUMBER OF MACRO VARIABLES+1 FOR CURRENT MACRO
      EQUIVALENCE (NUMARG,MACXX1(61))
C SHOULD:      MACRO INDICATOR. NORMALLY FALSE
      EQUIVALENCE (SHOULD,MACXX1(70))
C
C       24.    MACRO PROCESSING ARRAYS
C
      COMMON/MACXX3/MACXX3
      DIMENSION MACXX3(2630),MACDF1(400),MACDF2(400),MACHST(1800),MACSV1
     *          (10)
C MACDF1:      STORES MACRO NAME AND ALL MACRO VBL NAMTBL POINTERS
      EQUIVALENCE (MACDF1(1),MACXX3(1))
C MACDF2:      STORES NORMAL VALUES FOR ALL MACRO VARIABLES
      EQUIVALENCE (MACDF2(1),MACXX3(401))
C MACHST:      MACRO CALL HISTORY TABLE
      EQUIVALENCE (MACHST(1),MACXX3(801))
C MACSV1:      CONTAINS MACRO NEST LEVEL INFORMATIONS
      EQUIVALENCE (MACSV1(1),MACXX3(2601))
C
C       25.    MACRO PROCESSING ARRAYS
C
      COMMON/MACXX6/MACXX6
      DIMENSION MACXX6(1300),MACTBL(400),MACSPD(1300),VBLSAV(900)
C MACTBL:      NAMTBL POINTERS OF THE ASSIGNED VALUES FOR MACRO CALL
      EQUIVALENCE (MACTBL(1),MACXX6(1))
C MACSPD:      NAMTBL POINTERS OF THE ASSIGNED VALUES FOR MACRO CALL
      EQUIVALENCE (MACSPD(1),MACXX6(1))
C VBLSAV:      SAVES MACRO VBL ASSIGNED VALUES DURING INTERMED. PROCESS
      EQUIVALENCE (VBLSAV(1),MACXX6(401))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C
C       36.    SYSTEM MACRO AND SEGMENT READ VARIABLES
C
      COMMON/MACSEG/MACSEG
      LOGICAL LMRSTR
      DIMENSION MACSEG(6)
C LMRSTR:      FLAG ON STARTS READING IN A SYSTEM MACRO
      EQUIVALENCE (LMRSTR,MACSEG(4))
C
C       43.    DO LOOP CONTROL VALUES
C
      COMMON/DOLOOP/DOLOOP
      LOGICAL DLRFLG
      DIMENSION DOLOOP(8)
C DLRFLG:      FLAG IS ON WHEN CONTINUATION CARD EXPECTED
      EQUIVALENCE (DLRFLG,DOLOOP(8))
C
C       44.    ERROR POSITION TABLE
C
      COMMON/ERRPOS/ERRPOS
      INTEGER ERRPOS,ERRPNT,ESTACK,ERGSTK
      DIMENSION ERRPOS(302),ERRPNT(100),ESTACK(100),ERGSTK(100)
C ERRPNT:      CONTAINS POINTERS TO INPUT STATEMENT TEXT POSITIONS
      EQUIVALENCE (ERRPNT(1),ERRPOS(3))
C ESTACK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN STACK
      EQUIVALENCE (ESTACK(1),ERRPOS(103))
C ERGSTK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN ARGSTK
      EQUIVALENCE (ERGSTK(1),ERRPOS(203))
C*
C PURPOSE      TO PLACE THE NEXT CHARACTER OR WORD FROM
C              THE INPUT STREAM INTO THE WORKING STACK
C              (STACK) AND TO HANDLE THE PROCESSING OF
C              CALL STATEMENTS IMBEDDED IN MACROS.
C
C NOTES        1.  MACRED=.FALSE. IF SINGLE CHARACTERS
C                  ARE SELECTED FROM THE SOURCE INPUT
C                  FILE.
C                  MACRED=.TRUE. IF SINGLE WORDS ARE
C                  SELECTED FROM THE MACTXT TABLE, AN
C                  INTERNAL FILE CONTAINING MACRO TEXT.
C              2.  IT IS ASSUMED THAT THE CHARACTER POR-
C                  TION OF THE NAME TABLE (NAMTBL) IS
C                  ARRANGED SO THAT THE VALUE OF EACH
C                  CHARACTER IS EQUAL TO ONE LESS THAN ITS
C                  INDEX IN THE NAME TABLE (NAMTBL).
C
      DIMENSION INCHAR(80)
      CHARACTER NCALL*6
      LOGICAL ERRFLG
      DATA NCALL/'CALL  '/,ERRFLG/.FALSE./
      external alarm
C**
C
C...     BRANCH IF MACRO TEXT REQUIRED.
C
    5 IF(MACRED)GO TO 400
C
      IF((.NOT.ENDFLG).AND.(.NOT.LMRSTR))GO TO 100
   10 CALL READ (INCHAR)
C
C...               FETCH CHARACTER CODE
C
  100 CNT = CNT+1
      II=INCHAR(CNT)
      ESTACK(TOP+1)=ERRPNT(CNT)
  150 ENDFLG = .FALSE.
      IF(II.GT.NAMMAX)GO TO 160
      IF(II.NE.0)GO TO 170
C
C...               IGNORE INVALID CHARACTER
C
      CALL ALARM(1,TOP+1,8,'INPUT   ')
      GO  TO  100
C
  160 ICROD=NUMBER(1)
      GO TO 300
  170 IF(II.LT.0)GO TO 300
      ICROD=NAMTBL(II)
      IF(ICROD.NE.RTERM(1))GOTO 300
      ENDFLG=.TRUE.
      ESTACK(TOP+1)=ESTACK(TOP)
C
C...               PLACE CHARACTER IN STACK
C
  300 TOP = TOP +1
      IF (TOP-100) 320,310,315
  310 IF (.NOT.ERRFLG)CALL ALARM(1028,99,8,'INPUT   ')
      ERRFLG=.TRUE.
  315 TOP=99
      IF( ENDFLG) GOTO 318
      IF (DLRFLG) GOTO 10
      IF (.NOT.MACRED) GOTO 317
  316 TEXTST=TEXTST+1
      CALL MCXTRN(2,TEXTST,II)
      IF (II.NE.RTERM(2)) GOTO 316
  317 ICROD = RTERM(1)
      II = RTERM(2)
      ENDFLG=.TRUE.
  318 TOP=2
  320 STACK(1,TOP) = II
      IF(II.LT.0)GOTO 355
      ICROD = ICROD/MODULO
      STACK(2,TOP) = META(ICROD)
  350 RETURN
  355 STACK(2,TOP)=0
      GOTO 350
  400 TEXTST = TEXTST+1
      CALL MCXTRN(2,TEXTST,MCTXWD)
      IF(MCTXWD)410,460,440
C
C...     MACRO VARIABLE ENCOUNTERED. BRANCH IF NESTED CALL IS BEING
C...     EXAMINED DURING INTERMEDIATE MACRO PROCESSING.
C
  410 IF(CALLON) GO TO 450
      IF(INTMED) 420,420,430
C
C...     SUBSTITUTE ASSIGNED VALUE FOR MACRO VARIABLE DURING
C...     INTERMEDIATE MACRO PROCESSING.
C
  420 II=MVPNT-MCTXWD
      II = VBLSAV(II)
      GO TO  150
C
C...     SUBSTITUTE SPECIAL MACRO VARIABLE NAME (BASED ON MACRO NAME AND
C...     POSITION OF MACRO VARIABLE) FOR MACRO VARIABLE DURING FINAL
C...     MACRO PROCESSING.
C
  430 II=-MCTXWD
      II = MACSPD(II)
      GO TO 150
C
C...     PICK UP NEXT WORD FROM MACTXT TABLE.
C
  440 II=MCTXWD
      GO TO 150
C
C...     PICK UP MACRO VARIABLE NAME FROM MACDF1 TABLE. NESTED CALL IS
C...     BEING EXAMINED DURING INTERMEDIATE MACRO PROCESSING.
C
  450 II=MACSV1(MCSAVP)-MCTXWD
      II = IABS(MACDF1(II+2))
      GO TO 150
C
C...     CALL ENCOUNTERED IN MACRO TEXT.
C
  460 IF(INTMED) 470,470,570
  470 II = MACSV1(MCSAVP)
      IF(MACTBL(II)) 480, 480, 540
C
C...     CURRENT MACRO HAS NOT PREVIOUSLY UNDERGONE INTERMEDIATE MACRO
C...     PROCESSING.PREPARE TO PERFORM SUCH PROCESSING ON NESTED CALL.
C
  480 CALLON = .TRUE.
      CALLPT = TEXTST
      STACK(1,TOP+1)=NAME(NCALL)
      STACK(1,TOP+2) = SLASH(2)
      CALL MCXTRN(2,TEXTST+2,MCTXWD)
      IF(MCTXWD)490,490,500
C
C...     NAME FOLLOWING CALL/ IS A MACRO VARIABLE.
C
  490 MVSEG=-MCTXWD
      CALLMV = .TRUE.
      II = MVPNT+MVSEG
C
C...     SUBSTITUTE ASSIGNED MACRO NAME FOR MACRO VARIABLE IN NESTED
C...     CALL.
C
      STACK(1,TOP+3) = VBLSAV(II)
      GO TO 510
C
C...     PLACE MACRO NAME IN STACK FOR NESTED CALL.
C
  500 STACK(1,TOP+3)=MCTXWD
C
C...     PREPARE STACK TO BEGIN INTERMEDIATE MACRO PROCESSING OF NESTED
C...     CALL.
C
  510 DO  520 I = 1,3
      TOP = TOP+1
      II = STACK(1,TOP)
      II = NAMTBL(II)/MODULO
  520 STACK(2,TOP) = META(II)
      II=STACK(1,TOP)
      IF((NAMTBL(II)/MODULO).EQ.(MACNAM(1)/MODULO))GO TO 530
      CALLON=.FALSE.
      CALLMV=.FALSE.
      CALL MCXTRN(1,TEXTST,STACK(1,TOP-2))
  530 TEXTST=TEXTST+2
      GO TO 350
C
C...     CURRENT MACRO IS UNDERGOING INTERMEDIATE MACRO REPROCESSING.
C...     DETERMINE WHETHER OR NOT MACRO NAMED IN NESTED CALL REQUIRES
C...     INTERMEDIATE MACRO REPROCESSING.
C
  540 CALL MCXTRN(2,TEXTST+1,MCTXWD)
      IF(MCTXWD)550,560,550
C
C  NO INTERMEDIATE MACRO PROCESSING OF CALLED MACRO REQUIRED.
  550 CALL MCXTRN(2,TEXTST+3,TEXTST)
  551 STACK(1,TOP)=RTERM(2)
      NEWSTM = .TRUE.
      ARGTOP=0
C  MODIFY STACK TO INDICATE INTERMEDIATE MACRO. REPROCESSING OF CALLED
C  MACRO REQUIRED.
      GO TO 350
  560 II = MCLTRM(1)/MODULO
      TOP = 2
      STACK(1,1) = MCLTRM(2)
      STACK(1,2) = MCLTRM(2)
      STACK(2,1) = META(II)
      STACK(2,2) = META(II)
C  CALL ENCOUNTERED DURING FINAL MACRO PROCESSING.
      GO TO 350
C  CALLED MACRO A MACRO VARIABLE AND/OR MACRO VARIABLE =MACRO VARIABLE
C  IN ARGUMENT LIST.
  570 CALL MCXTRN(2,TEXTST+1,MCTXWD)
      IF(MCTXWD)580,580,750
  580 CALL MCXTRN(2,TEXTST+2,MCTXWD)
      ICROD=-MCTXWD
      WAY=5
      II=TEXTST+3
C  FIRST PASS OF FINAL MACRO PROCESSING IN EFFECT. ALL ELEMENTS OF CALL
C  STATEMENT WHICH ARE CALL MACRO VARIABLES ARE PLACED IN ARGSTK FOR
C  ANALYSIS TO DETERMINE IF BRANCHING I.L. REQUIRED.
      IF(FINMAC)GO TO 740
      IF(ICROD.LT.0)GO TO 600
      ARGSTK(1)=MACSPD(ICROD)
      ARGTOP=1
  600 CALL MCXTRN(2,II,MCTXWD)
      IF(MCTXWD/100000)610,630,620
  610 J=-MCTXWD+100000*(MCTXWD/100000)
      ARGTOP=ARGTOP+1
      ARGSTK(ARGTOP)=IABS(MACSPD(J))
  620 II=II+1
      GO TO 600
  630 ERGSTK(100)=-ARGTOP
      CALL MATCH
C  BRANCH IF ALL REQUIRED BRANCHING CODE FOR CALL STATEMENT HAS BEEN
C  GENERATED.
      M=MCSTRT
      IF(.NOT.ENTRY)GO TO 735
  635 IF(ICROD.LT.0)GO TO 640
      K=M+ICROD
      K=IABS(MACSPD(K))
      J=1
      CALL MACTAB(K,J)
      GO TO 650
C  COMPRESSED CALL INFORMATION FOR THE CALLED MACRO INVOLVED IN THE
C  CURRENT BRANCH IS PLACED IN THE MACHST TABLE.
  640 J=-ICROD
  650 MCHSTP=MCHSTP+3
      IF(MCHSTP.LE.MHSTDM)GO TO 655
  652 CALL ALARM(22,0,8,'INPUT   ')
      CALL HELP
  655 MACHST(MCHSTP-2)=MCSRCH
      MACHST(MCHSTP-1)=J
      MACDF2(J+2)=MACDF2(J+2)+1
      MACHST(MCHSTP)=MACDF2(J+2)
      II=TEXTST+3
  660 CALL MCXTRN(2,II,MCTXWD)
      ICRAD=100000*(MCTXWD/100000)
      IF(ICRAD)670,710,680
  670 I=-MCTXWD+ICRAD+M
      I=IABS(MACSPD(I))
      GO TO 690
  680 I=MCTXWD-ICRAD
  690 K=J+IABS(ICRAD/100000)
      IF(I.EQ.MACDF2(K+2))GO TO 700
      MCHSTP=MCHSTP+1
      IF(MCHSTP.GT.MHSTDM)GO TO 652
      MACHST(MCHSTP)=IABS(ICRAD)+I
  700 II=II+1
      GO TO 660
C  BRANCH IF CALLED MACRO HAS NO MACRO VARIABLES.
  710 K=MACDF2(J+2)
  720 IF(MACDF1(J+2).EQ.0)GO TO 800
      CALL CALMCX(MACDF1(J),0,2)
C  GENERATE I.L. CODE WHICH PROVIDES LINKAGE WITH CALLED MACRO.
      CALL MACLBL(MACDF1(J),-K,I)
      NAMTBL(I) = IMPLAB(1)
      CALL CALMCX( I,MCSAVP,1)
  810 CALL MCXTRN(2,TEXTST+1,MCTXWD)
      IF(MCTXWD)730,730,736
  730 IF(.NOT.FINMAC)GO TO 630
  735 CALL MCXTRN(2,II,TEXTST)
C  SECOND PASS OF FINAL MACRO PROCESSING.
      GO TO 551
  740 CALL PATH
C  BRANCH TO GENERATE CALL I.L. IF NO SUCH CODE WAS GENERATED DURING
C  FIRST PASS OF FINAL MACRO PROCESSING.
      M=NUMARG
      IF(SHOULD)GO TO 635
  736 CALL MCXTRN(2,II,MCTXWD)
      IF((MCTXWD/100000).EQ.0)GO TO 735
      II=II+1
      GO TO 736
  750 II=TEXTST+3
      IF(.NOT.FINMAC)GO TO 736
      K=MCTXWD
      CALL MCXTRN(2,TEXTST+2,J)
C  GENERATE CALL I.L. FOR MACRO EMPLOYING NO MACRO VARIABLES.
      GO TO 720
  800 CALL MACLBL(-1,MACDF1(J),I)
      NAMTBL(I)=LABEL(1)
      CALL CALMCX(I,MCSAVP,1)
      GO TO 810
       END
