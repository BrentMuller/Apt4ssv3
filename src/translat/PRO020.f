**** SOURCE FILE : M0006665.W01   ***
*
C
C              FORTRAN SUBROUTINE PRO020
C
C LINKAGE      SUBROUTINE PRO020(TIP)
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    MATCH           SUBROUTINE    RECOG
C          SUBROUTINE    ARGCVT
C          INTEGER FCT.  MODE
C          LOGICAL FCT.  IFTMP
C          SUBROUTINE    ARGGEN
C          SUBROUTINE    PATH
C          SUBROUTINE    PRO021
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          INTEGER FCT.  SEARCH
C          SUBROUTINE    SETMOD
C          SUBROUTINE    CALLZZ
C          SUBROUTINE    TWOARG
C          SUBROUTINE    ALARM
C          INTEGER FCT.  GETTMP
C
      SUBROUTINE PRO020(TIP)
C
      IMPLICIT INTEGER (A-Z)
C
C              FUNCTION DECLARATION
C
      LOGICAL IFTMP
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99),ARGSTK(99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C ARGTOP:      POINTER TO LAST ARGSTK ENTRY
      EQUIVALENCE (ARGTOP,STKLST(2))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C ARGSTK:      ARGUMENT STACK
      EQUIVALENCE (ARGSTK(1),STKLST(202))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),NUMBER(2),GEOM(2),TEMP(2),PERMID(2),VBL(2),I
     *          DENT(2)
C NUMBER:      (1)=CODE CLASS 14000,(2)=NAMTBL INDEX OF 'NUMBER'
      EQUIVALENCE (NUMBER(1),CODE(27))
C GEOM:        (1)=CODE CLASS 16000,(2)=NAMTBL INDEX OF 'GEOM  '
      EQUIVALENCE (GEOM(1),CODE(31))
C TEMP:        (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODE(33))
C PERMID:      (1)=CODE CLASS 20000,(2)=NAMTBL INDEX OF 'PERMID'
      EQUIVALENCE (PERMID(1),CODE(39))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C IDENT:       (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODE(69))
C
C        4.    PRODUCTION TABLE
C
      COMMON/SRCTBL/SRCTBL
      DIMENSION SRCTBL(502),META(50)
C META:        CONTAINS INTERNAL BIT CODES FOR METALINGUISTIC CLASSES
      EQUIVALENCE (META(1),SRCTBL(3))
C
C        5.    PROGRAM CONTROL FLAGS
C
      COMMON/FLAGS/FLAGS
      LOGICAL NEWSTM
      DIMENSION FLAGS(4)
C NEWSTM:      TRUE WHEN NEXT SOURCE STATEMENT REQUESTED FOR PROCESS
      EQUIVALENCE (NEWSTM,FLAGS(2))
C
C        6.    GHOST STACK FOR OBJECT TIME TEMPORARY ALLOCATION
C              LENGTH AND CURRENT NUMBER OF ACTIVE TEMPORARY STORAGE
      COMMON/TMP/TXXXX
      DIMENSION TXXXX(2,32)
C
C        9.    NAME TABLE POINTERS TO NUMBERS
C
      COMMON/NUMPTR/NUMPTR
      DIMENSION NUMPTR(12)
C ZERO:        NAMTBL POINTER TO '0     '
      EQUIVALENCE (ZERO,NUMPTR(1))
C ONE:         NAMTBL POINTER TO '1     '
      EQUIVALENCE (ONE,NUMPTR(3))
C
C       10.    TABLE STORAGE FOR GEOMETRIC FUNCTION PROCESSOR
C
      INCLUDE 'GMTY.INC'
C GEOLOC:      GEOMETRIC PRODUCTION STARTING INDEX IN GEOMTB
C PMIDTB:      INTERNAL BIT REPRESENTATIONS FOR EACH ELEMENT OF GEOMTB
C ARGMXY:      CONTAINS THE NAMTBL INDICES THAT REPLACE MINOR WORDS
C GEOMTB:      GEOMETRIC FORMAT PRODUCTIONS ARRANGED BY SURFACE TYPE
C
C       12.    LARGE DATA ARRAY STORAGE REQUIREMENTS
C
      COMMON/CFSIZE/CFSIZE
      LOGICAL PARDEF
      DIMENSION CFSIZE(205),MAXSIZ(2),CANSIZ(2,100)
C CANTOP:      POINTER TO THE LAST CANSIZ ENTRY
      EQUIVALENCE (CANTOP,CFSIZE(1))
C PARDEF:      TRUE WHEN PART PROGRAM CONTAINS PARAMETRIC SURFACES
      EQUIVALENCE (PARDEF,CFSIZE(2))
C MAXSIZ:      SIZE OF THE LAST LARGEST LARGE DATA ARRAY
      EQUIVALENCE (MAXSIZ(1),CFSIZE(4))
C CANSIZ:      NUMBER OF ITEMS A. NAMTBL INDEX OF EACH LARGE DATA ARRAY
      EQUIVALENCE (CANSIZ(1,1),CFSIZE(6))
C
C       17.    MODE CODES
C
      COMMON/MODX/MODX
      DIMENSION MODX(32)
C PARSRF:      MODE CODE (15) FOR PARAMETRIC SURFACE
      EQUIVALENCE (PARSRF,MODX(15))
C REAL:        MODE CODE (24) FOR A SCALAR
      EQUIVALENCE (REAL,MODX(21))
C BOUNDS:      MODE CODE (27) FOR BOUNDS
      EQUIVALENCE (BOUNDS,MODX(27))
C OBJECT:      MODE CODE (28) FOR OBJECT
      EQUIVALENCE (OBJECT,MODX(28))
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      LOGICAL FINMAC,ENTRY,NESTG,SHOULD
      DIMENSION MACXX1(71)
C INTMED:      0=NO -,-1=INTERMEDIATE-,+1=FINAL MACRO PROCESSING
      EQUIVALENCE (INTMED,MACXX1(22))
C MAJWRD:      CONTAINS ACTUAL MAJOR WORD
      EQUIVALENCE (MAJWRD,MACXX1(23))
C FINMAC:      TRUE IF SECOND FINAL PASS OF MACRO PROCESSING
      EQUIVALENCE (FINMAC,MACXX1(24))
C WAY:         INDICATES TYPE OF MACRO PROCESSING
      EQUIVALENCE (WAY,MACXX1(26))
C ENTRY:       FALSE ON FIRST ENTRY TO MATCH FOR A MACRO EXPRESSION
      EQUIVALENCE (ENTRY,MACXX1(40))
C NESTG:       TRUE WHEN A NESTED GEOMETRIC EXPRESSION ENCOUNTERED
      EQUIVALENCE (NESTG,MACXX1(45))
C SHOULD:      MACRO INDICATOR. NORMALLY FALSE
      EQUIVALENCE (SHOULD,MACXX1(70))
C
C       27.    OPERAND MODIFIERS
C
      COMMON/OPMOD/OPMOD
      DIMENSION OPMOD(6)
C DBLDLR:      CONTAINS OPERAND TYPE CODE 2
      EQUIVALENCE (DBLDLR,OPMOD(3))
C QUIDLR:      CONTAINS OPERAND TYPE CODE 5
      EQUIVALENCE (QUIDLR,OPMOD(6))
C
C       28.    OPERAND MODIFIERS
C
      COMMON/SUBLST/SUBLST
      DIMENSION SUBLST(136),APTXXX(120)
C APTXXX:      NAMTBL POINTERS FOR XECUTION SUBROUTINE NAMES
      EQUIVALENCE (APTXXX(1),SUBLST(1))
C UNDEF:       NAMTBL POINTER TO EXECUTION SUBROUTINE UNDEF
      EQUIVALENCE (UNDEF,SUBLST(74))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C MODHLF:      NORMAL MODE CODE LIMIT 500
      EQUIVALENCE (MODHLF,MODULI(2))
C
C       44.    ERROR POSITION TABLE
C
      COMMON/ERRPOS/ERRPOS
      INTEGER ERRPOS,ESTACK,ERGSTK
      DIMENSION ERRPOS(302),ESTACK(100),ERGSTK(100)
C ESTACK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN STACK
      EQUIVALENCE (ESTACK(1),ERRPOS(103))
C ERGSTK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN ARGSTK
      EQUIVALENCE (ERGSTK(1),ERRPOS(203))
C*
C ARGUMENTS    TIP      CURRENT PRODUCTION NUMBER
C
      DIMENSION II(3),MM(5),QQ(3),SLL(2),NORMAL(2)
      DIMENSION  JLIST(11)
      CHARACTER*6 NODER,DERIV
      DATA NODER/'NODER'/,DERIV/'DERIV'/
      external alarm
C**
      K = STACK(1,TOP-1)
      IF(K.GT.NAMMAX)GO TO 50
      IF (IFTMP(K)) CALL PUTTMP(MOD(NAMTBL(K),MODULO))
      I=NAMTBL(K)/MODULO
      L=NAMTBL(K)-I*MODULO
      IF((I.EQ.IDENT(1)/MODULO).AND.(L.NE.0))
     /CALL SETMOD(TOP-1,PERMID)
C     PLACE FIRST ARGUMENT IN ARGSTK
   50 ARGSTK(ARGTOP+1)=K
      ERGSTK(ARGTOP+1)=ESTACK(TOP-1)
      MAJWRD=STACK(1,TOP-3)
      KMODE = NAMTBL(MAJWRD)-GEOM(1)
      IF (KMODE.GT.MODHLF) KMODE=KMODE-MODHLF
C... DETERMINE SIZE OF BOUNDS OR OBJECT CANONICAL FORM
      IF(KMODE.EQ.BOUNDS)TXXXX(1,KMODE)=ARGTOP+2
      IF(KMODE.EQ.OBJECT)TXXXX(1,KMODE)=2*ARGTOP+2
      IF (TIP.EQ.37) GO TO 201
      RESULT=STACK(1,TOP-5)
      K = MODULO*(NAMTBL(RESULT)/MODULO)
      IF((K.EQ.VBL(1)).OR.(K.EQ.TEMP(1))) GO TO 202
      NAMTBL(RESULT) = VBL(1)+KMODE
      CALL RESRVZ(RESULT,KMODE,TXXXX(1,KMODE),1)
      GO TO 202
  201 RESULT=GETTMP(KMODE)
      NESTG=.TRUE.
  202 ARGSTK(ARGTOP+2)=RESULT
      ARGTOP=ARGTOP+2
      IF (INTMED .NE. 1)  GO TO 206
      WAY=1
      IF(FINMAC)GO TO 204
      ERGSTK(100)=TOP-3
      CALL MATCH
      IF((.NOT.ENTRY).AND.(TIP.EQ.38))GO TO 998
  228 KMODE=NAMTBL(MAJWRD)-GEOM(1)
      IF (KMODE.GT.MODHLF) KMODE=KMODE-MODHLF
      GO TO 206
  204 CALL PATH
      IF(.NOT.SHOULD) GO TO 998
  206 L = MODE(RESULT)
      IF(L.EQ.KMODE)GO TO 207
C
C... IF THIS VARIABLE HAS BEEN PREVIOUSLY DEFINED WITH ANOTHER MODE,
C... ISSUE ERROR AND TERMINATE PROCESSING.
      CALL ALARM(1001,TOP-5,8,'PRO020  ')
      GO TO 998
C
C... IF THIS VARIABLE HAS BEEN PREVIOUSLY DEFINED WITH THE SAME MODE,
C... ISSUE WARNING AND CONTINUE PROCESSING
  207 IF((K.EQ.VBL(1)).AND.(INTMED.EQ.0))
     *                          CALL ALARM(50,TOP-5,4,'PRO020  ')
C....    BYPASS IDENTIFIER PROCESSING IF PARAMETRIC SURFACE DEFINITION
      IF(KMODE.EQ.PARSRF)GO TO 1000
      K=TOP+1
      STACK(2,K) = - 1
      DO 211 I=2,ARGTOP
      K=K+1
      L=ARGSTK(I-1)
      ERRPT=1-I
      IF (L .LE. NAMMAX)  GO TO 205
      IARG = REAL
      GOTO 208
  205 M = MODULO * (NAMTBL(L)/MODULO)
      IARG = NAMTBL(L)-M
      IF(IARG.GE.MODHLF)IARG=IARG-MODHLF
  210 IF ((M .EQ. VBL(1)) .OR. (M .EQ. TEMP(1))) GO TO 208
      IF (M .EQ. PERMID(1))  GO TO 209
      IF (M.NE.NUMBER(1)) GOTO 999
      IARG = REAL
      GOTO 208
C
C...     PLACE NAMTBL POINTER OF INTEGER EQUIVALENT OF THE IDENTIFIER
C...         (POSX,XLARGE,ETC.) IN ARGSTK. IF ARGMXY CONTAINS 0 FOR
C...         THIS IDENTIFIER LEAVE ORIGINAL POINTER IN ARGSTK.
C
  209 IF(IARG.EQ.0) GO TO 999
      IF(ARGMXY(IARG).NE.0) ARGSTK(I-1)=ARGMXY(IARG)+NAMMAX
      IARG = IARG + 50
  208 STACK(2,K)=PMIDTB(IARG)
  211 CONTINUE
   90 L=GEOLOC(KMODE)
      ERRPT=ARGTOP-1
      KT2=K*2
      I=SEARCH(STACK,KT2,GEOMTB(L),ERRPT)
C
C... BRANCH ON HUNDREDS POSITION OF GEOMETRIC ACTION NUMBER.
C
      J = I/100 + 1
      ERRP=ERRPT
      GO TO (100,100,100,1000,2000),J
  100 CALL PRO021(RESULT,I,ERRP)
  998 IF(.NOT.ENTRY)GO TO 20
      ERGSTK(100)=0
      CALL MATCH
      IF(ENTRY)GO TO 228
C
C... ADJUST STACK AND EXIT  ..........................................
C
   20 IF(TIP-38)225,226,227
  225 TOP=TOP-4
      NEST G = .FALSE.
  230 STACK(1,TOP)=RESULT
      K = NAMTBL(RESULT)/MODULO
      STACK(2,TOP)=META(K)
  231 ARGTOP=0
  995 RETURN
  226 NEWSTM = .TRUE.
      GO TO  231
  227 TOP=TOP-6
      GO TO  230
C
  999 CALL ALARM(2001,ERRPT,8,'PRO020  ')
 1001 CALL CALLZZ(UNDEF)
      CALL ARGCVT(RESULT)
      CALL RLSLIN
      ARGTOP = 0
      GO TO 998
C
C        ***************************************************
C        **** PARAMETRIC SURFACE DEFINITION PROCESSING  ****
C        ***************************************************
C
 1000 IF (TIP.EQ.37) GO TO 1057
C...     PROCESS EACH PARAMETER IN THE PARSRF DEFINITION. CHECK FOR A
C...     VARIABLE OR IDENTIFIER-OTHERWISE ISSUE DIAGNOSTIC.
 1010 DO 1040 L=2,11
      K=L
      IF (K .GE. ARGTOP) GO TO 1042
      KARG=ARGTOP-K
      J=ARGSTK(KARG)
C...     SAVE NAME TABLE POINTER FOR FINAL CALL ARGUMENT LIST
      JLIST(K)=J
      IF (K .EQ. 4) GO TO 1030
      IF(J.GT.NAMMAX)GO TO 1059
      IF (NAMTBL(J).EQ.VBL(1)+REAL)  GO TO 1040
      IF(NAMTBL(J).NE.PERMID(1).AND.NAMTBL(J).NE.IDENT(1))GOTO 1059
C...     SET MODE OF THIS PARAMETER TO REAL VARIABLE.
      NAMTBL(J) = VBL(1)+REAL
      CALL RESRVZ(J,REAL,TXXXX(1,REAL),1)
      GO TO 1040
C
C...     CHECK FOURTH ARGUMENT FOR DERIV OR NODER.
C...     FOR DERIV-PASS ONE, FOR NODER-PASS ZERO.
 1030 IF(J.GT.NAMMAX)GO TO 1060
      IF (CNAMTB(J).EQ.DERIV)
     +    JLIST(K)=ONE
      IF (CNAMTB(J).EQ.NODER)
     +    JLIST(K)=ZERO
      IF (JLIST(K).NE.ONE .AND. JLIST(K).NE.ZERO) GO TO 1060
C
 1040 CONTINUE
C...     TOO MANY PARAMETERS IN THIS DEFINITION (LIMIT IS 10)
      GO TO 1061
C
C...     PASS A TEMPORARY FOR ALL UNUSED SURFACE PARAMETERS
 1042 IF (K .EQ. 11) GO TO 1047
      IF (K .LT. 5) GO TO 1061
      DO 1045 L=K,10
      KARG=GETTMP(REAL)
      JLIST(L)=KARG
 1045 CONTINUE
C
C...     GENERATE A CALL TO APT101 WITH APPROPRIATE ARGUMENTS
 1047 CALL CALLZZ(APTXXX(95))
      CALL ARGCVT(ARGSTK(ARGTOP))
      DO 1050 L=2,10
      CALL ARGCVT(JLIST(L))
      IF (L.EQ.4) CALL TWOARG(DBLDLR,ARGSTK(ARGTOP-1))
 1050 CONTINUE
C
C...     DEFINITION PROCESSING FINISHED
      ARGTOP=0
      PARDEF=.TRUE.
      CALL RLSLIN
      GO TO 998
C
C....    ERROR PROCESSING
C
 1057 IERR=7
      ERRPT=TOP-3
      GO TO 1070
 1059 IERR=9
      GO TO 1062
 1060 IERR=10
      GO TO 1062
 1061 IERR=11
 1062 ERRPT=-KARG
C
 1070 CALL ALARM(IERR,ERRPT,8,'PRO020  ')
C....    GENERATE A CALL TO UNDEF FOR THIS SURFACE
      GO TO 1001
C
C
C ********************************************************************
C... RULED SURFACE DEFINITION STATEMENT PROCESSING
C ********************************************************************
C
C... COMPRESS ARGSTK TO REMOVE RESULT AND SET LENGTH = NUMBER OF
C... ARGUMENTS IN PART PROGRAMMING STATEMENT
C
 2000 ARGTOP = ARGTOP - 1
      LENGTH = ARGTOP
C
C... CHECK FOR VALID NUMBER OF ARGUMENTS
C
      IF (((I .EQ. 401) .AND. (LENGTH .EQ. 5)) .OR. ((I .EQ. 402) .AND.
     / (LENGTH .EQ. 8)))  GO TO 2005
      ERRPT=5+I/402*3-ARGTOP
      IF(ERRPT.GT.0)ERRPT=-1
      GO TO 999
C
C... CALCULATE THE SIZE OF THE EXTERNAL CANONICAL FORM.
C...
C... SIZE OF FORM GENERATED FROM 5 ARGUMENT STATEMENT = SIZE OF
C... SURFACE IN FIRST ARGUMENT + 39
C...
C... SIZE OF FORM GENERATED FROM 8 ARGUMENT STATEMENT = SIZE OF
C... SURFACE IN FIRST ARGUMENT + SIZE OF SURFACE IN FIFTH ARGUMENT + 48
C
 2005 NOWRDS = 42
      IF(LENGTH.EQ.5) NOWRDS = 46
      DO 2030 J = 4,ARGTOP,4
      KK = ARGSTK(J)
      ERRPT=J
      IF(LENGTH.NE.5) GOTO 2006
      KK = ARGSTK(J+1)
      ERRPT=J+1
 2006 K = MODE (KK)
      IF(K.NE.11) GO TO 2020
C
C... SURFACE IS A TABCYL. SEARCH FOR ITS SIZE IN CANSIZ.
C
      L = KK - (CANTOP*(KK/CANTOP))
      DO 2010  M = 1,CANTOP
      L = L + 1 - (CANTOP*(L/CANTOP))
      IF(CANSIZ(2,L).NE.KK) GO TO 2010
      NOWRDS = NOWRDS + CANSIZ(1,L) + 13
      GO TO 2030
 2010 CONTINUE
C
C... TABCYL NOT FOUND. CALL ALARM.
C
      CALL ALARM(1026,-ERRPT,8,'PRO020  ')
      GO TO 1001
C
C... SURFACE IS NOT A TABCYL. GET ITS SIZE FROM TXXXX.
C
 2020 NOWRDS = NOWRDS + TXXXX(1,K) + 13
 2030 CONTINUE
C
C... CHECK IF THIS RLDSRF IS ONE OF THE TWO LARGEST LARGE DATA ARRAY
C... CANONICAL FORMS ENCOUNTERED AND IF SO, SAVE ITS SIZE IN MAXSIZ.
C
      IF(NOWRDS.LE.(IABS(MAXSIZ(1))))GO TO 2050
      MAXSIZ(2) = MAXSIZ(1)
      MAXSIZ(1) = NOWRDS
      GO TO 2060
 2050 IF(NOWRDS.GT.(IABS(MAXSIZ(2))))MAXSIZ(2)=NOWRDS
C
C... GENERATE CALL TO APT033.
C
 2060 CALL CALLZZ(APTXXX(59))
      CALL ARGGEN
      IF (LENGTH .EQ. 8)  GO TO 2080
C
C... 5 ARGUMENT FORMAT - ZERO ARGUMENTS 6-8 IN CALL TO APT033.
C
      DO 2070  J = 1,3
 2070 CALL ARGCVT(ZERO)
C
C... INSERT LENGTH AND RESULT AS ARGUMENTS 9 AND 10 OF CALL.
C
 2080 CALL TWOARG(QUIDLR,LENGTH)
      CALL ARGCVT(RESULT)
      CALL RLSLIN
      GO TO 998
      END
