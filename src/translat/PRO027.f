**** SOURCE FILE : M0006668.W05   ***
*
C
C              FORTRAN SUBROUTINE PRO027
C
C LINKAGE      SUBROUTINE PRO027(IGOTO)
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    ALARM           SUBROUTINE    PRO026
C          SUBROUTINE    FOUTXX          SUBROUTINE    RECOG
C          SUBROUTINE    LIBOPC
C          SUBROUTINE    LIBRD
C          SUBROUTINE    LIBSCH
C          SUBROUTINE    MACLBL
C          SUBROUTINE    MCXTRN
C          INTEGER FCT.  MODE
C          INTEGER FCT.  NAME
C          SUBROUTINE    CALLZZ
C          SUBROUTINE    ONEARG
C          SUBROUTINE    OPCODE
C          SUBROUTINE    ARGCVT
C          SUBROUTINE    BCDBIN
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    REFGEN
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          INTEGER FCT.  GETTMP
C          SUBROUTINE    TWOARG
C
      SUBROUTINE PRO027(IGOTO)
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE 'NAMETB.INC'
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99),ARGSTK(99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C ARGTOP:      POINTER TO LAST ARGSTK ENTRY
      EQUIVALENCE (ARGTOP,STKLST(2))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C ARGSTK:      ARGUMENT STACK
      EQUIVALENCE (ARGSTK(1),STKLST(202))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),SLASH(2),NUMBER(2),TEMP(2),PERMID(2),VBL(2),
     *          IDENT(2)
C SLASH:       (1)=CODE CLASS  5000,(2)=NAMTBL INDEX OF '/     '
      EQUIVALENCE (SLASH(1),CODE(9))
C NUMBER:      (1)=CODE CLASS 14000,(2)=NAMTBL INDEX OF 'NUMBER'
      EQUIVALENCE (NUMBER(1),CODE(27))
C TEMP:        (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODE(33))
C PERMID:      (1)=CODE CLASS 20000,(2)=NAMTBL INDEX OF 'PERMID'
      EQUIVALENCE (PERMID(1),CODE(39))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C IDENT:       (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODE(69))
C
C        4.    PRODUCTION TABLE
C
      COMMON/SRCTBL/SRCTBL
      DIMENSION SRCTBL(502),META(50)
C META:        CONTAINS INTERNAL BIT CODES FOR METALINGUISTIC CLASSES
      EQUIVALENCE (META(1),SRCTBL(3))
C
C        6.    GHOST STACK FOR OBJECT TIME TEMPORARY ALLOCATION
C              LENGTH AND CURRENT NUMBER OF ACTIVE TEMPORARY STORAGE
      COMMON/TMP/TXXXX
      DIMENSION TXXXX(2,32)
C
C        9.    NAME TABLE POINTERS TO NUMBERS
C
      COMMON/NUMPTR/NUMPTR
      DIMENSION NUMPTR(12)
C ZEROPT:      NAMTBL POINTER TO '0.    '
      EQUIVALENCE (ZEROPT,NUMPTR(2))
C ONE:         NAMTBL POINTER TO '1     '
      EQUIVALENCE (ONE,NUMPTR(3))
C ONEPT:       NAMTBL POINTER TO '1.    '
      EQUIVALENCE (ONEPT,NUMPTR(4))
C THREE:       NAMTBL POINTER TO '3     '
      EQUIVALENCE (THREE,NUMPTR(6))
C
C       11.    SEQUENCE NUMBER STORAGE
C
      COMMON/SEQCOM/SEQCOM
      DIMENSION SEQCOM(3)
C SEQNO:       INTERNALLY GENERATED STATEMENT NUMBER
      EQUIVALENCE (SEQNO,SEQCOM(1))
C
C       12.    LARGE DATA ARRAY STORAGE REQUIREMENTS
C
      COMMON/CFSIZE/CFSIZE
      DIMENSION CFSIZE(1106),MAXSIZ(2),CANSIZ(2,100),KSC(3,300)
C CANTOP:      POINTER TO THE LAST CANSIZ ENTRY
      EQUIVALENCE (CANTOP,CFSIZE(1))
C MAXSIZ:      SIZE OF THE LAST LARGEST LARGE DATA ARRAY
      EQUIVALENCE (MAXSIZ(1),CFSIZE(4))
C CANSIZ:      NUMBER OF ITEMS A. NAMTBL INDEX OF EACH LARGE DATA ARRAY
      EQUIVALENCE (CANSIZ(1,1),CFSIZE(6))
C ISC:         POINTER TO LAST KSC ENTRY
      EQUIVALENCE (ISC,CFSIZE(206))
C KSC:         CONTAINS SYMBOL,SIZE AND NUMBER OF SEQMENTS OF SS-DEFIN.
      EQUIVALENCE (KSC(1,1),CFSIZE(207))
C
C       16.    LITERALS FOR I. L. OPERATION CODES
C
      COMMON/IL/IL
      DIMENSION IL(21)
C REPL:        CONTAINS COMMAND CODE (17) FOR REPL COMMAND
      EQUIVALENCE (REPL,IL(17))
C MOVE:        CONTAINS COMMAND CODE (19) FOR MOVE COMMAND
      EQUIVALENCE (MOVE,IL(19))
C
C       17.    MODE CODES
C
      COMMON/MODX/MODX
      DIMENSION MODX(32)
C POINT:       MODE CODE (19) FOR POINT
      EQUIVALENCE (POINT,MODX(19))
C VECTOR:      MODE CODE (20) FOR VECTOR
      EQUIVALENCE (VECTOR,MODX(20))
C REAL:        MODE CODE (21) FOR A SCALAR
      EQUIVALENCE (REAL,MODX(21))
C BOOL:        MODE CODE (23) FOR BOOLEAN TYPE
      EQUIVALENCE (BOOL,MODX(23))
C
C      25A.    MACRO PROCESSING ARRAY
C
      COMMON/MACXX5/MACXX5
      DIMENSION MACXX5(135),ITMPSV(135)
C ITMPSV:      TEMPORARY STORAGE DURING FINAL MACRO PROCESSING
      EQUIVALENCE (ITMPSV(1),MACXX5(1))
C
C       27.    OPERAND MODIFIERS
C
      COMMON/OPMOD/OPMOD
      DIMENSION OPMOD(6)
C NOUGHT:      CONTAINS OPERAND TYPE 0
      EQUIVALENCE (NOUGHT,OPMOD(1))
C DLR:         CONTAINS OPERAND TYPE CODE 1
      EQUIVALENCE (DLR,OPMOD(2))
C QUIDLR:      CONTAINS OPERAND TYPE CODE 5
      EQUIVALENCE (QUIDLR,OPMOD(6))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C MODHLF:      NORMAL MODE CODE LIMIT 500
      EQUIVALENCE (MODHLF,MODULI(2))
C
C       30.    NAMTBL POINTERS TO FIRST CANONICAL FORMS IN EACH BLOCK
C
      COMMON/BLKCFS/FIRST
      DIMENSION FIRST(2,3)
C
C       31.    COMMON BLOCK FOR PRO026 AND MOTION
C
      COMMON/COMP26/COMP26
      DIMENSION COMP26(16)
C ARGCNT:      POINTER FOR CURRENT ARGSTK ELEMENT
      EQUIVALENCE (ARGCNT,COMP26(2))
C TEST:        NAMTBL INDEX OF CURRENT ARGUMENT
      EQUIVALENCE (TEST,COMP26(6))
C K:           NAMTBL POINTER TO MAJOR WORD
      EQUIVALENCE (K,COMP26(12))
C
C       33.    SYMBOLIC FILE DEFINITIONS
C
      INCLUDE 'SYMFIL.INC'
C ELFIL1:      OUTPUT OF PACKING FACTOR FOR CREATING PAGES (INTERPRETER)
C
C       35.    COMMON BLOCK FOR BOUNDED GEOMETRY AND CFSAVE
C
      COMMON/BGEOM/BGEOM
      DIMENSION BGEOM(4)
C J:           PASSES PUNCH/ARGUMENT FROM PRO026 TO PRO027
      EQUIVALENCE (J,BGEOM(3))
C L:           PASSES PUNCH/LISTON OR NOLIST FROM PRO026 TO PRO027
      EQUIVALENCE (L,BGEOM(4))
C
C       36.    SYSTEM MACRO AND SEGMENT READ VARIABLES
C
      COMMON/MACSEG/MACSEG
      LOGICAL ALOPN,LMRSTR
      DIMENSION MACSEG(6)
C ALOPN:       TRUE AFTER MACRO OR PART PROGRAM SEGMENT LIBRARY OPENED
      EQUIVALENCE (ALOPN,MACSEG(1))
C NMSEG:       NAMTBL POINTER TO THE NAME OF THE PART PROGRAM SEGMENT
      EQUIVALENCE (NMSEG,MACSEG(2))
C NMMAC:       NAMTBL POINTER TO SYSTEM MACRO NAME
      EQUIVALENCE (NMMAC,MACSEG(3))
C LMRSTR:      FLAG ON STARTS READING IN A SYSTEM MACRO
      EQUIVALENCE (LMRSTR,MACSEG(4))
C ITMPCT:      NUMBER OF INTERNAL SYMBOLS GENERATED IN TRANSLATION
      EQUIVALENCE (ITMPCT,MACSEG(5))
C
C       39.    COMMON BLOCK LIBRARY PRINTING FLAG
C              FLAG ON CAUSE PRINTING OF INPUT LIBRARIES
      COMMON/LIBPRT/LIBPRT
      LOGICAL LIBPRT
C
C       41.    NUMBER TABLE OVERFLOW VARIABLES
C
      COMMON/NTBL/NTBL
      DIMENSION NTBL(6)
C NLAST:       LAST NEW BLOCK NUMBER OF NUMBER TABLE ON THE EXTERN FILE
      EQUIVALENCE (NLAST,NTBL(4))
C
C       43.    DO LOOP CONTROL VALUES
C
      COMMON/DOLOOP/DOLOOP
      DIMENSION DOLOOP(8)
C JUMPTO:      MARKER SET AFTER JUMPTO OR IF FOR LABEL CONTROL
      EQUIVALENCE (JUMPTO,DOLOOP(1))
C*
C ARGUMENTS    IGOTO   INTEGER USED BY PRO027 TO BRANCH
C                      TO APPROPRIATE CODING
C
      CHARACTER*6 SYNLST(10)
      CHARACTER*6 SRFNAM(3),SURF
      DIMENSION INP(20)
      LOGICAL POINTX
      CHARACTER*6 HDOLPC,LRARG
      CHARACTER*6 SRPRNT,HON,HOFF,HALL
      CHARACTER*6 IEJECT,EJECT
      CHARACTER*6 HTABP,HSSPR,HSSTT,HAVPR
      DATA SRPRNT/'PRINT '/
      DATA     HON/'ON  '/,HOFF/'OFF '/,HALL/'ALL '/
      DATA  SYNTOP,SYNLST /10,'APTRAN','APTREN','CLOCK ',
     /'CLPRNT','CONTRL','FINI  ','MACRO ','PRINT',
     /'SYN   ','TERMAC'/
      DATA IEJECT/'1'/,EJECT/'EJECT '/
C
      DATA              SRFNAM/'DS    ' ,'PS    ','CS    '/
      DATA             HTABP/'TABPRT'/
      DATA             HSSPR/'SSPRT '/
      DATA             HSSTT/'SSTEST'/
      DATA             HAVPR/'AVPRT '/
      DATA ITBPRT/20130/
      DATA ILBPRT/20160/
      DATA HDOLPC/'$PCRTH'/
      external alarm
C
C*********************************************************************
C              SYN  PRINT POCKET  PUNCH   CALL   READ
      GO TO(  2800,  1942,  1968,  8110,  5700,  5700,4000,3800),IGOTO
C
C...     **** SYNONYM PROCESSING ****
C
C... CALL ALARM IF THE SYN STATEMENT HAS NO ARGUMENTS OR AN ODD NUMBER
C... OF ARGUMENTS
C
 2800 N = ARGTOP/2
      IF(ARGTOP.NE.0)GOTO 2805
      CALL ALARM(2018,TOP-1,8,'PRO027  ')
      GO TO 22
 2805 IF(ARGTOP .EQ. 2*N)GOTO 2810
      CALL ALARM(2018,-1,8,'PRO027  ')
      GO TO 22
C   ENTSCHEIDUNG WIE DIE SYN/-PAARE ZU INTERPRETIREN SIND
C   ANNAHME: SYN/SYNONYM,SPRACHWORT
 2810 I1=0
      I2=-1
C   ANDERNFALLS:WERTE VON I1 UND I2 VERTAUSCHEN
      IF(NAMTBL(ARGSTK(ARGTOP)).EQ.PERMID(1))GOTO 2812
      I1=-1
      I2= 0
C
C... PROCESS EACH PAIR OF ARGUMENTS
C
 2812 DO 2850  I=1,N
      K1= 2*I+I1
      K = ARGSTK(K1)
      L1= 2*I+I2
      L = ARGSTK(L1)
      IF(K.EQ.L)GOTO 2850
      IF(NAMTBL(L)/MODULO .NE. TEMP(1)/MODULO)GO TO 2815
      ITMPCT=ITMPCT+1
      CALL MACLBL(L,-ITMPCT,J)
      NAMTBL(J)=VBL(1)+REAL
      CALL RESRVZ(J,REAL,TXXXX(1,REAL),1)
      CALL OPCODE(REPL)
      CALL ONEARG(1)
      CALL ARGCVT(J)
      CALL ARGCVT(L)
      CALL RLSLIN
      L=J
C
C... IF THE SYNONYM IS A NUMBER,A SYNONYM FOR ITSELF, OR A SYNONYM FOR
C... A SPECIAL APT WORD FOR WHICH SYNONYMS ARE NOT ALLOWED,CALL ALARM
C
 2815 JJ=L
      LL=L1
 2825 IF(JJ.GT.NAMMAX)GO TO 2836
      DO 2820  J = 1,SYNTOP
      IF (CNAMTB(JJ).EQ. SYNLST(J))GOTO 2830
 2820 CONTINUE
 2836 IF(JJ.EQ.K)GOTO 2840
      JJ=K
      LL=K1
      GOTO 2825
 2830 CALL ALARM(2019,-LL,8,'PRO027  ')
      GO TO 2850
C
C... IF THE SYNONYM IS NOT A PERMANENT IDENTIFIER,ISSUE A WARNING
C
 2840 IF(NAMTBL(K).EQ.PERMID(1))GOTO 2845
      IF(K.GT.NAMMAX.AND.L.GT.NAMMAX)GOTO 2830
      K = ARGSTK(L1)
      L = ARGSTK(K1)
      K1=L1
      IF (NAMTBL(K).NE.PERMID(1))GOTO 2846
      GOTO 2849
 2845 IF (NAMTBL(L).NE.PERMID(1))GOTO 2849
 2846 CALL ALARM(2035,-K1,4,'PRO027  ')
C
C... SET THE FIRST ITEM OF THE SYNONYMS NAMTBL ENTRY = MINUS THE NAMTBL
C... INDEX OF THE ASSOCIATED WORDS ENTRY
C
 2849 NAMTBL(K) = -L
 2850 CONTINUE
      GO TO 22
C
C...       PRINT STATEMENT
C
 1942 IF (ARGTOP .GT. 0)  GO TO 8010
      ERRPT=TOP-1
      IF (CNAMTB(STACK(1,TOP-1)).NE.EJECT)GOTO 8015
      CALL FOUTXX(ELFIL1,IEJECT,1)
      IF(JUMPTO.NE.0)JUMPTO=SEQNO+2
      GO TO 22
 8015 CALL ALARM(2030,ERRPT,4,'PRO027  ')
      GO TO 22
 8008 ERRPT=1-ARGTOP
 8009 CALL ALARM(2031,ERRPT,4,'PRO027  ')
      GO TO 22
 8010 J = ARGSTK(ARGTOP)
      ERRPT=-ARGTOP
      IF (CNAMTB(STACK(1,TOP-1)).EQ.EJECT)GOTO 8009
      II=1
      IF(J.LE.NAMMAX) GOTO 8011
C.... DECREMENT BY NAMMAX FOR ADDRESS IN NUMBER TABLE, CNUMTB
      J=J-NAMMAX
      IF (NLAST.GT.0)CALL MCXTRN(5,J,IDUMMY)
      I = 7
      IF(CNUMTB(J).EQ.CNUMTB(ZEROPT-NAMMAX))GOTO 8020
      IF(CNUMTB(J).EQ.CNUMTB(ONEPT-NAMMAX)) GOTO 8020
      GOTO 8030
 8011 I = 8
      IF(NAMTBL(J).EQ.ILBPRT.OR.
     X   NAMTBL(J)-MODHLF.EQ.ILBPRT) GO TO 6000
      IF(NAMTBL(J).EQ.ITBPRT.OR.NAMTBL(J)-MODHLF.EQ.ITBPRT)GOTO 8025
      I = 11
 8019 IF (CNAMTB(J) .EQ. HON )GOTO 8020
      I = I + 1
      IF (CNAMTB(J) .EQ. HOFF )GOTO 8020
      GOTO(8030,8008),II
 8020 CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,I)
      CALL ARGCVT(J)
      CALL TWOARG(QUIDLR,1)
      CALL RLSLIN
      ERRPT=II-ARGTOP
      IF(ARGTOP.GT.II)GOTO 8009
      GO TO 22
 8025 JJ=J
      II=2
      J=ARGSTK(ARGTOP-1)
      I = 16
C     PRINT/TABPRT,ON/OFF
      IF(CNAMTB(JJ).EQ.HTABP)GOTO 8019
      I=18
C     PRINT/SSPRT ,ON/OFF
      IF(CNAMTB(JJ).EQ.HSSPR)GOTO 8019
      I=20
C     PRINT/SSTEST,ON/OFF
      IF(CNAMTB(JJ).EQ.HSSTT)GOTO 8019
      I=22
C     PRINT/AVPRT,ON/OFF
      IF(CNAMTB(JJ).EQ.HAVPR)GOTO 8019
      IF(ARGTOP.EQ.1)GOTO 8035
      GOTO 8009
 8030 CALL BCDBIN(CNUMTB(J),M,N)
      IF (M.EQ. 2 .OR. M .EQ. 3)  GO TO 8032
      GOTO 8009
 6000 J=ARGSTK(ARGTOP-1)
      IF(CNAMTB(J).NE.HON)GOTO 6010
      LIBPRT=.TRUE.
      GOTO 6020
 6010 IF(CNAMTB(J).NE.HOFF)GOTO 8008
      LIBPRT=.FALSE.
 6020 ERRPT=2-ARGTOP
      IF(ARGTOP.GT.2)GOTO 8009
      GO TO 22
 8032 IF(ARGTOP.GT.1)GOTO 8033
 8035 CALL ALARM(2052,ERRPT,4,'PRO027  ')
      GO TO 22
 8033 ARGTOP=ARGTOP-1
      J = ARGSTK(ARGTOP)
      IF (CNAMTB(J).NE.HALL)GOTO 8036
      J = 0
      IF (M .EQ. 2) J = 3
      DO 8034  I = 1,3
      J = J + 1
      IF(FIRST(2,I).EQ.0) GO TO 8034
      CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,J)
      CALL ARGCVT(FIRST(1,I))
      CALL TWOARG(QUIDLR,FIRST(2,I))
      CALL RLSLIN
 8034 CONTINUE
      IF(ARGTOP.GT.1)GOTO 8008
      GO TO 6020
 8036 DO 8060  I = 1,ARGTOP
      L = ARGTOP + 1 - I
      J = ARGSTK(L)
      N = 10
      IF (J .GT. NAMMAX)  GO TO 8050
      L=MOD(NAMTBL(J),MODULO)
      JJ=(NAMTBL(J)/MODULO)*MODULO
      IF(JJ.NE.VBL(1))GO TO 8038
      IF(L.GT.MODHLF)L=L-MODHLF
      GO TO 8040
 8038 IF(JJ.EQ.TEMP(1))GO TO 8040
      IF(JJ.EQ.NUMBER(1) .AND. L.EQ.MODHLF)GO TO 8050
      CALL ALARM(2031,I-1-ARGTOP,4,'PRO027  ')
      GO TO 8060
 8040 N=1
      IF (L .EQ. REAL .OR. L .EQ. BOOL)  GO TO 8045
      N = 2
      IF (L .EQ. REAL+MODHLF .OR. L .EQ. BOOL+MODHLF)  GO TO 8045
      N = 3
 8045 IF (M.EQ.2) N=N+3
 8050 CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,N)
      CALL ARGCVT(J)
      CALL TWOARG(QUIDLR,1)
      CALL RLSLIN
 8060 CONTINUE
      GO TO 22
C...       POCKET STATEMENT
C
 1968 ERRPT=-1
      IF(ARGTOP.LT.1)ERRPT=TOP-1
      IF(ARGTOP.LT.11)GOTO 1974
      ERRPT=28-ARGTOP
      IF(ARGTOP.GT.28)GOTO 1974
      DO 1969 IPC=1,8
      ARGCNT=ARGTOP+1-IPC
      ERRPT=-ARGCNT
      TEST=MODE(ARGSTK(ARGCNT))
      IF(TEST.NE.REAL)GO TO 1974
 1969 CONTINUE
      JARG=ARGTOP-8
      DO 1970 IPC=1,JARG
      ARGCNT=JARG+1-IPC
      TEST=MODE(ARGSTK(ARGCNT))
      ERRPT=-ARGCNT
      IF(TEST.NE.POINT)GO TO 1974
 1970 CONTINUE
      KPCRTH=NAME(HDOLPC)
      IF (NAMTBL(KPCRTH).NE.0) GO TO 1972
      NAMTBL(KPCRTH)=VBL(1)
      CALL RESRVZ(KPCRTH,0,98,1)
 1972 DO 1973 IPC=1,JARG
      ARGCNT=JARG+1-IPC
      LPC=2-3*IPC
      CALL OPCODE(REPL)
      CALL ONEARG(3)
      CALL TWOARG(LPC,KPCRTH)
      CALL ARGCVT(ARGSTK(ARGCNT))
 1973 CALL RLSLIN
      CALL CALLZZ(K)
      DO 1971 IPC=1,8
 1971 CALL ARGCVT(ARGSTK(ARGTOP+1-IPC))
      CALL TWOARG(QUIDLR,JARG)
      CALL TWOARG(NOUGHT,KPCRTH)
      CALL RLSLIN
      GO TO 22
 1974 CALL ALARM(2034,ERRPT,8,'PRO027  ')
      GO TO 22
C
C
C ***************** P U N C H   P R O C E S S I N G ******************
C
 8110 JJ=J
      IF(J.GT.5)GOTO 8112
      IF(ARGTOP.GT.1)CALL ALARM(2031,-ARGTOP,4,'PRO027  ')
 8112 GO TO (8160,8160,8180,8115,8115,8140,7100,7100),J
C            1    2    3    4    5    6
C
C ... J IS 4 OR 5 FOR LISTON OR NOLIST.  GENERATE CALL TOPRINT
C     WITH CODE=J+9.
C
 8115 K=NAME(SRPRNT)
      I=J+9
      J=L
      II=ARGTOP
      GO TO 8020
C
C ... INVALID ARGUMENT.
 8120 CALL ALARM(2031,ERRPT,4,'PRO027  ')
      GO TO 8150
C
C...  VALIDATE LIST ITEMS AND GENERATE CALL I.L.
C
 8140 DO 8150 I=1,ARGTOP
      J = ARGTOP + 1 - I
      ERRPT=-J
      L = ARGSTK(J)
      IF(L.GT.NAMMAX)GO TO 8120
      IF (NAMTBL(L)/MODULO .NE. VBL(1)/MODULO .AND.
     / (NAMTBL(L)/MODULO .NE. TEMP(1)/MODULO .OR.
     / (NAMTBL(L)/MODULO .EQ. TEMP(1)/MODULO .AND.
     / NAMTBL(L)-TEMP(1) .LE. MODHLF)))  GO TO 8120
C
C... SET J = THE NUMBER OF THE BLOCK WHICH
C... CONTAINS THE CANONICAL FORM.
C
      J = 3
      IF (MOD(NAMTBL(L),MODULO) .EQ. REAL)  J = 1
      IF (NAMTBL(L)-TEMP(1) .EQ. MODHLF+REAL)  J = 2
      IF(JJ.LE.6)GOTO 7200
      J=JJ-3
      JJJ=NAMTBL(L)-VBL(1)
      IF(NAMTBL(L)/MODULO.EQ.TEMP(1)/MODULO)JJJ=NAMTBL(L)-TEMP(1)
     * -MODHLF
      IF(JJJ.EQ.11.OR.JJJ.EQ.12.OR.JJJ.EQ.26.OR.JJJ.EQ.29.OR.JJJ.EQ.30)
     /  GOTO 7200
      GOTO 8120
 7200 CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,J)
      CALL ARGCVT(L)
      CALL TWOARG(QUIDLR,1)
      CALL RLSLIN
 8150 CONTINUE
      GO TO 22
C
C... PUNCH ALL SCALARS
C
 8160 DO 8170  I = 1,2
      IF (FIRST(2,I) .EQ. 0)  GO TO 8170
      CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,I)
      CALL ARGCVT(FIRST(1,I))
      CALL TWOARG(QUIDLR,FIRST(2,I))
      CALL RLSLIN
 8170 CONTINUE
      IF (J .EQ. 2) GO TO 22
C
C... PUNCH ALL SURFACES
C
 8180 IF (FIRST(2,3) .EQ. 0)  GO TO 22
      CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,3)
      CALL ARGCVT(FIRST(1,3))
      CALL TWOARG(QUIDLR,FIRST(2,3))
      CALL RLSLIN
      GO TO 22
C
C...     SYSTEM MACRO AND SEGMENT READ
C
 5700 IF(NMSEG.NE.0 .OR. NMMAC.NE.0)GO TO 5770
      IF (ARGTOP.EQ.0) THEN
        J=0
      ELSE
        J=ARGSTK(ARGTOP)
      ENDIF
      ERRPT=-ARGTOP
      IF(TOP.LT.9)GOTO 5705
      J=STACK(1,TOP-5)
      ERRPT=TOP-5
 5705 IF(J.GT.NAMMAX)GOTO 7000
      IF(ALOPN)GO TO 5710
      CALL LIBOPC(1,IFLAG)
      IF(IFLAG.NE.0)GO TO 5760
      ALOPN=.TRUE.
 5710 LRARG=CNAMTB(J)
      CALL LIBSCH(LRARG,IFLAG)
      IF(IGOTO.EQ.5)GO TO 5720
      IF(IFLAG.NE.0)GO TO 5780
      NMSEG=J
      IF(NAMTBL(NMSEG)/MODULO .EQ. PERMID(1)/MODULO)
     /     NAMTBL(NMSEG)=IDENT(1)
      GO TO 22
 5720 IF(IFLAG.NE.0)GO TO 5785
      NMMAC=J
      LMRSTR=.TRUE.
      ITMPSV(2)=TOP+1
      IF(TOP.GE.9)ITMPSV(2)=TOP-1
      K=TOP-1
      DO 5730 I=1,K
      ITMPSV(2*I+1)=STACK(1,I)
      ITMPSV(2*I+2)=STACK(2,I)
 5730 CONTINUE
      IF(TOP.GE.9)GO TO 5740
      ITMPSV(7)=SLASH(2)
      I=SLASH(1)/MODULO
      ITMPSV(8)=META(I)
      ITMPSV(9)=NMMAC
 5735 IF(NAMTBL(NMMAC)/MODULO .EQ. PERMID(1)/MODULO)
     /     NAMTBL(NMMAC)=IDENT(1)
      GO TO 22
 5740 I=STACK(1,TOP-1)
      IF(I.GT.NAMMAX)GO TO 5735
      J=NAMTBL(I)
      IF(J/MODULO.NE.TEMP(1)/MODULO)GO TO 5735
      IF((J-TEMP(1)).NE.REAL)GO TO 5755
      ITMPCT=ITMPCT+1
      CALL MACLBL(I,-ITMPCT,II)
      NAMTBL(II)=VBL(1)+REAL
      CALL RESRVZ(II,REAL,TXXXX(1,REAL),1)
      CALL OPCODE(REPL)
      CALL ONEARG(1)
      CALL ARGCVT(II)
      CALL ARGCVT(I)
      CALL RLSLIN
      CALL PUTTMP(REAL)
      ITMPSV(17)=II
      I=VBL(1)/MODULO
      ITMPSV(18)=META(I)
      GO TO 5735
C
 5750 IERROR=2001
      GO TO 5790
 5755 IERROR=1023
      ERRPT=TOP-1
      NMMAC=0
      LMRSTR=.FALSE.
      GO TO 5790
 5760 IERROR=72
      GO TO 5790
 5770 IERROR=71
      GO TO 5790
 5780 IERROR=73
      GO TO 5790
 5785 IERROR=17
 5790 CALL ALARM(IERROR,ERRPT,8,'PRO027  ')
C
   22 RETURN
C
C...  INDIRP  ENTRY
 4000 POINTX=.TRUE.
      GOTO 4001
C.....................................
C...  INDIRV  ENTRY
C...  SRFVCT  ENTRY
 3800 POINTX=.FALSE.
C...   SET UP IMPLIED SURFACES  DS,PS,CS.
 4001 DO 4090 IPARM=1,3
      SURF=SRFNAM(IPARM)
      IDECT=NAME(SURF)
C...  IS FIRST ITEM PERMID
      TEST=ARGSTK(ARGTOP)
      IF(TEST.GT.NAMMAX)GOTO 4007
      IF(NAMTBL(TEST)/MODULO.NE.PERMID(1)/MODULO) GOTO 4007
C...  IS FIRST WORD PS,DS, OR CS
      ARGTOP=ARGTOP-1
      IF(((NAMTBL(TEST)-PERMID(1)).EQ.1).OR.
     1   (NAMTBL(TEST)-PERMID(1)).EQ.501) GOTO 3719
C...  IMPROPER PERMID
      CALL ALARM(2010,-ARGTOP-1,4,'PRO027  ')
      GOTO 4007
C
 3719 IDECT=TEST
C...  SYMBOLIC OR NESTED DEFINITION OF VECTOR OR POINT YES,NO.
 4007 TEST=MODE(ARGSTK(ARGTOP))
      IF((POINTX.AND.(TEST.EQ.POINT)).OR.(.NOT.POINTX.AND.
     1   (TEST.EQ.VECTOR)))GOTO 4008
C...  NO.    CHECK  FOR THREE SCALARS.
      DO 4010 I=1,3
      ITOP=ARGTOP-I+1
      ERRPT=-ITOP
      IF(MODE(ARGSTK(ITOP)).NE.REAL)GOTO 4017
 4010 CONTINUE
C...  GET A TEMPORARY FOR A POINT OR VECTOR
      IF(.NOT.POINTX)GOTO 3705
      TEST=GETTMP(POINT)
      GOTO 3706
 3705 TEST=GETTMP(VECTOR)
C...  ASSIGN TEMPORARY STORAGE
 3706 CALL OPCODE(MOVE)
      CALL ARGCVT(TEST)
      CALL ARGCVT(ARGSTK(ARGTOP))
      CALL ARGCVT(ARGSTK(ARGTOP-1))
      CALL ARGCVT(ARGSTK(ARGTOP-2))
      CALL RLSLIN
      NEWTOP=ARGTOP-3
      GOTO 3721
 4008 TEST=ARGSTK(ARGTOP)
      NEWTOP=ARGTOP-1
C...  OUTPUT PROCEDURE CALL
 3721 IF(NEWTOP.NE.ARGTOP-3)GO TO 4026
      IF(POINTX)GO TO 4022
      M=VECTOR
      N=3
      GO TO 4024
 4022 M=POINT
      N=1
 4024 CALL REFGEN(N,TEST)
      CALL PUTTMP(M)
 4026 CALL CALLZZ(K)
      CALL ARGCVT(IDECT)
      CALL ARGCVT(TEST)
      CALL RLSLIN
 4028 ARGTOP=NEWTOP
      IF(ARGTOP.EQ.0) GOTO 22
 4090 CONTINUE
      ERRPT=-ARGTOP
 4017 CALL ALARM(2011,ERRPT,8,'PRO027  ')
      GOTO 22
C    TEST AUF READ/1,...
C.... DECREMENT BY NAMMAX FOR ADDRESS IN NUMBER TABLE, CNUMTB
 7000 J=J-NAMMAX
      IF(NLAST.GT.0)CALL MCXTRN(5,J,IDUMMY)
      CALL BCDBIN(CNUMTB(J),M,N)
      IF(M.NE.1) GOTO 5750
      ARGTOP=ARGTOP-1
      IF(ARGTOP.EQ.0)GOTO 5750
 7001 J=ARGSTK(ARGTOP)
      K5=(NAMTBL(J)/MODULO)*MODULO
      IF(K5.NE.VBL(1).AND.K5.NE.TEMP(1)) GOTO 7010
C   EINLESEUEBERPRUEFUNG FUER INDIZIERTE VARIABLE IN RESRED
      IF(K5.EQ.TEMP(1).AND.NAMTBL(J)-K5.GT.MODHLF)GOTO 7060
      CALL ALARM(1001,-ARGTOP,8,'PRO027  ')
      GO TO 22
C  LESEN VON 'APTLIB'
 7010 IF(ALOPN)GOTO 7020
      CALL LIBOPC(1,IFLAG)
      IF(IFLAG.NE.0)GOTO 5760
      ALOPN=.TRUE.
 7020 LRARG=CNAMTB(J)
      CALL FINDME(LDAFIL,LRARG,IFLAG)
      IF(IFLAG.NE.0)GOTO 5780
C    READ THE FIRST RECORD
      CALL RDSATZ(LDAFIL,INP,IDUM1,IDUM2,IFLAG)
      IF(IFLAG.NE.0)GOTO 5780
C FLAECHEN-ART
      M=INP(5)
C  GEOMETRIE QUALIFIZIEREN
      NAMTBL(J)=VBL(1)+M
C   SPEICHER RESERVIEREN
      CALL RESRVZ(J,M,TXXXX(1,M),1)
C IN INP(8) IST DIE LAENGE DER KANONISCHEN FORM GESPEICHERT
C  MAXSIZ,WENN NOETIG AENDERN
      IF(INP(8).LE.(IABS(MAXSIZ(2))))GOTO 7040
      IF(INP(8).LE.(IABS(MAXSIZ(1))))GOTO 7030
      MAXSIZ(2)=MAXSIZ(1)
      MAXSIZ(1)=INP(8)
      GOTO7040
 7030 MAXSIZ(2)=INP(8)
C NACH FREIEM PLATZ ABFRAGEN
 7040 DO 7045 I=4,ISC
      IF(J.EQ.KSC(1,I))GOTO 7048
 7045 CONTINUE
      ISC=ISC+1
      IF(ISC.LE.300)GOTO 7047
      CALL ALARM(34,-ARGTOP,8,'PRO027  ')
      GOTO 22
 7047 KSC(1,ISC)=J
      KSC(2,ISC)=INP(8)
 7048 JJ=MOD(J,CANTOP)
      DO 7050 I=1,CANTOP
      JJ=MOD(JJ,CANTOP)+1
      IF(CANSIZ(1,JJ).NE.0.AND.CANSIZ(2,JJ).NE.J)GOTO 7050
      CANSIZ(1,JJ)=INP(8)
      CANSIZ(2,JJ)=J
      GOTO 7060
 7050 CONTINUE
      CALL ALARM(53,-ARGTOP,8,'PRO027  ')
      GOTO 22
C  AUSGABE DES BEFEHLES 'READ/1,NAME'
 7060 CALL CALLZZ(K)
      CALL TWOARG(QUIDLR,1)
      CALL ARGCVT(J)
      CALL TWOARG(DLR,ONE)
      CALL RLSLIN
C SCHLIESSEN DES PDS-LESENS
      IF(ALOPN) CALL CLOSPE(LDAFIL,IFLAG)
      ALOPN=.FALSE.
      ARGTOP=ARGTOP-1
      ERRPT=-ARGTOP
      IF(ARGTOP.GT.0)GOTO 7001
      GOTO 22
C     VERARBEITUNG DER SONDER-PUNCH-ANWEISUNG
 7100 J=6
      ARGTOP=ARGTOP-1
      IF(ARGTOP.NE.0)GOTO 8140
      CALL ALARM(2030,TOP-1,4,'PRO027  ')
      GOTO 22
      END
