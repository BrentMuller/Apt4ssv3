*
      SUBROUTINE GOL(ADRESS)
C
C  MAIN DISPATCHING ROUTINE FOR GOLOFT/PLOTFT
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C  CANONICAL FORM OF SS GEOMETRY
      DIMENSION ADRESS(3)
C
C  HELP ARRAY FOR VECTOR TRANSFORMATION
      DOUBLE PRECISION VTAX(3),VT1(4)
      EQUIVALENCE(VT1(2),VTAX(1))
      INCLUDE (DARRAY)
C
C   STORAGE FOR REGION SEGMENTS
      DOUBLE PRECISION UV(4,25)
C
C  GOLOFT COMMON
      INTEGER JCSEG,NCSEG
      INTEGER ICSEG(10),NLIOCI(10)
      DOUBLE PRECISION COSAL(10),SINAL(10),CUTY(10),CUTX(10),CUTL(10)
C
C  VECTOR-COMPONENTS OF THE TOOL-AXIS-VECTOR
      DOUBLE PRECISION VTA(3)
                                                                        M0002610
      COMMON/PLGOL/ID(24),OBNAM1,JCSEG,NCSEG,ICSEG,NLIOCI,
     *             COSAL,SINAL,CUTY,CUTX,CUTL,VTA
C
      DOUBLE PRECISION UVCONS,UVA,UVE,TOL,VL
C
C UVCONS:    U-, V- CONSTANTS, GIVEN BY "UCONST,U" OR "VCONST,V"
      EQUIVALENCE (ID( 1),UVCONS)
C
C UVA:       STARTPARAMETER GIVEN BY "START,S"
      EQUIVALENCE (ID( 3),UVA   )
C
C UVE:       ENDPARAMETER GIVEN BY "THRU,T"
      EQUIVALENCE (ID( 5),UVE   )
C
C TOL:       INCREMENTS BY "INCR,I", ERROR OF CHORD BY "CHORD,C"
      EQUIVALENCE (ID( 7),TOL   )
C
C VL:        LENGTH-PARAMETER GIVEN BY "LENGTH,L"
      EQUIVALENCE (ID( 9),VL    )
C
C NU:        AMOUNT OF INTERMEDIATE LINES IN DIRECTION    UCONST
      EQUIVALENCE (ID(11),NU    )
C
C NV:        AMOUNT OF INTERMEDIATE LINES IN DIRECTION    VCONST
      EQUIVALENCE (ID(12),NV    )
C
C IART:      IART = 1   PLOTFT/SCURV,.........,PARAM,....
C            IART = 2   PLOTFT/SCURV,.........,FLOW ,....
C            IART = 3   PLOTFT/SSURF,UCONST,U,...........
C            IART = 4   PLOTFT/SSURF,VCONST,V,...........
C            IART = 5   PLOTFT/SSURF,GRID,...............
C            IART = 6   GOLOFT/SSURF,UCONST,U,...........
C            IART = 7   GOLOFT/SSURF,VCONST,V,...........
      EQUIVALENCE (ID(13),IART  )
C
C INVERS:    INVERSION OF THE POINT-SEQUENCE
      EQUIVALENCE (ID(14),INVERS)
C
C MIRROR:    INVERSION OF THE MANUFACTURED SIDE  (DIRECTION OF NORMAL)
      EQUIVALENCE (ID(15),MIRROR)
C
C NORMAL:   =1, IF  TLAXIS/NORMPS GIVEN; SURFACE-NORMAL = AXIS-DIRECTION
      EQUIVALENCE (ID(16),NORMAL)
C
C INCR:     =1 IF "INCR,I", =0 IF "CHORD,C" GIVEN
      EQUIVALENCE (ID(17),INCR  )
C
C IAT:       IAT   = 0 AT NOT PROGRAMMED
C            IAT   = 1 AT   "AT,A",        = 2 AT   "AT,TO,PL1"
C            IAT   = 3 AT   "AT,ON,PL1,    = 4 AT   "AT,PAST,PL1
      EQUIVALENCE (ID(18),IAT   )
C
C ISTRT:     ISTRT = 0 START NOT PROGRAMMED
C            ISTRT = 1 AT   "START,A",     = 2 AT   "START,TO,PL1"
C            ISTRT = 3 AT   "START,ON,PL1, = 4 AT   "START,PAST,PL1
      EQUIVALENCE (ID(19),ISTRT )
C
C ITHRU:     ITHRU = 0 THRU NOT PROGRAMMED
C            ITHRU = 1 AT   "THRU,A",      = 2 AT   "THRU,TO,PL1"
C            ITHRU = 3 AT   "THRU,ON,PL1,  = 4 AT   "THRU,PAST,PL1
      EQUIVALENCE (ID(20),ITHRU )
C
C   LOGIC-FUNCTION FOR CHECKING THE GEOMETRY
      LOGICAL CKDEF
C
C  BLANK-COMMON
      INCLUDE (BLANKCOM)
C
C  OUTPUT-ARRAY OF THE HEADER
      DOUBLE PRECISION OBNAME,MODF(7)
      CHARACTER*8 CMODF(7)
      DOUBLE PRECISION LEIT(9)
      INTEGER ILEIT(18),IMODF(2,7)
      EQUIVALENCE (LEIT(7),OBNAME),(LEIT(1),ILEIT(1))
      EQUIVALENCE (MODF(1),IMODF(1,1))
      DOUBLE PRECISION PENUP (5)
      EQUIVALENCE (PENUP (1),IPENU(1))
      INTEGER IPENU(10)
C
      INCLUDE (TOTAL)
      INCLUDE (FXCOR)
      INCLUDE (SV)
      INCLUDE (IFXCOR)
      INCLUDE (GLFLGS)
C
C  SYSTEM - INPUT/OUTPUT-NAMES
      INCLUDE (SYMFIL)
C
C  STORAGE OF POINTS
      DOUBLE PRECISION SPV(52)
C
C  CONTROL OF TEST-OUTPUT
      COMMON/SSPRT/SSPRT,SSTEST
      LOGICAL SSPRT,SSTEST
C
      INTEGER Z4E
      PARAMETER (Z4E=1308622848)
C
      INTEGER BCDF
      LOGICAL FIRST
      SAVE FIRST,LEIT,PENUP
C
      DATA CMODF/'PLOTKP  ','PLOTKF  ','PLOTFU  ','PLOTFV  ','PLOTGR  ',
     +          'GOFLU   ','GOFLV   '/
      DATA VT1/20030000.0D0,3*.0D0/
      DATA ILEIT/0,0,Z4E,0,Z4E,6,Z4E,1,0,0,Z4E,0,0,0,Z4E,0,Z4E,0/
      DATA IPENU/0,0,Z4E,0,Z4E,2,Z4E,2,0,0/
      DATA FIRST/.TRUE./
C
C AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
C
C     INITIALISE CHARACTER ITEMS FOR OUTPUT TO EXFILE
C
      IF (FIRST) THEN
        DO 5 I=1,7
          IMODF(1,I)=BCDF(CMODF(I)(1:4))
          IMODF(2,I)=BCDF(CMODF(I)(5:8))
    5   CONTINUE
        ILEIT(1)=BCDF('CLDA')
        ILEIT(2)=BCDF('TA  ')
        IPENU(1)=BCDF('PENU')
        IPENU(2)=BCDF('P   ')
        IPENU(9)=BCDF('    ')
        IPENU(10)=IPENU(9)
        FIRST=.FALSE.
      ENDIF
      IF(.NOT.SSTEST) GOTO 22
      CALL CFORM('1 GOLOFT/PLOTFT-CALLED WITH IART=  ',DARRAY,1,34)
      CALL ICONV(IART,DARRAY,34,4)
      CALL CPRINT(DARRAY)
      CALL CFORM('  PART PROGRAM-SEQUENCE-N0. (ISN): ',DARRAY,1,34)
      CALL RECORD(I)
      CALL ICONV(I,DARRAY,34,4)
      CALL CPRINT(DARRAY)
      CALL CFORM('0  -U-, V- CONSTANTS         UVCONS=',DARRAY,1,36)
      CALL FCONV(UVCONS,DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -START PARAMETER             UVA=',DARRAY,1,36)
      CALL FCONV(UVA   ,DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -END PARAMETER               UVE=',DARRAY,1,36)
      CALL FCONV(UVE   ,DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -TOLERANCE                   TOL=',DARRAY,1,36)
      IF(INCR.EQ.1) CALL CFORM('   -INCREMENT ',DARRAY,1,14)
      CALL FCONV(TOL   ,DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -MAX.CUT-VECTOR               VL=',DARRAY,1,36)
      CALL FCONV(VL    ,DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -NO. INTERMEDIATE LINES-U     NU=',DARRAY,1,36)
      CALL ICONV(NU    ,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -NO. INTERMEDIATE LINES-V     NV=',DARRAY,1,36)
      CALL ICONV(NV    ,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -INTERPOLATION-MODE         IART=',DARRAY,1,36)
      CALL ICONV(IART  ,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -POINT SEQ. INVERSION     INVERS=',DARRAY,1,36)
      CALL ICONV(INVERS,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -SPIMANUF. SIDE INVERSION    MIRROR=',DARRAY,1,36)
      CALL ICONV(MIRROR,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -NORMALS REQUIRED         NORMAL=',DARRAY,1,36)
      CALL ICONV(NORMAL,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      IC1=ICS
      IC2=ICS+LSV1
      CALL CFORM('   -AT    CONDITION              AT=',DARRAY,1,36)
      CALL ICONV(IAT,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      IF(IAT.LT.2.OR.IAT.GT.4) GOTO 7
      CALL CFORM('   -THICK FOR CHECKSURFACE 1     TH=',DARRAY,1,36)
      CALL FCONV(TH(IC1),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -OUTTOL                     TAU1=',DARRAY,1,36)
      CALL FCONV(TAU1(IC1),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -INTOL                      TAU2=',DARRAY,1,36)
      CALL FCONV(TAU2(IC1),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
    7 CALL CFORM('   -START CONDITION           START=',DARRAY,1,36)
      CALL ICONV(ISTRT,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      IF(ISTRT.LT.2.OR.ISTRT.GT.4) GOTO 8
      CALL CFORM('   -THICK FOR CHECKSURFACE 1     TH=',DARRAY,1,36)
      CALL FCONV(TH(IC1),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -OUTTOL                     TAU1=',DARRAY,1,36)
      CALL FCONV(TAU1(IC1),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -INTOL                      TAU2=',DARRAY,1,36)
      CALL FCONV(TAU2(IC1),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
    8 CALL CFORM('   -THRU  CONDITION            THRU=',DARRAY,1,36)
      CALL ICONV(ITHRU,DARRAY,36,5)
      CALL CPRINT(DARRAY)
      IF(ITHRU.LT.2.OR.ITHRU.GT.4) GOTO 9
      CALL CFORM('   -THICK FOR CHECKSURFACE 2     TH=',DARRAY,1,36)
      CALL FCONV(TH(IC2),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -OUTTOL                     TAU1=',DARRAY,1,36)
      CALL FCONV(TAU1(IC2),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
      CALL CFORM('   -INTOL                      TAU2=',DARRAY,1,36)
      CALL FCONV(TAU2(IC2),DARRAY,36,15,6)
      CALL CPRINT(DARRAY)
    9 CALL CFORM('   -SURFACE NAME                   :',DARRAY,1,36)
      CALL UNPACK(ADRESS,MODE,ISIZE,ISBSCT)
      CALL HOLFRM(ADRESS(3),DARRAY,36,8,N)
      IF(ISBSCT.LT.1) GOTO 10
      CALL HOLFRM(ADRESS(ISBSCT*3),DARRAY,36,8,N)
      CALL CFORM(' (....) ',DARRAY,44,8)
      CALL ICONV(ISBSCT,DARRAY,46,4)
   10 CALL CPRINT(DARRAY)
C
C  COMMON START OF ROUTINE
C
C  NAME OF THE SURFACE
   22 CALL UNPACK(ADRESS,MODE,ISIZE,ISBSCT)
      OBNAME=ADRESS(ISIZE+1)
      IF(ISBSCT.GT.1)OBNAME=ADRESS(ISBSCT*ISIZE+ISBSCT)
      OBNAM1=OBNAME
C
C   SAVE REGION FLAG ANS SWITCH OFF GLOBAL REGION FLAG TO PREVENT
C                        REGION PROCESSING IF PROGRAMMED IN ATAPE
      REGFLS=REGFLG
      REGFLG=0
C
C  FETCHING THE SURFACE
      LDAFLG=3
      CALL APT094(LDAFLG,ADRESS,J11)
      J11=J11-41
C
C  TAKE OLD TLAXIS FOR 5-AXIS DIRECTION DECISION
      IF(MANTAX.NE.2.OR.NORMAL.EQ.1) GOTO 200
      DO 210 I=1,3
  210 VTAX(I)=TA(I)
      CALL TRANSM(VTA,VTAX,3,3,-1)
  200 CONTINUE
C
C PREPARATION FOR PLANE LIMITS
      IRET=0
      INCR1=INCR
      INCR=1
      CALL GOLPLN(J11,IRET)
      INCR=INCR1
C
C  WRONG TOOL AXIS INFORMATION.
      IF(IRET.EQ.1) CALL AERR(22223,'GOL     ')
C
C  TOOL-AXIS CAN NOT BE COMPUTED.
      IF(IRET.EQ.2) CALL AERR(22222,'GOL     ')
C
C  POINT IS OUTSIDE OF THE U/V PARAMETERS OF THE PATCH.
      IF(IRET.EQ.3) CALL AERR(22220,'GOL     ')
      IF(IRET.NE.0) GOTO 998
C
C  TAKE OLD TLAXIS FOR 5-AXIS DIRECTION DECISION
      IF(MANTAX.NE.2.OR.NORMAL.EQ.1) GOTO 300
      DO 310 I=1,3
  310 VTAX(I)=TA(I)
      CALL TRANSM(VTA,VTAX,3,3,-1)
  300 CONTINUE
C
C  OUTPUT OF    PENUP, IF  PLOTFT/GRID WANTED
      IF(IART.NE.5) GOTO 30
      NR=0
      J=10
      CALL RECORD(ISEQNO)
      IPENU(4)=ISEQNO
      CALL EWRITE(EXFILE,NR,PENUP,J,IR)
C
C  OUTPUT OF THE HEADER ONLY FOR >PLOTFT/SCURV,...<
   30 IF(IART.GT.2)GOTO 35
      NR=0
      J=18
      CALL RECORD(ILEIT(4))
      ISEQNO=ILEIT(4)
      LEIT(5)=MODF(IART)
      CALL EWRITE(EXFILE,NR,LEIT,J,IR)
      ICL=2
      IF(UVA.EQ.UVE)ICL=3
C
C  DISPATCHING OF IART
   35 IF(UVA.EQ.-1.D30) UVA=0.D0
      GOTO(1200,1100,1300,1400,1500,1600,1700),IART
      STOP
C
C  PLOTFT/CURVE,FLOW,...
 1100 UMX=SSCAN(J11+8)
C
C  IF NEEDED OUTPUT WITH 'PARAM'
      IF(UMX.EQ.0.D0) UMX=SSCAN(J11+4)
C
C  KEEP THE 'FLOW'-SEGMENT-ACCOUNT
      UHILFS=SSCAN(J11+8)
      GOTO 1210
C
C  PLOTFT/CURVE,PARAM,...
 1200 UMX=SSCAN(J11+4)
C
C  KEEP THE 'FLOW'-SEGMENT-ACCOUNT
      UHILFS=SSCAN(J11+8)
C
C  'FLOW'-SEGMENT-ACCOUNT =0 FOR A SHORT TIME
      SSCAN(J11+8)=0.D0
 1210 UA=DMAX1(.0D0,UVA)
      IF(UVE.EQ.1.D30) UVE=UMX
      UE=DMIN1(UVE,UMX)
      IANZ=(UE-UA)/TOL
      ANZ=IANZ
      IF(IANZ.EQ.0) ANZ=1.D0
      ANZ=ANZ-.0001
      TOLI=(UE-UA)/ANZ
      IF(UA.GE.UE) GOTO 1205
      IF(UVA.GE.0.D0) GOTO 1220
 1205 CALL GOP(2,UVA,UDUMMY,SPV,J11,IRET)
      IF(UA.GE.UE) GOTO 1240
 1220 IF(INCR.EQ.1) GOTO 1221
C
C  OUTPUT OF POINTS UNDER CHORD-CONTROL
      CALL GOCHOR (1,UA,UE,J11,IRET)
      GOTO 1222
C
C  MOVEMENT WITH 'INCR'
 1221 CALL GOP(2,UA,UDUMMY,SPV,J11,IRET)
      UA=UA+TOLI
      IF(UA.LT.UE) GOTO 1221
 1222 IF(UE.EQ.UVE)ICL=3
      CALL GOP(2,UE,UDUMMY,SPV,J11,IRET)
      IF(UE.EQ.UVE) GOTO 1260
 1240 IF(ICL.EQ.3) GOTO 1260
      ICL=3
      CALL GOP(2,UVE,UDUMMY,SPV,J11,IRET)
 1260 SSCAN(J11+8)=UHILFS
      GOTO 999
C
C  PLOTTING OF THE GRID
 1500 INVERS=0
      INVER1=1
      IF(NU.LT.0) GOTO 1510
      UVCONS=0.D0
      UVA=0.D0
      UVE=SSCAN(J11+9)-1.D0
      DELTUV=1.D0/(NU+1)
      UMX=SSCAN(J11+10)-1.D0
      GOTO 1300
 1510 IF(NV.LT.0) GOTO 999
      UVCONS=0.D0
      UVA=0.D0
      UVE=SSCAN(J11+10)-1.D0
      DELTUV=1.D0/(NV+1)
      VMAX=SSCAN(J11+9)-1.D0
      GOTO 1400
C
C  PLOTTING OR MANUFACTURING WITH    UCONST
 1300 CONTINUE
 1600 VMAX=SSCAN(J11+9)-1.D0
      IF(UVE.EQ.1.D30) UVE=VMAX
C
C  PRESET >NSEG< AND >LSEG< TO ZERO FOR REGION/OFF CASE
      NSEG=0
      LSEG=0
C  COMPUTE THE SEGMENTS
      IF(REGFLS.EQ.0)GOTO 1604
      CALL NUMVER(UVCONS,UVA,UVCONS,UVE,ADRESS,UV,NSEG)
      LDAFLG=3
      CALL APT094(LDAFLG,ADRESS,J11)
      J11=J11-41
      IF(NSEG.EQ.0)GOTO 1552
      IF(INVERS.EQ.1)GOTO 1602
C
C  PREPARATION OF REGION SEGMENT CUTS
      ISEG=1
 1601 UVCONS=UV(1,ISEG)
      UVA   =UV(2,ISEG)
      UVE   =UV(4,ISEG)
      LSEG=3
      IF(ISEG.EQ.1)LSEG=1
      ISEG=ISEG+1
      NSEG=NSEG-1
      GOTO 1604
C
C  PREPARATION OF INVERS REGION SEGMENT CUTS
 1602 ISEG=NSEG
      NNSEG=NSEG
 1603 UVCONS=UV(1,ISEG)
      UVA   =UV(2,ISEG)
      UVE   =UV(4,ISEG)
      LSEG=2
      IF(ISEG.EQ.NNSEG)LSEG=4
      ISEG=ISEG-1
      NSEG=NSEG-1
 1604 CONTINUE
      VA=DMAX1(.0D0,UVA)
      VE=DMIN1(UVE,VMAX)
C
C  COMPUTING OF A CUT-NUMBER WITHOUT REST
      IANZ=(VE-VA)/TOL
      ANZ=IANZ
      IF(IANZ.EQ.0) ANZ=1.D0
      ANZ=ANZ-.0001
      TOLI=(VE-VA)/ANZ
C
C  INVERS ?
      IF(INVERS.EQ.1) GOTO 1650
C
C  CUTTER PATH INTRODUCTION
      IF(LSEG.EQ.0)LSEG=1
      ICL=2
      IF(UVA.EQ.UVE)ICL=3
      CALL GORETR(LSEG,UVCONS,UVA,SPV,J11,IRET)
C
C  NOT   INVERS
      IF(VA.GE.VE) GOTO 1605
      IF(UVA.GE.0.D0) GOTO 1620
 1605 CALL GOP(2,UVCONS,UVA,SPV,J11,IRET)
      IF(VA.GE.VE) GOTO 1640
 1620 IF(INCR.EQ.1) GOTO 1621
C
C  OUTPUT OF POINTS UNDER CONTROL OF CHORD
      CALL GOCHOR (2,VA,VE,J11,IRET)
      GO TO 1622
C
C  MOVEMENTS WITH 'INCR'
 1621 CALL GOP(2,UVCONS,VA,SPV,J11,IRET)
      VA=VA+TOLI
      IF(VA.LT.VE) GOTO 1621
 1622 IF(VE.EQ.UVE) ICL=3
      CALL GOP(2,UVCONS,VE,SPV,J11,IRET)
      IF(VE.EQ.UVE) GOTO 1550
 1640 IF(ICL.EQ.3) GOTO 1550
      ICL=3
      CALL GOP(2,UVCONS,UVE,SPV,J11,IRET)
      GOTO 1550
C
C  INVERS
C
C  CUTTER PATH INTRODUCTION
 1650 IF(LSEG.EQ.0)LSEG=4
      ICL=2
      IF(UVA.EQ.UVE)ICL=3
      CALL GORETR(LSEG,UVCONS,UVE,SPV,J11,IRET)
      IF(VA.GE.VE) GOTO 1655
      IF(UVE.LE.VMAX) GOTO 1670
 1655 CALL GOP(2,UVCONS,UVE,SPV,J11,IRET)
      IF(VA.GE.VE) GOTO 1690
 1670 IF(INCR.EQ.1) GOTO 1671
C
C  OUTPUT OF POINTS UNDER CONTROL OF CHORD
      CALL GOCHOR (3,VE,VA,J11,IRET)
      GO TO 1672
C
C  MOVEMENT WITH 'INCR'
 1671 CALL GOP(2,UVCONS,VE,SPV,J11,IRET)
      VE=VE-TOLI
      IF(VA.LT.VE) GOTO 1671
 1672 IF(VA.EQ.UVA) ICL=3
      CALL GOP(2,UVCONS,VA,SPV,J11,IRET)
      IF(VA.EQ.UVA) GOTO 1550
 1690 IF(ICL.EQ.3) GOTO 1550
      ICL=3
      CALL GOP(2,UVCONS,UVA,SPV,J11,IRET)
C
C  RETRACT AT END OF SEGMENT
 1550 IF(INVERS.EQ.1)GOTO 1551
      LSEG=2
      IF(NSEG.EQ.0)LSEG=4
      CALL GORETR(LSEG,UVCONS,UVE,SPV,J11,IRET)
      IF(NSEG.NE.0)GOTO 1601
      GOTO 1552
 1551 LSEG=3
      IF(NSEG.EQ.0)LSEG=1
      CALL GORETR(LSEG,UVCONS,UVA,SPV,J11,IRET)
      IF(NSEG.NE.0)GOTO 1603
 1552 IF(IART.NE.5) GOTO 999
      INVERS=INVERS+INVER1
      INVER1=-INVER1
      UVCONS=UVCONS+DELTUV
      IF(UVCONS.LE.UMX) GOTO 1300
      NU=-1
      GOTO 1500
C
C  PLOTTING OR MANUFACTURING WITH VCONST
 1400 CONTINUE
 1700 UMX=SSCAN(J11+10)-1.D0
      IF(UVE.EQ.1.D30) UVE=UMX
C
C  PRESET >NSEG< AND >LSEG< TO ZERO FOR REGION/OFF CASE
      NSEG=0
      LSEG=0
C  COMPUTE THE SEGMENTS
      IF(REGFLS.EQ.0)GOTO 1704
      CALL NUMVER(UVA,UVCONS,UVE,UVCONS,ADRESS,UV,NSEG)
      LDAFLG=3
      CALL APT094(LDAFLG,ADRESS,J11)
      J11=J11-41
      IF(NSEG.EQ.0)GOTO 1562
      IF(INVERS.EQ.1)GOTO 1702
C
C  PREPARATION OF REGION SEGMENT CUTS
      ISEG=1
 1701 UVCONS=UV(2,ISEG)
      UVA   =UV(1,ISEG)
      UVE   =UV(3,ISEG)
      LSEG=3
      IF(ISEG.EQ.1)LSEG=1
      ISEG=ISEG+1
      NSEG=NSEG-1
      GOTO 1704
C
C  PREPARATION OF INVERS REGION SEGMENT CUTS
 1702 ISEG=NSEG
      NNSEG=NSEG
 1703 UVCONS=UV(2,ISEG)
      UVA   =UV(1,ISEG)
      UVE   =UV(3,ISEG)
      LSEG=2
      IF(ISEG.EQ.NNSEG)LSEG=4
      ISEG=ISEG-1
      NSEG=NSEG-1
 1704 CONTINUE
      UA=DMAX1(.0D0,UVA)
      UE=DMIN1(UVE,UMX)
C
C  COMPUTATION OF THE CUT-NUMBER WITHOUT REST
      IANZ=(UE-UA)/TOL
      ANZ=IANZ
      IF(IANZ.EQ.0) ANZ=1.D0
      ANZ=ANZ-.0001
      TOLI=(UE-UA)/ANZ
C
C  INVERS ?
      IF(INVERS.EQ.1) GOTO 1750
C
C  CUTTER PATH INTRODUCTION
      IF(LSEG.EQ.0)LSEG=1
      ICL=2
      IF(UVA.EQ.UVE)ICL=3
      CALL GORETR(LSEG,UVA,UVCONS,SPV,J11,IRET)
C
C  NOT  INVERS
      IF(UA.GE.UE) GOTO 1705
      IF(UVA.GE.0.D0) GOTO 1720
 1705 CALL GOP(2,UVA,UVCONS,SPV,J11,IRET)
      IF(UA.GE.UE) GOTO 1740
 1720 IF(INCR.EQ.1) GOTO 1721
C
C  OUTPUT OF POINTS UNDER CONTROL OF CHORD
      CALL GOCHOR (4,UA,UE,J11,IRET)
      GO TO 1722
C
C  MOVEMENT WITH 'INCR'
 1721 CALL GOP(2,UA,UVCONS,SPV,J11,IRET)
      UA=UA+TOLI
      IF(UA.LT.UE) GOTO 1721
 1722 IF(UE.EQ.UVE)ICL=3
      CALL GOP(2,UE,UVCONS,SPV,J11,IRET)
      IF(UE.EQ.UVE) GOTO 1560
 1740 IF(ICL.EQ.3) GOTO 1560
      ICL=3
      CALL GOP(2,UVE,UVCONS,SPV,J11,IRET)
      GOTO 1560
C
C  INVERS
C
C  CUTTER PATH INTRODUCTION
 1750 IF(LSEG.EQ.0)LSEG=4
      ICL=2
      IF(UVA.EQ.UVE)ICL=3
      CALL GORETR(LSEG,UVE,UVCONS,SPV,J11,IRET)
      IF(UA.GE.UE) GOTO 1755
      IF(UVE.LE.UMX) GOTO 1770
 1755 CALL GOP(2,UVE,UVCONS,SPV,J11,IRET)
      IF(UA.GE.UE) GOTO 1790
 1770 IF(INCR.EQ.1) GOTO 1771
C
C  OUTPUT OF POINTS UNDER CONTROL OF CHORD
      CALL GOCHOR (5,UE,UA,J11,IRET)
      GO TO 1772
C
C  MOVEMENT WITH 'INCR'
 1771 CALL GOP(2,UE,UVCONS,SPV,J11,IRET)
      UE=UE-TOLI
      IF(UA.LT.UE) GOTO 1771
 1772 IF(UA.EQ.UVA) ICL=3
      CALL GOP(2,UA,UVCONS,SPV,J11,IRET)
      IF(UA.EQ.UVA) GOTO 1560
 1790 IF(ICL.EQ.3) GOTO 1560
      ICL=3
      CALL GOP(2,UVA,UVCONS,SPV,J11,IRET)
C
C  RETRACT AT END OF SEGMENT
 1560 IF(INVERS.EQ.1)GOTO 1561
      LSEG=2
      IF(NSEG.EQ.0)LSEG=4
      CALL GORETR(LSEG,UVE,UVCONS,SPV,J11,IRET)
      IF(NSEG.NE.0)GOTO 1701
      GOTO 1562
 1561 LSEG=3
      IF(NSEG.EQ.0)LSEG=1
      CALL GORETR(LSEG,UVA,UVCONS,SPV,J11,IRET)
      IF(NSEG.NE.0)GOTO 1703
 1562 IF(IART.NE.5) GOTO 999
      INVERS=INVERS+INVER1
      INVER1=-INVER1
      UVCONS=UVCONS+DELTUV
      IF(UVCONS.LE.VMAX) GOTO 1400
      NV=-1
      GOTO 999
C
C  DIRECTION OF MOVEMENT
  999 DO 2000 I=1,3
 2000 TEMP(I)=TE(I)-TEK(I)
      CALL VNORM(TEMP,TI)
      IGOTO=0
      IF(IER.GT.0) GOTO 998
      IF(DABS(TI(1)*TA(1)+TI(2)*TA(2)+TI(3)*TA(3)).GT..997D0) GOTO 998
      DO 2010 I=1,3
 2010 PMOVE(I)=TI(I)
C
C
C  POINT IS OUTSIDE OF THE U/V PARAMETERS OF THE PATCH.
      IF(IRET.EQ.2) CALL AERR(22220,'GOL     ')
C
C   RESTURE GLOBAL REGION FLAG
  998 REGFLG=REGFLS
      RETURN
      END
