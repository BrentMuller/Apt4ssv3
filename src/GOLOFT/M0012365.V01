*
      SUBROUTINE INTBND(NS,IRC)
C
C     CALCULATES A SURFACE BOUNDARY PT ON THE INTERSECTION OF
C     TWO SURFACES.
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C SS - ARELEM - COMMON
      COMMON/SSARLM/BB(64,4),UU(4),VV(4),
     *              IITOP(6,4,4),IIFLAG(4,4),IPNUM(4)
C
C   COMMON FOR 2 SURFACE INTERSECTION
      COMMON/INTCOM/IKEEP(255)
C   EVALUATION VECTOR FOR PS AND DS
      DOUBLE PRECISION SPV(4,8,2)
      EQUIVALENCE (IKEEP(  1),SPV(1,1,1))
C   LAST THREE U,V PAIRS OF PS AND DS
      DOUBLE PRECISION UV(2,3,2)
      EQUIVALENCE (IKEEP(129),UV(1,1,1))
C   HISTORY OF UNIT NORMALS AT INTERSECTION POINTS ON PS AND DS
      DOUBLE PRECISION UN(3,3,2)
      EQUIVALENCE (IKEEP(165),UN(1,1,1))
C   THICKNESS ON PS AND DS
      DOUBLE PRECISION THICK(2)
      EQUIVALENCE (IKEEP(201),THICK(1))
C   POINT OF INTERSECTION
      DOUBLE PRECISION PXYZ(3)
      EQUIVALENCE (IKEEP(205),PXYZ(1))
C   OLD POINT OF INTERSECTION
      DOUBLE PRECISION OXYZ(3)
      EQUIVALENCE (IKEEP(211),OXYZ(1))
C   DS TANGENT PLANE
      DOUBLE PRECISION DTP(4)
      EQUIVALENCE (IKEEP(217),DTP(1))
C   PS TANGENT PLANE
      DOUBLE PRECISION PTP(4)
      EQUIVALENCE (IKEEP(225),PTP(1))
C   PLANE PERPENTICULAR TO INTERSECTION DIRECTION
      DOUBLE PRECISION CTP(4)
      EQUIVALENCE (IKEEP(233),CTP(1))
C  TRACE
CCCCC EQUIVALENCE (IKEEP(249),ITRACE)
C
      DIMENSION CTPI(4),PL(4,3)
      DIMENSION DXYZ(3,2),P1(3),P2(3)
      LOGICAL UXBND,VXBND
C
C AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
C
CCCCC IF(ITRACE.EQ.1)
CCCCC*WRITE(6,1000)KS
C1000 FORMAT(' ***TRACE***INTBND-KS=',I5)
      UXBND = .FALSE.
      VXBND = .FALSE.
      U  =UV(1,1,NS)
      V  =UV(2,1,NS)
C
C DETERMINE PARAMETRIC VALUE OF BOUNDARY (UBND OR VBND)
C -----------------------------------------------------
C  TEST FIRST FOR U OR V OR U&V OUT OF BOUNDS
      UUU=DABS(U-.5D0) + 1.D-12
      VVV=DABS(V-.5D0) + 1.D-12
      NT = 0
      UBND = 0.D0
C IS U OUT OF BOUNDS?
      IF (UUU.LT..5D0) GOTO 30
C U OUT OF BOUNDS; LIMIT: 0 <= UBND <= 1.
      IF(U.GT..5D0)UBND = 1.D0
      NT = NT + 1
      UXBND = .TRUE.
   30 CONTINUE
      VBND = 0.D0
C IS V OUT OF BOUNDS?
      IF (VVV.LT..5D0) GOTO 50
C V OUT OF BOUNDS; LIMIT: 0 <= VBND <= 1.
      IF(V.GT..5D0)VBND = 1.D0
      NT = NT + 1
      VXBND = .TRUE.
   50 CONTINUE
C RESET U,V HISTORY TABLE:
      UV(1,1,NS)=U
      UV(1,2,NS)=U
      UV(1,3,NS)=U
      UV(2,1,NS)=V
      UV(2,2,NS)=V
      UV(2,3,NS)=V
      IF (.NOT. UXBND) GOTO 60
C SET UUU AT APPROPRIATE BOUNDARY:
      UUU = UBND
      J=2
      JJ=3
      GOTO 80
   60 CONTINUE
      IF (.NOT. VXBND) GOTO 70
C SET VVV AT APPROPRIATE BOUNDARY:
      VVV = VBND
      J=3
      JJ=2
      GOTO 80
   70 CONTINUE
      GO TO 999
   80 CONTINUE
C
C EXECUTE THIS CODE FOR U BOUNDARY OR V BOUNDARY (OR BOTH):
      DO 200 IS = 1,NT
C
C ITERATE (MAX. 15 TIMES) TO FIND INTERSECTION PT PXYZ ON BOUNDARY
C ----------------------------------------------------------------
      DO 220 K=1,15
      KK=K
      HTX=PXYZ(1)
      HTY=PXYZ(2)
      HTZ=PXYZ(3)
C
C USE PXYZ FROM PREVIOUS LOOP:
      DO 240 L=1,3
      P1(L)=PXYZ(L)
      P2(L)=PXYZ(L)
  240 CONTINUE
C
C EVALUATE POINT, NORMAL & PARTIALS ALONG BOUNDARY:
      DUV=-.0001D0
      DO 190 L=1,3
      IF(L.EQ.3) DUV=0.D0
C ON V BOUNDARY, SET UUU = U-DUV, U+DUV, U.
      IF(J.EQ.3) UUU=UV(1,1,NS) + DUV
C ON U BOUNDARY, SET VVV = V-DUV, V+DUV, V.
      IF(J.EQ.2) VVV=UV(2,1,NS) + DUV
C COMPUTE POINT, NORMAL & PARTIALS AT UUU,VVV ON SURFACE I:
      CALL CNSURF(UUU,VVV,BB(1,NS),SPV(1,1,NS),IIFLAG(1,NS),0)
      IF (L.GT.2) GOTO 250
C ON U BOUNDARY, SAVE V-PARTIALS; ON V BOUNDARY, SAVE U-PARTIALS:
      DXYZ(1,L)=SPV(1,JJ,NS)
      DXYZ(2,L)=SPV(2,JJ,NS)
      DXYZ(3,L)=SPV(3,JJ,NS)
  250 CONTINUE
      DUV=-DUV
  190 CONTINUE
C
C COMPUTE YPL = NORMAL TO PLANE OF BOUNDARY:
C ------------------------------------------
C
C TRY YPL = CROSS PRODUCT OF V-PARTIAL & NORMAL VECTOR:
      CTPI(1)=SPV(2,JJ,NS)*SPV(3,8,NS) - SPV(3,JJ,NS)*SPV(2,8,NS)
      CTPI(2)=SPV(3,JJ,NS)*SPV(1,8,NS) - SPV(1,JJ,NS)*SPV(3,8,NS)
      CTPI(3)=SPV(1,JJ,NS)*SPV(2,8,NS) - SPV(2,JJ,NS)*SPV(1,8,NS)
      IYPL=1
      SEC=DSQRT(CTPI(1)**2 + CTPI(2)**2 + CTPI(3)**2)
C IS VECTOR LARGE ENOUGH? ...
      IF (SEC.LE.1.D-10) GOTO 260
C NORMALIZE YPL:
      CTPI(1)=CTPI(1)/SEC
      CTPI(2)=CTPI(2)/SEC
      CTPI(3)=CTPI(3)/SEC
C CTPI(4) = DOT PRODUCT OF YPL & BOUNDARY POINT:
      CTPI(4)=CTPI(1)*SPV(1,1,NS) + CTPI(2)*SPV(2,1,NS)
     *                            + CTPI(3)*SPV(3,1,NS)
      GOTO 270
  260 CONTINUE
C
C TRY YPL = CROSS PRODUCT OF V-PARTIALS AT V +/- DELTA:
C
      IYPL=0
      CTPI(1)=DXYZ(2,1)*DXYZ(3,2) - DXYZ(3,1)*DXYZ(2,2)
      CTPI(2)=DXYZ(3,1)*DXYZ(1,2) - DXYZ(1,1)*DXYZ(3,2)
      CTPI(3)=DXYZ(1,1)*DXYZ(2,2) - DXYZ(2,1)*DXYZ(1,2)
      SEC=DSQRT(CTPI(1)**2 + CTPI(2)**2 + CTPI(3)**2)
C IS VECTOR LARGE ENOUGH? ***
      IF (SEC.GE.1.D-20) GOTO 280
C
C USE YPL = U-PARTIAL AT U,V:
C
      IYPL=0
      CTPI(1)=SPV(1,J,NS)
      CTPI(2)=SPV(2,J,NS)
      CTPI(3)=SPV(3,J,NS)
      SEC=DSQRT(CTPI(1)**2 + CTPI(2)**2 + CTPI(3)**2)
  280 CONTINUE
C NORMALIZE CTPI:
      CTPI(1)=CTPI(1)/SEC
      CTPI(2)=CTPI(2)/SEC
      CTPI(3)=CTPI(3)/SEC
  270 CONTINUE
C
C COMPUTE PLANES TANGENT TO S1 & S2 BELOW PXYZ:
C ---------------------------------------------
C  COMPUTE PLANE DTP TANGENT TO DS:
      CALL INTTPL(2,P1,DTP,IRC)
C COMPUTE PLANE PTP TANGENT TO PS:
      CALL INTTPL(1,P2,PTP,IRC)
C
C RELOAD DT TABLES WITH SURFACE NORMAL OFFSETS
      UN(1,1,2)=DTP(1)
      UN(2,1,2)=DTP(2)
      UN(3,1,2)=DTP(3)
      UN(1,1,1)=PTP(1)
      UN(2,1,1)=PTP(2)
      UN(3,1,1)=PTP(3)
      DO 290 L=1,3
      UN(L,2,1)=UN(L,1,1)
      UN(L,2,2)=UN(L,1,2)
      UN(L,3,1)=UN(L,2,1)
      UN(L,3,2)=UN(L,2,2)
C EVALUATE THICKNESS
      SPV(L,1,NS)=SPV(L,1,NS) + UN(L,1,NS)*THICK(NS)
  290 CONTINUE
C IF BOUNDARY ALGORITHM 2 OR 3, YPL(4) = DOT PRODUCT OF YPL AND
C  OFFSET BOUNDARY POINT:
      IF(IYPL.EQ.0)
     *CTPI(4)=CTPI(1)*SPV(1,1,NS) + CTPI(2)*SPV(2,1,NS)
     *                            + CTPI(3)*SPV(3,1,NS)
C
C LOAD PL TABLE
      DO 300 L=1,4
      PL(L,1)=PTP(L)
      PL(L,2)=CTPI(L)
      PL(L,3)=DTP(L)
  300 CONTINUE
C
C SOLVE FOR PXYZ AT INTERSECTION OF PLANES PTP,YPL,DTP:
C -----------------------------------------------------
      DO 310 L=1,4
      I1=1
      J1=2
      K1=3
      IF(L.EQ.2) I1=4
      IF(L.EQ.3) J1=4
      IF(L.EQ.4) K1=4
C CRAMER'S RULE:
      DET=  PL(I1,1)*PL(J1,2)*PL(K1,3) + PL(I1,2)*PL(J1,3)*PL(K1,1)
     *    + PL(I1,3)*PL(J1,1)*PL(K1,2) - PL(I1,3)*PL(J1,2)*PL(K1,1)
     *    - PL(I1,2)*PL(J1,1)*PL(K1,3) - PL(I1,1)*PL(J1,3)*PL(K1,2)
      IF (L.NE.1) GOTO 330
      DEN=DET
C DEGENERATE SOLUTION?
      IF (DABS(DEN).LT.1.D-16) GOTO 320
      GOTO 340
  330 CONTINUE
      PXYZ(L-1)=DET/DEN
  340 CONTINUE
  310 CONTINUE
  320 CONTINUE
      IF (DABS(DEN).GE.1.D-16) GOTO 350
C DEGENERATE SOLN; COMPUTE TANGENT YABC & PXYZ ON DTP & PTP:
      SAL=PTP(1)*DTP(1) + PTP(2)*DTP(2) + PTP(3)*DTP(3)
      CALSQ=1.D0-SAL*SAL
      IF (CALSQ.LE.1.D-20) GOTO 360
      CAL=DSQRT(CALSQ)*CTP(4)
      CTP(1)=(DTP(2)*PTP(3)-PTP(2)*DTP(3))/CAL
      CTP(2)=(DTP(3)*PTP(1)-PTP(3)*DTP(1))/CAL
      CTP(3)=(DTP(1)*PTP(2)-PTP(1)*DTP(2))/CAL
      D1=(PTP(4)-SAL*DTP(4))/CALSQ
      D2=DTP(4)-SAL*D1
      D3=CTP(1)*PXYZ(1) + CTP(2)*PXYZ(2) + CTP(3)*PXYZ(3)
      PXYZ(1)=PTP(1)*D1 + DTP(1)*D2 + CTP(1)*D3
      PXYZ(2)=PTP(2)*D1 + DTP(2)*D2 + CTP(2)*D3
      PXYZ(3)=PTP(3)*D1 + DTP(3)*D2 + CTP(3)*D3
  360 CONTINUE
  350 CONTINUE
      DIS=DSQRT((PXYZ(1)-HTX)**2 + (PXYZ(2)-HTY)**2 + (PXYZ(3)-HTZ)**2)
C CONVERGENCE?
      IF (DIS.LT.1.D-12) GOTO 230
  220 CONTINUE
  230 CONTINUE
C
C DONE WITH THIS BOUNDARY; CHECK BOUNDS & TRY OTHER ONE IF NECESSARY
C ------------------------------------------------------------------
      IF (NT.EQ.1) GOTO 210
C
C BOTH U & V ARE OUT OF BOUNDS, CHECK IF NOW IN BOUNDS:
      HU = UV(1,1,NS)
      HV = UV(2,1,NS)
      CALL INTNRM(NS,HU,HV,PXYZ,SPV,IRC)
C POINT IS ALONG U BOUNDARY; IF TRULY WITHIN BOUNDS, RETURN: ***
      IF (IRC.EQ.0 .OR. J.EQ.3) GOTO 210
C
C SET VVV AT APPROPRIATE BOUNDARY:
      VVV = VBND
      J=3
      JJ=2
  200 CONTINUE
  210 CONTINUE
C
C LOAD THIS UV FOR LAST CALL TO INTTPL IN INTCON
      DO 370 M=1,3
      UV(1,M,NS)=UUU
      UV(2,M,NS)=VVV
  370 CONTINUE
C
  999 RETURN
      END
