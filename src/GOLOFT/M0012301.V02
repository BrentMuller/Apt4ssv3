*
      SUBROUTINE REGION(ARG1,ARG2)
C
C PROCESSES THE REGION/ ... STATEMENT
C
C       ARG1 : REAL NUMBER OF THE CLDAT-SECTION
C       ARG2 : IN, OUT OR OFF
C
      IMPLICIT DOUBLE PRECISION(A-H),DOUBLE PRECISION(O-Z)
C
C
C---     REGION FLAG
      INCLUDE (GLFLGS)
C
      DOUBLE PRECISION PAT
      CHARACTER*4 IN,OUT,OFF,TEST
      INTEGER IPPS,IPAT(2)
      EQUIVALENCE (PAT,IPAT(1))
C
      DIMENSION RESULT(6)
      EQUIVALENCE(RESULT(1),U1),(RESULT(2),V1),(RESULT(3),P)
C
C SCULPTURED SURFACES CANONICAL FORM IN BLANK COMMON
      INCLUDE (BLANKCOM)
      DIMENSION ARYLDA(2)
C
C REGION STORAGE
      INTEGER MAXREG
      PARAMETER (MAXREG=50)
      DIMENSION IREGIO(4,MAXREG)
      INTEGER NUMREG,NUMRE1
C
C SCULPTURED SURFACES INTERMEDIATE STORAGE
      INCLUDE (SSPAD)
C
      DIMENSION W(2), VPREV(2), VCURR(2)
C
C COMMON FOR REGIONAL STARTUP AND RETRACT VALUES
C              (1) : START
C              (2) : AWAY
C              (3) : BACK
C              (4) : THRU
C DIRMOT(3,4): ARRAY FOR MOTDIR, NORMAL OR VECTOR VALUES
C              (1,I) : VALUES OF MOTDIR AND/OR NORMAL
C              (2,I)
C           OR (1,I) : VALUES OF VECTOR
C              (2,I)
C              (3,I)
C GOFEED(4)  : ARRAY FOR MOTION FEEDRAT
C              (1)   : FEDRAT OF START-MOTION (START AT FIRST POINT)
C              (2)   : FEDRAT OF AWAY-MOTION
C              (3)   : FEDRAT OF BACK-MOTION
C              (4)   : FEDRAT OF THRU-MOTION (RETRACT AT LAST POINT)
C GLFEED     : VARIABLE FOR NORMAL FEDRAT BEFORE GOMILL OR GOLOFT
C IRETRO(4)  : ARRAY FOR START, AWAY, BACK, THRU
C              (1) : START
C              (2) : AWAY
C              (3) : BACK
C              (4) : THRU
C                    0 : NOT USED
C                    1 : CONDITION SET
C IDIRMO(4)  : ARRAY FOR START ON AND END CONDITION
C                    0 : NOT SET
C                    1 : MOTDIR AND/OR NORMAL
C                    2 : VECTOR
C ICANIN(4)  : ARRAY FOR THE CANONICAL FORM INDEX OF THE SURFACE
C                    0 : NOT SET
C                    IC: INDEX
      COMMON/CCLEAR/ DIRMOT(3,4)
     *              ,GOFEED(4)
     *              ,GLFEED
     *              ,REGLDA(2)
     *              ,IRETRO(4)
     *              ,IDIRMO(4)
     *              ,ICANIN(4)
C
C CONTROL OF TEST-OUTPUT
      COMMON/SSPRT/SSPRT,SSTEST
      LOGICAL SSPRT,SSTEST
C
      CHARACTER*20 BADMSG
      INTEGER BCDF
      LOGICAL FIRST
      SAVE FIRST,PAT,IPPS
C
      DATA IN  /'IN  '/,OUT /'OUT '/,OFF /'OFF '/
      DATA NUMREG/0/, NUMRE1/0/
      DATA FIRST/.TRUE./
C
C AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
C
C.... INITIALIZE CHARACTER ITEMS
      IF (FIRST) THEN
        IPAT(1)=BCDF('CLDA')
        IPAT(2)=BCDF('TA  ')
        IPPS=BCDF('PPS ')
        FIRST=.FALSE.
      ENDIF
                                                                        M0009080
      CALL HOLFRM(ARG2,TEST,1,4,NWD)
C
C    SWITCH OFF REGION FLAG IF >REGION/...,OFF<
      IF(TEST.NE.OFF) GOTO 1
      REGFLG=0
      GOTO 999
C
C SEARCH FOR ALREADY PROCESSED REGION
    1 IARG1=ARG1
      IF(TEST.EQ.IN) OUTIN=0.D0
      IF(TEST.EQ.OUT) OUTIN=1.D0
      IF(NUMREG.EQ.0) GOTO 3
      INOUT=OUTIN
      DO 2 I=1,NUMREG
      IF(IREGIO(1,I).NE.IARG1) GOTO 2
      IF(IREGIO(2,I).NE.INOUT) GOTO 2
      REGLDA(1)=IREGIO(3,I)
      REGLDA(2)=IREGIO(4,I)
      REGFLG=1
      GOTO 700
    2 CONTINUE
C
C FETCH THE NUMBER OF POINTS IN THE ID-AREA OUT OF EXFILE
    3 CALL NUMF2(R,PAT,ARG1)
      NUMP=R
C
C COMPUTE RECORD NUMBER OF ASSOCIATED SSURF
      CALL CLDATF(P,ARG1,IPPS,1.D0)
      NPA=P
      NPA=NPA/1000
      ARYLDA(1)=NPA
C
C GET BLANK COMMON STORAGE INDEX OF SSURF CANONICAL FORM
      LDAFLG=7
      CALL APT094(LDAFLG,ARYLDA,CANIND)
C
C GET LENGTH OF SURFACE FROM ORIGINAL CANONICAL FORM
      ARYLDA(2)=CANON(INT(CANIND+1.D0))
C
C GET STORAGE LOCATION OF SSURF DATA
      LDAFLG=3
      CALL APT094(LDAFLG,ARYLDA,LOCCAN)
      LOCCAN=LOCCAN-41
C
C GET NUMBER OF PATCHES IN U- AND V-DIRECTION
      NUMSPL=SSCAN(LOCCAN+ 9)-1.D0
      NUMCRS=SSCAN(LOCCAN+10)-1.D0
C
C FETCH THE U/V VALUES OF THE CLDAT-SECTION, BELONGING TO A PATCH
      IUVSC=ISCAN
      DO 100 I=1,NUMP
C
C  GET U,V,P DATA
      CALL ATAPER(RESULT,I,IARG1,9,IEE)
      IF(IEE.EQ.0)GOTO 4
C
C  ERROR : REGION DATA CAN NOT BE FETCHED
      CALL ERROR(22806,'REGION  ')
      GOTO 999
    4 NP=P
      ITAUS=NP/1000
      IF(ITAUS.EQ.NPA) GOTO 5
C
C ERROR: REGION DATA BELONGS TO MORE THAN ONE SURFACE
      CALL ERROR(22801,'REGION  ')
      GOTO 999
    5 NUMPAT=NP-ITAUS*1000
C
C TRANSFORM U1/V1 VALUES TO BASIC U/V VALUES
      IU=MOD(NUMPAT-1,NUMCRS)+1
      IV=(NUMPAT-1)/(NUMCRS)+1
      U=U1+IU-1
      V=V1+IV-1
      SCAN(ISCAN+1)=U
      SCAN(ISCAN+2)=V
C
C NO CHECK AT FIRST POINT
      IF(I.EQ.1) GOTO 90
C
C CHECK, CLOSE POINT TO LAST POINT
      DU=U-SCAN(ISCAN-1)
      DV=V-SCAN(ISCAN)
      IF(DU*DU+DV*DV.LT.1.D-12) GOTO 100
C
C NO CHECK AT 2ND POINT
      IF(I.LE.2) GOTO 90
C
C CHECK, IF LINEAR EXTENSION
      IF(DABS(DU*(V-SCAN(ISCAN-2))
     *       -DV*(U-SCAN(ISCAN-3))).GT.1.D-5) GOTO 90
C
C REPLACE PREVIOUS POINT
      SCAN(ISCAN-1)=U
      SCAN(ISCAN  )=V
      GOTO 100
C
   90 ISCAN=ISCAN+2
      IF(ISCAN.GT.NSCNMX) GOTO 992
  100 CONTINUE
C
C CHECK, CLOSE POINT TO FIRST POINT
      DU=SCAN(IUVSC+1)-SCAN(ISCAN-1)
      DV=SCAN(IUVSC+2)-SCAN(ISCAN)
      IF(DU*DU+DV+DV.GE.1.D-12) GOTO 110
      ISCAN=ISCAN-2
C
C CHECK, IF LINEAR EXTENSION
  110 IF(DABS((SCAN(IUVSC+1)-SCAN(ISCAN-1))
     *       *(SCAN(IUVSC+4)-SCAN(ISCAN))
     *       -(SCAN(IUVSC+2)-SCAN(ISCAN))
     *       *(SCAN(IUVSC+3)-SCAN(ISCAN-1)))
     *        .GT.1.D-5) GOTO 120
      SCAN(IUVSC+1)=SCAN(ISCAN-1)
      SCAN(IUVSC+2)=SCAN(ISCAN)
      ISCAN=ISCAN-2
C
C RECALCULATE THE NUMBER OF POINTS
  120 NUMP=(ISCAN-IUVSC)/2
      IF(NUMP.GE.3) GOTO 130
C
C ERROR: LESS THAN 3 POINTS AS REGION BOUNDARY
      CALL ERROR(22802,'REGION  ')
      GOTO 999
  130 CONTINUE
C
C TEST OF RIGHT (CLOCWISE) OR LEFT SENSE OF CONTOUR
C
C  DIRECTION SENSE VECTOR
      W(1)=SCAN(IUVSC+3)-SCAN(IUVSC+1)
      W(2)=SCAN(IUVSC+4)-SCAN(IUVSC+2)
C
C NUMBER OF 90 DEGREE TURNS
      IQ=0
C
C PRESET OF PREVIOUS CENTER DIRECTION
      VPREV(1)=W(1)
      VPREV(2)=W(2)
C
C START-INDEX
      IA=IUVSC+2
      NUMP1=NUMP+1
C
C SENSE LOOP
      DO 600 I=2,NUMP1
      IA1=IA+2
      IF(I.EQ.NUMP) IA1=IUVSC
C
C CURRENT CONTOUR DIRECTION
      VCURR(1)=SCAN(IA1+1)-SCAN(IA+1)
      VCURR(2)=SCAN(IA1+2)-SCAN(IA+2)
C
C IS THE DIRECTION SENSE VECTOR TO BE CHANGED
      IF(W(1)*VCURR(1)+W(2)*VCURR(2).GT.0.D0) GOTO 610
C
C CROSS PRUDUCT BETWEEN SENSE VECTOR AND CONTOUR DIRECTION
      WCV=W(1)*VCURR(2)-W(2)*VCURR(1)
C
C LEFT/RIGHT CORNER
      IF(VPREV(1)*VCURR(2)-VPREV(2)*VCURR(1).GT.0.D0) GOTO 605
C
C CORNER TO RIGHT
      IF(WCV.GE.0.D0) GOTO 603
      IQ=IQ+2
      W(1)=-W(1)
      W(2)=-W(2)
      GOTO 610
C
  603 IQ=IQ+1
      WW=W(1)
      W(1)=W(2)
      W(2)=-WW
      GOTO 610
C
C CORNER TO LEFT
  605 IF(WCV.LE.0.D0) GOTO 608
      IQ=IQ-2
      W(1)=-W(1)
      W(2)=-W(2)
      GOTO 610
C
  608 IQ=IQ-1
      WW=W(1)
      W(1)=-W(2)
      W(2)=WW
      GOTO 610
C
  610 IA=IA+2
      IF(I.EQ.NUMP) IA=IUVSC
      VPREV(1)=VCURR(1)
      VPREV(2)=VCURR(2)
  600 CONTINUE
      IF(IQ.NE.0.OR.IABS(IQ).LE.4) GOTO 140
C
C ERROR: REGION BOUNDARY IS INCORRECT
      CALL ERROR(22803,'REGION  ')
      GOTO 999
C
C RESERVE REGION DATA SPACE
  140 LDAFLG=5
      REGLDA(1)=0.D0
      REGLDA(2)=8+4*NUMP
      CALL APT094(LDAFLG,REGLDA,SSCAN(1))
C
C PUT REGION-VALUES INTO SSCAN (BLANK COMMON)
      J=1
      SSCAN(J)=NP
      SSCAN(J+1)=CANIND
      SSCAN(J+2)=NUMP
      SSCAN(J+3)=OUTIN
      J=J+3
C
C FIND THE MIN/MAX-VALUES OF U/V
      UMIN=SCAN(IUVSC+1)
      UMAX=SCAN(IUVSC+1)
      VMIN=SCAN(IUVSC+2)
      VMAX=SCAN(IUVSC+2)
C
      IA=IUVSC+2
      IE=ISCAN-2
      DO 800 I=IA,IE,2
      UMIN=DMIN1(SCAN(I+1),UMIN)
      UMAX=DMAX1(SCAN(I+1),UMAX)
      VMIN=DMIN1(SCAN(I+2),VMIN)
      VMAX=DMAX1(SCAN(I+2),VMAX)
  800 CONTINUE
C
C PUT THE MIN/MAX-VALUES INTO SSCAN
      SSCAN(J+1)=UMIN
      SSCAN(J+2)=UMAX
      SSCAN(J+3)=VMIN
      SSCAN(J+4)=VMAX
      J=J+4
C
C PUT THE U/V-VALUES AND DISTANCES INTO SSCAN ( IN NORMAL ORDER)
      IF(IQ.GT.0.AND.OUTIN.EQ.1.D0.OR.
     *   IQ.LT.0.AND.OUTIN.EQ.0.D0) GOTO 810
      DO 801 I=IUVSC,IE,2
      I1=I+2
      SSCAN(J+1)=SCAN(I+1)
      SSCAN(J+2)=SCAN(I+2)
      IF(I.EQ.IE)I1=IUVSC
      SSCAN(J+3)=SCAN(I1+1)-SCAN(I+1)
      SSCAN(J+4)=SCAN(I1+2)-SCAN(I+2)
      J=J+4
  801 CONTINUE
      NUMD=J
      GOTO 820
C
C PUT THE U/V-VALUES AND DISTANCES INTO SSCAN (REVERSE ORDER)
  810 J=J+(NUMP-1)*4
      DO 811 I=IUVSC,IE,2
      I1=I-2
      SSCAN(J+1)=SCAN(I+1)
      SSCAN(J+2)=SCAN(I+2)
      IF(I.EQ.IUVSC)I1=IE
      SSCAN(J+3)=SCAN(I1+1)-SCAN(I+1)
      SSCAN(J+4)=SCAN(I1+2)-SCAN(I+2)
      J=J-4
  811 CONTINUE
      NUMD=J+(NUMP+1)*4
C
C TEST OF SELF-INTERSECTION OF REGION BOUNDARY
  820 IF(NUMP.EQ.3) GOTO 920
      NUMPM2=NUMP-2
      DO 900 I=1,NUMPM2
C
C PREPARE INTERSECTION TEST
      CALL SETVER(SSCAN(5+I*4))
C
C LOOP INDICES FOR INNNER LOOP
      J1=I+2
      J2=NUMP
      IF(I.EQ.1) J2=NUMP-1
C
C INNER LOOP
      DO 900 J=J1,J2
      CALL GETVER(SSCAN(5+J*4),RESULT,IRES)
      IF(IRES.EQ.0) GOTO 900
C
C ERROR: REGION BOUNDARY CONTAINS INTERSECTIONS
      CALL ERROR(22804,'REGION  ')
      GOTO 999
  900 CONTINUE
  920 CONTINUE
C
C WRITE ALL REGION-DATA TO LDA
      LDAFLG=1
      REGLDA(1)=0.D0
      REGLDA(2)=NUMD
      CALL APT094(LDAFLG,REGLDA,SSCAN(1))
C
C COMPUTE THE REGION STORAGE INDEX AND STORE THE REGION
      NUMRE1=NUMRE1+1
      IF(NUMRE1.GT.MAXREG) NUMRE1=1
      IREGIO(1,NUMRE1)=IARG1
      IREGIO(2,NUMRE1)=OUTIN
      IREGIO(3,NUMRE1)=REGLDA(1)
      IREGIO(4,NUMRE1)=REGLDA(2)
C
C INCREASE NUMBER OF STORED REGIONS
      IF(NUMREG.LT.MAXREG) NUMREG=NUMREG+1
      REGFLG=1
  700 CONTINUE
C
C TEST-OUTPUT, IF PRINT/SSTEST,ON
      IF(.NOT.SSTEST) GOTO 999
      CALL RECORD(NSEQ)
      LDAFLG=3
      CALL APT094(LDAFLG,REGLDA,J11)
      J11=J11-41
      J111=J11+1
      J12=J11+8
      BADMSG=' REGION DATA:'
      CALL CPRINT(BADMSG)
      CALL BAD(-1,0,'ISN ',NSEQ)
C
      CALL BAD( 1,1,'REG1',REGLDA(1))
      CALL BAD( 1,1,'REG2',REGLDA(2))
      CALL BAD(-1,0,'J11 ',J11)
      DO 807 I1=J111,J12,8
      CALL BAD( 1,1,'S  1',SSCAN(I1))
      CALL BAD( 1,1,'S  2',SSCAN(I1+1))
      CALL BAD( 1,1,'S  3',SSCAN(I1+2))
      CALL BAD(-1,1,'S  4',SSCAN(I1+3))
      CALL BAD( 1,1,'S  5',SSCAN(I1+4))
      CALL BAD( 1,1,'S  6',SSCAN(I1+5))
      CALL BAD( 1,1,'S  7',SSCAN(I1+6))
  807 CALL BAD(-1,1,'S  8',SSCAN(I1+7))
      J13=J12+1
      J14=SSCAN(J11+3)*4+J13-1
      DO 808 I=J13,J14,4
      CALL BAD( 1,1,'    ',SSCAN(I))
      CALL BAD( 1,1,'    ',SSCAN(I+1))
      CALL BAD( 1,1,'    ',SSCAN(I+2))
      CALL BAD( 1,1,'    ',SSCAN(I+3))
  808 CALL BAD(-1,1,'    ',0)
      GOTO 999
C
C ERROR: TOO MANY REGION POINTS TO PROCESS
  992 CALL ERROR(22805,'REGION  ')
C
  999 RETURN
      END
