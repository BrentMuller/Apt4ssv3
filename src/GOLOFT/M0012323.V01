*
      SUBROUTINE INTNRM(NS,U,V,PTA,SPVA,IRC)
C
C     INTNRM COMPUTES THE POINT  ON A SURFACE FROM WHICH A SURFACE
C     NORMAL PASSES THRU POINT 'PTA'. THE UV VALUES ARE USED FOR A
C     CLOSE APPROXIMATION ON INPUT AND ARE ADJUSTED TO THE ACTUAL
C     UV OF SURFACE ON OUTPUT.
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION PTA(3),SPVA(4,8),SPVI(4,8)
      DIMENSION XU(3),XV(3),XUU(3),XVV(3),XUV(3)
      EQUIVALENCE (SPVI(1,2),XU(1)),(SPVI(1,3),XV(1))
      EQUIVALENCE (SPVI(1,4),XUU(1))
      EQUIVALENCE (SPVI(1,5),XUV(1)),(SPVI(1,6),XVV(1))
C
C SS - ARELEM - COMMON
      COMMON/SSARLM/BB(64,4),UU(4),VV(4),
     *              IITOP(6,4,4),IIFLAG(4,4),IPNUM(4)
C
C   COMMON FOR 2 SURFACE INTERSECTION
      COMMON/INTCOM/IKEEP(255)
CCCCC EQUIVALENCE (IKEEP(249),ITRACE)
C
C AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
C
CCCCC IF(ITRACE.EQ.1)
CCCCC*WRITE(6,1000)
C1000 FORMAT(' ***TRACE***INTNRM')
      IRC=0
      DTOL=1.D-12
      UI=U
      VI=V
C
      ISCAN=0
      NTIM = 0
      GOTO 25
C
C SCAN ENTIRE SURFACE FOR GLOBAL MIN. DIST. POINT
C -----------------------------------------------
   15 ISCAN=1
      D1=90.D30
      U1=.5D0
      V1=.5D0
      TUVINC = 1.0D0
      DO 350 K=1,3
      TUVINC = TUVINC/10.0D0
      UVINC=TUVINC
      IF(K.GT.1) UVINC=UVINC*2.D0
      US=U1 - UVINC*5.D0
      VS=V1 - UVINC*5.D0
      DO 340 I=1,11
      V=VS + UVINC*(I-1)
      DO 330 J=1,11
      U=US + UVINC*(J-1)
      CALL CNSURF(U,V,BB(1,NS),SPVA,IIFLAG(1,NS),0)
      D2=(SPVA(1,1)-PTA(1))**2 + (SPVA(2,1)-PTA(2))**2
     *                         + (SPVA(3,1)-PTA(3))**2
      IF (D2.GE.D1) GOTO 320
      D1=D2
      U1=U
      V1=V
  320 CONTINUE
  330 CONTINUE
  340 CONTINUE
  350 CONTINUE
      U=U1
      V=V1
C
C ALLOW ONLY UNIT SQUARE UV
   25 IF(U.LT.0.D0) U=0.D0
      IF(V.LT.0.D0) V=0.D0
      IF(U.GT.1.D0) U=1.D0
      IF(V.GT.1.D0) V=1.D0
C SAVE BEST SOLN FOR RESET
      DSQMIN = 999.D0
      UMIN = U
      VMIN = V
      ULIM0 = 0.D0
      ULIM1 = 1.D0
      VLIM0 = 0.D0
      VLIM1 = 1.D0
      UX0 = 0.D0
      VX0 = 0.D0
      DUMIN = 1.D0
      DVMIN = 1.D0
C
C ITERATE (31 TIMES MAX.) TO FIND LOCAL MIN. DIST PTA
C ---------------------------------------------------
      DO 600 I=1,31
      NTIM=NTIM + 1
      USV=U
      VSV=V
      IF (I.LT.11) GOTO 440
C
C FIRST TIME HERE, DO DIAGONAL MINI-SEARCH FOR BEST SOLN
      IF (I.NE.11) GOTO 430
      D1=90.D30
      U = UX0
      DU = DUMIN/10.D0
      V = VX0
      DV = DVMIN/10.D0
      DO 420 K=1,2
      DO 410 J=1,9
      U = U + DU
      V = V + DV
      CALL CNSURF(U,V,BB(1,NS),SPVA,IIFLAG(1,NS),0)
      D2=(SPVA(1,1)-PTA(1))**2+(SPVA(2,1)-PTA(2))**2
     *                        +(SPVA(3,1)-PTA(3))**2
      IF (D2.GE.D1) GOTO 400
      D1=D2
      UI=U
      VI=V
  400 CONTINUE
  410 CONTINUE
C SEARCH OPPOSITE DIAGONAL
      U = UX0
      V = V + DV
      DV = -DV
  420 CONTINUE
      U = UI
      V = VI
  430 CONTINUE
C
C IF HERE, USE NEWTON'S METHOD
C ----------------------------
C  COMPUTE POINT, 1ST & 2ND DERIVATIVES
      CALL CNSURF(U,V,BB(1,NS),SPVI,IIFLAG(1,NS),2)
      DX=PTA(1) - SPVI(1,1)
      DY=PTA(2) - SPVI(2,1)
      DZ=PTA(3) - SPVI(3,1)
C SOLVE FOR F(U,V) & G(U,V) = 0 ***
      FUV = DX*XU(1) + DY*XU(2) + DZ*XU(3)
      GUV = DX*XV(1) + DY*XV(2) + DZ*XV(3)
C CONVERGENCE ?
      IF(DABS(FUV).LT.DTOL.AND.DABS(GUV).LT.DTOL)GO TO 110
C EVALUATE PARTIALS OF F & G
      DFDU = (DX*XUU(1) + DY*XUU(2) + DZ*XUU(3)) -
     *                       (XU(1)**2 + XU(2)**2 + XU(3)**2)
      DFDV = (DX*XUV(1) + DY*XUV(2) + DZ*XUV(3)) -
     *                       (XU(1)*XV(1) + XU(2)*XV(2) + XU(3)*XV(3))
      DGDU = DFDV
      DGDV = (DX*XVV(1) + DY*XVV(2) + DZ*XVV(3)) -
     *                       (XV(1)**2 + XV(2)**2 + XV(3)**2)
      DET = DFDU*DGDV - DFDV*DGDU
C COMPUTE CORRECTIONS TO U & V
      DELU = -(DGDV*FUV - DFDV*GUV)/DET
      DELV = -(DFDU*GUV - DGDU*FUV)/DET
C SAVE UPPER & LOWER BOUNDS ON U & V
      IF(DELU.GT.0.D0)ULIM0 = DMAX1(ULIM0,U)
      IF(DELU.GT.0.D0)ULIM1 = DMAX1(ULIM1,U)
      IF(DELV.GT.0.D0)VLIM0 = DMAX1(VLIM0,V)
      IF(DELV.GT.0.D0)VLIM1 = DMAX1(VLIM1,V)
      IF(DELU.LT.0.D0)ULIM1 = DMIN1(ULIM1,U)
      IF(DELU.LT.0.D0)ULIM0 = DMIN1(ULIM0,U)
      IF(DELV.LT.0.D0)VLIM1 = DMIN1(VLIM1,V)
      IF(DELV.LT.0.D0)VLIM0 = DMIN1(VLIM0,V)
      GOTO 490
  440 CONTINUE
C
C 1ST 11 TIMES USE  PLANE CONVERGENCE APPROACH
C --------------------------------------------
      CALL CNSURF(U,V,BB(1,NS),SPVI,IIFLAG(1,NS),2)
C
C GET LENGTH OF PARTIALS
      SECU=DSQRT(XU(1)**2 + XU(2)**2 + XU(3)**2)
      SECV=DSQRT(XV(1)**2 + XV(2)**2 + XV(3)**2)
C
      DX=PTA(1)-SPVI(1,1)
      DY=PTA(2)-SPVI(2,1)
      DZ=PTA(3)-SPVI(3,1)
      D1=(XU(1)*DX + XU(2)*DY + XU(3)*DZ)/SECU
      D2=(XV(1)*DX + XV(2)*DY + XV(3)*DZ)/SECV
C
C CAL. COS-1 BETWEEN PARTIALS
      COS=(XU(1)*XV(1)+XU(2)*XV(2)+XU(3)*XV(3))/(SECU*SECV)
      CS=1.D0-COS*COS
      IF(CS.LT.1.D-20) CS=1.D-20
C
      DELU=(D1-D2*COS)/CS
      IF(DABS(DELU).LT.1.D-20) DELU=1.D-20
      DSQ=DSQRT(DELU*DELU*CS + D2*D2)
C
C IF DISTANCE IS LT 1.D-12; EXIT
      IF(DSQ.LT.DTOL) GOTO 110
C SAVE BEST SOLN FOR RESET
      IF (DSQ.GE.DSQMIN) GOTO 450
      DSQMIN = DSQ
      UMIN = U
      VMIN = V
  450 CONTINUE
C
C RECALCULATE U & V
C -----------------
      DELV=(D2-DELU*COS)/SECV
      DELU=DELU/SECU
C SAVE MIN. OSCILLATION DIST. ***
      IF (I.EQ.1) GOTO 480
      IF (ODELU*DELU.GE.0.D0.OR.DABS(U-OU).GE.DABS(DUMIN)) GOTO 460
      UX0 = OU
      DUMIN = U - OU
  460 CONTINUE
      IF (ODELV*DELV.GE.0.D0.OR.DABS(V-OV).GE.DABS(DVMIN)) GOTO 470
      VX0 = OV
      DVMIN = V - OV
  470 CONTINUE
  480 CONTINUE
  490 CONTINUE
      IF(DABS(DELU).GT..25D0) DELU=.25D0*DELU/DABS(DELU)
      IF(DABS(DELV).GT..25D0) DELV=.25D0*DELV/DABS(DELV)
      DU=DELU
      DV=DELV
      IF (I.EQ.1.OR.I.EQ.11) GOTO 540
C AITKEN DEL SQUARE ALGORITHM ---------------------------
C  USE SECANT TO EXTRAPOLATE/INTERPOLATE NEXT U & V
      DEN=ODELU-DELU
      IF (DABS(DEN).LE.1.D-20) GOTO 510
      RNUM=U-OU
      IF (DABS(RNUM).LE.1.D-20) GOTO 500
      RTU=RNUM/DEN
      IF(RTU.GT.1.D-12) DU=DELU*RTU
      IF(ODELU*DELU.LT.0.D0) DU=DU*.67D0
  500 CONTINUE
  510 CONTINUE
C
C CAL. NEW V
      DEN=ODELV-DELV
      IF (DABS(DEN).LE.1.D-20) GOTO 530
      RNUM=V-OV
      IF (DABS(RNUM).LE.1.D-20) GOTO 520
      RTV=RNUM/DEN
      IF(RTV.GT.1.D-12) DV=DELV*RTV
      IF(ODELV*DELV.LT.0.D0) DV=DV*.67D0
  520 CONTINUE
  530 CONTINUE
  540 CONTINUE
C
C UPDATE U & V AND LOOP BACK  ---------------------------------
      OU=U
      U=U+DU
      U2 = OU + DELU
      ODELU=DELU
      OV=V
      V=V+DV
      V2 = OV + DELV
      ODELV=DELV
C
C KEEP U & V WITHIN LIMITS ------------------------------------
      IF(U.LT.0.D0)U=0.D0
      IF(V.LT.0.D0)V=0.D0
      IF(U.GT.1.D0)U=1.D0
      IF(V.GT.1.D0)V=1.D0
      IF(U2.LT.0.D0)U2=0.D0
      IF(V2.LT.0.D0)V2=0.D0
      IF(U2.GT.1.D0)U2=1.D0
      IF(V2.GT.1.D0)V2=1.D0
C
C CONVERGENCE ?
      IF(DABS(U-USV).LT.1.D-10.AND.DABS(V-VSV).LT.1.D-10)GO TO 110
C
C    NO CHANGE IN U OR V, USE THIS POINT NORMAL
C WHICH IS BETTER, (U,V) OR (U2,V2) ?
      CALL CNSURF(U,V,BB(1,NS),SPVI,IIFLAG(1,NS),0)
      DD1=(PTA(1)-SPVI(1,1))**2+(PTA(2)-SPVI(2,1))**2
     *                         +(PTA(3)-SPVI(3,1))**2
      CALL CNSURF(U2,V2,BB(1,NS),SPVI,IIFLAG(1,NS),0)
      DD2=(PTA(1)-SPVI(1,1))**2+(PTA(2)-SPVI(2,1))**2
     *                         +(PTA(3)-SPVI(3,1))**2
      IF (DD2.GE.DD1) GOTO 550
      U = U2
      V = V2
  550 CONTINUE
  600 CONTINUE
C
C END OF LOOP WITH NO SOL., SCAN ENTIRE SURFACE
      IF(ISCAN.EQ.0) GOTO 15
C
C IF U OR V ON OR BEYOND SURFACE BOUNDARY AND THE ENTRY POINT
C  DROPPED TO THE SURFACE IS OUT OF BOUNDS BY MORE THAN 1.D-4,
C  GENERATE A NEGATIVE RETURN CODE TO INITIATE ENDUP.
C  EVALUATE POINT, AND DERIVATIVES ----------------------------------
  110 CALL CNSURF(U,V,BB(1,NS),SPVA,IIFLAG(1,NS),2)
      UTOL=1.D-4
      VTOL=UTOL
      IF(DABS(U-.5D0).GE..5D0.AND.DABS(D1).GT.UTOL) IRC=-1
      IF(DABS(V-.5D0).GE..5D0.AND.DABS(D2).GT.VTOL) IRC=-1
C
  999 RETURN
      END
