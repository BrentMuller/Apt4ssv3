**** SOURCE FILE : M0004614.V01   ***
*
      SUBROUTINE INTCON(PT,NPT,KS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C SS - ARELEM - COMMON
      COMMON/SSARLM/BB(64,4),UU(4),VV(4),
     *              IITOP(6,4,4),IIFLAG(4,4),IPNUM(4)
C
C   COMMON FOR 2 SURFACE INTERSECTION
      COMMON/INTCOM/IKEEP(255)
C   LAST THREE U,V PAIRS OF PS AND DS
      DOUBLE PRECISION UV(2,3,2)
      EQUIVALENCE (IKEEP(129),UV(1,1,1))
C   HISTORY OF UNIT NORMALS AT INTERSECTION POINTS ON PS AND DS
      DOUBLE PRECISION UN(3,3,2)
      EQUIVALENCE (IKEEP(165),UN(1,1,1))
C   POINT OF INTERSECTION
      DOUBLE PRECISION PXYZ(3)
      EQUIVALENCE (IKEEP(205),PXYZ(1))
C   OLD POINT OF INTERSECTION
      DOUBLE PRECISION OXYZ(3)
      EQUIVALENCE (IKEEP(211),OXYZ(1))
C   DS TANGENT PLANE
      DOUBLE PRECISION DTP(4)
      EQUIVALENCE (IKEEP(217),DTP(1))
C   PS TANGENT PLANE
      DOUBLE PRECISION PTP(4)
      EQUIVALENCE (IKEEP(225),PTP(1))
C   PLANE PERPENTICULAR TO INTERSECTION DIRECTION
      DOUBLE PRECISION CTP(4)
      EQUIVALENCE (IKEEP(233),CTP(1))
C   8 TIMES ABSOLUTE TOLERANCE
      DOUBLE PRECISION CK
      EQUIVALENCE (IKEEP(241),CK)
C   MAXIMUM STEP
      DOUBLE PRECISION STEPMX
      EQUIVALENCE (IKEEP(243),STEPMX)
C   STEP LENGTH
      DOUBLE PRECISION STEP
      EQUIVALENCE (IKEEP(245),STEP)
C   OLD STEP LENGTH
      DOUBLE PRECISION OSTEP
      EQUIVALENCE (IKEEP(247),OSTEP)
C   TRACE
CCCCC EQUIVALENCE (IKEEP(249),ITRACE)
C   INTERNAL POINT COUNT
      EQUIVALENCE (IKEEP(250),IPTKNT)
C   MAXIMUM NUMBER OF POINTS
      EQUIVALENCE (IKEEP(251),NPTS)
C   OUT OF BOUND SIGNAL FOR PS AND DS
      INTEGER ISFER(2)
      EQUIVALENCE (IKEEP(252),ISFER(1))
C   PATCH NUMBER FOR PS AND DS (SURFACE RECNO*1000 + PATCH NO)
      INTEGER IPNR(2)
      EQUIVALENCE (IKEEP(254),IPNR(1))
C
      DOUBLE PRECISION PT(9,1),PL(4)
      DOUBLE PRECISION PT0(3)
      LOGICAL LPLANE, LSKIP
C
C AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
C
C INITIAL STARTUP INFO.
C
CCCCC IF(ITRACE.EQ.1)
CCCCC*WRITE(6,1000)KS,PXYZ
C1000 FORMAT(' ***TRACE***INTCON-KS,START PXYZ=',I5,3G12.5)
      ISTATE = 1
      NBOUND = 0
      IPT=1
      NPT=0
      IPTKNT=NPTS
      IPTCK=IPTKNT-2
      HSTEP=STEPMX
C MAX. STEP = .25 FOR FIRST TWO POINTS:
      STEPMX=.25D0 * 25.4D0
      STMIN = 0.01D0 * 25.4D0
      IF (STEPMX.NE.0.D0) GOTO 50
      STEPMX = .25D0
      STMIN = .25D0
   50 CONTINUE
C
C SAVE INITIAL TANGENT FOR DETECTING LOOPAROUND TO START:
      PL(1)=CTP(1)
      PL(2)=CTP(2)
      PL(3)=CTP(3)
      PL(4)=CTP(1)*PXYZ(1) + CTP(2)*PXYZ(2) + CTP(3)*PXYZ(3)
      ICONT=1
      NDROP=-3
      STEP=0.D0
      OSTEP=STEP
      RADC=2000.D0
      DX=0.D0
      DY=0.D0
      DZ=0.D0
      ISTOUT=0
      CURVCK=CK*2.D0
      DIST = 0.D0
      LPLANE = .FALSE.
C IS S1 A PLANE?
      IF(IIFLAG(1,2).LE.0)LPLANE = .TRUE.
C
C PROCEED TO NEXT POINT; SAVE ALL CURRENT POSITIONS
  100 CONTINUE
C HISTORY OF UNIT NORMAL "UN":
      DO 110 I=1,3
      UN(I,3,1)=UN(I,2,1)
      UN(I,3,2)=UN(I,2,2)
      UN(I,2,1)=UN(I,1,1)
      UN(I,2,2)=UN(I,1,2)
  110 CONTINUE
C PREVIOUS TANGENT YABC & PREVIOUS INTERSECTION PT. PXYZ:
      OYA=CTP(1)
      OYB=CTP(2)
      OYC=CTP(3)
      OXYZ(1)=PXYZ(1)
      OXYZ(2)=PXYZ(2)
      OXYZ(3)=PXYZ(3)
C DISTANCE ALONG INTERSECTION:
      ODIST = DIST
C SHIFT U,V PARAMETERS FOR BOTH SURFACES WITHIN THE HISTORY TABLE
C  (LATEST U,V ARE STORED BY INTTPL):
      DO 114 I = 1,2
C STACK U HISTORY:
      UV(1,3,I) = UV(1,2,I)
      UV(1,2,I) = UV(1,1,I)
C STACK V HISTORY:
      UV(2,3,I) = UV(2,2,I)
  114 UV(2,2,I) = UV(2,1,I)
      ISFER(1)=0
      ISFER(2)=0
C AFTER FIRST TWO PTS. RESTORE MAX. STEP TO INPUT VALUE:
      IF(IPTCK.EQ.IPTKNT) STEPMX=HSTEP
C DECREMENT POINT COUNTDOWN COUNTER:
      IPTKNT=IPTKNT-1
      IF(IPTKNT.LE.0)GO TO 920
C IPAR = COUNTER OF RETRIES WHEN TANGENT PLANES ARE PARALLEL
      IPAR = 0
      LSKIP = .FALSE.
C
C CONTINUE ITERATING TO FIND A POINT:
  120 CONTINUE
C
C  EXTRAPOLATE NEXT POINT
C  ----------------------
      HX=OXYZ(1) + STEP*OYA
      HY=OXYZ(2) + STEP*OYB
      HZ=OXYZ(3) + STEP*OYC
      PXYZ(1)=HX + DX
      PXYZ(2)=HY + DY
      PXYZ(3)=HZ + DZ
C
  125 CONTINUE
C
C COMPUTE TANGENT PLANES
C ----------------------
C  COMPUTE SCALED DISTANCE ALONG INTERSECTION:
      DIST = ODIST + DSQRT((PXYZ(1)-OXYZ(1))**2
     *                   + (PXYZ(2)-OXYZ(2))**2 + (PXYZ(3)-OXYZ(3))**2)
C COMPUTE PLANE DTP, TANGENT TO DS
      CALL INTTPL(2,PXYZ,DTP,ISFER(2))
C COMPUTE PLANE PTP, TANGENT TO PS
      CALL INTTPL(1,PXYZ,PTP,ISFER(1))
C
C SAL = COS OF ANGLE BETWEEN PLANES:
      SAL=PTP(1)*DTP(1) + PTP(2)*DTP(2) + PTP(3)*DTP(3)
      CALSQ=1.D0-SAL*SAL
C
C ARE THE SURFACES PARALLEL?
      IF(CALSQ.GT.1.D-20)GO TO 260
C   ON FIRST PT., TRY ANYWAY:
      IF(KS.LT.0) GOTO 240
C TANGENT PLANES ARE PARALLEL; INCREASE STEP SIZE:
      STEP = STEP*1.7D0
      IPAR = IPAR + 1
C DON'T REDUCE STEP SIZE:
      IF(ISTATE.EQ.5)ISTATE=6
      IF(IPAR.LE.2)GO TO 120
      GOTO 920
  240 CALSQ=1.D-20
  260 CAL=DSQRT(CALSQ)*CTP(4)
C
C DS UNIT NORMALS
      UN(1,1,2)=DTP(1)
      UN(2,1,2)=DTP(2)
      UN(3,1,2)=DTP(3)
C PS UNIT NORMALS
      UN(1,1,1)=PTP(1)
      UN(2,1,1)=PTP(2)
      UN(3,1,1)=PTP(3)
C COMPUTE UNIT TANGENT VECTOR YABC:
      CTP(1)=(DTP(2)*PTP(3)-PTP(2)*DTP(3))/CAL
      CTP(2)=(DTP(3)*PTP(1)-PTP(3)*DTP(1))/CAL
      CTP(3)=(DTP(1)*PTP(2)-PTP(1)*DTP(2))/CAL
C HCO = COS OF ANGLE BETWEEN THIS TANGENT & PREVIOUS ONE:
      HCO=CTP(1)*OYA + CTP(2)*OYB + CTP(3)*OYC
C MAKE SURE CTP HAS NOT REVERSED:
      IF(HCO.GE.-.9D0)GO TO 270
      CTP(1) = -CTP(1)
      CTP(2) = -CTP(2)
      CTP(3) = -CTP(3)
      CTP(4) = -CTP(4)
      HCO = -HCO
C
C PROJECT EXTRAPOLATED POINT ONTO INTERSECTION OF TANGENT PLANES:
C ---------------------------------------------------------------
  270 D1=(PTP(4)-SAL*DTP(4))/CALSQ
      D2=DTP(4)-SAL*D1
      D3=CTP(1)*PXYZ(1) + CTP(2)*PXYZ(2) + CTP(3)*PXYZ(3)
      PXYZ(1)=PTP(1)*D1 + DTP(1)*D2 + CTP(1)*D3
      PXYZ(2)=PTP(2)*D1 + DTP(2)*D2 + CTP(2)*D3
      PXYZ(3)=PTP(3)*D1 + DTP(3)*D2 + CTP(3)*D3
C
C IF START UP (KS=-1), SAVE PT. & EXIT:
      IF(KS.LT.0) GOTO 540
C
C TEST FOR BOUNDARY, IF APPROPRIATE:
C ----------------------------------
C STILL WITHIN BOUNDS?
  280 IF(ISFER(1).EQ.0.AND.ISFER(2).EQ.0)GO TO 290
      IF(ISTATE.EQ.8.OR.ISTATE.EQ.10)GO TO 290
C NO; CUT STEP SIZE AND TRY FOR MORE POINTS:
      NBOUND = NBOUND + 1
      IF(ISTATE.LT.6.OR.ISTATE.EQ.9)ISTATE = 6
      ISTATE = ISTATE + 1
      STEP = STEP/10.D0
      IF(DABS(STEP).LT.STMIN)STEP = STMIN
      OSTEP = STEP
      IF(ISTATE.LT.8)GO TO 120
  290 CONTINUE
C
C BRANCH TO THE STEP CONTROL LOGIC:
C ---------------------------------
      GO TO (300,300,310,400,320,350,350,500,540,540),ISTATE
  300 STEP=0.D0
      ISTATE = ISTATE + 1
      GOTO 120
  310 STEP=STMIN
      ISTATE = 4
      GOTO 120
C
C DECREASE STEP SIZE UNLESS BEND IN INTERSECTION IS NEGLIGIBLE
C  AND TRY AGAIN WITH SAME POINT.
C -------------------------------
C  CHECK CHORDAL TOLERANCE
  320 NDROP=NDROP+1
      IF(NDROP.GE.0)ISTATE = 6
C CHECK CURVATURE FIRST
      CO=DABS(HCO)
      IF(CO.GT..999999997D0) GOTO 325
      SI=DSQRT(1.D0-CO*CO)
      FAC=SI*STEP/CURVCK
      IF(CO.LT..707D0) FAC=100.D0
      GOTO 326
C
C IF HERE, RADC IS CLOSE TO BEING STRAIGHT LINE, CHECK DROP
  325 D1=PXYZ(1)-OXYZ(1)
      D2=PXYZ(2)-OXYZ(2)
      D3=PXYZ(3)-OXYZ(3)
      SEC=DSQRT(D1*D1 + D2*D2 + D3*D3)
      IF(SEC.EQ.0.D0) SEC=1.D0
      D1=D1/SEC
      D2=D2/SEC
      D3=D3/SEC
      CO=DABS(D1*OYA + D2*OYB + D3*OYC)
      IF(CO.GT..9999999D0) GOTO 350
      SI=DSQRT(1.D0-CO*CO)
      FAC=SEC*SI/CK
  326 IF(FAC.LT.1.1D0) GOTO 350
C SCALE DOWN STEP SIZE:
      STEP=STEP/DSQRT(FAC)
C
C LOAD OLD UV FOR STEP FIX POINT ON SURFACE
      DO 340 J=1,2
      DO 340 I=1,3,2
      UV(1,I,J)=UV(1,2,J)
      UV(2,I,J)=UV(2,2,J)
  340 CONTINUE
      GOTO 120
C
C COMPUTE CORRECTION DX & STEP SIZE FOR NEXT POINT:
C -------------------------------------------------
  350 CONTINUE
      NDROP=-3
C IF NOT AT EDGE, ITERATE ON NEXT POINT:
      IF(ISTATE.EQ.6)ISTATE = 5
      DX=PXYZ(1)-HX
      DY=PXYZ(2)-HY
      DZ=PXYZ(3)-HZ
C
      IF(ISTOUT.NE.0) GOTO 400
      ISTOUT=1
      GOTO 120
C
C EXTRAPOLATE STEP SIZE FOR NEXT PXYZ
C -----------------------------------
  400 IF(CTP(1)**2 + CTP(2)**2 + CTP(3)**2.LT.1.D-10) GOTO 920
C
      OSTEP=DABS(STEP)
      IF(NBOUND.EQ.2)GO TO 540
      ORC=RADC
C COMPUTE STEP SIZE:
      D1=1.D0-HCO*HCO
      IF(D1-2.D-9) 410,410,420
C USE MAXIMUM STEP SIZE:
  410 STEP=STEPMX
      RADC=2000.D0
      GOTO 430
  420 SI=DSQRT(D1)
C
      IF(STEP.GT..001D0) RADC=DABS(STEP/SI)
      IF(ISTATE.EQ.4) ORC=RADC
C
C EXTRAP ONLY WHEN ORC & RADC IS REASONABLE
      RFAC=ORC/RADC
      IF(RFAC.GT.1.9D0.OR.RFAC.LT..55D0) ORC=RADC
      RCNEXT=2.D0*RADC-ORC
      IF(RCNEXT.LT..015D0) RCNEXT=.015D0
      STEP=DSQRT(CK*2.D0*RCNEXT)
      IF(STEP.LT..011D0) STEP=.011D0
C
C IF RAD. CURV. SMALL, REDUCE DXYZ CORRECTIONS
      IF(RADC.GT..1D0) GOTO 430
      RFAC=RADC*10.0D0
      DX=DX*RFAC
      DY=DY*RFAC
      DZ=DZ*RFAC
  430 CONTINUE
      IF(STEP.GT.STEPMX) STEP=STEPMX
C
      IF(OSTEP-.011D0) 460,460,450
  450 STEP2=OSTEP*1.5D0
      IF(STEP.GT.STEP2) STEP=STEP2
  460 CONTINUE
C GO TO NEXT POINT UNLESS 4TH ITERATION ON 1ST POINT:
      IF(ISTATE.GT.4)GO TO 530
      ISTATE = 5
      GO TO 120
C
C AT EDGE; SOLVE FOR BOUNDARY POINT:
C ----------------------------------
  500 IF(ISFER(1).NE.0) CALL INTBND(1,ISFER(1))
      IF(ISFER(2).NE.0) CALL INTBND(2,ISFER(2))
      ISTATE = 10
C SET IPTKNT FOR NORMAL RETURN:
      IPTKNT = -1
      GO TO 125
C
C STORE THE OUTPUT DATA
C ---------------------
C  IF BEND IN INTERSECTION > 100 DEG., EXIT:
  530 IF(HCO+.174D0) 920,920,540
C
C OUT OF BOUNDS?
  540 IF(ISFER(1).LT.0.OR.ISFER(2).LT.0)GO TO 920
C ACCUMULATE THE LENGTH ALONG INTERSECTION ***
      DIST = ODIST + DSQRT((PXYZ(1)-OXYZ(1))**2
     *                   + (PXYZ(2)-OXYZ(2))**2 + (PXYZ(3)-OXYZ(3))**2)
      IF (KS.NE.0) GOTO 510
      IF(IPT.GE.NPTS) GOTO 920
      IPT=IPT+1
  510 CONTINUE
C STORE  THE INTERSECTION PT
      PT(1,IPT)=PXYZ(1)
      PT(2,IPT)=PXYZ(2)
      PT(3,IPT)=PXYZ(3)
      IF (NPT.NE.0) GOTO 550
C SAVE THE START PT
      PT0(1) = PXYZ(1)
      PT0(2) = PXYZ(2)
      PT0(3) = PXYZ(3)
  550 CONTINUE
      IF (ISTATE.GE.10) GOTO 700
C
C CHECK FOR LOOPAROUND TO START (CLOSED SURFACE)
C ----------------------------------------------
C  HAS TANGENT VECTOR GONE NEGATIVE?
      IF (ICONT.NE.1) GOTO 560
      CS=PL(1)*CTP(1) + PL(2)*CTP(2) + PL(3)*CTP(3)
      IF(CS.LT.-.707D0) ICONT=-1
      GOTO 650
  560 CONTINUE
      IF (ICONT.NE.-1) GOTO 570
C HAS TANGENT VECTOR GONE NEGATIVE & BACK TO POSITIVE?
C  IF CS GOES POSITIVE, BEGIN CHECKS
      CS=PL(1)*CTP(1) + PL(2)*CTP(2) + PL(3)*CTP(3)
      IF(CS.GT..707D0) ICONT=0
      GOTO 650
  570 CONTINUE
C BACK TO START POSITION?
C  CONTINOUS CUT FLAG IS ON, CHECK CURRENT POSITION
      D1=PL(1)*PXYZ(1) + PL(2)*PXYZ(2) + PL(3)*PXYZ(3) - PL(4)
      IF(D1.LT.0.D0)GO TO 620
C
C PASSED START POSITION, CHECK DISTANCE FROM CURRENT POSITION
C  TO START POINT.
      DX1=PXYZ(1)-PT0(1)
      DY1=PXYZ(2)-PT0(2)
      DZ1=PXYZ(3)-PT0(3)
      D1=DABS(CTP(1)*DX1 + CTP(2)*DY1 + CTP(3)*DZ1)
      IF(D1.GT.3.D0*OSTEP) GOTO 620
      D1=DSQRT(DX1**2 + DY1**2 + DZ1**2)
      IF(D1.LT..01D0) GOTO 605
      CO=CTP(1)*DX1/D1 + CTP(2)*DY1/D1 + CTP(3)*DZ1/D1
      IF(DABS(CO).GT..9999999D0) GOTO 605
      SI=DSQRT(1.D0-CO*CO)
      IF(D1*SI/CK.GT.1.2D0) GOTO 620
C
C LOAD START POINT HERE & SET EXIT FLAG
  605 IPTKNT=-1
      ISTATE = 11
      IF (KS.NE.0) GOTO 640
C
C SET LAST POSITION DATA TO FIRST POSITION DATA
      DO 630 I=1,3
      PT(I,IPT)=PT(I,1)
      PT(I+3,IPT)=PT(I+3,1)
      PT(I+6,IPT)=PT(I+6,1)
  630 CONTINUE
      GO TO 920
  640 CONTINUE
  650 CONTINUE
  700 CONTINUE
  620 CONTINUE
      IF (KS.NE.0 .AND. ISTATE.LE.9 .AND. NPT.NE.0) GOTO 720
C STORE PT, NORMAL & TANGENT ...
C  TZCK = PXYZ(1)*DTP(1) + PXYZ(2)*DTP(2) + PXYZ(3)*DTP(3) - DTP(4)
C  TXCK = PXYZ(1)*PTP(1) + PXYZ(2)*PTP(2) + PXYZ(3)*PTP(3) - PTP(4)
C   COMPUTE PLANE DTP, TANGENT TO DS
      CALL INTTPL(2,PXYZ,DTP,ISFER(2))
C COMPUTE PLANE PTP, TANGENT TO PS
      CALL INTTPL(1,PXYZ,PTP,ISFER(1))
C SAL = COS OF ANGLE BETWEEN PLANES:
      SAL=PTP(1)*DTP(1) + PTP(2)*DTP(2) + PTP(3)*DTP(3)
      CALSQ=1.D0-SAL*SAL
      IF(CALSQ.LT.1.D-20)CALSQ = 1.D-20
      CAL=DSQRT(CALSQ)*CTP(4)
C COMPUTE UNIT TANGENT VECTOR YABC:
      CTP(1)=(DTP(2)*PTP(3)-PTP(2)*DTP(3))/CAL
      CTP(2)=(DTP(3)*PTP(1)-PTP(3)*DTP(1))/CAL
      CTP(3)=(DTP(1)*PTP(2)-PTP(1)*DTP(2))/CAL
      PT(4,IPT)=UV(1,1,2)
      PT(5,IPT)=UV(2,1,2)
      PT(6,IPT)=IPNR(2)
      PT(7,IPT)=UV(1,1,1)
      PT(8,IPT)=UV(2,1,1)
      PT(9,IPT)=IPNR(1)
  720 CONTINUE
      NPT = NPT+1
C START PT. ONLY?
      IF(KS.LT.0)GO TO 920
C IF OUTSIDE EDGE, QUIT; IF INTERPATCH BOUNDARY, CONTINUE:
      IF(ISTATE.EQ.10)GO TO 920
      IF(ISTATE.EQ.9)ISTATE = 5
C GO FOR ANOTHER PT. IF NOT AT EDGE OR BACK AT START:
      IF(ISTATE.LT.10)GO TO 100
C
C RETURN THE LENGTH ALONG INTERSECTION
C ------------------------------------
  920 CONTINUE
      IF(KS.EQ.0) NPT=IPT
      STEPMX=HSTEP
C
      RETURN
      END
