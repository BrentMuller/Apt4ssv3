*
      SUBROUTINE TULPOS(R,SIDE,DR,TUL,PTHICK,TOLCOM,IPTOOL,IDTOOL,
     X                  TE, TA,TBEF,PDIR)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
C-- R     INPUT SURFACE CONTACT POINT/DERIVATIVES(SEE CNSURF)
C-- SIDE  INPUT 1 OR -1, DEFINES CUTTER SIDE OF SURFACE
C-- DR    DRIVE ELEMENT POINT/DERIVATIVES(SEE DGEOM)
C-- TUL   CUTTER PARAMETERS
C-- PTHICK PART GEOMETRY THICK SPECIFICATION
C-- TOLCOM TOLERANCE BAND COMPENSATION
C-- IPTOOL PART SURFACE CONTROL FLAG( 0 FOR ON, 1 FOR TO)
C-- IDTOOL DRIVE ELEMENT CONTROL FLAG
C-- TE   OUTPUT TOOL END
C-- TA   OUTPUT TOOL AXIS
C-- TBEF OUTPUT EFFECTIVE TOOL END BASED ON SPHERICAL CUTTER
C-- PDIR DIRECTION OF MOTION WRT INCREASING PARAMETER (+1 OR -1)
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM
      DIMENSION VEC(3)
C--PURPOSE IS TO COMPUTE TOOL END AND TOOL AXIS WHEN AN A
C--ACCEPTABLE SURFACE CONTACT POINT HAS BEEN FOUND
      DIMENSION R(32),DR(36),TUL(4),TE(3),TA(3),TBEF(3)
      CHARACTER*20 BADMSG
      CHARACTER*120 DARRAY
      DIMENSION VECL(3),V(3),VN(3)
      DOUBLE PRECISION NPS
      DIMENSION FWD(3),NPS(3),ROLL(3),PITCH(3)
C--TOOL CANONICAL DATA
      INCLUDE (TLLDAT)
C--TOOL AXIS CONTROL DATA
      INCLUDE (TAC)
C--INITIALZE VECL AND FIRST CALL FLAG
      LOGICAL LFIRST
C--SAVE LAST DIRECTION FROM SP TOWARDS TOOL AXIS,AND FLAG LFIRST
      SAVE VECL,LFIRST
C
      DATA VECL/3*0.D0/,LFIRST/.TRUE./
C
C--FOR FIRST CALL (LFIRST=.TRUE.) SET VECL TO REV. MOTION DIRECTION
      IF (LFIRST) THEN
        DO 5 I=1,3
          VECL(I)=-1.0*PDIR*DR(12+I)
   5    CONTINUE
        LFIRST=.FALSE.
      ENDIF
C.... IF TOOL AXIS CONTROL WRT PS - COMPUTE LOCAL PITCH AND ROLL AXES
      IF (ITAC.EQ.2) THEN
C.... GUIDE SURFACE FORWARD DIRECTION - PDIR*(DRIVE TANGENT VECTOR)
        CALL VSCALE(PDIR,DR(13),FWD)
C.... CUTTER SIDE OF PART SURFACE
        CALL VSCALE(SIDE,R(29),NPS)
C.... COMPUTE UNIT VECTOR PERPENDICULAR TO GUIDE SURFACE FORWARD AND
C     PROJECTION VECTORS
        CALL CROSSV(FWD,DR(21),V)
C.... COMPUTE LOCAL FORWARD MOTION DIRECTION IN PS TANGENT PLANE
C           (ROLL AXIS)
       CALL CROSSV(NPS,V,ROLL)
C.... COMPUTE LOCAL AXIS ORTHOGONAL WITH ROLL AXIS AND PS NORMAL
C           (PITCH AXIS)
        CALL CROSSV(NPS,ROLL,PITCH)
C.... DETERMINE DIRECTION IN WHICH ROLL ANGLE IS TO BE APPLIED
C     POSITIVE IN STEPOVER DIRECTION
        CALL DOTV(SGN,PITCH,DR(29))
        SGN=SIGN(1.D0,SGN)
      ENDIF
C-- TWO MAIN CASES, TOOL ON PS OR NOT ON.
      IF(IPTOOL.NE.0) GO TO 50
C--GENERAL CASE, TOOL OFFSET FROM SURFACE
      OFFSET=SIDE*(PTHICK+TOLCOM+TUL(1))
      DO 10 I=1,3
       IF (ITAC.EQ.1) THEN
C.... APPLY CUTANG BETA TO TA IN DIRECTION OF MOTION
        TA(I)=COSB*DR(16+I) + PDIR*SINB*DR(12+I)
       ELSE IF (ITAC.EQ.2) THEN
C.... APPLY BETA WRT TO PS NORMAL IN MOTION DIRECTION
C     AND ALPHA IN PLANE PERPENDICULAR TO MOTION DIRECTION
        TA(I)=COSA*COSB*NPS(I) + SINB*ROLL(I)
     +       + SGN*SINA*COSB*PITCH(I)
       ELSE
        TA(I)=DR(16+I)
       ENDIF
       TBEF(I)=R(I)+OFFSET*R(I+28)-TUL(1)*TA(I)
   10 CONTINUE
C--GENERAL CUTTER CALCULATION.
      CALL CROSS(TA,R(29),VEC)
C...IF TA IS PARALLEL TO SN USE PREVIOUS VALUE OF VEC INSTEAD OF SN
      VLEN2=VEC(1)*VEC(1)+VEC(2)*VEC(2)+VEC(3)*VEC(3)
      IF (VLEN2.LT.1.0D-12) THEN
        CALL CROSS(TA,VECL,VEC)
      ENDIF
      DO 20 I=1,3
   20 VEC(I)=SIDE*VEC(I)
      CALL CROSS(VEC,TA,VEC)
      CALL VNORM(VEC,VEC)
C...MODIFY OFFSET FOR 7 SEGMENT CUTTER CALCULATION
      OFFSET=OFFSET-SIDE*TUL(1)
        DO 32 I=1,3
         VECL(I)=VEC(I)
   32   CONTINUE
C...COMPUTE TANGENT OF ANGLE BETWEEN TOOL NORMAL AND TOOL RADIAL AXIS
      CALL DOTV(CANG,VEC,R(29))
      CALL CROSS(VEC,R(29),V)
      CALL VNORM(V,VN)
      CALL DOTV(SANG,V,VN)
      IF (ABS(CANG).GT.1.D-15) THEN
        TANG=SANG/CANG
      ELSE
        TANG=SIGN(1.D0,SANG)*1.D15
      ENDIF
C...IS ANGLE VALID FOR SEGMENTS 3,4,5 OF CUTTER
C   I.E. CORNER RADIUS AND ADJACENT POINT CIRCLE SEGMENTS
      DO 35 I=3,5
        IF ((TCONT(I).GT.0).AND.
     1     ((TANG-TANLO(I))*(TANG-TANHI(I)).LE.0.D0)) THEN
C...COMPUTE TOOL END COORDS
          DO 34 K=1,3
            TE(K)=R(K)+(OFFSET+SIDE*CORRAD(I))*R(28+K)
     1           +RI(I)*VEC(K)-TLHITE(I)*TA(K)
   34     CONTINUE
          GOTO 999
        ENDIF
   35 CONTINUE
C...NO - IS ANGLE VALID FOR TOOL TIP
      IF ( (TCONT(1).GT.0).AND.
     1   ( (TANG-TANLO(1))*(TANG-TANHI(1)).LE.0.D0) ) THEN
C...YES - OUTPUT WARNING
        CALL CFORM(' *** WARNING - CUTTING ON TOOL TIP ***',DARRAY,1,38)
        CALL CPRINT(DARRAY)
        DO 40 K=1,3
          TE(K)=R(K)+OFFSET*R(28+K)
   40   CONTINUE
C...NO - IS ANGLE VALID FOR TOP OF UPPER LINE SEGMENT
      ELSE IF ( (TCONT(7).GT.0).AND.
     1        ( (TANG-TANLO(7))*(TANG-TANHI(7)).LE.0.D0) ) THEN
C...YES - OUTPUT WARNING
        CALL CFORM(' *** WARNING - CUTTING ON POINT CIRCLE AT TOP OF UPP
     1ER LINE SEGMENT ***',DARRAY,1,71)
        CALL CPRINT(DARRAY)
        DO 42 K=1,3
          TE(K)=R(K)+OFFSET*R(28+K)+RI(7)*VEC(K)-TLHITE(7)*TA(K)
   42   CONTINUE
C...NO - INVALID ANGLE FOR THIS CUTTER
      ELSE
        CALL CFORM(' *** WARNING - UNABLE TO POSITION 7 SEGMENT CUTTER A
     1T CURRENT SURFACE POINT - SPHERICAL CUTTER ASSUMED',DARRAY,1,101)
        CALL CPRINT(DARRAY)
C
        DO 45 K=1,3
          TE(K)=TBEF(K)
   45   CONTINUE
      ENDIF
C...PRINT USEFUL DIAGNOSTIC INFORMATION WHEN WARNINGS OCCUR
      CALL BAD(3,1,'SP  ',R(1))
      CALL BAD(-3,1,'SN  ',R(29))
      CALL BAD(3,1,'TE  ',TE)
      CALL BAD(-3,1,'TA  ',TA)
      CALL BAD(3,1,'VEC ',VEC)
      CALL BAD(-3,1,'VECL',VECL)
      CALL BAD(-1,1,'TANG',TANG)
      GO TO 999
   50 CONTINUE
C--TOOL TIP ON PART SURFACE
      DO 60 I=1,3
       IF (ITAC.EQ.1) THEN
C.... APPLY CUTANG BETA TO TA IN DIRECTION OF MOTION
        TA(I)=COSB*DR(16+I) + PDIR*SINB*DR(12+I)
       ELSE
        TA(I)=DR(16+I)
       ENDIF
      TE(I)=R(I)+SIDE*TOLCOM*R(I+28)
      TBEF(I)=TE(I)
   60 CONTINUE
C
  999 CONTINUE
      IF(IBUG.NE.11) GO TO 1999
      CALL BAD(-1,0,' ',0)
      BADMSG=' AFTER TULPOS'
      CALL CPRINT(BADMSG)
      CALL BAD(-1,1,'TCOM',TOLCOM)
      CALL BAD(3,1,'TE  ',TE)
      CALL BAD(-3,1,'TA  ',TA)
      CALL BAD(-3,1,'TBEF',TBEF)
 1999 CONTINUE
C
      RETURN
      END
