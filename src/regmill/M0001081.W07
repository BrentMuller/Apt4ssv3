*
      SUBROUTINE SSPATH( DSURF, IDTYPE,   PDIR,   DTOL,  DSTEP, DOFSET,
     X                  PLIM, IDTOOL, IDAXIS,  DAXIS, ITLDIR,
     X             TLDIR, PSURF, PSIDE, PTHICK,  PTOLI,  PTOLO, IPTOOL,
     X                   TUL,    UST,    VST, SCALHT, STEPOV, STEPMX,
     X                AMAXDP,  ELMAX,  MAXCL, ICLSKP, IQUAL,
     X                    TE,     TA,     TD,   PAR,    IRR)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM
C--PURPOSE IS TO MOVE CUTTER IN CONTACT WITH DRIVE CURVE
C--DSURF WHILE SIMULTANEOUSLY MOVING IN CONTACT WITH PART
C--SURFACE PSURF.  THE WEALTH OF INPUT PARAMETERS ARE FOR
C--CONTROLLING THE RANGE , STEPOUT AND AXIS OF THE CUTTER
C--INPUT PARAMETERS ARE DESCRIBED BELOW
C--DSURF CANONICAL FORM DEFINING THE DRIVE GEOMETRY(CURVE OR SURF)
C--IDTYPE TYPE OF DSURF  =0 SCURV, =1 MESH SURF U LINE CONTROL
C--       =2 MESH SURFACE CRSSPL CONTROL
C--PDIR   =1 OR -1 SETS THE DIRECTION OF PATH MOTION AS INCREASING
C--       PARAMETER DIRECTION OR OPPOSITE
C--DTOL   TOLERANCE TO BE MAINTAINED OF DRIVE CURVE
C--DSTEP  IF=0. IT IS IGNORED
C--       IF POSITIVE DPARAM STEP IS THE MAXIMUM PARAM STEP LENGTH ON CU
C--       IF NEGATIVE, DSTEP IS A FIXED PARAMETER INCREMENT ALONG
C--       DRIVE CURVE.  ITT OVERIDES ALL TOL AND STEP SPECS.
C--DOFSET IS A FIXED DISTANCE TO DROP THE CUTTER TIP PAST THE
C--       DRIVE POINT ALONG THE TOOL AXIS PRIOR TO A PROJECTION
C--       THE PART SURFACE.  IT IS APPICABLE IN MULTI AXIS WORK.
C--PLIM  1 AND 2 ARE THE LOWER AND UPPER LIMITS OF THE U PARAMETER
C--      OF THE DRIVE GEOMETRY.  3 AND 4 ARE THE LIMITS OF THE
C--      V PARAMETER(CRSSPL) OF THE DRIVE GEOMETRY( IF IT IS A
C--      MESH STRUCTURED SCULPTURED SURFACE)
C--IDTOOL IS 0 FOR ON TOOL CONTROL(CUTTER AXIS THRU CURVE)
C--       IS 1 FOR AT TOOL CONTROL(CUTTER OFFSET FROM POINT
C--       WHERE TOOL AXIS PIERCES SURFACE.
C--IDAXIS IS 0 FOR FIXED TOOL AXIS, TOOL AXIS IN DAXIS ARRAY
C--       IS 1 FOR VARIABLE AXIS.  AXIS COMES FROM SURFACE NORMAL
C--       OR FROM SCURV CRSSPL. SIGN OF IDAXIS ORIENTS THIS VECTOR
C--       PROPERLY.
C--DAXIS CONTAINS FIXED PERMANENT AXIS FOR TOOL IF FIXED
C--ITLDIR 0 IF TOOL IS PROJECTED IN FIXED DIRECTION TO PART SURF
C--       1 OR -1 IF TOOL IS PROJECTEDACCORDING TO VARIABLE
C--       VECTOR FROM DRIVE GEOMETRY.
C--TLDIR  IS THE VECTOR WHICH HOLDS THE FIXED TOOL DIRECTION
C--       WHEN ITLDIR IS 0.
C--PSURF  CANON FORM OF PART SURFACE.
C--       THIS IS A SLOPE CONTINUOUS SCULPTURED SURFACE
C--PSIDE  1 OR -1 TO ADJUST SURFACE NORMAL( RU X RV ) TO POINT
C--       TOWARD TOOL OPERATING SIDE OF SURFACE.
C--PTHICK THICKNESS OFFSET FROM SURFACE
C--PTOLI,PTOLO INSIDE/OUTSIDE TOLERANCE(TOOL SIDE IS INSIDE)
C--IPTOOL =0 TOOL IS TO PART SURFACE
C--       =1 TOOL TIP IS ON SURFACE
C--TUL  TOOL DESCRIPTION.  PRESENTLY TUL(1)=RADIUS OF BALL CUTTER.
C--SCALHT IF NOT ZERO, IS THE MAXIMUM ALLOWABLE SCALLOP HEIGHT
C--STEPOV IS THE MAXIMUM PARAMETRIC STEPOVER(OUTPUT) TO ACHIEVE
C--THE SCALLOP HEIGHT SPECIFIED.
C--STEPMX IS THE MAXIMUM STEPOVER DISTANCE ALLOWED.  IF NEGATIVE
C--     IT IS THE ACTUAL PARAMETRIC STEPOVER VALUE
C--AMAXDP IS THE MAXIMUM TOOL STEPOUT ALLOWED
C--ELMAX IS THE MAXIMUM PATH LENGTH WHICH CAN BE GENERATED BY
C--      A SINGLE CALL TO THE SSPATH ROUTINE
C--MAXCL IS THE MAXIMUM NUMBER OF CL POINTS TO BE GENERATED IN PATH
C--ICLSKP NEGATIVE MEANS GENERATE NO CL DATA THRU CLPUT
C--       ZERO MEANS GENERATE ALL CLDATA
C--       POSITIVE MEANS GENERATE ALL CLDATA EXCEPT THE FIRST POINT
C--IQUAL IS A QUALITY CONTROL OPTION TO EXACTLY TOUCH THE SURFACE
C--       AS OPPOSED TO PLACING WITHIN TOLERANCE SHELL OF LEAST
C--       CURVATURE
C--OUTPUT
C--TE,TA,TD LAST GOOD TOOL END,AXIS AND DIRECTION OF PROJECTION
C--PAR  LAST PARAMETRIC VALUES ON THE DRIVE GEOMETRY
C--IRR  ERROR FLAG. NON ZERO ON RETURN FROM SSPATH IF ERROR OCCURS
C
      DIMENSION DSURF(*),PSURF(*),TUL(*),DAXIS(*),TLDIR(*)
      DIMENSION PLIM(4)
      DIMENSION DR(36),R(32),RL(32),RX(32),RXL(32)
      DIMENSION RVEC(3),PAR(2),FWD(3)
      DIMENSION RDIF(3),TE(3),TEL(3),TAL(3),TA(3),TEX(3),TAX(3)
      DIMENSION TC(3),TD(3),TBEF(3),TBEFL(3),TBEFX(3)
      CHARACTER*20 BADMSG
C
C---      AKMXMN THE LARGEST POSITIVE AND NEGATIVE CURVATURES
C---      IN THIS CALL TO SSPATH
C---      AKDRV(2,2) THE DRIVE SURFACE PARAMETERS WHERE THEY OCCURRED
C---      AKPRT(2,2) THE PART SURFACE PARAMETERS WHERE THEY OCCURRED
      DIMENSION AKMXMN(2),AKDRV(2,2),AKPRT(3,2)
C
      INCLUDE (DARRAY)
      INCLUDE (RMFLGS)
      INCLUDE (TAC)
C.... LRET - INTERFERENCE FLAG = .TRUE. IF TOOL PENETRATES PS
C.... LARET - AVOIDANCE FLAG = .TRUE. IF INTEFERENCE AVOIDED
      LOGICAL LRET,LARET
C.... INTLOC - LOCATION IN INTERFERENCE TABLE OF WORST PENETRATION
      INTEGER INTLOC
C
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-38/
      DATA BIG/1.0D+10/
      DATA HALF/0.5D0/,ZEM5/0.00001D0/
      DATA ISEQLS,KPATH/0,0/
C
      IF(IBUG.EQ.11) THEN
        CALL BAD(-1,0,' ',0)
        BADMSG=' ENTRY TO SSPATH '
        CALL CPRINT(BADMSG)
      ELSE
        GO TO 1997
      END IF
      ASSIGN 1997 TO IRET
      GO TO 1999
 1997 CONTINUE
C---      COUNT OF PATH CALLS
      CALL RECORD(ISEQNO)
      IF(ISEQNO.NE.ISEQLS) KPATH=0
      KPATH=KPATH+1
      IPASS=1
C---TE,TA,TD ARE THE CURRENT TOOL END ,AXIS, AND DIRECTION
C---IF PATH IS SUCCESSFUL THEY RECORD THE LAST GOOD CL VALUES
C---ON RETURN TO THE CALLING ROUTINE.
C---NOTE THAT TBEF(TOOL-BALL END-EFFECTIVE) IS A SIMULATED BALL
C---CUTTER AT THE CORNER EDGE OF A GENERAL CUTTER.  THIS PROVIDES
C---THE CAPABILITY FOR A GENERAL APT CUTTER ALTHOUGH SSPATH HAS
C---BEEN IMPLEMENTED ONLY AS A BALL CUTTER ALGORITHM.
      DO 5 I=1,3
      TE(I)=ZERO
      TA(I)=ZERO
      TD(I)=ZERO
      TBEF(I)=ZERO
    5 CONTINUE
C--SET INITIAL PARAMETER VALUES
      PAR(1)=UST
      PAR(2)=VST
      MOD=-121
      CALL CHKSET(IDTYPE,PDIR,PLIM,MOD)
C--RADIUS OF BALL CUTTER
      BALRAD=TUL(1)
C--EFFECTIVE RADIUS FOR OFFSET OF TOOL CENTER
      EFRAD=BALRAD+PTHICK
C--EFFECTIVE RADIUS FOR PROJECTING DRIVE POINT TO PART SURFACE
      DRAD=EFRAD
      IF(IPTOOL.EQ.1.OR.IDTOOL.EQ.1) DRAD=PTHICK
C--TOOL AND PART SURFACE CONTACT PARAMETERS
      DIST=ZERO
      UP=HALF
      VP=HALF
      NPAT=1
      MXSTEP=20
C--STEPOUT RETRY COUNT AND TOTAL CL POINTS
      ISTEPK=0
      ICLCT=0
C--CURRENT PATH LENGTH(NOT TO EXCEED ELMAX)
      PLEN=ZERO
C--STEP OUT REDUCTION FACTORS FOR RETRIES
      STEPM=ONE
      FAC=0.75
C--SUGGESTED PARAMETRIC STEPOVER
      STEPOV=BIG
C--TOLERANCE BAND PREPARATION
      TOLMID=ZERO
      TOLRNG=ZERO
      IF(IQUAL.NE.0) GO TO 10
C--MID TOLERANCE BAND FROM SURFACE AND TOLERANCE RANGE
      TOLMID=(PTOLO-PTOLI)*HALF
      TOLRNG=(PTOLI+PTOLO)*0.45
      PTOL=(PTOLI+PTOLO)*0.9
      GO TO 20
   10 CONTINUE
C--FOR INSPECTION PURPOSES, TOOL MAY REST ON OR TOUCH SURFACE
      TOLMID=ZERO
      TOLRNG=ZERO
      PTOL=1.8*DMIN1(PTOLI,PTOLO)
   20 CONTINUE
C--TOLERANCE FOR SURFACE CALCULATION
C--IFIN IS SET TO NON ZERO WHEN PROCESSING THE LAST POINT
      IFIN=0
      TOL=PTOL*0.2
C--EMAX IS MAXIMUM STEP SIZE BASED ON THE PREVIOUS CUT VECTOR
      EMAX=BIG
C---    INITIAL STEPOUT VALUES
      SSTEP=BIG
      TSTEP=BIG
      XSTEP=BIG
C--SET INDEX FOR MOVING PARAMETRIC VALUES
      INDEX=1
      IF(IDTYPE.EQ.2) INDEX=2
      PARNSV=SMAL
C---      INITIALIZE VALUES FOR WORST CURVATURE ACCOUNTING
      DO 50 I=1,2
      DO 51 J=1,2
      AKDRV(I,J)=ZERO
      AKPRT(I,J)=ZERO
   51 CONTINUE
      AKPRT(3,I)=ZERO
   50 CONTINUE
      AKMXMN(1)=ZEM5
      AKMXMN(2)=-AKMXMN(1)
C---      SET FLAG FOR MODE TO SKIP SURFACE CALCULATION
      ISKBAL=0
      IF(PSURF(1).NE.DSURF(1)) GO TO 60
      IF(DABS(DOFSET).GT.SMAL) GO TO 60
      IF(IDTOOL.NE.1) GO TO 60
      ISKBAL=1
   60 CONTINUE
C
C.... SIZE OF PART SURFACE CANONICAL FORM
      IPSIZE=NINT(PSURF(8))
C
C--SURFACE CONTACT BLOCK.  DROP SURFACE FROM POINT ON DRIVE GEOMETRY
C--TO PART SURFACE
  100 CONTINUE
C--IF IFIN IS SET TO NON ZERO THEN THIS IS THE LAST POINT
      PARNSV=PAR(INDEX)
      CALL CHKSET(IDTYPE,PDIR,PAR,IFIN)
C
C--COMPUTE POINT AND VECTOR DATA FROM DRIVE GEOMETRY
      CALL DGEOM(DSURF,IDTYPE,PAR(1),PAR(2),IDAXIS,DAXIS,
     X           ITLDIR,TLDIR,DTOL,DR,UPX,VPX,NPATX,R)
C
C--COMPUTE THE TOOL CENTER AND DIRECTION AT THIS POINT
      DO 110 I=1,3
      TD(I)=DR(20+I)
      TC(I)=DR(I)+(DRAD-DOFSET)*DR(16+I)+DIST*TD(I)
  110 CONTINUE
      IF(IBUG.NE.11) GO TO 8804
      CALL BAD(3,1,'TC  ',TC)
      CALL BAD(-3,1,'TD  ',TD)
 8804 CONTINUE
      IF(ISKBAL.EQ.0) GO TO 120
C---      ISKBAL=1 MEANS SKIP BALSRF CALC - USE DRIVE SURFACE
      UP=UPX
      VP=VPX
      NPAT=NPATX
      DIST=ZERO
      IR=0
      GO TO 125
  120 CONTINUE
C
C--FROM THIS POSITION, DROP THE TOOL TO THE SURFACE
      CALL BALSRF(PSURF, PSIDE, TC, DRAD, TD, NPAT, UP, VP,
     X            DIST, R, TOL, IPASS, IR)
C
  125 CONTINUE
      IF(IBUG.NE.11) GO TO 8805
      CALL BAD(1,0,'BLSR',IR)
      CALL BAD(1,0,'NPAT',NPAT)
      CALL BAD(1,1,'UP  ',UP)
      CALL BAD(1,1,'VP  ',VP)
      CALL BAD(-1,1,'DIST',DIST)
      CALL BAD(3,1,'R   ',R)
      CALL BAD(-3,1,'RN  ',R(29))
 8805 CONTINUE
C****    ERROR
      IRR=1
      IF(IPASS.EQ.1.AND.IR.NE.0) GO TO 999
C--AFTER THE FIRST CUT VECTOR, MOVE TO REDUCED STEPOUT LOGIC
      IF(IPASS.EQ.0.AND.IR.NE.0) GO TO 230
C
C--COMPUTE WHETHER CUTTER DOES FIT THE SURFACE AT THIS POINT
      CALL SRFDIR(DR,R,PSIDE,PDIR,RX,RVEC,RK,IR)
C---      REJECT POINT BASED ON CURVATURE FIT SOMETIMES
      IREJ=0
C--TOOL MUST NOT VIOLATE EITHER OF TWO PRINCIPAL CURVATURES
      DO 140 I=1,2
C
C---      SAVE WORST CURVATURE VALUES AS ENCOUNTERED
      DO 145 J=1,2
C---      RX AND AKMXMN SHOULD HAVE THE SAME SIGN
      IF(RX(I)*AKMXMN(J).LE.ZERO) GO TO 145
C---      SAVE RX IF IT IS LARGER
      IF(DABS(RX(I)).LT.DABS(AKMXMN(J))) GO TO 145
C
      AKMXMN(J)=RX(I)
      IF(RX(I).GT.ZERO) AKDRV(1,J)=PAR(1)
      IF(RX(I).GT.ZERO) AKDRV(2,J)=PAR(2)
      AKPRT(1,J)=NPAT
      AKPRT(2,J)=UP
      AKPRT(3,J)=VP
  145 CONTINUE
C
C---      SKIP CURVATURE CHECK IF ISKBAL IS 1.
      IF(ISKBAL.EQ.1) GO TO 140
C---      IF TOOL IS ON PS, THEN SKIP CURVATURE CALCULATION
      IF(IPTOOL.EQ.1) GO TO 140
      IF(RX(I).LE.SMAL) GO TO 140
      SRAD=1/RX(I)
      IF(SRAD.LT.EFRAD) IREJ=1
  140 CONTINUE
C---      IF CONDITION IS REJECT, REATTEMPT STEPOUT
      IF(IREJ.EQ.1) GO TO 230
C
C--VERIFY STEPOUT VS TOLERANCE.  CUT BACK STEPOUT AND RETRY
C--IF NECESSARY
  200 CONTINUE
C--FOR FIRST POINT OR FIXED PARAMETER STEP, SKIP THIS
      IF(IPASS.EQ.1.OR.DSTEP.LT.ZERO) GO TO 400
C
      CALL TULPOS(R,PSIDE,DR,TUL,PTHICK,ZERO,IPTOOL,IDTOOL,
     X            TEX,TAX,TBEFX,PDIR)
C--NEW CANDIDATE TOOL END TOOL AXIS IS TEX,TAX
      DO 220 I=1,3
  220 TEX(I)=TBEFX(I)-TBEF(I)
      CALL DOTF(ESTEP,TEX,TEX)
      ESTEP=DSQRT(ESTEP)
C--CHECK WHETHER THIS TOOL STEP IS ACCEPTABLE
      CALL STEPCK(PSIDE,R,RX,RK,RL,RXL,RKL,EFRAD,PTOL,
     X            SSTEP,TSTEP)
      IF(ESTEP.LT.TSTEP.AND.ESTEP.LT.AMAXDP) GO TO 400
  230 CONTINUE
      STEPL=STEP
      STEP=STEP*FAC
C--CUT DOWN STEPOUT AND TRY AGAIN
  240 IFIN=0
      ISTEPK=ISTEPK+1
C****    ERROR
      IRR=2
      IF(ISTEPK.GT.MXSTEP) GO TO 999
      GO TO 610
C
C--ACCEPT THE CURRENT TOOL POSITION, TERMINATE IF IFIN NOT ZERO
  400 CONTINUE
C--PLACE CUTTER NEAR PROPER SHELL OF TOLERANCE BAND
      TOLCOM=TOLMID
      IF(RK.LT.ZERO) TOLCOM=TOLMID+TOLRNG
      IF(RK.GT.ZERO) TOLCOM=TOLMID-TOLRNG
      IF(DABS(RK).LT.SMAL) TOLCOM=TOLMID
      IF(IQUAL.EQ.1) TOLCOM=ZERO
      DO 410 I=1,3
      TBEFL(I)=TBEF(I)
      TEL(I)=TE(I)
  410 TAL(I)=TA(I)
C--FIND NEW TE,TA
      CALL TULPOS(R,PSIDE,DR,TUL,PTHICK,TOLCOM,IPTOOL,IDTOOL,
     X            TE,TA,TBEF,PDIR)
C--CARRYOUT GOUGE CHECKING IF REQUIRED
      IF ( LGCHK.AND.(IPASS.NE.1).AND.(IQUAL.NE.1)) THEN
        CALL GCHK(PSURF,PSIDE,R,TE,TA,NPAT,UP,VP,
     +            RL,TEL,TAL,NPATL,UPL,VPL,TOLCOM,PTOLI,PTOLO,GFAC,IRET)
        IF (IRET.NE.0) THEN
C--EITHER GOUGING OCCURS OR MATERIAL IS LEFT ON
C  REDUCE STEPOUT UNLESS FIXED PARAMETRIC STEP
          IF (DSTEP.LT.ZERO) THEN
            IF (IRET.GT.0) THEN
             CALL CFORM(' *** WARNING - GOUGING OCCURS ***',DARRAY,1,33)
            ELSE
             CALL CFORM(' *** WARNING - EXCESS MATERIAL LEFT ON ***',
     +                  DARRAY,1,42)
            ENDIF
            CALL CPRINT(DARRAY)
            CALL BAD(3,1,'TE  ',TE)
            CALL BAD(-3,1,'TEL ',TEL)
          ELSE
            STEPL=STEP
            STEP=STEP*GFAC
C.... RESTORE PREVIOUS VALUES OF TE,TA AND TBEF
            DO 415 I=1,3
              TE(I)=TEL(I)
              TA(I)=TAL(I)
              TBEF(I)=TBEFL(I)
  415       CONTINUE
            GOTO 240
          ENDIF
        ENDIF
      ENDIF
C
C.... CARRY OUT INTERFERENCE CHECKING IF REQUIRED
C
      IF (LINTCK) THEN
        CALL INTCHK(PSURF,IPSIZE,PSIDE,PTHICK,PTOLI,TUL,TE,TA,
     +              R,NPAT,UP,VP,LRET,INTLOC)
        IF (LRET) THEN
C.... INTEFERENCE HAS BEEN DETECTED - PRINT DETAILS OF INTEFERENCE
          CALL INTMSG(TE,TA,INTLOC)
          IF (LAVCTL) THEN
C.... AVOIDANCE CONTROL REQUESTED
C     COMPUTE GUIDE SURFACE FORWARD DIRECTION
            CALL VSCALE(PDIR,DR(13),FWD)
            CALL AVOID(PSURF,IPSIZE,PSIDE,PTHICK,PTOLI,PTOLO,TOLCOM,FWD,
     +                 TUL,TE,TA,R,NPAT,UP,VP,INTLOC,LARET)
            IF (LARET) THEN
              CALL OUTMSG('INTERFERENCE AVOIDED')
            ELSE
              CALL ERROR(-3555,'SSPATH  ')
            ENDIF
          ENDIF
        ENDIF
C.... RESET INTEFERENCE TABLE
        CALL RESET
      ENDIF
C--COMPUTE TOOL END DISTANCE
      TBEMAX=ZERO
      TEMOV=ZERO
      IF(IPASS.EQ.1) GO TO 430
      DO 420 I=1,3
  420 TEX(I)=TE(I)-TEL(I)
      CALL DOTF(TEMOV,TEX,TEX)
      DO 425 I=1,3
      TEX(I)=TBEF(I)-TBEFL(I)
  425 CONTINUE
      CALL DOTF(TBEMAX,TEX,TEX)
      TBEMAX=DSQRT(TBEMAX)
C
      TEMOV=DSQRT(TEMOV)
  430 CONTINUE
C--SAVE OLD SURFACE CONTACT DATA
      DO 440 I=1,32
      RL(I)=R(I)
      RXL(I)=RX(I)
  440 CONTINUE
      RKL=RK
C--SAVE PATCH NO, U,V OF THIS SURFACE POINT
      NPATL=NPAT
      UPL=UP
      VPL=VP
      IF(IBUG.NE.11) GO TO 8806
      CALL BAD(1,0,'ICLT',ICLCT)
      CALL BAD(1,0,'ISTK',ISTEPK)
      CALL BAD(1,1,'TEMV',TEMOV)
      CALL BAD(1,1,'ESTP',ESTEP)
      CALL BAD(-1,1,'PSTP',PSTEP)
 8806 CONTINUE
C.... IF AXIS/ATANGL,PS,.. TOOL AXIS CONTROL - SAVE CURRENT TA
C     AS INITIAL TA FOR NEXT CUTTER LOCATION
      IF (ITAC.EQ.2) THEN
        DO 445 I=1,3
          DAXIS(I)=TA(I)
  445   CONTINUE
      ENDIF
C--RESET COUNTERS AND CHECK PATH LIMITS
      ISTEPK=0
      ICLCT=ICLCT+1
C****    ERROR
      IRR=3
      IF(ICLCT.GT.MAXCL) GO TO 999
      PLEN=PLEN+TEMOV
C****    ERROR
      IRR=4
      IF(PLEN.GT.ELMAX) GO TO 999
C---IF ICLSKP IS NEGATIVE, THEN DO NOT RECORD CL VALUES
      IF(ICLSKP.LT.0) GO TO 450
      IF(MAXCL.EQ.1) IFIN=1
      IF(IPASS.NE.1.OR.ICLSKP.NE.1) CALL CLPUT(TE,TA,IFIN)
  450 CONTINUE
      IPASS=0
      EMAX=5.0D0*TBEMAX
      IF(ICLCT.EQ.1) EMAX=AMAXDP
C
C--SCALOP HEIGHT CALCULATION
C--SKIP SCALOP HEIGHT CALCULATION FOR CURVE DRIVE ELEMENT
      IF(IDTYPE.EQ.0) GO TO 510
C--PROCEED TO NORMAL SCALOP CALC IF SCALHT IS NOT SMALL
      IF(SCALHT.GT.SMAL) GO TO 530
C--SCALLOP HEIGHT SMALL, USE STEPMX TO DETERMINE STEPOVER
      SDIST=STEPMX
C--IF STEPMX IS POSITIVE, THEN STEPOVER BY THIS DISTANCE
      IF(STEPMX.GT.SMAL) GO TO 540
C--STEPMX NEGATIVE AND SIGNIFICANT MEANS A FIXED PARAMETRIC STEPOVER
      SDIST=DABS(STEPMX)
      STEPOV=SDIST
      IF(SDIST.GT.SMAL) GO TO 550
C****    ERROR IN SCALLOP HEIGHT CALCULATION
      SDIST=ONE
      STEPOV=SDIST
      GO TO 550
C
  530 CONTINUE
C--NORMAL SCALLOP HEIGHT CALCULATION
C--NEGATIVE STEPMX IS A LIMIT ON THE PARAMETRIC SIDE STEP.
      IF(STEPMX.LT.ZERO) STEPOV=DABS(STEPMX)
      SDIST=BALRAD**2-(BALRAD-SCALHT)**2
      SDIST=DMAX1(SMAL,SDIST)
C--SDIST IS THE PHYSICAL STEPOVER DISTANCE TO ACHIEVE SPECS.
      SDIST=2.*DSQRT(SDIST)
  540 CONTINUE
      IF(STEPMX.GT.ZERO) SDIST=DMIN1(STEPMX,SDIST)
C--CONVERT PHYSICAL SDIST INTO A PARAMETRIC SDIST FOR DRIVE SURFACE
      JCOMP=9
      IF(IDTYPE.EQ.2) JCOMP=5
      CALL DOTF(ANG,DR(33),R(29))
      ANG=DABS(ANG)
      ANG=DMAX1(SMAL,ANG)
      SDIST=SDIST/ANG
      CALL DOTF(W,R(JCOMP),R(JCOMP))
      W=DSQRT(W)
      W=DMAX1(SMAL,W)
      SDIST=SDIST/W
  550 CONTINUE
C--STEPOV IS A LIMIT ON THE PARAMETRIC STEPOVER
      STEPOV=DMIN1(STEPOV,SDIST)
  520 CONTINUE
      IF(IBUG.NE.11) GO TO 8811
      CALL BAD(1,1,'STOV',STEPOV)
      CALL BAD(1,1,'SDST',SDIST)
      CALL BAD(1,1,'SCLH',SCALHT)
      CALL BAD(-1,1,'BRAD',BALRAD)
 8811 CONTINUE
  510 CONTINUE
C
      IRR=0
      IF(MAXCL.EQ.1) GO TO 999
      IF(IFIN.NE.0) GO TO 999
C
C--IF IFIN IS ZERO, ESTIMATE NEXT STEPOUT DISTANCE AND THEN
C--OBTAIN PARAMETRIC STEP CHANGE TO ESTIMATE THIS.
      CALL SRFTOL(RK,EFRAD,PTOL,XSTEP,ESTEP)
C
  600 CONTINUE
C--COMPUTE THE NEW PARAMETRIC STEPSIZE PAR(1-2)
C--PAR SHOULD GENERATE A NEW DRIVE POINT SO THAT THE DESIRED
C--TOOL END STEP ESTEP IS ACHIEVED
C--IF DTOL IS GT ZERO, DTOL IS TOLERANCE OF DRIVE GEOM
C--DSTEP GT ZERO LIMITS THE MAXIMUM PARAMETRIC STEP SIZE
C--IF DSTEP GT ZERO AND DTOL=0 THEN DSTEP IS THE STEP
C--FOR GENERAL TOLERANCE CALCULATIONS AN ATTEMPT IS MADE
C--TO APPROACH EACH ARC JUNCTION WITHOUT EXTREME MOVES
C
      IFIN=0
      IF(ISTEPK.EQ.0) STEP=.95*XSTEP*TSTEP/SSTEP
      IF(ISTEPK.GT.0) STEP=.95*ESTEP
      IF(EMAX.GT.0.1D0) STEP=DMIN1(STEP,EMAX)
      STEP=DMIN1(AMAXDP,STEP)
  610 CONTINUE
C--ADJUST PSTEP IF PAR HAD BEEN CUT BACK BY CHKSTEP
      DIF=PARNSV-PAR(INDEX)
      IF(DABS(DIF).GT.SMAL) PSTEP=PSTEP-DABS(DIF)
C--CUT BACK PARAMETER VALUE IF THE LAST STEP SIZE WAS NG
      IF(ISTEPK.GT.0) PAR(INDEX)=PAR(INDEX)-PDIR*PSTEP
      PCUR=PAR(INDEX)
      PLO=PLIM(2*INDEX-1)
      PHI=PLIM(2*INDEX)
      PSTEP=DABS(DSTEP)
      IF(DTOL.EQ.ZERO.AND.DSTEP.NE.ZERO) GO TO 640
C
C--STEP IS THE PHYSICAL SURFACE MOVE DESIRED ACROSS THE PART SURFACE
C--THIS MUST BE CONVERTED INTO PSTEP - THE CORRESPONDING PARAMETRIC
C--MOVE ALONG THE DRIVE CURVE. STEP IS LIMITED BY DSTEP(GT.0) AND
C--PSTEP IS LIMITED BY DR(27) AND DSTEP(LT.0).
      CALL DOTF(W1,DR(13),RVEC)
      CALL DOTF(W2,DR(5),DR(5))
      W2=DSQRT(W2)
      W1=DABS(W1*W2)
      W1=DMAX1(SMAL,W1)
C
      PSTEP=STEP/W1
      IF(DR(27).GT.SMAL) PSTEP=DMIN1(PSTEP,DR(27))
      WW=DABS(DSTEP)
      IF(DSTEP.GT.ZERO) PSTEP=DMIN1(PSTEP,WW)
      PNEXT=PCUR+PDIR*PSTEP
C--CUT BACK THE SUGGESTED PARAMETER CHANGE SO THAT ALL CURVE
C--ARC JUNCTIONS ARE USED AND APPROACHED SMOOTHLY
      CALL PCHG(PCUR,PDIR,PSTEP)
  640 CONTINUE
      PAR(INDEX)=PAR(INDEX)+PDIR*PSTEP
      IF(IBUG.NE.11) GO TO 8807
      CALL BAD(1,1,'STEP',STEP)
      CALL BAD(1,1,'PSTP',PSTEP)
      CALL BAD(-2,1,'PAR ',PAR)
 8807 CONTINUE
      GO TO 100
C
C--   END OF PROCESSING
C
  999 CONTINUE
C---      WRITE OUT SUMMARY OF CURVATURE ETC FOR THIS PATH CALL
      CALL RECORD(ISEQNO)
      IF(ISEQNO.EQ.ISEQLS) GO TO 1995
C---      WRITE HEADER FOR DATA
      ISEQLS=ISEQNO
      CALL BAD(-1,0,'PATH',ISEQNO)
      ICOL=1
      CALL CFORM(' NO. ERRNO.',DARRAY,ICOL,11)
      ICOL=13
      CALL CFORM('CLCT PATH LEN.',DARRAY,ICOL,14)
      ICOL=29
      CALL CFORM('RADIUS/SURF   PATCH',DARRAY,ICOL,19)
      ICOL=48
      CALL CFORM('  U-SRF   V-SRF',DARRAY,ICOL,15)
      ICOL=64
      CALL CFORM(' U-DRV   V-DRV',DARRAY,ICOL,14)
      ICOL=80
      CALL CFORM('RADIUS/SURF   PATCH',DARRAY,ICOL,19)
      ICOL=99
      CALL CFORM('  U-SRF   V-SRF',DARRAY,ICOL,15)
C
      CALL CPRINT(DARRAY)
 1995 CONTINUE
      ICOL=2
      CALL ICONV(KPATH,DARRAY,ICOL,4)
      ICOL=ICOL+5
      CALL ICONV(IRR,DARRAY,ICOL,5)
      ICOL=ICOL+6
      CALL ICONV(ICLCT,DARRAY,ICOL,4)
      ICOL=ICOL+5
      CALL FCONV(PLEN,DARRAY,ICOL,10,3)
      ICOL=ICOL+11
      DO 1994 J=1,2
      RAD=DABS(AKMXMN(J))
      RAD=DMAX1(ZEM5,RAD)
      RAD=DMIN1(BIG,RAD)
      IF(AKMXMN(J).LT.ZERO) RAD=-RAD
      RAD=1/RAD
      CALL FCONV(RAD,DARRAY,ICOL,13,4)
      ICOL=ICOL+14
      NPAT=AKPRT(1,J)
      CALL ICONV(NPAT,DARRAY,ICOL,4)
      ICOL=ICOL+5
      CALL FCONV(AKPRT(2,J),DARRAY,ICOL,7,3)
      ICOL=ICOL+8
      CALL FCONV(AKPRT(3,J),DARRAY,ICOL,7,3)
      ICOL=ICOL+8
      IF(J.GT.1) GO TO 1994
      CALL FCONV(AKDRV(1,1),DARRAY,ICOL,7,3)
      ICOL=ICOL+8
      CALL FCONV(AKDRV(2,1),DARRAY,ICOL,7,3)
      ICOL=ICOL+8
 1994 CONTINUE
C
      CALL CPRINT(DARRAY)
      IF(IBUG.NE.11) GO TO 1998
      ASSIGN 1998 TO IRET
      GO TO 1999
 1998 CONTINUE
      RETURN
C
C--INPUT/OUTPUT PRINT AREA
 1999 CONTINUE
      CALL BAD(-1,0,' ',0)
      CALL BAD(-6,1,'DSRF',DSURF)
      CALL BAD(1,0,'IDTY',IDTYPE)
      CALL BAD(1,1,'PDIR',PDIR)
      CALL BAD(1,1,'DTOL',DTOL)
      CALL BAD(1,1,'DSTP',DSTEP)
      CALL BAD(-1,1,'DOFS',DOFSET)
      CALL BAD(-4,1,'PLIM',PLIM)
      CALL BAD(1,0,'IDTL',IDTOOL)
      CALL BAD(1,0,'IDAX',IDAXIS)
      CALL BAD(-4,1,'DAXI',DAXIS)
      CALL BAD(1,0,'ITLD',ITLDIR)
      CALL BAD(-3,1,'TLDR',TLDIR)
      CALL BAD(-6,1,'PSRF',PSURF)
      CALL BAD(1,1,'SIDE',PSIDE)
      CALL BAD(1,1,'THCK',PTHICK)
      CALL BAD(1,1,'PTLI',PTOLI)
      CALL BAD(1,1,'PTLO',PTOLO)
      CALL BAD(1,1,'TUL ',TUL)
      CALL BAD(-1,1,'UST ',UST)
      CALL BAD(1,1,'VST ',VST)
      CALL BAD(1,1,'SCHT',SCALHT)
      CALL BAD(1,1,'STOV',STEPOV)
      CALL BAD(1,1,'STMX',STEPMX)
      CALL BAD(1,1,'MXDP',AMAXDP)
      CALL BAD(-1,1,'ELMX',ELMAX)
      CALL BAD(1,0,'MXCL',MAXCL)
      CALL BAD(1,0,'ISKP',ICLSKP)
      CALL BAD(1,0,'QUAL',IQUAL)
      CALL BAD(-3,1,'TD  ',TD)
      CALL BAD(3,1,'TE  ',TE)
      CALL BAD(-3,1,'TA  ',TA)
      CALL BAD(1,0,'IPTL',IPTOOL)
      CALL BAD(2,1,'PAR ',PAR)
      CALL BAD(-1,0,'IRR ',IRR)
      GO TO IRET,(1997,1998)
      END
