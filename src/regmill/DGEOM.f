**** SOURCE FILE : M0001067.W02   ***
*
      SUBROUTINE DGEOM(DSURF,IDTYPE,U,V,IDAXIS,DAXIS,
     X      ITLDIR,TLDIR,DTOL,DR,U1,V1,NPAT,CX)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      COMMON/IBUGG/IBUG,IPCOLC,IPCOLM
C--PURPOSE IS TO GENERATE ALL NECESSARY INFORMATION AT CURRENT
C--POINT U,V OF DRIVE GEOMETRY.  INPUT PARAMETERS ALL EXPLAINED
C--IN PATH
C--OUTPUT
C--DR  ARRAY CONTAINING ALL RELEVANT CURVE INFORMATION AT POINT U,V
C-- DR(1-3) = DRIVE GEOMETRY POINT
C-- DR(5-7) = DRIVE GEOMETRY TANSPL VECTOR
C-- DR(9-11) = DRIVE GEOMETRY SECOND DERIVATIVE
C-- DR(13-15) = DRIVE GEOMETRY UNIT TANGENT VECTOR
C-- DR(17-19) = TOOL AXIS ORIENTATION
C-- DR(21-23) = TOOL DIRECTION TOWARD PART SURFACE
C-- DR(25,26)  CURVATURE AND STEP SIZE BASED ON DTOL
C--- DR(27) = MAXIMUM STEP IN THE DRIVE SURFACE DIRECTION.
C-- DR(29-31) = CRSSPL TANGENT(IF AVAILABLE)
C-- DR(33-35) = DRIVE GEOMETRY SURFACE NORMAL(IF AVAILABLE)
C
      DIMENSION DSURF(*),DAXIS(*),TLDIR(*),DR(*)
      DIMENSION CX(32)
      DIMENSION B(64),IFLAG(6),ITOP(6,4)
      DIMENSION VEC(3)
      CHARACTER*20 BADMSG
      DATA NLAST/0/
      DATA ZERO,ONE,SMAL,HSMAL/0.0D0,1.0D0,1.0D-38,1.D-19/
      DATA BIG/1.0D+10/
      DATA ARECSV/0.0D0/,QSMAL/1.0D-6/
C
      DO 5 I=1,36
    5 DR(I)=ZERO
C--SEPARATE CURVE AND SURFACE CASES IMMEDIATLY
      IF(IDTYPE.NE.0) GO TO 100
C--SCURV DRIVE GEOMETRY.  EVALUATE CROSS DERIVS ONLY IF VARIABLE
C--TOOL AXIS OR DIRECTION IS REQUESTED
      ICROS=1
      IF(ITLDIR.NE.0.OR.IDAXIS.NE.0) ICROS=2
      CALL CURFLO(U,DSURF,CX,ICROS,0)
      IF(IBUG.NE.11) GO TO 8809
      JLIM=ICROS*16
      CALL BAD(-JLIM,1,'CFLO',CX)
 8809 CONTINUE
      DO 10 I=1,16
   10 DR(I)=CX(I)
C--SET AXIS ACCORDING TO IDAXIS SETTING
      IF (ABS(IDAXIS).LE.1) THEN
      CALL AXSET(IDAXIS,DAXIS,CX(17),DR(17))
      ELSE
        CALL AXSET(IDAXIS,CX(13),CX(17),DR(17))
      ENDIF
C--SET THE TOOL DIRECTION NEXT
      CALL AXSET(ITLDIR,TLDIR,CX(17),DR(21))
      GO TO 200
C
  100 CONTINUE
C--CASE OF MESH STRUCTURED DRIVE SURFACE.
      CALL MESCON(DSURF,U,V,NPAT,U1,V1,1)
      IF(NLAST.NE.NPAT.OR.DSURF(1).NE.ARECSV)  CALL
     X      LODPCH(DSURF,B,IFLAG,ITOP,NPAT,3)
      NLAST=NPAT
      ARECSV=DSURF(1)
      CALL CNSURF(U1,V1,B,CX,IFLAG,1)
C--PICK UP TANSPL FIRST AND SECOND DERIVATIVES IF IDTYPE=1
C--PICK UP CRSSPL FIRST AND SECOND DERIVATIVES IF IDTYPE=2
      JTAN=4
      IF(IDTYPE.EQ.2) JTAN=8
      JACC=12
      IF(IDTYPE.EQ.2) JACC=20
      JCRS=8
      IF(IDTYPE.EQ.2) JCRS=4
      JNORM=28
      DO 110 I=1,4
      DR(I)=CX(I)
      DR(I+4)=CX(JTAN+I)
      DR(I+8)=CX(JACC+I)
      DR(I+28)=CX(I+JCRS)
      DR(I+32)=CX(I+JNORM)
  110 CONTINUE
      CALL DOTF(SIZ,DR(5),DR(5))
      IF(SIZ.LT.SMAL) GO TO 120
      SIZ=DSQRT(SIZ)
      DO 130 I=1,3
  130 DR(12+I)=DR(4+I)/SIZ
      DR(16)=ONE
  120 CONTINUE
C--SET THE TOOL AXIS FIRST
      IF (ABS(IDAXIS).LE.1) THEN
      CALL AXSET(IDAXIS,DAXIS,CX(29),DR(17))
      ELSE
        CALL AXSET(IDAXIS,DR(29),CX(29),DR(17))
      ENDIF
C--SET THE TOOL DIRECTION NEXT
      CALL AXSET(ITLDIR,TLDIR,CX(29),DR(21))
C
  200 CONTINUE
C--COMPUTE CURVATURE AND STEP SIZE OF CURVE AT THIS POINT
C
      CALL DOTF(TNSQ,DR(5),DR(5))
      IF(TNSQ.LT.HSMAL) GO TO 230
C
      CALL CROSS(DR(5),DR(9),VEC)
      CALL DOTF(VECSQ,VEC,VEC)
      IF(VECSQ.LT.SMAL) GO TO 230
      CK=DSQRT(VECSQ)/(DSQRT(TNSQ))**3
      IF(CK.GT.HSMAL) GO TO 240
  230 CONTINUE
C--CURVATURE IS VERY SLIGHT
      CK=ZERO
      STEP=BIG
      GO TO 300
C
  240 CONTINUE
      RAD=ONE/CK
      STEP=(RAD+RAD-DTOL)*DTOL
      IF(STEP.LT.QSMAL) GO TO 230
      STEP=2.*DSQRT(STEP)
C
  300 CONTINUE
      DR(25)=CK
      DR(26)=STEP
      DR(27)=ONE
      IF(TNSQ.GT.SMAL) DR(27)=STEP/DSQRT(TNSQ)
C
  999 CONTINUE
      IF(IBUG.NE.11) GO TO 1999
      CALL BAD(-1,0,' ',0)
      BADMSG=' AFTER DGEOM'
      CALL CPRINT(BADMSG)
      CALL BAD(1,1,'U   ',U)
      CALL BAD(1,1,'V   ',V)
      CALL BAD(1,0,'IDTP',IDTYPE)
      CALL BAD(1,0,'IDAX',IDAXIS)
      CALL BAD(-1,0,'ITLD',ITLDIR)
      DO  1998 I=1,33,4
      CALL BAD(-4,1,'DR  ',DR(I))
 1998 CONTINUE
 1999 CONTINUE
      RETURN
      END
