**** SOURCE FILE : M0004101.V11   ***
*
C
C.....IMPLEMENTATION DEPENDENT FUNCTION     .....PAGE...    8/68     HG
C.....FORTRAN FUNCTION              ..PAGE..     HG   6/68
C
      INTEGER FUNCTION PAGE(M)
C
C
C PG.C1        LOAD POINT OF CURRENT PAGE
C PG.P         LOAD POINT FOR LAST PAGE LOADED
C PG.L         LAST PAGE TO BE LOADED. =0 DURING LOADING OF LABEL,RESERV
C              TEXT
C PAG          TABLE GIVING LOCATION OF A PAGE.  IF PAGE NOT
C              IN CORE,TABLE ENTRY = 0.
C I.PG.P       PAGE INITIAL LOAD POINT
C N            NUMBER OF REQUIRED PAGE
C I            = 1 FOR PART PROGRAM TEXT,=2 FOR MACRO TEXT
C
C
C
      INCLUDE 'BLANKCOM.INC'
      INCLUDE 'INTRPEQ.INC'
C
      COMMON/STOR/ NTB, FPB, PPB, COMN
      INTEGER      NTB, FPB, PPB, COMN
      COMMON/WORK/ PGC
      INTEGER      PGC
C
C...            SYSTEM I/O FILE NAMES
C
      INCLUDE 'SYMFIL.INC'
C
      INCLUDE 'DARRAY.INC'
C
      INTEGER N,PGL,I,PGP,ELFIL,JN,IPGP,PGC1
      INTEGER   PAG
      INTEGER DIAG
      DIMENSION PAG(600,2),PGL(2),ELFIL(2)
      LOGICAL PAGFLG
      EQUIVALENCE (ELFIL2,ELFIL(1))
C
      SAVE PGP,PGC1,PAG,PGL
C
      DATA PGP/2000000/,PGC1/0/,PAG/1200*0/,PGL/2*0/
C
C
      N = M
C CHECK IF N WITHIN LIMITS
      IF(IABS(N).GT.600)GOTO 9998
C
C SET PAGE TYPE INDICATOR I.
      I=1
      IF(N)110,9998,120
  110 N=-N
      I=2
C
C IS PAGE IN CORE
  120 IF(PAG(N,I).NE.0)GOTO 140
C
C NO
C IS PAGE TO BE LOADED LABEL,RESERV TEXT
      IF(PGL(1).NE.0)GOTO 200
C
C YES
C LOAD LABEL,RESERV TEXT
      JN=0
      CALL AREAD(ELFIL1,JN,PP(PPB),256,IR)
      IF(IR.EQ.1) GO TO 400
C INDICATE BEGINNING OF PAGE
      PAGE=PPB
C
C KEEP CURRENT PAGE NUMBER AT 0
      PGC=-1
      RETURN
C
C
C NO.  MACRO OR PART PROGRAM TEXT
C BEGIN CYCLIC SEARCH
  200 PAGFLG=.TRUE.
C
C HOLD STARTING POINT
      IPGP=PGP
C
C OBTAIN NEW LOAD POINT
  210 PGP=PGP+256
C
C WILL PAGE BE OUTSIDE LIMITS OF STORAGE
      IF(PGP+255.LE.COMN*2)GOTO 220
C
C YES
C RETURN POINTER TO INITIAL LOAD POINT
      PGP=PPB
C
C HAS COMPLETE CYCLE BEEN MADE
  220 IF(IPGP.NE.PGP)GOTO 230
C
C YES,A MACRO TEXT PAGE MAY NOW BE SCRATCHED
      PAGFLG=.FALSE.
      GOTO 210
C
C NO,CYCLE NOT COMPLETE
C IS LOAD POINT AT CURRENT PAGE
C IF YES, CONTINUE SEARCH, CURRENT PAGE IS NOT TO BE SCRATCHED
  230 IF(PGP.EQ.PGC1)GOTO 210
C
C NO
C CAN MACRO TEXT BE SCRATCHED
      IF(.NOT.PAGFLG)GOTO 300
C
C NO,IS PAGE MACRO TEXT.  IF YES CONTINUE SEARCH.
      IF(PP(PGP).LT.0)GOTO 210
C
C PAGE CAN BE SCRATCHED
C  REMOVE REFERENCE TO DELETED PAGE
  300 K = 1
      J = PP(PGP)
      IF(J.EQ.0) GOTO 306
      IF(J.GT.0) GOTO 303
      J = - J
      K = 2
  303 PAG(J,K) = 0
C
C NEXT
C LOAD DESIRED PAGE
  306 CALL AREAD(ELFIL(I),N,PP(PGP),256,IR)
      IF(IR.EQ.1) GO TO 9998
C
C SAVE NUMBER OF LAST PAGE TO BE LOADED
  130 PGL(I)=N
C
C SET POINTER TO PAGE
C---    STORE A COMPACT VERSION OF THE PAGE LOCATION IN PAG
      PAG(N,I)=(PGP-1)/2
C
C INDICATE STARTING LOCATION OF PAGE
C---    RETRIEVE THE CURRENT PAGE LOCATION
  140 PAGE=PAG(N,I)*2+1
C
C SAVE CURRENT PAGE LOAD POINT
      PGC1=PAGE
      RETURN
C
C ERROR TOO MANY PAGES-N TOO LARGE.
 9998 CALL CFORM('029001 TOO MANY STATEMENTS IN THIS PART PROGRAM ',
     C DARRAY,1,47)
      CALL CPRINT (DARRAY)
      CALL  HELP
      RETURN
C
C CLEAR PAGE AREA
  400 PGP=PPB
  410 PP(PGP) = 0
      PGP = PGP + 256
      IF(PGP.GE.COMN*2) GOTO 200
      GOTO 410
      END
