*
      SUBROUTINE MESH(IERROR,IRR,ITW,SSNAME,ASAV)
C----------SCULPTURED SURFACE ROUTINE ------- JULY 1971  *LPK*
C---------- MESH DEFINITION
C---------THIS ROUTINE ACCEPTS THE TRANSLATED MESH DEFINITION
C---------AND PREPARES THE NECESSARY VALUE TABLE FOR THE MESH
C---------DATA STRUCTURE. UPON ENTRANCE IT IS ASSUMED THAT THE HEADER
C---------OF THE DATA STRUCTURE -SSCAN ARRAY, WAS SET. THE ROUTINE
C---------CHECKS IF THE DEFINED SURFACE EXCEEDS THE SIZE LIMITATIONS
C---------(NMESX TOTAL NO. OF POINTS AND NSPLMX POINTS PER SPLINE).
C---------IT THEN CHECKS THE TRANSLATED DEFINITION IN SSCAN ARRY AND
C---------AND GENERATES AN INTERMEDIATE ARRAY-SCAN, CONSISTING OF
C---------FOUR BLOCKS(POINTS,TANGENT CONSTRAINTS, CROSS TANGENT
C---------CONSTRAINTS AND NORMALS), A WEIGHT ARRAY-RL,AND A LIMIT
C---------ARRAY-RLM.THE ROUTINE THEN CALLS SSPLIN ROUTINE FOR EACH S
C---------SPLINE AND CROSS SPLINE (WEIGHTS ARE RESOLVED UPON SPLINING
C---------IN THE MAIN DIRECTION). THE TANGENT VECTOR ARE MOVED BACK INTO
C---------SCAN ARRAYAND THE DISTANCES BETWEEN POINTS ARE STORED IN
C---------DIST ARRY (FOR TANSPLINES) AND CDIST ARRAY(FOR CROSSSPLINES)
C---------FURTHER PARAL OR LINEAR ROUTINES ARE CALLED TO ASSIGN
C---------LENGTHS TO THE VECTORS. A RULED SURFACE FLAG IS SET
C---------ACCORDING TO THE FOLLOWING LOGIC:IF THERE ARE TWO SPLINES
C---------AND NO NORMAL CONSTRAINTS AND NO CROSS TANGENCY CONSTRAINTS
C---------A RULED SURFACE WITH RULLINGS IN CROSSPLINE DIRECTION IS
C---------INDICATED(ITW=1). IF THERE ARE TWO POINTS PER SPLINE AND
C---------NO NORMAL AND NO TANSPLINE CONSTRAINTS A RULED SURFACE
C---------WITH  RULLINGS IN THE MAIN DIRECTION IS INDICATED (ITW=2).
C---------FINALLY GETSCA ROUTINE IS CALLED TO LOAD THE DATA FROM SCAN
C---------ARRAY TO SSCAN ARRAY.
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      CHARACTER*8 ISPLIN,ITANS,ICRS,NORMAL,IWGT,ILIM
      CHARACTER*8 TEST
      DIMENSION ASAV(10)
C---     BUFFER ARRAY FOR PRINTING
      INCLUDE (DARRAY)
C-------- IF N IS THE MAX NO. OF POINTS IN THE MESH , DIMENSIONS OF
C-------- RL,RLM,DIST,CDIST =N.DIMENSION OF TAN AND CTAN=3*N,AND
C-------- DIMENSION OF SCAN =12*N
C---     NSCNMX IS THE MAXIMUM SPACE AVAILABLE IN SCAN
C---     ISCAN IS THE LAST USED LOCATION IN SCAN
C---     SCAN IS A SCRATCH PAD WORK AREA FOR SS CALCULATIONS
      INCLUDE (SSPAD)
      DIMENSION S(4,6,ISCN/24)
C---     THE BUFFER ARRAY FOR CURVES IS EQUIVALENCED TO SCAN
C---     ISXX WILL BE STARTING POSITION FOR THE CURVE DATA
      EQUIVALENCE (SCAN(1),S(1,1,1))
C
      DIMENSION IPALA(2)
C
      INCLUDE (BLANKCOM)
C
      COMMON/IBUGG/IBUG,IPCOLC,IPCOMC
      DATA ISPLIN/'SPLINE  '/,ITANS/'TANSPL  '/,ICRS/'CRSSPL  '/,
     C  NORMAL/'NORMAL  '/,IWGT/'WEIGHT  '/,ILIM/'LIMIT   '/
      DATA ZERO,ONE,SMAL/0.0D0,1.0D0,1.0D-14/
C
C---     MAX NUMBER OF POINTS IN A MESH IS LIMITED BY SPACE IN SCAN.
      NMESMX=NSCNMX/20
      NSCAMX=NMESMX*20
C---     COMPUTE THE ACTUAL NUMBER OF MESH POINTS
      NUMPTS=SSCAN(9)*SSCAN(10)
      NK3=NUMPTS*3
      IF(NUMPTS.LE.NMESMX) GO TO 71
C---     TOO MANY POINTS FOR SPACE AVAILABLE IN SSPAD
      IERROR=213
      GO TO 9000
   71 CONTINUE
      NSCAMX=MIN0(NSCAMX,NSCNMX)
C---     MAX NUMBER OF POINTS IN A SINGLE SPLINE OR CROSS SPLINE
      NSPLMX=30
C---     SET UP BASE INDICES FOR VARIOUS TYPES OF DATA IN SCAN
C---     INPUT POINT DATA
      JPT=0
C---     INPUT TANSPL DATA
      JPTAN=NUMPTS*3
C---     INPUT CRSSPL DATA
      JPCTAN=NUMPTS*6
C---     INPUT NORMAL DATA
      JNRML=NUMPTS*9
C---     PROCESSED TANGENT DATA
      JTAN=NUMPTS*12
C---     SHARED LOCATION, WEIGHT DATA FOR SMOOTHING
      JRL=JTAN
C---     SHARED LOCATION, WILD POINT DATA
      JIWL=JTAN+NUMPTS
C---      PROCESSED CROSS TANGENT DATA
      JCTAN=NUMPTS*15
C---     SHARED LOCATION , LIMIT DATA
      JRLM=JCTAN
C---     SHARED LOCATION, WILD POINT DATA
      JWL=JCTAN+NUMPTS
C---     TANGENT SPACING
      JDIST=NUMPTS*18
C---     CROSS TANGENT SPACING
      JCDIST=NUMPTS*19
C---     DETERMINE WHERE THE CURVE DATA BUFFER SHOULD START AND
C---     WHETHER THERE IS ENOUGH ROOM FOR SPLINING.
      NTEMP=SSCAN(9)
      IF(SSCAN(9).LT.SSCAN(10)) NTEMP=SSCAN(10)
      ISXX=(NUMPTS*20)/24
      ISXX=ISXX+1
      IF((ISXX+1+NTEMP)*24.LE.NSCNMX) GO TO 72
C****    NOT ENOUGH SPACE FOR THE CURVE DATA
      IERROR=210
      GO TO 9000
   72 CONTINUE
C
      DO 100 I=1,NSCAMX
  100 SCAN(I)=ZERO
      DO 101 I=1,NUMPTS
      SCAN(JRLM+I)=ZERO
  101 SCAN(JRL+I)=ONE
      IERROR=0
      IRR=0
      INORM=0
      ITW=0
      IRULE=0
      JRULE=0
      SPL=SSCAN(9)
      PNTS=SSCAN(10)
      SSCAN(10)=ASAV(10)
      NEND=ASAV(5)
      IF(SPL.EQ.2.0) IRULE=1
      IF(PNTS.EQ.2.0) JRULE=1
      ITT=SPL*PNTS
      IA=PNTS
      IF (ITT .LE. NMESMX) GO TO 110
      IERROR=210
      GO TO 9000
  110 IF (IA .LE. NSPLMX) GO TO 120
      IERROR=211
      GO TO 9000
  120 CONTINUE
      PTANS=JPTAN+1
      PCRS=JPCTAN+1
      K=0
      ITA=JPTAN-2
      ICS=JPCTAN-2
      INR=JNRML-2
C---      TURN THE GLOBAL WEIGHT AND LIMIT FLAG OFF
      IGLOBE=0
      M=9
      IF(IBUG.EQ.11) CALL BAD(-NEND,1,'SSCN',SSCAN)
C---     ASSUME THE FIRST INPUT FOLLOWS THE WORD SPLINE
      GO TO 650
C---     NOW SEARCH THRU THE INPUT STREAM AND STRUCTURE
C---     THE MESH DATA INTO THE SCAN ARRAY FOR MESH PROCESSING
C
  160 CONTINUE
      IF(IBUG.NE.11) GO TO 162
      CALL BAD(1,0,'NEND',NEND)
      CALL BAD(1,0,'M   ',M)
      CALL BAD(-4,1,'SNXT',SSCAN(M))
  162 CONTINUE
      IF(M.GE.NEND) GO TO 1000
      IF(SSCAN(M).EQ.19.) GO TO 610
      IF(SSCAN(M).EQ.13.) GO TO 200
      IF(SSCAN(M).EQ.136.) GO TO 300
      IF(SSCAN(M).EQ.137.) GO TO 400
      IF(SSCAN(M).EQ.138.) GO TO 500
      IF(SSCAN(M).EQ.139.) GO TO 550
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)
      IF(TEST.EQ.ISPLIN) GO TO 650
      GO TO 1000
C----------NORMAL
 200  M=M+1
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)
      IF(TEST.NE.NORMAL) IERROR=214
      M=M+1
      INORM=1
      IF(SSCAN(M).NE.20.)IERROR=215
      N=INR+2
      DO 250 I=INR,N
      M=M+1
      SCAN(I)=SSCAN(M)
 250  CONTINUE
      GO TO 600
C----------TANSPL
 300  M=M+1
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)
      IF(TEST.NE.ITANS) IERROR=216
      M=M+1
      IF(SSCAN(M).NE.20.)IERROR=215
      N=ITA+2
      DO 350 I=ITA,N
      M=M+1
      SCAN(I)=SSCAN(M)
 350  CONTINUE
      GO TO 600
C----------CRSSPL
 400  M=M+1
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)
      IF(TEST.NE.ICRS) IERROR=217
      M=M+1
      IF(SSCAN(M).NE.20.)IERROR=215
      N=ICS+2
      DO 450 I=ICS,N
      M=M+1
      SCAN(I)=SSCAN(M)
 450  CONTINUE
      GO TO 600
C----------WEIGHT
 500  M=M+1
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)
      IF(TEST.NE.IWGT) IERROR=218
      M=M+1
      IF(SSCAN(M).NE.21.)IERROR=219
      M=M+1
C---     IF THIS IS A GLOBAL WEIGHT, THEN SET REMAINING WEIGHTS
C---     IN THIS PARTICULAR SPLINE DEFINITION
      IF(IGLOBE.EQ.0) GO TO 501
      KLIM=PNTS-ONE+K
C---     IF THE LIMIT IS NEGATIVE, THEN IT IS GLOBAL FOR THE
C---     REMAINING POINTS IN THE MESH.
      IF(SSCAN(M).LT.-SMAL) KLIM=NUMPTS+K-1
      KLIM=MIN0(NUMPTS,KLIM)
      DO 502 L=K,KLIM
  502 SCAN(JRL+L)=DABS(SSCAN(M))
      GO TO 650
  501 CONTINUE
C
      SCAN(JRL+K)=SSCAN(M)
      GO TO 600
C-------------  LIMIT
  550 M=M+1
      CALL HOLFRM(SSCAN(M),TEST,1,8,NWD)
      IF (TEST .NE. ILIM)IERROR=220
      M=M+1
      IF (SSCAN(M) .NE. 21.)IERROR=219
      M=M+1
C---     IF THIS IS A GLOBAL LIMIT, THEN SET LIMITS IN THIS
C---     PARTICULAR SPLINE TO THE INDICATED LIMIT
      IF(IGLOBE.EQ.0) GO TO 551
      KLIM=PNTS-ONE+K
C---     IF THE LIMIT IS NEGATIVE THEN IT IS GLOBAL FOR THE
C---     REMAINING POINTS IN THE MESH
      IF(SSCAN(M).LT.-SMAL) KLIM=NUMPTS+K-1
      KLIM=MIN0(NUMPTS,KLIM)
      DO 552 L=K,KLIM
  552 SCAN(JRLM+L)=DABS(SSCAN(M))
      GO TO 650
  551 CONTINUE
C
      SCAN(JRLM+K)=SSCAN(M)
      GO TO 600
C----------SPLINE
 600  M=M+1
      GO TO 160
 610  ITA=ITA+3
      ICS=ICS+3
      INR=INR+3
      MM=K*3+1
      MA=MM+2
      K=K+1
      DO 620 I=MM,MA
      M=M+1
      SCAN(I)=SSCAN(M)
 620  CONTINUE
      GO TO 600
C
 650  M=M+1
      IGLOBE=0
      IF(SSCAN(M).EQ.19.)GO TO 610
C---     IF A WEIGHT OR LIMIT FOLLOW, THEN THESE SPECIFY GLOBAL WEIGHTS
      IGLOBE=1
      IF(SSCAN(M).EQ.138.) GO TO 500
      IF(SSCAN(M).EQ.139.) GO TO 550
      IERROR=212
      GO TO 9000
C
C--------USERS INPUT HAS NOW BEEN FORMATTED, BEGIN SPLINING PROCEDURE.
C----------SMOOTHING ALONG SPLINE DIRECTION
 1000 CONTINUE
C---     CHECK TO SEE IF ALL INPUT HAS BEEN PROCESSED
      IF(M.EQ.NEND.AND.K.EQ.ITT) GO TO 1001
C****    IMPROPER DATA IN SSURF INPUT STREAM
      CALL BAD(1,0,'NEND',NEND)
      CALL BAD(1,0,'M   ',M)
      CALL BAD(-4,1,'SNXT',SSCAN(M))
      IERROR=222
      GO TO 9000
 1001 CONTINUE
      IF(IBUG.NE.11) GO TO 1003
C---     DUMP PROCESSED POINT, TANSPL,CRSSPL,NORMAL, WT AND LIMITS
      NK3=NUMPTS*3
      CALL BAD(-NK3,1,'PTS ',SCAN(JPT+1))
      CALL BAD(-NK3,1,'TAN ',SCAN(JPTAN+1))
      CALL BAD(-NK3,1,'CTAN',SCAN(JPCTAN+1))
      CALL BAD(-NK3,1,'NRML',SCAN(JNRML+1))
      CALL BAD(-NUMPTS,1,'WGT ',SCAN(JRL+1))
      CALL BAD(-NUMPTS,1,'LIMT',SCAN(JRLM+1))
 1003 CONTINUE
C----------RESET POINTERS TO AREAS FOR TANGENTS, CROSS AND NORMALS
      ITA=JPTAN+1
      ICS=JPCTAN+1
      INR=JNRML+1
C--------------    INITIATE CROSS SPLINE  CONSTRAINT INDICATORS
      IA=SPL
      IB=PNTS
      IIT=ITT*12
      IM=IB+1
      IF (IA .GT. IB) IM=IA+1
      DO 1005 I=1,IM
 1005 S(4,3,I+ISXX)=ZERO
      IJK=0
C-------------          PREPARE S ARRAY HEADER
      S(2,1,1+ISXX)=ONE
      S(3,1,1+ISXX)=ONE
      S(4,1,1+ISXX)=IB
C-------------          IND,ITD,ICD, INDICATE EXISTANCE OF NORMAL ,
C-------------          TANSPL, CRSSPL, CONSTRAINT RESPECTIVELY
C-------------        AT ANY OF THE POINTS
      IND=0
      ITD=0
      ICD=0
      KWL=0
      KWL1=0
      KTFL=0
      SCAN(JIWL+1)=ZERO
C-------------          SPLINING ALONG MAIN DIRECTION (TANSPL)
      IB1=IB+1
      DO 1010 IG=1,IA
      IB0=(IG-1)*IB*3
      DO 1020 IG1=2,IB1
      IB2=(IG1-2)*3+IB0
C-------------          MOVE POINTS AND VECTORS INTO S ARRAY
      DO 1030 IG2=1,3
      IG3=IG2+IB2
      S(IG2,1,IG1+ISXX)=SCAN(IG3)
      S(IG2,2,IG1+ISXX)=SCAN(IG3-1+ITA)
      S(IG2,4,IG1+ISXX)=SCAN(IG3-1+INR)
 1030 CONTINUE
C-------------          SET S ARRAY CONSTRAINT INDICATORS
      S(4,2,IG1+ISXX)=ZERO
      JNN=ITA+IG3-3
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))
      IF(WJ.GT.SMAL) S(4,2,IG1+ISXX)=ONE
      IF (S(4,2,IG1+ISXX) .EQ. ONE) ITD=1
      S(4,4,IG1+ISXX)=ZERO
      JNN=INR+IG3-3
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))
      IF(WJ.GT.SMAL) S(4,4,IG1+ISXX)=ONE
      IF (S(4,4,IG1+ISXX) .EQ. ONE) IND=1
C-------------          MOVE WEIGHT TO S ARRAY
      S(1,5,IG1+ISXX)=SCAN(JRL+(IG-1)*IB+IG1-1)
C-------------          MOVE LIMITS
      S(2,5,IG1+ISXX)=SCAN(JRLM+(IG-1)*IB+IG1-1)
 1020 CONTINUE
      S(1,2,ISXX+1)=ZERO
C-------------          BRANCH TO SSPLIN ROUTINE
      JFLAG=1000+IG
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))
C
      CALL SSPLIN(S(1,1,ISXX+1),IRRT)
      JFLAG=2000+IG
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))
      IF(IRR.EQ.0.AND.IRRT.NE.0) IRR=IRRT
C-------------          MOVE POINTS AND TANSPLINES TO SCAN
      DO 1040 IG1=2,IB1
      IB2=(IG1-2)*3+IB0
      DO 1050 IG2=1,3
      IG3=IG2+IB2
      SCAN(IG3)=S(IG2,1,IG1+ISXX)
      SCAN(ITA+IG3-1)=S(IG2,2,IG1+ISXX)
 1050 CONTINUE
C-------------          MOVE DISTANCE BETWEEN POINTS TO DIST
      SCAN(JDIST+(IB-1)*(IG-1)+IG1-1)=S(4,1,IG1+ISXX)
C------------- IF WILD POINT INDICATOR GT 1 STACK THE POINT LOCATION
C------------- (SPLINE NUMBER AND POINT NUMBER) INTO IWL ARRAY AND
C------------- THE WILDNESS FACTOR INTO WL ARRAY
      IF (S(4,5,IG1+ISXX) .LE. ONE) GO TO 1040
      KWL1=KWL1+1
      KWL=KWL+1
      SCAN(JWL+KWL1)=S(4,5,IG1+ISXX)
      SCAN(JIWL+KWL)=IG
      KWL=KWL+1
      SCAN(JIWL+KWL)=IG1-1
 1040 CONTINUE
C---      PRINT ERROR NUMBER FOR EACH SPLINE, IF ANY.
      IF(IRRT.EQ.0) GO TO 1041
      CALL RECORD(ISEQNO)
      CALL ICONV(ISEQNO,DARRAY,1,6)
      CALL CFORM('. ERROR NO.',DARRAY,7,11)
      CALL ICONV(IRRT,DARRAY,18,7)
      CALL CFORM('FOR  SPLINE NO.',DARRAY,26,15)
      CALL ICONV(IG,DARRAY,41,5)
      CALL CPRINT(DARRAY)
 1041 CONTINUE
 1010 CONTINUE
C
C------------- IF ANY WILD POINT DETECTED GO TO PRINT A MESSAGE
      IF(DABS(SCAN(JIWL+1)).LT.SMAL) GO TO 777
      KO=0
      ASSIGN 777 TO IRET
      GO TO 3000
C----------END OF SPLINE FITTING, BRANCH TO WILD POINT ANALYSIS
  777 CONTINUE
      IJK=1
C-------------          SPLINE ALONG CROSS SPLINE DIRECTION
C------------           CHANGE S ARRAY HEADER (NO. OF POINTS)
      S(4,1,1+ISXX)=IA
      IB1=IA+1
      DO 1060 IG=1,IB
      IB0=(IG-1)*3
      DO 1070 IG1=2,IB1
      IB2=(IG1-2)*3*IB+IB0
C-------------          MOVE POINTS AND VECTORS INTO S ARRAY
      DO 1075 IG2=1,3
      IG3=IG2+IB2
      S(IG2,1,IG1+ISXX)=SCAN(IG3)
      S(IG2,2,IG1+ISXX)=SCAN(IG3-1+ICS)
      S(IG2,4,IG1+ISXX)=SCAN(IG3-1+INR)
 1075 CONTINUE
C-------------          SET CONSTRAINT INDICATORS
      S(4,2,IG1+ISXX)=ZERO
      S(4,4,IG1+ISXX)=ZERO
      JNN=ICS+IG3-3
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))
      IF(WJ.GT.SMAL) S(4,2,IG1+ISXX)=ONE
      IF (S(4,2,IG1+ISXX) .EQ. ONE) ICD=1
      JNN=INR+IG3-3
      WJ=DABS(SCAN(JNN))+DABS(SCAN(JNN+1))+DABS(SCAN(JNN+2))
      IF(WJ.GT.SMAL) S(4,4,IG1+ISXX)=ONE
C---------- SET WEIGHT TO CERTITUDE, AND LIMIT TO ZERO
      S(1,5,IG1+ISXX)=ONE
      S(2,5,IG1+ISXX)=ZERO
 1070 CONTINUE
      S(1,2,ISXX+1)=ZERO
C-------------          BRANCH TO SPLINING ROUTINE
      JFLAG=3000+IG
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))
C
      CALL SSPLIN(S(1,1,ISXX+1),IRRT)
      JFLAG=4000+IG
      IF(IBUG.EQ.11) CALL SCDUMP(JFLAG,S(1,1,ISXX+1))
      IF(IRR.EQ.0.AND.IRRT.NE.0) IRR=IRRT
C-------------          MOVE CROSS SPLINE TANGENTS TO SCAN
      DO 1080 IG1=2,IB1
      IB2=(IG1-2)*3*IB+IB0
      DO 1090 IG2=1,3
      IG3=IG2+IB2
      SCAN(ICS+IG3-1)=S(IG2,2,IG1+ISXX)
 1090 CONTINUE
C-------------          MOVE DISTANCES ALONG CROSSPLINES TO CDIST
      SCAN(JCDIST+(IA-1)*(IG-1)+IG1-1)=S(4,1,IG1+ISXX)
C------------- IF WILD POINT INDICATOR GT 1 STACK THE POINT LOCATION
C------------- (SPLINE NUMBER AND POINT NUMBER) INTO IWL ARRAY AND
C------------- THE WILDNESS FACTOR INTO WL ARRAY
      IF (S(4,5,IG1+ISXX) .LE. ONE) GO TO 1080
      KWL1=KWL1+1
      KWL=KWL+1
      SCAN(JWL+KWL1)=S(4,5,IG1+ISXX)
      SCAN(JIWL+KWL)=IG
      KWL=KWL+1
      SCAN(JIWL+KWL)=IG1-1
 1080 CONTINUE
C---      PRINT ERROR NUMBER FOR EACH CROSS SPLINE, IF ANY.
      IF(IRRT.EQ.0) GO TO 1081
      CALL RECORD(ISEQNO)
      CALL ICONV(ISEQNO,DARRAY,1,6)
      CALL CFORM('. ERROR NO.',DARRAY,7,11)
      CALL ICONV(IRRT,DARRAY,18,7)
      CALL CFORM('FOR CSPLINE NO.',DARRAY,26,15)
      CALL ICONV(IG,DARRAY,41,5)
      CALL CPRINT(DARRAY)
 1081 CONTINUE
 1060 CONTINUE
C
C------------- IF ANY WILD POINT DETECTED GO TO PRINT A MESSAGE
      IF(DABS(SCAN(JIWL+1)).LT.SMAL) GO TO 1065
      KO=1
      ASSIGN 1065 TO IRET
      GO TO 3000
C----------END OF CROSS SPLINE FITTING, BRANCH TO WILD POINT ANALYSIS
 1065 CONTINUE
      IF(IRR.NE.0) GO TO 9000
C---------- PRINT OUT RESULTS OF SPLINING AND CROSS SPLINING
      IF(IBUG.NE.11) GO TO 1068
      NKK=NUMPTS*12
      CALL BAD(-NKK,1,'SCN2',SCAN)
      CALL BAD(-NUMPTS,1,'DIST',SCAN(JDIST+1))
      CALL BAD(-NUMPTS,1,'CDIS',SCAN(JCDIST+1))
 1068 CONTINUE
      IJK=IJK+1
C--------- REARRANGE CROSS SPLINE TANGENTS TO APPEAR IN SCAN
C-------  ARRAY ACCORDING TO THEIR ORDER ALONG SPLINES. USES NORMALS
C-------- SECTION OF SCAN AS A WORK AREA
      DO 2010 J=1,ITT
      INX=((J-1)/IA+(J-1-IA*((J-1)/IA))*IB)*3+ICS-1
      IN=INR-1+(J-1)*3
      DO 2010 K=1,3
 2010 SCAN(IN+K)=SCAN(INX+K)
      IT1=ITT*3
      DO 2020 I=1,IT1
      SCAN(ICS-1+I)=SCAN(INR-1+I)
 2020 SCAN(INR-1+I)=ZERO
C---------              SET RULED SURFACE INDICATORS
      IF (IND .EQ. 0 .AND. ICD .EQ. 0 .AND. IRULE .EQ. 1) ITW=1
      IF (IND .EQ. 0 .AND. ITD .EQ. 0 .AND. JRULE .EQ. 1) ITW=2
C---------- PRINT OUT TWIST FACTOR AND REARRANGED CROSS VECTORS
      IF(IBUG.NE.11) GO TO 2023
      CALL BAD(-1,0,'ITW ',ITW)
      NKK=3*NUMPTS
      CALL BAD(-NK3,1,'CRS ',SCAN(JPCTAN+1))
 2023 CONTINUE
C
C----------PARALLEL CHECK
C----------LINEAR CHECK
 4100 CONTINUE
      DO 102 I=1,NK3
      SCAN(JTAN+I)=ZERO
      SCAN(JCTAN+I)=ZERO
  102 CONTINUE
      IJK=IJK+1
      IF(SSCAN(6).NE.4.) GO TO 7000
      IA=SPL
      IB=PNTS
      IPARA=0
      CALL PARAL(SCAN(JPTAN+1),SCAN(JDIST+1),SCAN(JTAN+1),
     X           SCAN(JNRML+1),IA,IB,IPARA)
C---------- PRINT RESULTS OF PARAL LOGIC FOR TANGENT LENGTH SELECTION
      IF(IBUG.NE.11) GO TO 2027
      CALL BAD(-1,0,'IPAR',IPARA)
      CALL BAD(-NK3,1,'TANS',SCAN(JPTAN+1))
      CALL BAD(-NK3,1,'TAN ',SCAN(JTAN+1))
 2027 CONTINUE
C
      IPALA(1)=IPARA
      IJK=IJK+1
      IA=PNTS
      IB=SPL
      IPARA=0
      CALL PARAL(SCAN(JPCTAN+1),SCAN(JCDIST+1),SCAN(JCTAN+1),
     X           SCAN(JNRML+1),IA,IB,IPARA)
C---------- PRINT RESULTS OF CROSS VECTOR LENGTH ANALYSIS
      IF(IBUG.NE.11) GO TO 2028
      CALL BAD(-1,0,'IPAR',IPARA)
      CALL BAD(-NK3,1,'CRS ',SCAN(JPCTAN+1))
      CALL BAD(-NK3,1,'CTAN',SCAN(JCTAN+1))
 2028 CONTINUE
C
      IPALA(2)=IPARA
      IJK=IJK+1
      ILIN=0
      GO TO 8000
 7000 CALL LINEAR(SCAN,SPL,PNTS,ILIN)
      IF(IBUG.EQ.11) CALL BAD(-1,0,'ILIN',ILIN)
      IJK=IJK+1
      IF(ILIN.EQ.0) IERROR=300
      IPALA(1)=0
      IPALA(2)=0
C---------- SET UP DATA STRUCTURE READY TO RETURN
 8000 CONTINUE
      SSCAN(10)=PNTS
      CALL GETSCA(SCAN,SPL,PNTS,PTANS,PCRS,SCAN(JTAN+1),
     X  SCAN(JCTAN+1),IPALA,ILIN,ITW)
C---     PRINT OUT SCAN ON RETURN FOR DEBUGGING
C
 9000 IF(IERROR.NE.0) IERROR=IERROR+5000
      IF(IRR.NE.0) IERROR=IRR
      RETURN
C
C------------- PRINT WILD POINTS MESSAGE
 3000 KWL=KWL-1
      IF (KTFL .EQ. 1) GO TO 3010
      CALL RECORD(ISEQNO)
      CALL ICONV(ISEQNO,DARRAY,1,6)
      CALL CFORM('. SOME  SPLINE POINTS MAY BE WILD',DARRAY,7,33)
      IF(IJK.EQ.1) CALL CFORM('CRSSPL',DARRAY,15,6)
      CALL CPRINT(DARRAY)
      KWL=KWL-1
      DO 3011 L=1,KWL
      K=2*L-1
      CALL BAD(1,1,'PTNO',SCAN(JIWL+K))
      CALL BAD(1,1,'SPL ',SCAN(JIWL+K+1))
      CALL BAD(-1,1,'WILD',SCAN(JWL+L))
 3011 CONTINUE
      KTFL=1
 3010 CONTINUE
      KWL=0
      KWL1=0
      SCAN(JIWL+1)=ZERO
      GO TO IRET,(1065,777)
      END
