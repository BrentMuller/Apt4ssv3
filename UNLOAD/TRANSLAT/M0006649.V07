*
C
C              FORTRAN SUBROUTINE LCANON
C
C LINKAGE      SUBROUTINE LCANON(ACTNO,BIGCNT)
C
C          SUBSIDIARIES                  CALLED BY
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    CONCAT          SUBROUTINE    RECOG
C          INTEGER FCT.  GETTMP
C          SUBROUTINE    BINBCD
C          SUBROUTINE    ARGCVT
C          INTEGER FCT.  NUMB
C          SUBROUTINE    OPCODE
C          SUBROUTINE    PUTTMP
C          SUBROUTINE    RESRVZ
C          SUBROUTINE    RLSLIN
C          SUBROUTINE    CALLZZ
C          SUBROUTINE    TWOARG
C          SUBROUTINE    ALARM
C
      SUBROUTINE LCANON(ACTNO,BIGCNT)
C
      IMPLICIT INTEGER (A-Z)
C
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)
C NAMTBL:      INTEGER CORRESPONDING TO NAME TABLE ENTRY
C CNAMTB:      NAME TABLE OR DICTIONARY
C NAMMAX:      NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(300),STACK(2,99)
C TOP:         POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C STACK:       WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(4))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODE/CODE
      DIMENSION CODE(150),COMMA(2),TEMP(2),VBL(2),BIGGEO(2)
C COMMA:       (1)=CODE CLASS  1000,(2)=NAMTBL INDEX OF ',     '
      EQUIVALENCE (COMMA(1),CODE(1))
C TEMP:        (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODE(33))
C VBL:         (1)=CODE CLASS 31000,(2)=NAMTBL INDEX OF 'VBL   '
      EQUIVALENCE (VBL(1),CODE(61))
C BIGGEO:      (1)=CODE CLASS 44000,(2)=NAMTBL INDEX OF 'BIGGEO'
      EQUIVALENCE (BIGGEO(1),CODE(87))
C
C        4.    PRODUCTION TABLE
C
      COMMON/SRCTBL/SRCTBL
      DIMENSION SRCTBL(502),META(50)
C META:        CONTAINS INTERNAL BIT CODES FOR METALINGUISTIC CLASSES
      EQUIVALENCE (META(1),SRCTBL(3))
C
C        6.    GHOST STACK FOR OBJECT TIME TEMPORARY ALLOCATION
C              LENGTH AND CURRENT NUMBER OF ACTIVE TEMPORARY STORAGE
      COMMON/TMP/TXXXX
      DIMENSION TXXXX(2,32)
C
C        8.    NAME TABLE POINTERS TO BCD LITERALS
C
      COMMON/BCDPTR/BCDPTR
      DIMENSION BCDPTR(7)
C DOTTAB:      NAMTBL POINTER TO ALPHAMERIC LITERAL '$$TAB'
      EQUIVALENCE (DOTTAB,BCDPTR(7))
C
C        9.    NAME TABLE POINTERS TO NUMBERS
C
      COMMON/NUMPTR/NUMPTR
      DIMENSION NUMPTR(12)
C ONE:         NAMTBL POINTER TO '1     '
      EQUIVALENCE (ONE,NUMPTR(3))
C FOUR:        NAMTBL POINTER TO '4     '
      EQUIVALENCE (FOUR,NUMPTR(7))
C
C       12.    LARGE DATA ARRAY STORAGE REQUIREMENTS
C
      COMMON/CFSIZE/CFSIZE
      DIMENSION CFSIZE(205),MAXSIZ(2),CANSIZ(2,100)
C CANTOP:      POINTER TO THE LAST CANSIZ ENTRY
      EQUIVALENCE (CANTOP,CFSIZE(1))
C MAXSIZ:      SIZE OF THE LAST LARGEST LARGE DATA ARRAY
      EQUIVALENCE (MAXSIZ(1),CFSIZE(4))
C CANSIZ:      NUMBER OF ITEMS A. NAMTBL INDEX OF EACH LARGE DATA ARRAY
      EQUIVALENCE (CANSIZ(1,1),CFSIZE(6))
C
C       16.    LITERALS FOR I. L. OPERATION CODES
C
      COMMON/IL/IL
      DIMENSION IL(21)
C MOVE:        CONTAINS COMMAND CODE (19) FOR MOVE COMMAND
      EQUIVALENCE (MOVE,IL(19))
C
C       17.    MODE CODES
C
      COMMON/MODX/MODX
      DIMENSION MODX(32)
C REAL:        MODE CODE (24) FOR A SCALAR
      EQUIVALENCE (REAL,MODX(21))
C SUBSCR:      MODE CODE (24) FOR SUBSCRIPT
      EQUIVALENCE (SUBSCR,MODX(24))
C
C       22.    MACRO PROCESSING VARIABLES
C
      COMMON/MACXX1/MACXX1
      LOGICAL FINMAC
      DIMENSION MACXX1(71)
C FINMAC:      TRUE DURING FINAL MACRO PROCESSING
      EQUIVALENCE (FINMAC,MACXX1(24))
C
C       27.    OPERAND MODIFIERS
C
      COMMON/OPMOD/OPMOD
      DIMENSION OPMOD(6)
C DLR:         CONTAINS OPERAND TYPE CODE 1
      EQUIVALENCE (DLR,OPMOD(2))
C QUIDLR:      CONTAINS OPERAND TYPE CODE 5
      EQUIVALENCE (QUIDLR,OPMOD(6))
C
C       28.    OPERAND MODIFIERS
C
      COMMON/SUBLST/SUBLST
      DIMENSION SUBLST(136),APTXXX(120)
C APTXXX:      NAMTBL POINTERS FOR XECUTION SUBROUTINE NAMES
      EQUIVALENCE (APTXXX(1),SUBLST(1))
C
C       29.    CLASS CODE MODULI
C
      COMMON/MODULI/MODULI
      DIMENSION MODULI(2)
C MODULO:      NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      EQUIVALENCE (MODULO,MODULI(1))
C MODHLF:      NORMAL MODE CODE LIMIT 500
      EQUIVALENCE (MODHLF,MODULI(2))
C
C       42.    COMMON BLOCK FOR CANON AND OBTAIN ARGUMENT STORAGE
C
      COMMON/CANSTR/CANSTR
      DIMENSION CANSTR(18),CANSTK(16)
C CANPTR:      POINTER TO LAST CANSTK ENTRY
      EQUIVALENCE (CANPTR,CANSTR(1))
C CANSTK:      ARGUMENT STACK FOR CANON AND OBTAIN STATEMENTS
      EQUIVALENCE (CANSTK(1),CANSTR(3))
C
C       44.    ERROR POSITION TABLE
C
      COMMON/ERRPOS/ERRPOS
      INTEGER ERRPOS,ESTACK,ERGSTK
      DIMENSION ERRPOS(302),ESTACK(100),ERGSTK(100)
C ESTACK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN STACK
      EQUIVALENCE (ESTACK(1),ERRPOS(103))
C ERGSTK:      INPUT STATEMENT ERROR POSITION WHEN DETECTED IN ARGSTK
      EQUIVALENCE (ERGSTK(1),ERRPOS(203))
C*
C PURPOSE      TO GENERATE I.L. FOR LARGE DATA ARRAY CANON DEFINITIONS
C
C ARGUMENTS    ACTNO   BASIC PRODUCTION ACTION NUMBER
C              BIGCNT  NUMBER OF CALLS TO LCANON FOR THIS DEFINITION
C
      CHARACTER IBUFF*15,IHBLK*4
      DATA IHBLK/'    '/
C**
C...       IF FIRST CALL, INITIALIZE
C
      IF(BIGCNT.NE.1)GO TO 100
      ICODE=1
      IBR=1
C
  100 IF(ACTNO.GE.103)GO TO 500
C
C...       PICK UP ARG.  GENERATE I.L. FOR THREE ARGUMENTS AT A TIME.
C
      CANPTR=CANPTR+1
      CANSTK(CANPTR)=STACK(1,TOP-1)
      ERGSTK(101-CANPTR)=ESTACK(TOP-1)
      STACK(1,TOP-2)=STACK(1,TOP)
      STACK(2,TOP-2)=STACK(2,TOP)
      TOP=TOP-2
      IF(CANPTR.NE.3)GO TO 900
C
  200 DO 230 I=1,CANPTR
      N=CANSTK(I)
      IF(N.GT.NAMMAX)GO TO 210
      IF(NAMTBL(N)/MODULO.NE.TEMP(1)/MODULO)GO TO 210
      M=NAMTBL(N)-TEMP(1)
      IF(M.GE.MODHLF)M=SUBSCR
      CALL PUTTMP(M)
  210 IF(ICODE.EQ.4)GO TO 230
      IF(MODE(N).NE.REAL)GO TO 1010
  220 CONTINUE
  230 CONTINUE
C
      IF(ICODE.EQ.4)GO TO 250
      CALL OPCODE(MOVE)
      CALL TWOARG(-BIGCNT+1,DOTTAB)
      DO 240 I=1,CANPTR
      N=CANSTK(I)
  240 CALL ARGCVT(N)
      CALL RLSLIN
  250 IF(IBR.EQ.2)GO TO 510
      CANPTR=0
      GO TO 900
C
C...       PROCESS END OF DEFINITION.
C          FIRST CHECK FOR ARGUMENTS LEFT IN CANSTK.
C
  500 IF(CANPTR.EQ.0 .OR. ICODE.EQ.4)GO TO 520
      IBR=2
      BIGCNT=BIGCNT-CANPTR+2
      GO TO 200
  510 BIGCNT=BIGCNT+CANPTR-2
      CANPTR=0
C
  520 N=STACK(1,TOP-3)
      M=NAMTBL(N)-BIGGEO(1)
      IF(M.GT.MODHLF)M=M-MODHLF
      IF(ACTNO.NE.105)GO TO 530
C
      N5=GETTMP(M)
      K5=TEMP(1)
      GO TO 550
C
  530 N5=STACK(1,TOP-5)
      K5=(NAMTBL(N5)/MODULO)*MODULO
      IF(K5.NE.VBL(1) .AND. K5.NE.TEMP(1))GO TO 540
      M5=NAMTBL(N5)-K5
      IF(M5.GE.MODHLF)M5=M5-MODHLF
      IF(M5.EQ.M)GO TO 550
      IBR=3
      GO TO 1020
  540 NAMTBL(N5)=VBL(1)+M
      CALL RESRVZ(N5,M,TXXXX(1,M),1)
C
C...       UPDATE MAXSIZ IF NECESSARY.  ADD SIZE AND NAME TO CANSIZ.
C
  550 IF(BIGCNT.LE.(IABS(MAXSIZ(2))))GO TO 560
      IF(BIGCNT.LE.(IABS(MAXSIZ(1))))GO TO 555
      MAXSIZ(2)=MAXSIZ(1)
      MAXSIZ(1)=BIGCNT
      GO TO 560
  555 MAXSIZ(2)=BIGCNT
  560 J=MOD(N5,CANTOP)
      DO 570 I=1,CANTOP
      J=MOD(J,CANTOP)+1
      IF(CANSIZ(1,J).NE.0 .AND. CANSIZ(2,J).NE.N5)GO TO 570
      CANSIZ(1,J)=BIGCNT
      CANSIZ(2,J)=N5
      GO TO 600
  570 CONTINUE
      IBR=4
      GO TO 1030
C
C...       GENERATE I.L. TO STORE SIZE IN INTERNAL CANONICAL FORM.
C
  600 IBUFF(12:15)=IHBLK
      CALL BINBCD(BIGCNT,IBUFF(4:),I)
      WRITE(IBUFF(1:3),'(I3)') I
      CALL CONCAT(IBUFF,'.')
      INUMB=NUMB(IBUFF(4:15)) + NAMMAX
      CALL OPCODE(MOVE)
      CALL TWOARG(-2,N5)
      CALL ARGCVT(INUMB)
      CALL RLSLIN
C
C...       GENERATE CALL TO APT094
C
  610 CALL CALLZZ(APTXXX(68))
      IF (ICODE.EQ.1) THEN
        CALL TWOARG(DLR,ONE)
      ELSE
        CALL TWOARG(DLR,FOUR)
      ENDIF
      CALL ARGCVT(N5)
      CALL TWOARG(0,DOTTAB)
      CALL RLSLIN
      IF(ACTNO-104)900,640,620
C
  620 TOP=TOP-4
      GO TO 660
  640 TOP=TOP-6
  660 STACK(1,TOP)=N5
      J=NAMTBL(N5)/MODULO
      STACK(2,TOP)=META(J)
      K=NAMTBL(N5)/MODULO
      STACK(2,TOP)=META(K)
C
  900 RETURN
C
C...       DIAGNOSTIC PROCESSING
C
 1010 IERROR=1032
      ERRPT=I-101
      IF(.NOT.FINMAC)GOTO 1090
      N=TOP
      J=STACK(1,TOP)
      STACK(1,TOP)=COMMA(2)
      DO 1015 K=1,I
      STACK(1,TOP+1)=CANSTK(K)
      STACK(1,TOP+2)=COMMA(2)
 1015 TOP=TOP+2
      CALL ALARM(IERROR,TOP-1,8,'LCANON  ')
      TOP=N
      STACK(1,TOP)=J
      GOTO 1100
 1020 IERROR=1001
      GO TO 1080
 1030 IERROR=53
 1080 ERRPT=TOP-5
 1090 CALL ALARM(IERROR,ERRPT,8,'LCANON  ')
 1100 ICODE=4
      GO TO(220,220,550,610),IBR
      END
