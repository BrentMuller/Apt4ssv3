*
C---    IMPLEMENTATION DEPENDENT ROUTINES XCANON & INCAN
C
C
      INTEGER FUNCTION XCANON(V)
C
C---    PURPOSE IS TO PROVIDE ACCESS TO CANON FILE ON DISK
C---   INPUT V = VIRTUAL ADDRESS OF A CANONICAL FORM
C      OUTPUT XCANON = ACTUAL ADDRESS OF A CANONICAL FORM
C---   (A CANONICAL FORM PAGE IS BROUGHT IN IF NECESSARY)
C
      INCLUDE (BLANKCOM)
      INCLUDE (INTRPEQ)
C
      COMMON/STOR/ NTB, FPB, PPB, COMN, CFB
      INTEGER      NTB, FPB, PPB, COMN, CFB
      COMMON/CONST/ KCOMT, KCOMF, CILPRT, KCBN
      LOGICAL CILPRT
      INCLUDE (DARRAY)
      COMMON /WORK/ IIIIII(53), IPAGE, IWRIT
      INTEGER IPAGE(32)
      INTEGER V
      INCLUDE (SYMFIL)
C
C---      NFOR REPRESENT FORWARD POINTERS SHOWING PROGRESSIVELY
C---      OLDER PAGES.   NFOR(1) IS NOT A CORE SLOT POINTER, BUT
C---      AN INITIALIZING LOCATION FOR THE LIST POINTERS.
C---      NBACK REPRESENTS BACKWARD POINTERS TO PROGESSIVELY
C---      MORE RECENTLY USED CORE SLOTS
C---      IPAGE GIVES THE CURRENT PAGE LOADED INTO A CORE SLOT
C---      INCOR GIVES THE SLOT IN CORE NOW OCCUPIED BY EACH PAGE
C---      LOCREC GIVES THE RECORD LOCATION OF EACH PAGE ON EXTERNAL FILE
C
      INTEGER INCOR(256),LOCREC(256),NFOR(33),NBACK(33)
C
C---      MAXPAG IS THE MAXIMUM NUMBER OF PAGES IN CORE NOW
C---      MAXCOR IS THE ABSOLUTE MAXIMUM NUMBER OF PAGES IN CORE
C---      MAXFIL IS THE MAXIMUM NUMBER OF PAGES ALLOWED ON EXTERNAL FILE
C---      NPGCNT IS THE MAXIMUM PAGE ENCOUNTERED TO DATE
      INTEGER NZERO
C
      DATA INCOR/256*0/,LOCREC/256*0/,NFOR/33*0/,NBACK/33*0/
      DATA MAXPAG/0/,MAXCOR/32/,MAXFIL/256/,NPGCNT/0/
      DATA NZERO/0/
      DATA NAVAIL/2/
C
C     CALL BAD(-1,-6,'ENTR','XCANON')
      IF(V-CFB.GE.0) GO TO 10
C---     THE REFERENCED CANON FORM IS BELOW THE CANON AREA.
      XCANON=V
      GO TO 999
C
   10 CONTINUE
      IF(MAXPAG.NE.0) GO TO 50
C---     INITIAL CALL, SET UP
      LENPAG=2*KCBN
C---     LENPAG IS THE LENGTH OF A CANON PAGE IN SINGLE PRECISION WORDS
C---     MAXPAG IS THE MAXIMUM NUMBER OF PAGES THAT FIT IN CORE
      MAXPAG=((PPB+3)/4-CFB)/KCBN
      MAXPAG=MIN0(MAXCOR,MAXPAG)
C---     SET UP THE INITIAL DOUBLY LINKED LIST POINTERS
      NFOR(1)=1
      NBACK(1)=1
      DO 20 L=1,MAXCOR
   20 IPAGE(L)=0
C     CALL BAD(1,0,'PPB ',PPB)
C     CALL BAD(1,0,'CFB ',CFB)
C     CALL BAD(-1,0,'MXPG',MAXPAG)
C
C---     NORMAL CONTINUING POINT OF CALCULATION
   50 CONTINUE
C---     COMPUTE THE IDEAL PAGE NUMBER AND INCREMENT INTO PAGE
      IVPAGE=(V-CFB)/KCBN+1
C     CALL BAD(1,0,'V   ',V)
C     CALL BAD(-1,0,'IVPG',IVPAGE)
      IF(IVPAGE.LT.MAXFIL+1) GO TO 60
C---     PAGE EXCEEDS THE ABSOLUTE MAXIMUM FOR EXTERNAL PAGES
      CALL CFORM('0 TOO MANY PAGES OF CANONICAL DATA IN XCANON',
     X     DARRAY,1,44)
      GO TO 995
C
   60 CONTINUE
C---     IF PAGE IS NOW IN CORE, SKIP LOAD/UNLOAD LOGIC
      IF(INCOR(IVPAGE).GT.NZERO) GO TO 400
C---     THE PAGE IS NOT NOW IN CORE - LOAD IT IF NECESSARY
      IF(NAVAIL.LT.MAXPAG+2) GO TO 100
C---     ALL AVAILABLE CORE SLOTS ARE IN USE.  THE OLDEST
C---     PAGE(LEAST RECENTLY USED) SHOULD FIRST BE REMOVED.
      NXSLOT=NBACK(1)-1
C---     PAGE NUMBER OF THIS OLDEST PAGE
      IP=IPAGE(NXSLOT)
C---     LOCATION OF THIS OLD PAGE IN CORE
      LOC=CFB+(INCOR(IP)-1)*KCBN
C---     SET FLAGS FOR WRITING AT END OF FILE
C     CALL BAD(1,0,'WRIT',IP)
C     CALL BAD(-1,0,'SLOT',NXSLOT)
      NR=0
      IR=0
C---      NOW WRITE PAGE OUT TO XCAN FILE
      LNPG=LENPAG
      CALL AWRITE(XCAN,NR,CF(LOC),LNPG,IR)
C***     TERMINATE IF AN ERROR OCCURRED.
      IF(IR.NE.0) GO TO 997
C---      INCREMENT WRITE COUNT  *** IWRIT USED IN LIB ***
      IWRIT = IWRIT + 1
C
C---     UPDATE THE STATUS OF PAGE IP
      IPAGE(NXSLOT)=IVPAGE
      INCOR(IVPAGE)=INCOR(IP)
      INCOR(IP)=-INCOR(IP)
      LOCREC(IP)=NR
      GO TO 200
C
  100 CONTINUE
C---     A SLOT IS STILL OPEN IN CORE, SO NO PAGE NEED BE REMOVED
      NXSLOT=NAVAIL-1
      NAVAIL=NAVAIL+1
C---     EXPAND THE LIST LINKAGES.
      NN=NBACK(1)
      NFOR(NN)=NXSLOT+1
      NBACK(1)=NXSLOT+1
      NFOR(NXSLOT+1)=1
      NBACK(NXSLOT+1)=NN
      INCOR(IVPAGE)=NXSLOT
  200 CONTINUE
C
C---      NEXT CHECK WHETHER THE SOUGHT-AFTER PAGE HAS BEEN WRITTEN
C---      TO THE DISK FILE EARLIER.
      IF(LOCREC(IVPAGE).EQ.NZERO) GO TO 300
C---      SINCE THAT PAGE IS ON DISK, IT SHOULD BE RETRIEVED.
C---      SELECT THE DISK RECORD NUMBER
      NR=LOCREC(IVPAGE)
C---      SELECT LOCATION INTO WHICH DATA IS READ
      LOC=CFB+(INCOR(IVPAGE)-1)*KCBN
C     CALL BAD(1,0,'READ',IVPAGE)
C     CALL BAD(-1,0,'SLOT',NXSLOT)
      IR=0
C---      FETCH THE DATA FROM DISK INTO CORE
      LNPG=LENPAG
      CALL AREAD(XCAN,NR,CF(LOC),LNPG,IR)
C***      BRANCH IF READ CAUSED AND ERROR
      IF(IR.NE.0) GO TO 998
C
  300 CONTINUE
      IPAGE(NXSLOT)=IVPAGE
C
  400 CONTINUE
C---     DESIRED PAGE IS NOW IN CORE
      IN1=INCOR(IVPAGE)+1
      NN=NFOR(1)
      IF(IN1.EQ.NN.OR.NAVAIL.EQ.2) GO TO 500
C---      DESIRED PAGE IS NOT NOW THE MOST RECENTLY USED
C---      ALTER THE LINKED LIST SO THAT IT IS THE MOST RECENT
C---      FIRST REMOVE IN1 FROM THE LINKED LIST TEMPORARILY
      NFSAVE=NFOR(IN1)
      NBSAVE=NBACK(IN1)
      NFOR(NBSAVE)=NFSAVE
      NBACK(NFSAVE)=NBSAVE
C---      NOW RESET IN1 INTO THE TOP OF THE USAGE HISTORY LIST
      NOWTOP=NFOR(1)
      NFOR(1)=IN1
      NFOR(IN1)=NOWTOP
      NBACK(NOWTOP)=IN1
      NBACK(IN1)=1
C
  500 CONTINUE
C---      COMPUTE THE ACTUAL ADDRESS OF THIS CANON FORM
      XCANON=CFB+(INCOR(IVPAGE)-1)*KCBN+MOD(V-CFB,KCBN)
      GO TO 999
C
C
  997 CONTINUE
      CALL CFORM(' CANON PAGE WRITE ERROR IN XCANON',
     X     DARRAY,1,33)
      GO TO 996
  998 CONTINUE
      CALL CFORM(' CANON PAGE READ ERROR IN XCANON ',
     X     DARRAY,1,33)
  996 CONTINUE
      CALL ICONV(IR,DARRAY,35,8)
  995 CONTINUE
      CALL CPRINT(DARRAY)
      CALL BAD(1,0,'V   ',V)
      CALL BAD(1,0,'IVPG',IVPAGE)
      CALL BAD(1,0,'LENP',LENPAG)
      CALL BAD(1,0,'LNPG',LNPG)
      CALL BAD(1,0,'MXPG',MAXPAG)
      CALL BAD(1,0,'NR  ',NR)
      CALL BAD(1,0,'NAVL',NAVAIL)
      CALL BAD(1,0,'NSLT',NXSLOT)
      CALL BAD(-1,0,'NPCN',NPGCNT)
C
C     NPGCNT=MAX0(IVPAGE,NPGCNT)
C     CALL SBAD(-MAXPAG,0,'IPAG',IPAGE)
C     NN=MAXPAG+1
C     CALL SBAD(-NN,0,'NFOR',NFOR)
C     CALL SBAD(-NN,0,'NBAC',NBACK)
C     CALL SBAD(-NPGCNT,0,'LOCR',LOCREC)
C     CALL SBAD(-NPGCNT,0,'INCO',INCOR)
      CALL HELP
  999 CONTINUE
C
C     NPGCNT=MAX0(IVPAGE,NPGCNT)
C     CALL SBAD(-MAXPAG,0,'IPAG',IPAGE)
C     NN=MAXPAG+1
C     CALL SBAD(-NN,0,'NFOR',NFOR)
C     CALL SBAD(-NN,0,'NBAC',NBACK)
C     CALL SBAD(-NPGCNT,0,'LOCR',LOCREC)
C     CALL SBAD(-NPGCNT,0,'INCO',INCOR)
      RETURN
C     END
C     SUBROUTINE SBAD(N1,N2,N3,N4)
C     DIMENSION N4(1),NN(100)
C     INTEGER N4
C     N=IABS(N1)
C     N=MIN0(N,100)
C     DO 10 I=1,N
C     NN(I)=N4(I)
C  10 CONTINUE
C     IF(N1.LT.0) N=-N
C     CALL BAD(N,0,N3,NN)
C     RETURN
      END
C
C
C
C
C---    IMPLEMENTATION DEPENDENT ROUTINE
C
      SUBROUTINE INCAN(AV)
C
C
      COMMON/STOR/ NTB, FPB, PPB, COMN, CFB
      INTEGER      NTB, FPB, PPB, COMN, CFB
      COMMON/CONST/ KCOMT, KCOMF, CILPRT, KCBN
      LOGICAL CILPRT
      COMMON /WORK/ IIIIII(53), IPAGE, IWRIT
      INTEGER IPAGE(32)
C
C---      NFOR REPRESENT FORWARD POINTERS SHOWING PROGRESSIVELY
C---      OLDER PAGES.   NFOR(1) IS NOT A CORE SLOT POINTER, BUT
C---      AN INITIALIZING LOCATION FOR THE LIST POINTERS.
C---      NBACK REPRESENTS BACKWARD POINTERS TO PROGESSIVELY
C---      MORE RECENTLY USED CORE SLOTS
C---      IPAGE GIVES THE CURRENT PAGE LOADED INTO A CORE SLOT
C---      INCOR GIVES THE SLOT IN CORE NOW OCCUPIED BY EACH PAGE
C---      LOCREC GIVES THE RECORD LOCATION OF EACH PAGE ON EXTERNAL FILE
C
      INTEGER INCOR(256),LOCREC(256),NFOR(33),NBACK(33)
C
C---      MAXPAG IS THE MAXIMUM NUMBER OF PAGES IN CORE NOW
C---      MAXCOR IS THE ABSOLUTE MAXIMUM NUMBER OF PAGES IN CORE
C---      MAXFIL IS THE MAXIMUM NUMBER OF PAGES ALLOWED ON EXTERNAL FILE
C---      NPGCNT IS THE MAXIMUM PAGE ENCOUNTERED TO DATE
      INTEGER AV
C
      DATA INCOR/256*0/,LOCREC/256*0/,NFOR/33*0/,NBACK/33*0/
      DATA MAXPAG/0/,MAXCOR/32/,MAXFIL/256/,NPGCNT/0/
C
C
C
C---      ROUTINE TO CALCULATE A VIRTUAL ADDRESS GIVEN
C---      A CURRENT ACTUAL ADDRESS.
      IP=(AV-CFB)/KCBN+1
      AV=CFB+(IPAGE(IP)-1)*KCBN+MOD(AV-CFB,KCBN)
C
C     NPGCNT=MAX0(IVPAGE,NPGCNT)
C     CALL SBAD(-MAXPAG,0,'IPAG',IPAGE)
C     NN=MAXPAG+1
C     CALL SBAD(-NN,0,'NFOR',NFOR)
C     CALL SBAD(-NN,0,'NBAC',NBACK)
C     CALL SBAD(-NPGCNT,0,'LOCR',LOCREC)
C     CALL SBAD(-NPGCNT,0,'INCO',INCOR)
      RETURN
C     END
C     SUBROUTINE SBAD(N1,N2,N3,N4)
C     DIMENSION N4(1),NN(100)
C     INTEGER N4
C     N=IABS(N1)
C     N=MIN0(N,100)
C     DO 10 I=1,N
C     NN(I)=N4(I)
C  10 CONTINUE
C     IF(N1.LT.0) N=-N
C     CALL BAD(N,0,N3,NN)
C     RETURN
      END
