**** SOURCE FILE : M0007342.W01   ***
*
C
C          LOAD COMPLEX MAIN PROGRAM
C
C          SUBSIDIARIES
C          TYPE          ENTRY
C          SUBROUTINE    LOADG
C          SUBROUTINE    LOADM
C          SUBROUTINE    LOADP
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NUMBST:     INDEX OF BEGINNING OF NUMBER SECTION OF CNUMTB
C  NUMBND:     INDEX OF END OF NUMBER SECTION OF CNUMTB
C  NAMTBL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C  CNUMTB:     NUMBER TABLE
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  LCDATA:     INPUT FILE NUMBER OF PRODUCTION TABLES SEQUEN. MODE
      EQUIVALENCE (LCDATA,SYMFIL(5))
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  IBKPNT:     NAMTBL INDEX OF BRKPNT
C*
C     PURPOSE      TO READ A CONTROL CARD AND DECIDE WHICH BLOCK
C                  DATA PROGRAMS IT IS TO GENERATE.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C              IG                 C            READ OFF DATA CARD
C              IG1                C    'GEOM'  CHECK DATA CARD
C              IP                 C            READ OFF DATA CARD
C              IP1                C    'PROC'  CHECK DATA CARD
C
C     NOTES        IF THE CONTROL CARD HAS PROC PUNCHED IN COLUMNS
C                  1-4 THE PROGRAM WILL CAUSE THE READING OF DATA
C                  WHICH WILL ENABLE BLOCK DATA PROGRAMS FOR THE
C                  META CLASSES AND BASIC PRODUCTIONS TO BE PRODUCED.
C                  IF THE CONTROL CARD HAS GEOM PUNCHED IN COLUMNS
C                  11-14 IT WILL CAUSE THE READING OF DATA WHICH WILL
C                  ENABLE BLOCK DATA PROGRAMS FOR THE NAME TABLE,
C                  POINTERS TO THE NAME TABLE, AND GEOMETRIC
C                  PRODUCTIONS TO BE PRODUCED.
C
      CHARACTER*6 BKPNT
      CHARACTER*4 IG,IG1,IP,IP1
      DATA  IP1,IG1/'PROC','GEOM'/,BKPNT/'BRKPNT'/
C**
C...     CLEAR NUMBER TABLE
C
      DO 1 I=NUMBST,NUMBND
      CNUMTB(I)=' '
    1 CONTINUE
C
C...     READ CONTROL CARD.
C
      READ(LCDATA,2) IP,IG
    2 FORMAT (1A4,6X,1A4)
C
C...     CALL LOADM TO READ META-CLASSES.
C
      IF ((IP .NE. IP1) .AND. (IG .NE. IG1))  GO TO 5
      CALL LOADM
C
      IBKPNT = NAME(BKPNT)
      NAMTBL(IBKPNT) = 99000
C
C...     IS BASIC PRODUCTION TABLE PROCESSING REQUIRED
C
    3 IF(IP.EQ.IP1)CALL LOADP
C
C...     IS GEOMETRIC PRODUCTION TABLE PROCESSING REQUIRED
C
    4 IF(IG.EQ.IG1)CALL LOADG
C
      STOP
C
C...  CONTROL CARD ERROR
C
    5 WRITE (VLFILE,6)
    6 FORMAT (1H ,90HERROR 7002 IN MAIN.  FIRST INPUT CARD DOES NOT CONT
     *AIN GEOM OR PROC.  NO OUTPUT GENERATED.)
      STOP
      END
**** SOURCE FILE : M0007343.X01   ***
*
C
C PURPOSE      TO INITIALIZE THE LABELLED COMMON AREA NAMETB, LDXCOM
C
      BLOCK DATA
C
      IMPLICIT INTEGER (A-Z)
C
C...      0.SYSTEMS DEPENDENT PARAMETERS
C
      INCLUDE (SDP)    
C
C...       1.      NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
      DIMENSION ALPHA(68)
      CHARACTER*6 CALPHA(68)
      EQUIVALENCE (ALPHA(1),NAMTBL(1))
      EQUIVALENCE (CALPHA(1),CNAMTB(1))
C
C          2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002)
C
C          3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
      DIMENSION CODES(150)
C
C          7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/QCODE ,QMETA ,QPMIDT,QASSOC,QGEOML,QLENGT,QPRODN,
     1              QPROCD,QWORK ,QIAGMX,QPROD2,QSTACK,QLEVPO,QCLSWD,
     2              QARGMX,QKDENT,QGEOLO,QIPRMI,QKGRP ,QAPTXX,QAPTYY,
     3              QSUBNA,QHOLER,QINMBR,QISUB ,QIHOL ,QNAMTB,QNUMTB
C
C          8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C
C          9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C
C         10.    ITEM AND GROUP CONTROL
C
      COMMON/LENGTH/LENGTH
      DIMENSION LENGTH(3,100)
C
C         11.    GEOMETRIC TABLE LOCATIONS
C
      COMMON/GEOMLC/GEOMLC
      DIMENSION GEOMLC(50)
C
C         12.    BIT OUTPUT PATTERS
C
      COMMON/ELBIT/ELBIT
      DIMENSION ELBIT(200)
C
C         13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C
C         14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250)
C
C         15.    INTEGER CODE AND LEVPOS COLUMN OF A PRODUCTION
C
      COMMON/PROCOD/PROCOD
      DIMENSION PROCOD(2,1500)
C
C         16.    RELATION OF ORDINAL NUMBERS TO NAMTBL INDEXES
C
      COMMON/CLSWRD/CLSWRD
      DIMENSION CLSWRD(100)
C
C         17.    OUTPUT SPACE FOR TRANSFORMED PRODUCTION LIST
C
      COMMON/OUTARY/OUTARY
      CHARACTER*80 OUTARY
C
C         18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH,LEVPRD
      DIMENSION BRANCH(15),LEVPRD(2,250)
C
C         19.    BIT CONSTANTS
C
      INCLUDE (ALLBTS)    
C
C     DATA STATEMENTS
C
C
C          0. SDP FOR A 32 BIT WORD COMPUTER
C
C     NBYTE:  NO. OF BITS PER BYTE
      DATA NBCHAR/8/
C     NBWRD:  NO. OF BITS PER WORD
      DATA NBWRD/32/
C     IWRD:  NO. OF BYTES PER WORD
      DATA IWRD/4/
C     IFAC: BYTE LEFT SHIFT MULTIPLICATION FACTOR
      DATA IFAC/256/
C
C...       1.      NAME TABLE AND TABLE LIMITS
C
      DATA   CHARST /  1/,  CHARND / 56/ ,
     1       INAMST / 57/,  INAMND /169/,
     2       NAMEST /170/,  NAMMAX /3000/,
     3       IFIXST/ 1/,  IFIXND /13/,
     4       NUMBST/14/,  NUMBND /3000/
      DATA ALPHA(1),CALPHA(1)/    0,' '/,
     1     ALPHA(2),CALPHA(2)/10000,'0'/,
     2     ALPHA(3),CALPHA(3)/10000,'1'/,
     3     ALPHA(4),CALPHA(4)/10000,'2'/,
     4     ALPHA(5),CALPHA(5)/10000,'3'/,
     5     ALPHA(6),CALPHA(6)/10000,'4'/,
     6     ALPHA(7),CALPHA(7)/10000,'5'/,
     7     ALPHA(8),CALPHA(8)/10000,'6'/,
     8     ALPHA(9),CALPHA(9)/10000,'7'/,
     9     ALPHA(10),CALPHA(10)/10000,'8'/
      DATA ALPHA(11),CALPHA(11)/10000,'9'/,
     1     ALPHA(12),CALPHA(12)/ 8000,'='/,
     2     ALPHA(13),CALPHA(13)/12000,''''/,
     3     ALPHA(14),CALPHA(14)/ 7000,'+'/,
     4     ALPHA(15),CALPHA(15)/11000,'A'/,
     5     ALPHA(16),CALPHA(16)/11000,'B'/,
     6     ALPHA(17),CALPHA(17)/11000,'C'/,
     7     ALPHA(18),CALPHA(18)/11000,'D'/,
     8     ALPHA(19),CALPHA(19)/11000,'E'/,
     9     ALPHA(20),CALPHA(20)/11000,'F'/
      DATA ALPHA(21),CALPHA(21)/11000,'G'/,
     1     ALPHA(22),CALPHA(22)/11000,'H'/,
     2     ALPHA(23),CALPHA(23)/11000,'I'/,
     3     ALPHA(24),CALPHA(24)/21000,'.'/,
     4     ALPHA(25),CALPHA(25)/ 3000,')'/,
     5     ALPHA(26),CALPHA(26)/ 6000,'-'/,
     6     ALPHA(27),CALPHA(27)/11000,'J'/,
     7     ALPHA(28),CALPHA(28)/11000,'K'/,
     8     ALPHA(29),CALPHA(29)/11000,'L'/,
     9     ALPHA(30),CALPHA(30)/11000,'M'/
      DATA ALPHA(31),CALPHA(31)/11000,'N'/,
     1     ALPHA(32),CALPHA(32)/11000,'O'/,
     2     ALPHA(33),CALPHA(33)/11000,'P'/,
     3     ALPHA(34),CALPHA(34)/11000,'Q'/,
     4     ALPHA(35),CALPHA(35)/11000,'R'/,
     5     ALPHA(36),CALPHA(36)/15000,'$'/,
     6     ALPHA(37),CALPHA(37)/ 9000,'*'/,
     7     ALPHA(38),CALPHA(38)/13000,' '/,
     8     ALPHA(39),CALPHA(39)/ 5000,'/'/,
     9     ALPHA(40),CALPHA(40)/11000,'S'/
      DATA ALPHA(41),CALPHA(41)/11000,'T'/,
     1     ALPHA(42),CALPHA(42)/11000,'U'/,
     2     ALPHA(43),CALPHA(43)/11000,'V'/,
     3     ALPHA(44),CALPHA(44)/11000,'W'/,
     4     ALPHA(45),CALPHA(45)/11000,'X'/,
     5     ALPHA(46),CALPHA(46)/11000,'Y'/,
     6     ALPHA(47),CALPHA(47)/11000,'Z'/,
     7     ALPHA(48),CALPHA(48)/ 1000,','/,
     8     ALPHA(49),CALPHA(49)/ 2000,'('/,
     9     ALPHA(50),CALPHA(50)/24000,'LTERM'/
      DATA ALPHA(51),CALPHA(51)/ 4000,'RTERM'/,
     1     ALPHA(52),CALPHA(52)/38000,'MCLTRM'/,
     2     ALPHA(53),CALPHA(53)/32000,'DBLAST'/,
     3     ALPHA(54),CALPHA(54)/25000,'DOT'/,
     4     ALPHA(55),CALPHA(55)/26000,'KREUZ'/,
     5     ALPHA(56),CALPHA(56)/45000,'CONAST'/
C
C          7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      DATA     QCODE / 150/, QMETA /  50/, QPMIDT/ 250/, QASSOC/ 200/
      DATA     QGEOML/  50/, QLENGT/ 100/, QPRODN/6000/, QPROCD/1500/
      DATA     QWORK / 100/, QIAGMX/ 250/, QPROD2/3000/, QSTACK/1500/
      DATA     QLEVPO/ 250/, QCLSWD/ 100/, QARGMX/ 250/, QKDENT/ 200/
      DATA     QGEOLO/  50/, QIPRMI/  35/, QKGRP / 100/, QAPTXX/ 120/
      DATA     QAPTYY/   5/, QSUBNA/ 109/, QHOLER/   4/, QINMBR/  13/
      DATA     QISUB /  10/, QIHOL /   7/, QNAMTB/3000/, QNUMTB/3000/
C
C     NOTE - THE FOLLOWING SETS OF ARRAY SIZES SHOULD BE KEPT IDENTICAL
C
C          1) GEOLOC (QGEOLO) AND GEOMLC (QGEOML).
C          2) ELBIT (QELBIT) AND ASSOC (QASSOC).
C          3) LENGTH (QLENGT) AND KGRP (QKGRP).
C
C         18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      DATA   BRANCH/1000000,10000,100,1,10*0,1/
C
C         19.    BIT CONSTANTS
C
C     DATA   ALLBTS/Z7FFFFFFF,ZFFFFFFFF,Z9999,ZAAAA,ZCCCC/
      DATA   ALLBTS/2147483647,-1/
      DATA   Z9999/-1718026240/
      DATA   ZAAAA/-1431699456/
      DATA   ZCCCC/-859045888/
C
      END
**** SOURCE FILE : M0000448.V01   ***
*
C
C *  BCDBIN  *  FORTRAN 77 SUBROUTINE      E.MCLELLAN  06.85
C
C PURPOSE      TO CONVERT AN INTEGER FROM BCD TO BINARY.
C
C LINKAGE      CALL BCDBIN (WORD, I, COUNT)
C
C ARGUMENTS    WORD     CONTAINS THE BCD REPRESENTATION OF
C                       THE NUMBER, LEFT JUSTIFIED.
C              I        WILL CONTAIN THE BINARY INTEGER
C              COUNT    WILL CONTAIN A COUNT OF THE NUMBER
C                       OF DIGITS IN THE NUMBER.
C
C
C SUBSIDIARIES TYPE                ENTRY
C              SUBROUTINE          HELP
C
C
      SUBROUTINE BCDBIN(WORD,I,COUNT)
C
      INTEGER I,COUNT
      CHARACTER WORD*8,W*8,CHAR,PERIOD,BLANK,ZERO
C
      DATA PERIOD/'.'/,BLANK/' '/,ZERO/'0'/
C
      W=WORD
      I=0
      DO 300 J=1,8
      COUNT=J
      CHAR=W(J:J)
      IF( CHAR   .EQ.PERIOD.OR. CHAR   .EQ.BLANK) GOTO 100
      NUM=ICHAR(CHAR)-ICHAR(ZERO)
      IF(NUM .GT.9.OR.NUM .LT.0) CALL HELP
      I=I*10+NUM
  300 CONTINUE
  200 RETURN
  100 COUNT=COUNT-1
      GOTO 200
      END
**** SOURCE FILE : M0000502.V01   ***
*
C
C *  BINBCD  *  FORTRAN 77 SUBROUTINE   E.MCLELLAN  06.85
C
      SUBROUTINE BINBCD(JNTGER,SYMBOL,COUNT)
      INTEGER COUNT,INTGER,TEN
      CHARACTER SYMBOL*8,BCD*8,ZERO,BLANK
      DATA BLANK/' '/,ZERO/'0'/
C
      INTGER=JNTGER
      COUNT=0
      BCD=BLANK
      IF(INTGER.LT.0) THEN
        SYMBOL=BCD
      ELSE
        WRITE(BCD,'(I8)') INTGER
        DO 10 I=1,8
          IF (BCD(I:I).NE.BLANK) THEN
            J=I
            GOTO 20
          ENDIF
   10   CONTINUE
C
   20   COUNT=9-J
        SYMBOL(1:COUNT)=BCD(J:8)
      ENDIF
      RETURN
      END
**** SOURCE FILE : M0000449.ORG   ***
*
C.....COMPUTER DEPENDENT ROUTINE      HELP.......HL GRAY    12/67  *CD*
C
C PURPOSE      TO PROVIDE A TRACE-BACK IN THE CASE OF A
C              CASTASTROPHIC FAILURE.
C
C LINKAGE      CALL HELP
C
C ARGUMENTS    NONE
C
C NOTES        THE METHOD USED TO OBTAIN THE TRACE-BACK
C              MIGHT NEED TO BE CHANGED ON SOME COMPUTERS.
C
C SUBSIDIARIES NONE
C
      SUBROUTINE HELP
C
C...     CATASTROPHIC FAILURE
C...     PRODUCE EXECUTION FAILURE SO AS TO OBTAIN AUTOMATIC TRACE-BACK
C
      DIMENSION Y(1)
      DO 10 I=100000,1000000,10
      X=Y(I)
   10 Y(I)=X
    1 RETURN
       END
**** SOURCE FILE : M0007340.W01   ***
*
C
C              FORTRAN SUBROUTINE INPUT
C
C LINKAGE       CALL   INPUT
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          INTEGER FCT.  NAME            SUBROUTINE    LOADI
C          SUBROUTINE    READ
C          SUBROUTINE    SHIFT
C
      SUBROUTINE INPUT
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMTBL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002),STACK(2,1500)
C  TOP:        POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C  STACK:      WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(3))
C
C        5.    CLASS CODE MODULI
C
C  MODULO:     NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      COMMON/MODULI/MODULO
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C*
C PURPOSE      TO PLACE IN THE FIRST COLUMN OF STACK THE INDEX
C              IN NAMTBL OF THE NEXT ITEM IN THE INPUT STREAM.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C
C              BLANK              C        ' ' BLANK WORD
C              CNT                I            COUNT OF CHARACTERS
C                                              FETCHED FROM INCHAR
C              ENDFL              L            FLAG FOR LAST ITEM ON
C                                              CARD
C              EXPIND             I        66  NAMTBL INDEX FOR END OF
C                                              CARD
C              I                  I            MODE OF CHARACTER
C              II                 I            NAMTBL POINTER FOR NEXT
C                                              CHARACTER
C              INCHAR       72    I            FOR READ TO PLACE FIRST
C                                              72 CHARS ON A CARD IN
C              J                  I            NAMTBL POINTER
C              SAVE               L    .FALSE. FLAG IF NEXT ITEM HAS
C                                              BEEN SAVED.
C              SEQNO              C*8          FOR READ TO PLACE
C                                              SEQUENCE NO. IN
C              SYM                L            FLAG SET WHEN A SYMBOL
C                                              (NOT A NO.) IS BEING
C                                              FORMED
C              WDFL               L            FLAG SET WHEN
C                                              CONCATINATION IS IN
C                                              PROGRESS
C              WORD               C*6          TEMPORARY STORAGE OF
C                                              CHARS. WHILE WORD IS
C                                              FORMED
C              XI                 I            NAMTBL POINTER
C              PTR                I            NAMBTL POINTER
C              CLASS              I            CLASS NUMBER
C
      LOGICAL   SAVE,SYM,WDFL,ENDFL,ERRFL
      DIMENSION INCHAR(73)
      CHARACTER SEQNO*8,WORD*6,BLANK
      DATA ENDFL,SAVE/.TRUE.,.FALSE./
      DATA INCHAR(73)/1/
      DATA EXPIND,BLANK/51,' ' /
C**
C...     IS NEW ITEM REQUIRED
C
      IF(SAVE) GO TO 10
C
C...     YES. IS NEW CARD REQUIRED
C
      IF(.NOT.ENDFL) GO TO 8
C
C...     YES. SET FLAGS
C
      SAVE = .FALSE.
      SYM = .FALSE.
      WDFL = .FALSE.
      ENDFL = .FALSE.
C
C...     READ NEXT CARD
C
    2 CALL READ(INCHAR,SEQNO)
      CNT=0
      ERRFL=.TRUE.
C
C...     HAVE WE REACHED THE END OF THIS CARD
C
    8 IF(CNT.EQ.72) GO TO 20
C
C...     NO. FETCH NEXT CHARACTER FROM INCHAR
C
      CNT = CNT + 1
      II = INCHAR(CNT)
C
C...     IS THIS A VALID CHARACTER
C
      IF (NAMTBL(II).NE.0) GOTO 7
C
C...     NO. REJECT CHARACTER AND PRODUCE DIAGNOSTIC
C
      IF(ERRFL)WRITE(VLFILE,3) SEQNO
    3 FORMAT(1H ,73HERROR NO. 7001 IN SUBROUTINE INPUT. INVALID CHARACTE
     *R. CARD SEQUENCE NO.=,A8)
      ERRFL=.FALSE.
      GO TO 8
    7 I = NAMTBL(II)/MODULO
C
C...     IS CHARACTER $
C
      IF(I.EQ.15) GO TO 400
C
C...     IS CHARACTER .
C
      IF(I.EQ.21)GO TO 1500
C
C...     TAKE APPROPRIATE ACTION FOR EACH TYPE OF CHARACTER
C
      GO TO (100,200,300,400,500,600,700,800,900,1000,1100,1200,1300),I
      WRITE(VLFILE,4) CNT,SEQNO
    4 FORMAT(1H ,46HERROR 7037 IN SUBROUTINE INPUT. CHARACTER NO. ,I3,
     * 37HILLEGAL, IGNORED.  CARD SEQUENCE NO.=,A8)
      GOTO 8
C
C...     PUT NAMTBL INDEX OF ITEM IN PTR
C
   10 PTR = II
      SAVE = .FALSE.
      GO TO 2000
C
C...     END OF CARD REACHED
C
   20 II=EXPIND
      ENDFL=.TRUE.
      GO TO 1500
C
C...     ,
C
  100  GO TO 1500
C
C...     (
C
  200  GO TO 1500
C
C...     )
C
  300  GO TO 1500
C
C...     $  FETCH NEXT CHARACTER
C
  400 J = INCHAR(CNT+1)
C
C...     IF $ THIS IS END OF CARD
C
      IF (NAMTBL(J).EQ.15000) GOTO 20
C
C...     NOT $ - THEREFORE CONTINUED ON NEXT CARD
C
      GO TO 2
C
C...     /
C
  500  GO TO 1500
C
C...     -
C
  600  GO TO 1500
C
C...     +
C
  700  GO TO 1500
C
C...     =
C
  800  GO TO 1500
C
C...     *
C
  900 GO TO 1500
C
C...     NUMERIC DIGIT
C
 1000 GO TO 1600
C
C...     LETTER - SET SYMBOL FLAG
C
 1100 SYM = .TRUE.
      GO TO 1600
C
C...     '
C
 1200 GO TO 1500
C
C...     BLANK
C
 1300 GO TO 8
C
C...     IS AN ITEM PARTIALLY FORMED
C
 1500 IF(.NOT.WDFL) GO TO 10
C
C...     YES. SET SAVE MARKER. THEN SET WORD(3) TO CLASS NUMBER IF
C...     THIS IS NOT A SYMBOL, TO CLASS IDENT IF IT IS.
C
      SAVE = .TRUE.
      IF (.NOT.SYM) CLASS=10000
      IF (SYM)      CLASS=35000
C
C...     CLEAR SYMBOL AND WORDFILL FLAGS, AND FIND NAMTBL INDEX OF
C...     THIS ITEM. SET COLUMN 1 OF NAMTBL IF THIS IS THE FIRST
C...     OCCURRENCE OF THIS ITEM.
C...     STORE NAMTBL INDEX OF ITEM IN PTR
C
      SYM = .FALSE.
      WDFL = .FALSE.
      XI = NAME(WORD)
      IF (NAMTBL(XI).EQ.0) NAMTBL(XI)=CLASS
      PTR = XI
      GO TO 2000
C
C...     ITEM NAME IS TO BE FORMED BY CONCATINATION.
C...     HAS THIS STARTED YET
C
 1600 IF(WDFL) GO TO 1610
C
C...     NO. CLEAR WORD AND SET WORDFILL FLAG
C
      WORD = BLANK
      WDFL = .TRUE.
C
C...     PUT CHARACTER IN NEXT VACANT POSITION
C
 1610 CALL SHIFT(WORD,CNAMTB(II))
      GO TO 8
C
C...     PUT NAMTBL POINTER TO ITEM IN STACK AND RETURN
C
 2000 TOP = TOP+1
      STACK(1,TOP) = PTR
      RETURN
       END
**** SOURCE FILE : M0006720.V03   ***
*
C
C              FORTRAN SUBROUTINE LOAD0
C
C LINKAGE       CALL   LOAD0(IPRO,KPRO)
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    SORT            SUBROUTINE    LOADB
C                                        SUBROUTINE    LOADT
C
      SUBROUTINE LOAD0(IPRO,KPRO)
C
      IMPLICIT INTEGER (A-Z)
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C  JASSOC:     STORAGE OF CLASS WORD COLLECTION. TABLE COMPRESSION
C
C       10.    ITEM AND GROUP CONTROL
C
      COMMON/LENGTH/LENGTH
      DIMENSION LENGTH(3,100)
C
C       14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250)
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515)
C  IASC:       POINTER TO THE LAST JASSOC ENTRY
      EQUIVALENCE (IASC,BRANCH(10))
C  STRTPR:     FIRST PRODCTION COLUMN IN ARRAY LEVPOS
      EQUIVALENCE (STRTPR,BRANCH(12))
C*
C PURPOSE      TO GATHER THE PRODUCTIONS POSSESSING THE SAME PRODUCTION
C              NUMBERS
C**
C     SORT THE LEVPOS TABLE ASCENDING IN FIRST AND SECOND COLUMN
C
      JPRO=IPRO
      IF(IPRO.EQ.1)GOTO 30
      CALL SORT(LEVPOS(1,1),12,KPRO,2,1)
      DO 10 I=1,KPRO
      IF(LEVPOS(12,I).GT.0)GOTO 20
   10 CONTINUE
   20 JPRO=I
      IPRO=I-1
      CALL SORT(LEVPOS(1,1),12,IPRO,1,2)
C
   30 KK=KPRO+1-JPRO
      CALL SORT(LEVPOS(1,JPRO),12,KK,1,2)
      II=JPRO
      JJ=LEVPOS(1,JPRO)
      KK=LEVPOS(1,KPRO)
      IF(STRTPR.EQ.1)GOTO 36
C
C     DELETE FOLLOWING LONGER PRODUCTIONS OF THE SAME START STRUCTURE
C
      DO 35 I=JPRO,KPRO
      IF(LEVPOS(10,I).NE.1)GOTO 35
      L=I+1
      DO 34 J=L,KPRO
      IF(LEVPOS(1,J).EQ.LEVPOS(1,I))LEVPOS(1,J)=0
   34 CONTINUE
   35 CONTINUE
C
C     GATHER THE PRODUCTIONS
C
   36 DO 70 I=JJ,KK
      LENGTH(1,I)=0
      LENGTH(2,I)=II
      DO 50 J=II,KPRO
      IF(LEVPOS(1,J)-I)50,40,60
   40 LENGTH(1,I)=LENGTH(1,I)+1
   50 CONTINUE
   60 II=J
   70 CONTINUE
C
      IASC=0
      II=KK-1
      DO 100 I=JJ,II
      IF(LENGTH(1,I).LE.0)GOTO 100
      K=I+1
      N=IASC+1
      ASC=IASC+2
      JASSOC(ASC)=LEVPOS(1,LENGTH(2,I))
      L=LENGTH(1,I)
      DO 90 J=K,KK
      IF(LENGTH(1,J).NE.L)GOTO 90
      DO 80 M=1,L
      IF(LEVPOS(2,LENGTH(2,I)-1+M).NE.LEVPOS(2,LENGTH(2,J)-1+M))GOTO 90
   80 CONTINUE
      ASC=ASC+1
      JASSOC(ASC)=LEVPOS(1,LENGTH(2,J))
      JASSOC(N)=-ASC
      IASC=ASC
      LENGTH(1,I)=-N
      LENGTH(1,J)=0
      DO 85 M=1,L
   85 LEVPOS(1,LENGTH(2,J)-1+M)=0
   90 CONTINUE
  100 CONTINUE
C
C     ZERO ALL PRODUCTIONS BUT ONE WHICH ARE BELONGING TO A GROUP
C     OF SAME PRODUCTION PATTERNS
C
      KK=JPRO-1
      DO 120 L=JPRO,KPRO
      IF(LEVPOS(1,L).EQ.0)GOTO 120
      KK=KK+1
      IF(LEVPOS(10,L).EQ.1)LENGTH(2,LEVPOS(1,L))=-LEVPOS(2,L)
      DO 110 J=1,12
  110 LEVPOS(J,KK)=LEVPOS(J,L)
  120 CONTINUE
      KPRO=KK
C
      RETURN
      END
**** SOURCE FILE : M0006721.W01   ***
*
C
C              FORTRAN SUBROUTINE LOAD1
C
C LINKAGE       CALL   LOAD1
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    SORT            SUBROUTINE    LOADU
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOAD1
C
      IMPLICIT INTEGER (A-Z)
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002),PRODR(3000)
C  PRODR:      ORDINAL NUMBERS OF THE PRD. TABLES IN SEQUENT. MODE
      EQUIVALENCE (PRODR(1),STKLST(3))
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  VLFILE      VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QPROCD:     DIMENSION OF ARRAY PROCOD
      EQUIVALENCE (QPROCD,LDXSIZ(8))
C
C       14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250)
C
C       15.    INTEGER CODE AND LEVPOS COLUMN OF A PRODUCTION
C
      COMMON/PROCOD/PROCOD
      DIMENSION PROCOD(2,1500)
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515)
C  MILION:     CONTAINS DIVISOR 1000000
      EQUIVALENCE (MILION,BRANCH(1))
C  TENMIL:     CONTAINS DIVISOR 10000
      EQUIVALENCE (TENMIL,BRANCH(2))
C  CENT:       CONTAINS DIVISOR 100
      EQUIVALENCE (CENT,BRANCH(3))
C  LEVEL:      ACTUALLY PROCESSED PRODUCTION LEVEL
      EQUIVALENCE (LEVEL,BRANCH(5))
C  ID1:        BEGIN OF A REGION IN ARRAY PROCOD TO BE PROCESSED
      EQUIVALENCE (ID1,BRANCH(8))
C  ID2:        END OF A REGION IN ARRAY PROCOD TO BE PROCESSED
      EQUIVALENCE (ID2,BRANCH(9))
C*
C PURPOSE      TO LOAD INTEGER CODE OF LEVELS TWO,THREE, FOUR AND FIVE
C              INTO THE ARRAY PROCOD.
C
      DIMENSION JD(8),SAVE(50)
      EQUIVALENCE(JD(1),J1),(JD(2),J2),(JD(3),J3),(JD(4),J4),(JD(5),J5),
     *          (JD(6),J6),(JD(7),J7),(JD(8),J8)
C**
C     FIND ALL POSSIBLE VARIATIONS OF A STARTING CLASS WORD
C
      LVA=LEVEL
      LVE=LEVEL+3
      PSTRT=0
      IF(LEVEL.NE.6)GOTO 50
      IF((ID2-ID1).LT.50)GOTO 20
      WRITE(VLFILE,10)
   10 FORMAT('   ERROR: ARRAY SAVE IN SUBROUTINE LOAD1 EXCEEDED. REDEFIN
     *E ARRAY SAVE')
      STOP
   20 PSTRT=PEND
      N=0
      DO 30 I=ID1,ID2
      N=N+1
   30 SAVE(N)=PROCOD(2,I)
      CALL SORT(SAVE(1),1,N,1,1)
      II=1
      DO 40 I=2,N
      IF(SAVE(I).EQ.SAVE(I-1))GOTO 40
      II=II+1
      SAVE(II)=SAVE(I)
   40 CONTINUE
      ID2=ID1+II-1
   50 NN=PSTRT
      II=0
      DO 80 N=ID1,ID2
      II=II+1
      I=N
      IF(LEVEL.EQ.6)I=SAVE(II)
      LVL=LEVPOS(10,I)
      IF(LVL.LT.LVA)GOTO 80
      DO 60 MM=LVA,LVE
      JD(MM-LVA+1)=LEVPOS(MM,I)
      JD(MM-LVA+5)=LEVPOS(MM+1,I)-1
      IF(JD(MM-LVA+1).LT.1)JD(MM-LVA+1)=1
      IF(JD(MM-LVA+5).LT.JD(MM-LVA+1))JD(MM-LVA+5)=JD(MM-LVA+1)
   60 CONTINUE
      IF(LVE.EQ.9)J8=J4
      DO 70 J=J1,J5
      JJ=IABS(PRODR(J))*MILION
      DO 70 K=J2,J6
      KK=JJ
      IF(LVL.GT.LVA)KK=KK+IABS(PRODR(K))*TENMIL
      DO 70 L=J3,J7
      LL=KK
      IF(LVL.GT.LVA+1)LL=LL+IABS(PRODR(L))*CENT
      DO 70 M=J4,J8
      MM=LL
      IF(LVL.GT.LVA+2.AND.LVE.LT.9)MM=MM+IABS(PRODR(M))
      IF(MM.EQ.0)GOTO 70
      IF(NN.EQ.QPROCD)CALL SPILL(8,'LOAD1   ')
      NN=NN+1
      PROCOD(1,NN)=MM
      PROCOD(2,NN)=I
   70 CONTINUE
   80 CONTINUE
      ID1=PSTRT+1
      CALL SORT(PROCOD(1,ID1),2,NN-PSTRT,1,2)
C
C     DELETE A FOLLOWING PRODUCTION OF THE SAME FORMAT
C
      ID2=PSTRT
      MM=-1
      LL=6
      DO 100 I=ID1,NN
      IF(MM.NE.PROCOD(1,I))GOTO 90
      J2=PROCOD(2,I)
      IF(LEVPOS(10,J2).LT.6.AND.LEVPOS(10,LL).LT.6)GOTO 100
      IF(LEVPOS(10,J2).EQ.LEVPOS(10,LL).AND.
     *   LEVPOS(12,J2).EQ.LEVPOS(12,LL))GOTO 100
   90 ID2=ID2+1
      MM=PROCOD(1,I)
      LL=PROCOD(2,I)
      PROCOD(1,ID2)=MM
      PROCOD(2,ID2)=LL
  100 CONTINUE
      IF(LEVEL.EQ.2)PEND=NN
C
      RETURN
      END
**** SOURCE FILE : M0006722.W01   ***
*
C
C              FORTRAN SUBROUTINE LOAD2
C
C LINKAGE       CALL   LOAD2(FROM)
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    SORT            SUBROUTINE    LOADU
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOAD2(FROM)
C
      IMPLICIT INTEGER (A-Z)
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QASSOC:     DIMENSION OF ARRAY ASSOC
      EQUIVALENCE (QASSOC,LDXSIZ(4))
C  QPROD2:     DIMENSION OF ARRAY PROD2
      EQUIVALENCE (QPROD2,LDXSIZ(11))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  PDERR:      NAMTBL INDEX OF '28' = PROD. NOT FOUND
C  KNT:        NAMTBL INDEX OF ALL
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C  JASSOC:     STORAGE OF CLASS WORD COLLECTION. TABLE COMPRESSION
C
C       13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C  PROD2:      CONTAINS PRODUCTION TABLES IN JUMP MODE
C
C       14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250)
C
C       15.    INTEGER CODE AND LEVPOS COLUMN OF A PRODUCTION
C
      COMMON/PROCOD/PROCOD
      DIMENSION PROCOD(2,1500)
C
C       16.    RELATION OF ORDINAL NUMBERS TO NAMTBL INDEXES
C
      COMMON/CLSWRD/CLSWRD
      DIMENSION CLSWRD(100)
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515),LEVPRD(2,250)
C  TENMIL:     CONTAINS DIVISOR 10000
      EQUIVALENCE (TENMIL,BRANCH(2))
C  LEVEL:      ACTUALLY PROCESSED PRODUCTION LEVEL
      EQUIVALENCE (LEVEL,BRANCH(5))
C  MAXCLS:     NUMBER OF DEFINITIONS IN A TRANSFORMATION SECTIION
      EQUIVALENCE (MAXCLS,BRANCH(6))
C  IADRES:     CODE DESCRIBES LEVEL NUMBER AND LEADING CLASS WORD
      EQUIVALENCE (IADRES,BRANCH(7))
C  ID1:        BEGIN OF A REGION IN ARRAY PROCOD TO BE PROCESSED
      EQUIVALENCE (ID1,BRANCH(8))
C  ID2:        END OF A REGION IN ARRAY PROCOD TO BE PROCESSED
      EQUIVALENCE (ID2,BRANCH(9))
C  IASC:       POINTER TO THE LAST JASSOC ENTRY
      EQUIVALENCE (IASC,BRANCH(10))
C  IRET:       ALL LEVELS ARE PROCESSED
      EQUIVALENCE (IRET,BRANCH(11))
C  STRTPR:     FIRST PRODCTION COLUMN IN ARRAY LEVPOS
      EQUIVALENCE (STRTPR,BRANCH(12))
C  ENDPRD:     LAST PRODCTION COLUMN IN ARRAY LEVPOS
      EQUIVALENCE (ENDPRD,BRANCH(13))
C  LGT:        POINTER TO LAST ENTRY IN LENGTH
      EQUIVALENCE (LGT,BRANCH(14))
C  LEVPRD:     CONTAINS THE PRODUCTION NUMBERS FOR A FAILED SEARCH
      EQUIVALENCE (LEVPRD(1,1),BRANCH(16))
C*
      DIMENSION LVL(2,400)
C
C PURPOSE      TO LOAD PRODUCTION LEVELS TWO,THREE, FOUR AND FIVE
C              INTO THE PRODUCTION TABLES (PROD2).
C**
      DIVIS=BRANCH(LEVEL-1)
      IF(LEVEL.GT.5)DIVIS=BRANCH(LEVEL-5)
C
C     SEARCH FOR PARTICULAR AND ENDING PRODUCTIONS.
C
      IRET=1
      LPROD=IPROD
      I1=0
      PP=-PDERR
      DO 90 I=ID1,ID2
      J1=PROCOD(1,I)/DIVIS
      IF(I1.EQ.J1)GOTO 80
      I1=J1
      IPROD=IPROD+2
      IF(IPROD.GE.QPROD2)CALL SPILL(11,'LOAD2   ')
      PROD2(1,IPROD-1)=IADRES
      PROD2(2,IPROD-1)=I1
      PROD2(1,IPROD)=I
   80 PROD2(2,IPROD)=I
      L=PROCOD(2,I)
      IF(PP.EQ.-PDERR)PP=-IABS(LEVPOS(11,L))
      IF(LEVPRD(2,L).LT.LEVEL)PP=-LEVPRD(1,L)
   90 CONTINUE
C
C         FADE OUT ENDING OR PARTICULAR PRODUCTIONS
C
      KK=LPROD+2
      DO 110 I=KK,IPROD,2
      ID1=PROD2(1,I)
      ID2=PROD2(2,I)
      IF(ID2.GT.ID1)GOTO 110
      PROD2(2,I)=PROCOD(2,ID2)
      IF(LEVPOS(10,PROD2(2,I)).GT.LEVEL)GOTO 100
      PROD2(1,I)=0
      GOTO 110
  100 PROD2(1,I)=-LEVEL-1
  110 CONTINUE
C
C         COLLECT CLASS WORDS WITH SAME FINAL PRODUCTIONS
C               WHICH REMAINING IN THE LEVEL SECTION
C
      KPROD=IPROD
      IPROD=LPROD
      DO 210 I=KK,KPROD,2
      IF(PROD2(1,I-1).EQ.PROD2(2,I-1))GOTO 210
      K1=PROD2(1,I)
      IF(K1.LE.0)GOTO 200
      K2=PROD2(2,I)
      IF(I.EQ.KPROD)GOTO 160
      LL=I+2
      ASC=IASC+2
      JASC=IASC
      NN=IASC+1
      JASSOC(ASC)=PROD2(2,I-1)
      DO 130 L=LL,KPROD,2
      L1=PROD2(1,L)
      IF(L1.LE.0)GOTO 130
      L2=PROD2(2,L)
      IF((K2-K1).NE.(L2-L1))GOTO 130
      K=K2-K1+1
      DO 120 J=1,K
      IF(PROCOD(2,K1-1+J).NE.PROCOD(2,L1-1+J))GOTO 130
  120 CONTINUE
      ASC=ASC+1
      IF(ASC.GT.4*QASSOC)CALL SPILL(4,'LOAD2   ')
      JASSOC(NN)=-ASC
      JASSOC(ASC)=PROD2(2,L-1)
      IASC=ASC
      PROD2(2,L-1)=PROD2(1,L-1)
      PROD2(2,I-1)=TENMIL+NN
  130 CONTINUE
      IF(NN.GT.IASC.OR.JASC.EQ.0)GOTO 160
      K=IASC-NN
      DO 150 J=1,JASC
      IF(JASSOC(J).GE.0)GOTO 150
      IF(K.NE.(-JASSOC(J)-J))GOTO 150
      DO 140 L=1,K
      IF(JASSOC(J+L).NE.JASSOC(NN+L))GOTO 150
  140 CONTINUE
      IASC=JASC
      PROD2(2,I-1)=TENMIL+J
      GOTO 160
  150 CONTINUE
      JASC=IASC
  160 LL=PROCOD(2,K1)
      K1=K1+1
      DO 170 J=K1,K2
      IF(PROCOD(2,J).NE.LL)GOTO 200
  170 CONTINUE
      IF(LEVPOS(10,LL).GT.LEVEL)GOTO 190
      PROD2(1,I)=0
      PROD2(2,I)=-LEVPOS(12,LL)
      GOTO 200
  190 PROD2(1,I)=-LEVEL-1
      PROD2(2,I)=LL
  200 IPROD=IPROD+2
      PROD2(1,IPROD-1)=PROD2(1,I-1)
      PROD2(2,IPROD-1)=PROD2(2,I-1)
      PROD2(1,IPROD)=PROD2(1,I)
      PROD2(2,IPROD)=PROD2(2,I)
  210 CONTINUE
C
C     COMPRESS ARRAY PROCOD AND SEARCH FOR ALTERNATIV PROD. NUMBER
C
      KPROD=IPROD
      DO 300 I=KK,KPROD,2
      IF(PROD2(1,I).LE.0)GOTO 300
      ID1=PROD2(1,I)
      ID2=PROD2(2,I)
      IF(LEVEL.NE.5)GOTO 230
C
      DO 220 J=ID1,ID2
      IF(LEVPOS(10,PROCOD(2,J)).EQ.5)GOTO 221
  220 CONTINUE
      GOTO 260
  221 LL=PROCOD(2,J)
      DO 223 L=ID1,ID2
      IF(LL.NE.PROCOD(2,L))GOTO 222
      PROCOD(1,L)=0
      GOTO 223
  222 LEVPRD(1,PROCOD(2,L))=LEVPOS(12,LL)
      LEVPRD(2,PROCOD(2,L))=LEVEL
  223 CONTINUE
      GOTO 260
C
  230 DO 250 J=ID1,ID2
      K1=PROCOD(1,J)
      IF(MOD(K1,DIVIS).NE.0)GOTO 250
      LL=J+1
      IF(LL.GT.ID2)GOTO 250
      K1=K1/DIVIS
      L1=PROCOD(2,J)
      DO 240 L=LL,ID2
      K2=PROCOD(1,L)/DIVIS
      IF(K2.GT.K1)GOTO 250
      L2=PROCOD(2,L)
      LEVPRD(1,L2)=LEVPOS(12,L1)
      LEVPRD(2,L2)=LEVEL
      PROCOD(1,J)=0
  240 CONTINUE
  250 PROCOD(1,J)=MOD(PROCOD(1,J),DIVIS)
  260 LL=ID2
      ID2=ID1-1
      I1=0
      DO 270 J=ID1,LL
      IF(PROCOD(1,J).LE.0)GOTO 270
      ID2=ID2+1
      IF(ID1.EQ.ID2)NN=PROCOD(2,J)
      IF(PROCOD(2,J).NE.NN)I1=I1+1
      PROCOD(1,ID2)=PROCOD(1,J)
      PROCOD(2,ID2)=PROCOD(2,J)
  270 CONTINUE
      IF(ID2.LE.ID1.OR.I1.LE.0)GOTO 280
      PROD2(1,I)=ID1
      PROD2(2,I)=ID2
      IRET=0
      GOTO 300
  280 IF(LEVPOS(10,PROCOD(2,ID1)).EQ.LEVEL)GOTO 290
      PROD2(1,I)=-LEVEL-1
      PROD2(2,I)=PROCOD(2,ID1)
      GOTO 300
  290 PROD2(1,I)=0
      PROD2(2,I)=-LEVPOS(12,PROCOD(2,ID1))
  300 CONTINUE
C
C         SEARCH FOR UNIFORM PARTICULAR PRODUCTION
C
      DO 340 I=KK,KPROD,2
      IF(PROD2(1,I).GE.0)GOTO 340
      L2=PROD2(2,I)
      L1=-PROD2(1,I)
      DO 320 K2=STRTPR,ENDPRD
      IF(LEVPOS(L1,K2).NE.LEVPOS(L1,L2))GOTO 320
      IF(LEVPOS(11,K2).GT.0.OR.L2.EQ.K2)GOTO 320
      IF(IABS(LEVPOS(11,K2)).NE.IABS(LEVPOS(11,L2)))GOTO 320
      IF(LEVPRD(1,K2).NE.LEVPRD(1,L2))GOTO 320
      PROD2(2,I)=K2
      GOTO 340
  320 CONTINUE
      IF(LEVPOS(11,L2).GT.0)LEVPOS(11,L2)=-LEVPOS(11,L2)
  340 CONTINUE
C
C         COLLECT CLASS WORDS WITH SAME FINAL PRODUCTIONS
C                   OF THE PARTICULAR PRODUCTIONS
C
  350 IPROD=LPROD
      DO 460 I=KK,KPROD,2
      IF(PROD2(1,I-1).EQ.PROD2(2,I-1))GOTO 460
      IF(PROD2(1,I).GT.0)GOTO 450
      LL=I+2
      IF(LL.GT.KPROD)GOTO 440
      ASC=IASC+2
      JASC=IASC
      NN=IASC+1
      I1=0
      JASSOC(ASC)=PROD2(2,I-1)
      IF(JASSOC(ASC).GT.TENMIL)I1=1
      DO 360 L=LL,KPROD,2
      IF(PROD2(1,L).NE.PROD2(1,I))GOTO 360
      IF(PROD2(2,L).NE.PROD2(2,I))GOTO 360
      ASC=ASC+1
      IF(ASC.GT.4*QASSOC)CALL SPILL(4,'LOAD2   ')
      JASSOC(NN)=-ASC
      JASSOC(ASC)=PROD2(2,L-1)
      IF(JASSOC(ASC).GT.TENMIL)I1=1
      IASC=ASC
      PROD2(2,L-1)=PROD2(1,L-1)
      PROD2(2,I-1)=TENMIL+NN
  360 CONTINUE
      IF(NN.GT.IASC.OR.JASC.EQ.0)GOTO 440
      IF(I1.EQ.0)GOTO 410
      L1=NN+1
      L2=-JASSOC(NN)
      LL=L2
      DO 390 J=L1,L2
      IF(JASSOC(J).GT.TENMIL)GOTO 370
      LL=LL+1
      JASSOC(LL)=JASSOC(J)
      GOTO 390
  370 K=JASSOC(J)-TENMIL+1
      L=-JASSOC(K-1)
      DO 380 I1=K,L
      LL=LL+1
  380 JASSOC(LL)=JASSOC(I1)
  390 CONTINUE
      CALL SORT(JASSOC(L2+1),1,LL-L2,1,1)
      IASC=NN+1
      L2=L2+2
      JASSOC(IASC)=JASSOC(L2-1)
      DO 400 I1=L2,LL
      IF(JASSOC(I1).LE.JASSOC(I1-1))GOTO 400
      IASC=IASC+1
      JASSOC(IASC)=JASSOC(I1)
  400 CONTINUE
      JASSOC(NN)=-IASC
  410 K=IASC-NN
      DO 430 J=1,JASC
      IF(JASSOC(J).GE.0)GOTO 430
      IF(K.NE.(-JASSOC(J)-J))GOTO 430
      DO 420 L=1,K
      IF(JASSOC(J+L).NE.JASSOC(NN+L))GOTO 430
  420 CONTINUE
      IASC=JASC
      PROD2(2,I-1)=TENMIL+J
      GOTO 440
  430 CONTINUE
      JASC=IASC
  440 IF(PROD2(1,I).LT.0)GOTO 450
      PROD2(2,I)=-LEVPOS(12,PROD2(2,I))
  450 IPROD=IPROD+2
      PROD2(1,IPROD-1)=PROD2(1,I-1)
      PROD2(2,IPROD-1)=PROD2(2,I-1)
      PROD2(1,IPROD)=PROD2(1,I)
      PROD2(2,IPROD)=PROD2(2,I)
  460 CONTINUE
C
C     SORT SO THAT PARTICULAR PRODUCTIONS STAND AT THE END OF THE COLUMN
C
      L2=IPROD
      DO 462 I=KK,IPROD,2
      IF(PROD2(1,I).GE.0)GOTO 462
      L2=L2+2
      IF(L2.GE.QPROD2)CALL SPILL(11,'LOAD2   ')
      PROD2(2,L2-1)=PROD2(2,I-1)
      PROD2(1,L2)=PROD2(1,I)
      PROD2(2,L2)=PROD2(2,I)
  462 CONTINUE
      IF(L2.EQ.IPROD)GOTO 469
      LL=LPROD
      DO 464 I=KK,IPROD,2
      IF(PROD2(1,I).LT.0)GOTO 464
      LL=LL+2
      PROD2(2,LL-1)=PROD2(2,I-1)
      PROD2(1,LL)=PROD2(1,I)
      PROD2(2,LL)=PROD2(2,I)
  464 CONTINUE
      L1=IPROD+2
      K2=L1
      IF(L2.EQ.L1)GOTO 467
  465 K1=0
      DO 466 I=L1,L2,2
      IF(PROD2(2,I).LE.K1)GOTO 466
      K1=PROD2(2,I)
      K2=I
  466 CONTINUE
  467 LL=LL+2
      PROD2(2,LL-1)=PROD2(2,K2-1)
      PROD2(1,LL  )=PROD2(1,K2  )
      PROD2(2,LL  )=PROD2(2,K2  )
      PROD2(2,K2)=0
      IF(LL.LT.IPROD)GOTO 465
C
C     END OF THE LEVEL
C
  469 J=PROD2(2,IPROD-1)
      IF(J.LT.1.OR.J.GT.MAXCLS)GOTO 470
      IF(CLSWRD(J).EQ.KNT)GOTO 480
  470 IPROD=IPROD+1
      IF(IPROD.GE.QPROD2)CALL SPILL(11,'LOAD2   ')
      PROD2(1,IPROD)=0
      PROD2(2,IPROD)=PP
C
  480 IF(STRTPR.EQ.1)GOTO 560
C
C     COMPRESS LEVEL SECTION IF BASIC PRODUCTIONS
C
      IF(LGT.EQ.0)GOTO 550
      K=0
      L=0
  490 K=K+1
      IF(K.GT.LGT)GOTO 530
      IF(LVL(2,K).NE.LEVEL)GOTO 490
      I=LVL(1,K)+1
      J=IPROD+1
  500 I=I-1
      J=J-1
      IF(J.LE.LPROD)GOTO 540
      IF(PROD2(1,J).GT.TENMIL)GOTO 510
      IF(PROD2(1,J).GT.0)GOTO 520
      IF(PROD2(1,J).NE.PROD2(1,I))GOTO 520
  510 IF(PROD2(2,J).NE.PROD2(2,I))GOTO 520
      GOTO 500
  520 N=IPROD-J
      IF(N.LT.3.OR.N.LE.L)GOTO 490
      L=N
      M=LVL(1,K)-L+1
      GOTO 490
  530 IF(L.EQ.0)GOTO 550
      IPROD=IPROD-L+1
      IF(PROD2(1,IPROD).GT.TENMIL)GOTO 535
      IPROD=IPROD+1
      M=M+1
  535 PROD2(1,IPROD)=0
      PROD2(2,IPROD)=TENMIL+4*M
      GOTO 560
C
  540 PROD2(1,FROM+1)=0
      PROD2(2,FROM+1)=TENMIL+4*(I+1)
      IPROD=LPROD
      IRET=1
      GOTO 560
C
  550 IF(LGT.GE.400)GOTO 560
      LGT=LGT+1
      LVL(1,LGT)=IPROD
      LVL(2,LGT)=LEVEL
C
  560 RETURN
      END
**** SOURCE FILE : M0006710.V08   ***
*
C
C              FORTRAN SUBROUTINE LOADA
C
C LINKAGE       CALL   LOADA
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    BINBCD          SUBROUTINE    LOADB
C          SUBROUTINE    CFORM           SUBROUTINE    LOADT
C
      SUBROUTINE LOADA
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMBTL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002),PRODR(3000)
C  PRODR:      ORDINAL NUMBERS OF THE PRD. TABLES IN SEQUENT. MODE
      EQUIVALENCE (PRODR(1),STKLST(3))
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  ELFILE:     I/O FILE NUMBER OF TRANSFORMED PRODUCTION TABLE
      EQUIVALENCE (ELFILE,SYMFIL(4))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  BREAK:      VALUE OF POSTN FOR BRKPNT
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C  JASSOC:     STORAGE OF CLASS WORD COLLECTION. TABLE COMPRESSION
C
C       13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C  PROD2:      CONTAINS PRODUCTION TABLES IN JUMP MODE
C
C       16.    RELATION OF ORDINAL NUMBERS TO NAMTBL INDEXES
C
      COMMON/CLSWRD/CLSWRD
      DIMENSION CLSWRD(100)
C
C       17.    OUTPUT SPACE FOR TRANSFORMED PRODUCTION LIST
C
      COMMON/OUTARY/OUTARY
      CHARACTER*80 OUTARY
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515)
C  TENMIL:     CONTAINS DIVISOR 10000
      EQUIVALENCE (TENMIL,BRANCH(2))
C  MAXCLS:     NUMBER OF DEFINITIONS IN A TRANSFORMATION SECTIION
      EQUIVALENCE (MAXCLS,BRANCH(6))
C*
C PURPOSE      TO OUTPUT THE BASIC PRODUCTION TABLE AND THE
C              GEOMETRIC PRODUCTION TABLE ON A TEMPORARY FILE
C**
      IF(BREAK.EQ.0)GOTO 165
      DO 160 I=1,BREAK
      OUTARY(1:72)=' '
      L=TENMIL+4*I
      CALL BINBCD(L,OUTARY(73:80),N)
      J1=PROD2(1,I)
      J2=PROD2(2,I)
      IF(J1.EQ.0)GOTO 140
      IF(J2.GT.MAXCLS)GOTO 110
C
C     OUTPUT OF A PARTICULAR CLASS WORD
C
      J2=CLSWRD(J2)
      CALL CFORM(CNAMTB(J2),OUTARY,8,6)
      GOTO 160
C
C     OUTPUT OF A GROUP OF CLASS WORDS
C
  110 J2=J2-TENMIL+1
      J1=IABS(JASSOC(J2-1))
      K=0
      DO 130 J=J2,J1
      K=K+1
      LL=JASSOC(J)
      LL=CLSWRD(LL)
      CALL CFORM(CNAMTB(LL),OUTARY,8*K,6)
      IF(J.EQ.J1)GOTO 160
      CALL CFORM(',',OUTARY,8*K+7,1)
      IF(K.LT.7)GOTO 130
      CALL CFORM(',$',OUTARY,62,2)
      WRITE(ELFILE,999)OUTARY
      OUTARY(1:72)=' '
      K=0
  130 CONTINUE
      GOTO 160
C
  140 IF(J2.GT.TENMIL)GOTO 150
C
C     OUTPUT OF A PRODUCTION NUMBER OR BRKPNT
C
      CALL CFORM(CNAMTB(-J2),OUTARY,8,6)
      GOTO 160
C
C     OUTPUT OF A GOTO ADDRESS
C
  150 CALL BINBCD(J2,OUTARY(9:16),N)
  160 WRITE(ELFILE,999)OUTARY
C
C     OUTPUT OF THE PARTICULAR PRODUCTION SECTION
C
  165 BREAK=BREAK+1
      IF(BREAK.GE.IPROD)GOTO 250
      DO 230 I=BREAK,IPROD
      OUTARY(1:72)=' '
      L=TENMIL+4*I
      CALL BINBCD(L,OUTARY(73:80),N)
      J1=PROD2(1,I)
      J2=PROD2(2,I)
      IF(J2.GE.0)GOTO 180
C
C     OUTPUT OF THE PRODUCTION NUMBER
C
      CALL CFORM(CNAMTB(-J2),OUTARY,8,6)
      GOTO 230
C
C     OUTPUT OF A GROUP OF CLASS WORDS
C
  180 K=0
      DO 200 J=J1,J2
      K=K+1
      LL=IABS(PRODR(J))
      LL=CLSWRD(LL)
      CALL CFORM(CNAMTB(LL),OUTARY,8*K,6)
      IF(J.EQ.J2)GOTO 230
      CALL CFORM(',',OUTARY,8*K+7,1)
      IF(K.LT.7)GOTO 200
      CALL CFORM(',$',OUTARY,62,2)
      WRITE(ELFILE,999)OUTARY
      OUTARY(1:72)=' '
      K=0
  200 CONTINUE
  230 WRITE(ELFILE,999)OUTARY
C
  250 RETURN
  999 FORMAT(A80)
      END
**** SOURCE FILE : M0006711.W01   ***
*
C
C              FORTRAN SUBROUTINE LOADB
C
C LINKAGE       CALL   LOADB
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    BINBCD          SUBROUTINE    LOADP
C          SUBROUTINE    LOADA
C          SUBROUTINE    LOADI
C          SUBROUTINE    LOADU
C          SUBROUTINE    LOAD0
C          SUBROUTINE    CFORM
C          SUBROUTINE    SORT
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOADB
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMTBL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002),PRODR(3000)
C  PRODR:      ORDINAL NUMBERS OF THE PRD. TABLES IN SEQUENT. MODE
      EQUIVALENCE (PRODR(1),STKLST(3))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
      DIMENSION CODES(150),DIGIT(2)
C  DIGIT:      (1)=CODE CLASS 10000,(2)=NAMTBL INDEX OF 'DIGIT '
      EQUIVALENCE (DIGIT(1),CODES(19))
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  ELFILE:     I/O FILE NUMBER OF TRANSFORMED PRODUCTION TABLE
      EQUIVALENCE (ELFILE,SYMFIL(4))
C  LCDATA      INPUT FILE NUMBER OF PRODUCTION TABLES SEQUEN. MODE
      EQUIVALENCE (LCDATA,SYMFIL(5))
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QLENGT:     DIMENSION OF ARRAY LENGTH
      EQUIVALENCE (QLENGT,LDXSIZ(6))
C  QSTACK:     DIMENSION OF ARRAY PRODR
      EQUIVALENCE (QSTACK,LDXSIZ(12))
C  QLEVPO:     DIMENSION OF ARRAY LEVPOS
      EQUIVALENCE (QLEVPO,LDXSIZ(13))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  ERROR:      FLAG SET IF ERROR IN PRODUCTION TABLE
C  IBKPNT:     NAMTBL INDEX OF BRKPNT
C  PRODI:      POINTER TO LAST ENTRY IN PRODN TABLE
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  BREAK:      VALUE OF POSTN FOR BRKPNT
C  KNT:        NAMTBL INDEX OF ALL
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C
C       10.    ITEM AND GROUP CONTROL
C
      COMMON/LENGTH/LENGTH
C  LENGTH:     TABLE OF GROUPS AND NUMBER OF CONTAINED ELEMENTS
      DIMENSION LENGTH(3,100)
C
C       13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C  PROD2:      CONTAINS PRODUCTION TABLES IN JUMP MODE
C
C       14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250)
C
C       16.    RELATION OF ORDINAL NUMBERS TO NAMTBL INDEXES
C
      COMMON/CLSWRD/CLSWRD
      DIMENSION CLSWRD(100)
C
C       17.    OUTPUT SPACE FOR TRANSFORMED PRODUCTION LIST
C
      COMMON/OUTARY/OUTARY
      CHARACTER*80 OUTARY
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515)
C  TENMIL:     CONTAINS DIVISOR 10000
      EQUIVALENCE (TENMIL,BRANCH(2))
C  LEVEL:      ACTUALLY PROCESSED PRODUCTION LEVEL
      EQUIVALENCE (LEVEL,BRANCH(5))
C  MAXCLS:     NUMBER OF DEFINITIONS IN A TRANSFORMATION SECTIION
      EQUIVALENCE (MAXCLS,BRANCH(6))
C  CONCAT:     =1 IF TRANSFORMATION OF THE CONCATENATING PRODUCTIONS
      EQUIVALENCE (CONCAT,BRANCH(15))
C*
C PURPOSE      TO CHANGE THE BASIC PRODUCTION TABLE FROM
C              SEQUENTIAL READ FORMAT TO A JUMP MODE TABLE.
C
      CHARACTER*6 JALL,IDIGIT
      LOGICAL ERRPRT
      DATA IDIGIT/'DIGIT'/,ERRPRT/.FALSE./,JALL/'ALL'/
      CHARACTER*6  MACPRD(25)
      DATA   MACPRD           /'RTERM'   ,'10028'   ,'MCLTRM'  ,
     *  '10060'    ,'ALL'     ,'10080'   ,'MCLTRM'  ,'56'      ,
     *  'TERMAC'   ,'10048'   ,'10088'   ,'MCLTRM'  ,'54'      ,
     *  '10104'    ,'MCLTRM'  ,'58'      ,'ALL'     ,'10096'   ,
     *  'MACVBL'   ,'MCLTRM'  ,'60'      ,'ALL'     ,'10096'   ,
     *  'MCLTRM'   ,'55'      /
C**
      QPRODR=QSTACK*2
      CNAMTB(KNT)=JALL
C
      CLSWRD(MAXCLS)=KNT
C
C     SAVE CONTENT OF PRODN IN PRODR AFTER HAVING REPLACED THE NAMTBL-
C     ADDRESSES OF THE CLASS WORDS BY THE PRIORITY NUMBER.
C     FILL THE ARRAY LEVPOS (LEVEL POSITION). IT IS
C     LEVPOS( 1,X)   PRIORITY NUMBER
C     LEVPOS( 2,X)   START ADDRESS (IN PRODR) OF THE 2ND LEVEL
C     LEVPOS( 3,X)   START ADDRESS (IN PRODR) OF THE 3RD LEVEL
C     LEVPOS( 4,X)   START ADDRESS (IN PRODR) OF THE 4TH LEVEL
C     LEVPOS( 5,X)   START ADDRESS (IN PRODR) OF THE 5TH LEVEL
C     LEVPOS( 6,X)   START ADDRESS (IN PRODR) OF THE 6TH LEVEL
C     LEVPOS( 7,X)   START ADDRESS (IN PRODR) OF THE 7TH LEVEL
C     LEVPOS( 8,X)   START ADDRESS (IN PRODR) OF THE 8TH LEVEL
C     LEVPOS( 9,X)   START ADDRESS (IN PRODR) OF THE 9TH LEVEL
C     LEVPOS(10,X)   NUMBER OF LEVELS OF THE PRODUCTION
C     LEVPOS(11,X)   PRODUCTION NUMBER (NAMTBL ADDR.) AT FAILING SEARCH
C     LEVPOS(12,X)   PRODUCTION NUMBER (NAMTBL ADDR.)
C
      DO 11 J=1,QLEVPO
      DO 10 I=1,11
   10 LEVPOS(I,J)=0
   11 CONTINUE
      DO 15 J=1,QLENGT
   15 LENGTH(1,J)=0
C
      M=1
      IPRO=0
      NSIGN=-1
      LEVPOS(1,1)=1
      DO 60 I=1,PRODI
      J=PRODN(I)
      K=IABS(J)
      IF(I.GE.IPROD)NSIGN=1
      IF(NAMTBL(K).EQ.DIGIT(1).AND.CNAMTB(K).NE.IDIGIT)GOTO 50
      DO 20 L=1,MAXCLS
      IF(K.EQ.CLSWRD(L))GOTO 30
   20 CONTINUE
      ERROR=.TRUE.
      ERRPRT=.TRUE.
      CASSOC(1)=CNAMTB(K)
      GOTO 60
   30 IPRO=IPRO+1
      IF(IPRO.GT.QPRODR)CALL SPILL(12,'LOADB   ')
      PRODR(IPRO)=L*ISIGN(1,J)
      IF(J.NE.K)LEVEL=LEVEL+1
      IF(LEVEL.GT.8.OR.LEVEL.LT.1)GOTO 60
      IF(LEVPOS(LEVEL+1,M).EQ.0)LEVPOS(LEVEL+1,M)=IPRO+1
      GOTO 60
   50 IF(ERRPRT)WRITE(VLFILE,98)CNAMTB(K),CASSOC(1)
   98 FORMAT(36H ERROR NO. 7045  IN SUBROUTINE LOADB/1H ,14HIN PRODUCTIO
     *N ,   A6/1H ,   A6,67H  IS AN INVALID CLASS WORD OR A CLASS WORD W
     *ITHOUT A PRIORITY VALUE)
      ERRPRT=.FALSE.
      IPRO=IPRO+1
      IF(IPRO.GT.QPRODR)CALL SPILL(12,'LOADB   ')
      PRODR(IPRO)=J
      LEVPOS(10,M)=LEVEL
      LEVPOS(12,M)=K*NSIGN
      IF(LEVEL.EQ.0)M=M-1
      LEVEL=0
      M=M+1
      IF(M.GT.QLEVPO)CALL SPILL(13,'LOADB   ')
      LEVPOS(1,M)=IPRO+1
   60 CONTINUE
      M=M-1
C
C
C     EXTEND LEVPOS ARRAY IN A WAY, THAT ONLY ONE PRIORITY NUMBER (CLASS
C     WORD) IS LEADING A TOTAL LINE OF LEVPOS
C
      KPRO=M
      DO 90 I=1,M
      KK=LEVPOS(1,I)
      LL=LEVPOS(2,I)-1
      LEVPOS(1,I)=IABS(PRODR(KK))
      IF(KK.EQ.LL)GOTO 90
      KK=KK+1
      DO 80 J=KK,LL
      IF(KPRO.GE.QLEVPO)CALL SPILL(13,'LOADB   ')
      KPRO=KPRO+1
      DO 70 L=2,12
   70 LEVPOS(L,KPRO)=LEVPOS(L,I)
   80 LEVPOS(1,KPRO)=IABS(PRODR(J))
   90 CONTINUE
C
      CALL LOAD0(IPRO,KPRO)
C
C     START POSITION AND NUMBER OF 'ALL' PRODUCTIONS
C
      JPRO=IPRO+1
      DO 100 KK=1,KPRO
      NN=KPRO+1-KK
      IF(LEVPOS(1,NN).NE.MAXCLS)GOTO 110
  100 CONTINUE
  110 LL=NN+1
      JJ=KPRO
C
C     'ALL' IS INCLUDING THE OTHER CLASS WORDS, IF THE CLASS WORDS
C     DO NOT END IN A PRODUCTION NUMBER AHEAD OF 'ALL'
C
      L=LEVPOS(1,JPRO)
      N=LEVPOS(1,NN)
      DO 130 J=L,N
      IF(LENGTH(1,J).EQ.0)GOTO 130
      BREAK=PRODI
      IF(LENGTH(2,J).LT.0)BREAK=-LENGTH(2,J)
      DO 120 I=LL,JJ
      IF(LEVPOS(2,I).GT.BREAK)GOTO 130
      KPRO=KPRO+1
      IF(KPRO.GT.QLEVPO)CALL SPILL(13,'LOADB   ')
      DO 115 K=2,12
  115 LEVPOS(K,KPRO)=LEVPOS(K,I)
      LEVPOS(1,KPRO)=J
  120 CONTINUE
  130 CONTINUE
C
      CALL SORT(LEVPOS(1,JPRO),12,KPRO-IPRO,1,2)
C
C     LOAD ONE LEVEL PRODUCTION NUMBER FOR SECOND PRODUCTION NUMBER
C     DELETE ONE LEVEL PRODUCTIONS NOT STANDING ALLONE
C
      KPRO=KPRO+NN-JJ
      N=2
      J=1
  131 DO 140 I=N,IPRO
      IF(LEVPOS(10,I).NE.1)GOTO 140
      LL=LEVPOS(1,I)
      NN=I-1
      DO 135 L=J,NN
      IF(LEVPOS(1,L).NE.LL)GOTO 135
      LEVPOS(1,I)=0
      LEVPOS(11,L)=IABS(LEVPOS(12,I))
  135 CONTINUE
  140 CONTINUE
      IF(J.NE.1)GOTO 150
      N=JPRO+1
      J=JPRO
      IPRO=KPRO
      GOTO 131
C
C     COMPRESS LEVPOS TABLE
C
  150 N=KPRO
      KPRO=0
      IPRO=0
      DO 170 I=1,N
      IF(LEVPOS(1,I).EQ.0)GOTO 170
      IF(LEVPOS(12,I).LT.0)IPRO=IPRO+1
      KPRO=KPRO+1
      DO 160 K=1,11
  160 LEVPOS(K,KPRO)=LEVPOS(K,I)
      LEVPOS(12,KPRO)=IABS(LEVPOS(12,I))
  170 CONTINUE
C
C         START DATA FOR CONCATENATING PRODUCTIONS
C
      IPROD=0
      LL=1
      CONCAT=1
      CALL LOADU(LL,IPRO)
C
C         END OF THE CONCATENATING PRODUCTIONS
C
      PROD2(1,IPROD)=0
      PROD2(2,IPROD)=-IBKPNT
      CALL LOADA
C
C     OUTPUT OF THE MACRO TEXT TRANSFER PRODUCTIONS
C
      DO 350 J=1,25
      OUTARY(1:72)=' '
      L=TENMIL+4*J
      CALL BINBCD(L,OUTARY(73:80),N)
      CALL CFORM(MACPRD(J),OUTARY,8,6)
  350 WRITE(ELFILE,999)OUTARY
      CALL CFORM('BRKPNT  ',OUTARY,8,8)
      CALL CFORM('        ',OUTARY,73,8)
      WRITE(ELFILE,999)OUTARY
C
C         START FOR THE BASIC PRODUCTIONS
C
      LL=IPRO+1
      IPROD=0
      CONCAT=0
      CALL LOADU(LL,KPRO)
C
C     OUTPUT OF THE BASIC PRODUCTIONS
C
      CALL LOADA
C
C
      OUTARY=' '
      CALL CFORM('FINI',OUTARY,8,4)
      WRITE(ELFILE,999)OUTARY
      REWIND ELFILE
      KK=1
      LL=LCDATA
      LCDATA=ELFILE
      CALL LOADI(KK)
      LCDATA=LL
C
      RETURN
  999 FORMAT(A80)
      END
**** SOURCE FILE : M0006712.X01   ***
*
C
C              FORTRAN SUBROUTINE LOADG
C
C LINKAGE       CALL   LOADG
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    LOADI                         MAIN
C          SUBROUTINE    LOADN
C          SUBROUTINE    LOADS
C          SUBROUTINE    LOADT
C          INTEGER FCT.  NAME
C          SUBROUTINE    BCDBIN
C          SUBROUTINE    SORT
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOADG
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  CHARST:     BEGINNING OF BASIC CHARACTER SECTION OF NAMTBL
C  CHARND:     END OF BASIC CHARACTER SECTION OF NAMTBL
C  INAMST:     BEGIN GEOMETRIC DEFINITION ROUTINE NAME SECTION(NAMTBL)
C  INAMND:     END OF GEOMETRIC DEFINITION ROUTINE NAME SECTION(NAMTBL)
C  NAMEST:     NAMTBL INDEX OF BEGIN OF THE PART PROGRAM NAME  SECTION
C  NAMMAX:     NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C  IFIXST:     INDEX OF BEGINNING OF FIXED POINT NUMBER SECTION,CNUMTB
C  IFIXND:     INDEX OF START OF FIXED POINT NUMBER SECTION OF CNUMTB
C  NUMBST:     INDEX OF BEGINNING OF NUMBER SECTION OF CNUMTB
C  NUMBND:     INDEX OF END OF NUMBER SECTION OF CNUMTB
C  NAMTBL:     INTEGER CODES FOR CORRESPONDING NAME TABLE ENTRIES
C  CNAMTB:     NAME TABLE OR DICTIONARY
C  CNUMTB:     NUMBER TABLE
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
      DIMENSION CODES(150),DIGIT(2),IDENT(2)
C  DIGIT:      (1)=CODE CLASS 10000,(2)=NAMTBL INDEX OF 'DIGIT '
      EQUIVALENCE (DIGIT(1),CODES(19))
C  IDENT:      (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODES(69))
C
C        5.    CLASS CODE MODULI
C
C  MODULO:     NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      COMMON/MODULI/MODULO
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  NTFILE:     BLOCK DATA OUTPUT OF NAMTBL AND NAMTBL POINTERS
      EQUIVALENCE (NTFILE,SYMFIL(2))
C  GPFILE:     BLOCK DATA OUTPUT OF GEOMETRIC PRODUCTIONS
      EQUIVALENCE (GPFILE,SYMFIL(3))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QPMIDT:     DIMENSION OF ARRAY PMIDTB
      EQUIVALENCE (QPMIDT,LDXSIZ(3))
C  QGEOML:     DIMENSION OF ARRAY GEOMLC
      EQUIVALENCE (QGEOML,LDXSIZ(5))
C  QPRODN:     DIMENSION OF ARRAY PRODN
      EQUIVALENCE (QPRODN,LDXSIZ(7))
C  QIAGMX:     DIMENSION OF ARRAY IAGMXY
      EQUIVALENCE (QIAGMX,LDXSIZ(10))
C  QARGMX:     DIMENSION OF ARRAY ARGMXY (OUTPUT)
      EQUIVALENCE (QARGMX,LDXSIZ(15))
C  QGEOLO:     DIMENSION OF ARRAY GEOLOC
      EQUIVALENCE (QGEOLO,LDXSIZ(17))
C  QIPRMI:     DIMENSION OF ARRAY IPRMID
      EQUIVALENCE (QIPRMI,LDXSIZ(18))
C  QNAMTB:     DIMENSION OF ARRAY NAMTBL(OUTPUT)
      EQUIVALENCE (QNAMTB,LDXSIZ(27))
C  QNUMTB:     DIMENSION OF ARRAY CNUMTB(OUTPUT)
      EQUIVALENCE (QNUMTB,LDXSIZ(28))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  ERROR:      FLAG SET IF ERROR IN PRODUCTION TABLE
C IBKPNT:      NAMTBL INDEX OF BRKPNT
C  NUMEL:      NUMBER OF ELEMENTS IN ASSOC TABLE
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  PDERR:      NAMTBL INDEX OF '28' = PROD. NOT FOUND
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C
C       11.    GEOMETRIC TABLE LOCATIONS
C
C  GEOMLC:     START POSITION FOR A SRF TYPE IN THE GEOMETRIC TABLE
      COMMON/GEOMLC/GEOMLC
      DIMENSION GEOMLC(50)
C
C       12.    BIT OUTPUT PATTERNS
C
      COMMON/ELBIT/ELBIT
      DIMENSION ELBIT(200)
C
C       13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C
C       19.    BIT CONSTANTS
C
      INCLUDE (ALLBTS)    
C  Z9999:      SIGNALIZES START OF A SURFACE PRODUCTION SEQUENCE
C  ZAAAA:      SIGNALIZES JUMP ADDRESSES IN THE PRODUCTION TABLE
C  ZCCCC:      SIGNALIZES A PRODUCTION NUMBER IN THE TABLE
C*
C PURPOSE      TO CAUSE THE READING OF DATA TO BE LOADED INTO
C              NAMTBL, AND THE GEOMETRIC PRODUCTION TABLES,
C              AND TO PRODUCE FORTRAN BLOCK DATA PROGRAMS FOR
C              VARIOUS PRESET POINTERS TO ITEMS IN NAMTBL,
C              FOR THE LOADING OF NAMTBL, AND FOR THE LOADING
C              OF THE GEOMETRIC TABLES.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C
C              I                  I            GENERAL
C              IAGMXY      250    I            FOR STORAGE OF ARGMXY
C                                              TABLE
C              IPRMID     3*35    I            CORRESPONDENCE BETWEEN
C                                              PERMID'S AND INTEGERS.
C                                              SEE 7LDG FOR INITIAL
C                                              VALUE
C              I200               C            CONTAINS 200 IN BCD
C              J                  I            USED FOR PRODUCTION NO.
C              K                  I            PARAMETER TO LOADI
C              L                  I            USED IN DO LOOP
C              L1                 I            USED IN DO LOOP
C              M                  I            COUNTER FOR DECK NAME
C                                              NUMBERS
C              N                  I            USED FOR NO. OF CHARS.
C                                              IN CALL TO BCDBIN
C
C    CHARACTER FUNCTION TO CONVERT INTEGER TO HEXADECIMAL STRING
      CHARACTER*8 HEX
C
      DIMENSION IAGMXY(250)
      CHARACTER*6 I200,TEMP,BKPNT
      CHARACTER*6 CPRMID(35)
      DIMENSION IPRMID(35)
      DATA I200/'200'/,BKPNT/'BRKPNT'/
      DATA CPRMID(1),IPRMID(1)/'XLARGE',1/,
     1     CPRMID(2),IPRMID(2)/'YLARGE',2/,
     2     CPRMID(3),IPRMID(3)/'ZLARGE',3/,
     3     CPRMID(4),IPRMID(4)/'XSMALL',4/,
     4     CPRMID(5),IPRMID(5)/'YSMALL',5/,
     5     CPRMID(6),IPRMID(6)/'ZSMALL',6/,
     6     CPRMID(7),IPRMID(7)/'XYPLAN',1/,
     7     CPRMID(8),IPRMID(8)/'YZPLAN',2/,
     8     CPRMID(9),IPRMID(9)/'ZXPLAN',3/
      DATA CPRMID(10),IPRMID(10)/'RIGHT', 1/,
     1     CPRMID(11),IPRMID(11)/'LEFT ', 2/,
     2     CPRMID(12),IPRMID(12)/'ATANGL',1/,
     3     CPRMID(13),IPRMID(13)/'SLOPE', 2/,
     4     CPRMID(14),IPRMID(14)/'LARGE', 1/,
     5     CPRMID(15),IPRMID(15)/'SMALL', 2/,
     6     CPRMID(16),IPRMID(16)/'IN   ', 1/,
     7     CPRMID(17),IPRMID(17)/'OUT  ', 2/,
     8     CPRMID(18),IPRMID(18)/'INTAN', 1/,
     9     CPRMID(19),IPRMID(19)/'OUTAN', 2/
      DATA CPRMID(20),IPRMID(20)/'POSX ', 1/,
     1     CPRMID(21),IPRMID(21)/'POSY ', 2/,
     2     CPRMID(22),IPRMID(22)/'POSZ ', 3/,
     3     CPRMID(23),IPRMID(23)/'NEGX ', 4/,
     4     CPRMID(24),IPRMID(24)/'NEGY ', 5/,
     5     CPRMID(25),IPRMID(25)/'NEGZ ', 6/,
     6     CPRMID(26),IPRMID(26)/'XYROT', 1/,
     7     CPRMID(27),IPRMID(27)/'YZROT', 2/,
     8     CPRMID(28),IPRMID(28)/'ZXROT', 3/,
     9     CPRMID(29),IPRMID(29)/'XAXIS', 1/
      DATA CPRMID(30),IPRMID(30)/'YAXIS', 2/,
     1     CPRMID(31),IPRMID(31)/'5PT  ', 1/,
     2     CPRMID(32),IPRMID(32)/'4PT1SL',2/,
     3     CPRMID(33),IPRMID(33)/'3PT2SL',3/,
     4     CPRMID(34),IPRMID(34)/'TANTO ',1/,
     5     CPRMID(35),IPRMID(35)/'PERPTO',2/
C**
C...     CALL LOADN TO READ ITEMS INTO NAMTBL
C
      CALL LOADN
      PDERR=NAME(I200)
      NAMTBL(PDERR)=DIGIT(1)
      IBKPNT=NAME(BKPNT)
      NAMTBL(IBKPNT)=99000
      DO 300 I=1,QGEOML
  300 GEOMLC(I) = 0
      K=2
C
C...     CALL LOADI TO READ GEOMETRY TABLES
C
      CALL LOADI(K)
      IF(ERROR)RETURN
      CALL LOADT
      DO 301 I=1,QIAGMX
C
C...     SET UP IAGMXY AS FOLLOWS - IAGMXY(K) = L
C...     WHERE   K = MODE OF GEOMETRIC MODIFIER
C...     AND     L = NAMTBL INDEX OF INTEGER ASSOCIATED WITH IT
C
  301 IAGMXY(I)=0
      DO 22  I=1,QIPRMI
      K = NAME(CPRMID(I))
      IF (NAMTBL(K).EQ.0) GOTO 22
      K = NAMTBL(K)-IDENT(1)
      IF (K.GT.QIAGMX) CALL SPILL(10,'LOADG   ')
      IAGMXY(K) = IFIXST + IPRMID(I)
   22 CONTINUE
C
C...     PRODUCE LISTING OF NAMTBL LOADING AND BLOCK DATA PROGRAMS
C...     TO SET UP NAMTBL.
C
      L=CHARST
      L1 = INAMST+100
C
C...     WRITE HEADING FOR BLOCK DATA PROGRAM
C
      WRITE(NTFILE,401) QNAMTB ,QNAMTB ,QNUMTB
  401 FORMAT(6X,17HBLOCK DATA BDNAME,57X/
     *35HC     BLOCK DATA PROGRAM FOR NAMETB,45X/
     16X,22HIMPLICIT INTEGER (A-Z),52X/
     26X,65HCOMMON /NAMETB/ CHARST,CHARND,INAMST,INAMND,NAMEST,NAMMAX,IF
     3IXST, 9X/
     45X,29H/ IFIXND,NUMBST,NUMBND,NAMTBL,46X/
     56X,27HCOMMON/CNAMTB/CNAMTB,CNUMTB ,47X/
     66X,17HDIMENSION NAMTBL( ,I4,1H) ,52X/
     76X,19HCHARACTER*6 CNAMTB( ,I4,1H) ,50X/
     86X,20HCHARACTER*12 CNUMTB( ,I4,1H) ,49X)
      WRITE(NTFILE,500) CHARST,CHARND,INAMST,INAMND,NAMEST,NAMMAX,
     1             IFIXST,IFIXND,NUMBST,NUMBND,QNAMTB,QNAMTB,QNUMTB
  500 FORMAT(6X,47HDATA CHARST,CHARND,INAMST,INAMND,NAMEST,NAMMAX/,27X/
     1       5X,1H1,5X,  I6,1H, I6,1H, I6,1H, I6,1H, I6,1H, I6,2H/,26X/
     25X,1H2,5X,28HIFIXST,IFIXND,NUMBST,NUMBND/,41X/
     3       5X,1H3,5X,  I6,1H, I6,1H, I6,1H, I6,1H/,41X/
     4       6X,12HDATA NAMTBL/,I5,3H*0/,54X/
     5       6X,12HDATA CNAMTB/,I5,5H*' '/,52X/
     6       6X,12HDATA CNUMTB/,I5,5H*' '/,52X)
      NAMTBL(IBKPNT)=0
   23 DO 50 I=L,L1
C
C...     IS THIS CELL FILLED
C
      IF ((NAMTBL(I).EQ.0).OR.(NAMTBL(I).EQ.DIGIT(1).AND.I.GT.CHARND
     1 )) GOTO 50
C
C...     YES. OUTPUT TO LIST AND BLOCK DATA PROGRAM.
C
C... CHECK FOR QUOTE
      IF (CNAMTB(I).EQ.'''') THEN
        TEMP=''''''
        WRITE(NTFILE,4)CNAMTB(I),I,I,NAMTBL(I),TEMP
      ELSE
        WRITE(NTFILE,4)CNAMTB(I),I,I,NAMTBL(I),CNAMTB(I)
      ENDIF
    4 FORMAT(28HC          NAMTBL ENTRY FOR ,A6,46X/
     *6X,12HDATA NAMTBL(,I4,12H),   CNAMTB(,I4,1H),41X/
     *5X,10H*        /,I5,10H   ,     ',A6,2H'/,42X)
   50 CONTINUE
C
C...     HAVE WE REACHED NAMMAX YET
C
      IF (L1.LT.NAMMAX) GOTO 51
C
C...     YES. OUTPUT FIXED POINT AREA OF CNUMTB TO LIST AND B.D.PROGRAM
C
      WRITE(NTFILE,52)
   52 FORMAT (42HC     CNUMTB ENTRIES FROM IFIXST TO IFIXND,38X)
      DO 55 I=IFIXST,IFIXND
      WRITE(NTFILE,54)I,CNUMTB(I)
   54 FORMAT(6X,12HDATA CNUMTB(,I4,4H) /',A12,2H'/,40X)
   55 CONTINUE
   51 CONTINUE
C
C...     END OF THIS PROGRAM. RETURN TO PRODUCE ANOTHER IF ALL OF
C...     NAMTBL HAS NOT BEEN COVERED
C
    6 FORMAT (7X,3HEND,70X)
      L=L1+1
      IF(L.GT.NAMMAX)GO TO 60
      L1=L+99
      IF(L1.GT.NAMMAX)L1=NAMMAX
      GO TO 23
   60 CONTINUE
      WRITE(NTFILE,6)
C
C...     IF THERE WAS NO ERROR IN THE GEOMETRIC PRODUCTION TABLES
C...     CALL LOADS TO ASSIGN BIT PATTERNS AND PRODUCE INTERNAL
C...     GEOMETRIC PRODUCTION TABLES
C
      CALL LOADS
      QGEOMT=(IPROD+QGEOLO)/10*10
      J=QGEOMT+QGEOLO+QPMIDT+QARGMX
C
C...     PRODUCE BLOCK DATA PROGRAMS TO SET UP GEOMETRY TABLES
C
      WRITE(GPFILE,3000)
 3000 FORMAT(6X,17HBLOCK DATA BDGMTY,57X/1HC,79X/
     16X,22HIMPLICIT INTEGER (A-Z),52X/
     26X,16HCOMMON/GMTY/GMTY,58X)
      WRITE(GPFILE,3001) J,QGEOMT,QGEOLO,QPMIDT,QARGMX
 3001 FORMAT(6X,15HDIMENSION GMTY(I4, 9H),GEOMTB(,I4, 9H),GEOLOC(,I4,
     1 9H),PMIDTB(,I4,2H),,14X/5X,10H1  ARGMXY(,I4,1H),60X)
      I=QGEOLO+1
      II=QPMIDT+I
      JJ=QARGMX+II
      WRITE(GPFILE,3009)I,II,JJ
 3009 FORMAT(6X,32HEQUIVALENCE (GEOLOC(1),GMTY(1)),,42X/
     1       5X,29H1            (PMIDTB(1),GMTY(I3,3H)),,40X/
     2       5X,29H2            (ARGMXY(1),GMTY(I3,3H)),,40X/
     3       5X,29H3            (GEOMTB(1),GMTY(I3,3H)) ,40X)
      WRITE(GPFILE,3010)QIAGMX
 3010 FORMAT(1HC,79X/6X,12HDATA ARGMXY/,I3,3H*0/,56X)
C
C...     ARGMXY CONTAINS NAMTBL POINTERS TO THE INTEGERS ASSOCIATED
C...     WITH PERMANENT IDENTIFIERS
C
      DO 1 I=1,QIAGMX
      IF (IAGMXY(I).EQ.0)GOTO 1
      WRITE(GPFILE,3050)I,IAGMXY(I)
    1 CONTINUE
 3050 FORMAT (6X,12HDATA ARGMXY(,I3,2H)/,I4,1H/,52X)
C
C...     PMIDTB CONTAINS THE INTERNAL REPRESENTATION OF IDENTIFIERS
C...     AND GEOMETRICS. THE I.R. IS STORED IN THE CELL CORRESPONDING
C...     TO THE MODE OF GEOMETRICS, THE MODE+25 OF IDENTIFIERS
C...     USE ARRAY IAGMXY TO RECORD ENTRIES MADE IN PMIDTB.
C
      WRITE(GPFILE,3020)QPMIDT,ALLBTS(1)
 3020 FORMAT(33HC                     /Z7FFFFFFF/,47X/
     *       6X,12HDATA PMIDTB/,I3,1H*,I11,1H/,47X)
      DO 2 I=1,NUMEL
      K=ASSOC(1,I)
      L = MOD(NAMTBL(K),MODULO)
      IF ((NAMTBL(K)-L).EQ.IDENT(1)) L=L+50
      IF(L.GT.QPMIDT) CALL SPILL(3,'LOADG   ')
    2 WRITE(GPFILE,3002)HEX(ELBIT(I)),L,ELBIT(I)
 3002 FORMAT(25HC                     / Z,A8,1H/,46X/
     *       6X,12HDATA PMIDTB(,I3,2H)/,I11,1H/,46X)
      DO 30 I=1,QGEOLO
      WRITE(GPFILE,3062) I
 3062 FORMAT (1HC,10X,12HSURFACE TYPE,I2,55X)
C
C...     GEOLOC CONTAINS FOR EACH SURFACE TYPE THE POSITION IN THE
C...     GEOMTB TO START SEARCHING
C
   30 WRITE(GPFILE,3003)I,GEOMLC(I)
 3003 FORMAT(6X,12HDATA GEOLOC(,I2,2H)/,I4,1H/,53X)
C
C
C...     WRITE DATA STATEMENTS TO PRODUCE GEOMETRIC TABLE
C
      L1=0
      DO 90 I=1,50
      IF(GEOMLC(I).EQ.0)GOTO 90
      L1=L1+1
      GEOMLC(L1)=GEOMLC(I)
   90 CONTINUE
      L1=L1+1
      GEOMLC(L1)=QPRODN
      CALL SORT(GEOMLC(1),1,L1,1,1)
      JJ=0
      L1=1
      WRITE(GPFILE,3012)
 3012 FORMAT(1HC,79X)
C
      DO 100 I=1,IPROD
      JJ=JJ+1
C
C...     IF NEXT ITEM IS NEGATIVE IT IS THE TERMINATOR OF THIS
C...     PRODUCTION. IS IT NEGATIVE
C
      IF(JJ.LT.GEOMLC(L1))GOTO 502
      K=4*(JJ-1)
      WRITE(GPFILE,3008)K,JJ,(Z9999+K)
 3008 FORMAT(36HC                         /Z9999/ + ,I4,40X/
     *       6X,12HDATA GEOMTB(,I6,3H) /I11,1H/,42X)
      JJ=JJ+1
      L1=L1+1
      IF(JJ.LT.GEOMLC(L1))GOTO 502
      JJ=JJ-1
      GO TO 100
  502 IF(PRODN(I).LT.0)GOTO 98
C
C...     NO. WRITE DATA STATEMENT ASSIGNING BIT PATTERN
   97 WRITE(GPFILE,3004)HEX(PRODN(I)),JJ,PRODN(I)
 3004 FORMAT(29HC                         / Z,A8,1H/,42X/
     *       6X,12HDATA GEOMTB(,I6,3H) /I11,1H/,42X)
      GO TO 100
C
C...     THIS ITEM IS NEGATIVE, -(NO. OF PRODUCTION).
C...     FETCH BCD OF ITS MODULUS FROM THE NAMTBL AND WRITE
C...     DATA STATEMENT FOR NEGATIVE INTEGER.
C
   98 J=-PRODN(I)
      CALL BCDBIN(CNAMTB(J),K,M)
      IF(K.GE.10000)GOTO 99
      WRITE(GPFILE,3005)K,JJ,(ZCCCC+K)
 3005 FORMAT(36HC                         /ZCCCC/ + ,I4,40X/
     *       6X,12HDATA GEOMTB(,I6,3H) /I11,1H/,42X)
      GOTO 100
   99 K=K-10000
      WRITE(GPFILE,3006)K,JJ,(ZAAAA+K)
 3006 FORMAT(36HC                         /ZAAAA/ + ,I4,40X/
     *       6X,12HDATA GEOMTB(,I6,3H) /I11,1H/,42X)
  100 CONTINUE
C
C...     BLOCK DATA PROGRAM IS NOW WRITTEN.
C...     WRITE END CARD AND RETURN.
C
      WRITE(GPFILE,3007)
 3007 FORMAT(7X,3HEND,70X)
      RETURN
       END
**** SOURCE FILE : M0006713.W01   ***
*
C
C              FORTRAN SUBROUTINE LOADI
C
C LINKAGE       CALL   LOADI(SWITCH)
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    INPUT           SUBROUTINE    LOADB
C          SUBROUTINE    SPILL           SUBROUTINE    LOADG
C                                        SUBROUTINE    LOADP
C                                        SUBROUTINE    LOADT
C
      SUBROUTINE LOADI(SWITCH)
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMTBL:INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002),STACK(2,1500)
C  TOP:        POINTER TO LAST STACK ENTRY
      EQUIVALENCE (TOP,STKLST(1))
C  MCTOP:      VALUE OF POSTN FOR MBKPNT
      EQUIVALENCE (MCTOP,STKLST(2))
C  STACK:      WORKING STACK
      EQUIVALENCE (STACK(1,1),STKLST(3))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
      DIMENSION CODES(150),RTERM(2),SLASH(2),DIGIT(2),IDENT(2),CONGEO(2
     *          ),CONBIG(2)
C  RTERM:      (1)=CODE CLASS  4000,(2)=NAMTBL INDEX OF 'RTERM '
      EQUIVALENCE (RTERM(1),CODES(7))
C  SLASH:      (1)=CODE CLASS  5000,(2)=NAMTBL INDEX OF '/     '
      EQUIVALENCE (SLASH(1),CODES(9))
C  DIGIT:      (1)=CODE CLASS 10000,(2)=NAMTBL INDEX OF 'DIGIT '
      EQUIVALENCE (DIGIT(1),CODES(19))
C  IDENT:      (1)=CODE CLASS 35000,(2)=NAMTBL INDEX OF 'IDENT '
      EQUIVALENCE (IDENT(1),CODES(69))
C  CONGEO:     (1)=CODE CLASS 39000,(2)=NAMTBL INDEX OF 'CONGEO'
      EQUIVALENCE (CONGEO(1),CODES(77))
C  CONBIG:     (1)=CODE CLASS 43000,(2)=NAMTBL INDEX OF 'CONBIG'
      EQUIVALENCE (CONBIG(1),CODES(85))
C
C        5.    CLASS CODE MODULI
C
C  MODULO:     NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      COMMON/MODULI/MODULO
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  ELFILE:     I/O FILE NUMBER OF TRANSFORMED PRODUCTION TABLE
      EQUIVALENCE (ELFILE,SYMFIL(4))
C  LCDATA:     INPUT FILE NUMBER OF PRODUCTION TABLES SEQUEN. MODE
      EQUIVALENCE (LCDATA,SYMFIL(5))
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QASSOC:     DIMENSION OF ARRAY ASSOC
      EQUIVALENCE (QASSOC,LDXSIZ(4))
C  QGEOML:     DIMENSION OF ARRAY GEOMLC
      EQUIVALENCE (QGEOML,LDXSIZ(5))
C  QLENGT:     DIMENSION OF ARRAY LENGTH
      EQUIVALENCE (QLENGT,LDXSIZ(6))
C  QPRODN:     DIMENSION OF ARRAY PRODN
      EQUIVALENCE (QPRODN,LDXSIZ(7))
C  QWORK:      DIMENSION OF ARRAY WORK AND LEVPOS
      EQUIVALENCE (QWORK,LDXSIZ(9))
C  QKDENT:     DIMENSION OF ARRAY KDENT
      EQUIVALENCE (QKDENT,LDXSIZ(16))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  ERROR:      FLAG SET IF ERROR IN PRODUCTION TABLE
C  IBKPNT:     NAMTBL INDEX OF BRKPNT
C  NUMEL:      NUMBER OF ELEMENTS IN ASSOC TABLE
C  PRODI:      POINTER TO LAST ENTRY IN PRODN TABLE
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  BREAK:      VALUE OF POSTN FOR BRKPNT
C  PDERR:      NAMTBL INDEX OF '28' = PROD. NOT FOUND
C  NUMGP:      NUMBER OF GROUPS IN PRODUCTION TABLE
C  KNT:        NAMTBL INDEX OF ALL
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C
C       10.    TABLE OF GROUPS AND NUMBER OF CONTAINED ELEMENTS
C
      COMMON/LENGTH/LENGTH
      DIMENSION LENGTH(3,100)
C
C       11.    GEOMETRIC TABLE LOCATIONS
C
C  GEOMLC:     START POSITION FOR A SRF TYPE IN THE GEOMETRIC TABLE
      COMMON/GEOMLC/GEOMLC
      DIMENSION GEOMLC(50)
C
C       13.    NAMTBL INDEXES OF THE PROD. TABLES IN SEQUENT. MODE
C
      INCLUDE (PRODN)    
C
C       14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250),WORK(2,100)
C  WORK        WORKING AREA FOR STORAGE OF ELEMENT IN ONE SET
      EQUIVALENCE (WORK(1,1),LEVPOS(1,1))
C
C       17.    OUTPUT SPACE FOR TRANSFORMED PRODUCTION LIST
C
      COMMON/OUTARY/OUTARY
      CHARACTER*80 OUTARY
C
C       19.    BIT CONSTANTS
C
      INCLUDE (ALLBTS)    
C*
C PURPOSE      TO READ A LIST OF EITHER BASIC OR GEOMETRIC
C              PRODUCTIONS, PERFORM SOME FORMAT CHECKING
C              AND ASSIGN GROUP NUMBERS.
C
C ARGUMENTS    SWITCH = 1 IF BASIC PRODUCTION LIST
C                     = 2 IF GEOMETRIC PRODUCTION LIST
C
C NOTES        LOGICAL VARIABLE ERROR IS SET.TRUE. IF AN ERROR
C              IN FORMATTING HAS BEEN DETECTED.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C
C              FINI               C            CONTAINS FINI ('FINI')
C              ICOD               I            CLASS OR MODE OF THIS
C                                              ITEM
C              IDIGIT             C            CONTAINS DIGIT ('DIGIT')
C              I                  I            FOR USE IN DO LOOPS
C              INTCNT             I            GROUP NO. COUNT
C              ITMP               I            NAMTBL INDEX OF THIS ITEM
C              J                  I            CLASS OF ITEM/GROUP NO.
C              K                  I            MODE OF ITEM/GROUP NO.
C              KDENT       200    I         0  NAMTBL POINTER FOR EACH
C                                              MODE OF IDENT.
C              L                  I            FOR USE IN DO LOOPS
C              M                  I            NAMTBL INDEX OF NEXT
C                                              (TERMINATING) CHARACTER
C              M1                 I            TEMPORARY STORAGE OF
C                                              ELEMENT IN LENGTH
C              M2                 I            TEMPORARY STORAGE OF
C                                              ELEMENT IN LENGTH
C              N                  I            FOR USE IN DO LOOPS
C              NUMBR              I            NO. OF ITEMS IN THIS SET
C              POSTN              I            POSITION IN PRODUCTION
C                                              TABLES
C              SWITCH             I            ARGUMENT OF LOADI =1
C                                              IF BASIC, =2 IF GEOM.
C                                              PRODUCTION
C
      DIMENSION KDENT(200)
      CHARACTER*6 IDIGIT,FINI,IBK*8
      DATA IDIGIT/'DIGIT'/
      DATA FINI/'FINI'/,IBK/' '/
C**
      DO 100 I=1,QKDENT
  100 KDENT(I)=0
      ERROR=.FALSE.
      OUTARY(1:8)=IBK
      NUMEL=0
      KNT = 0
      LL = 0
    1 INTCNT=0
      POSTN=0
      PRODI=0
C
C...     UPDATE GROUP NUMBER COUNT
C
    2 INTCNT=INTCNT+1
C
C...     UPDATE POSITION-IN-TABLE COUNT
C
    3 POSTN=POSTN+1
C
C...     ZERO TOP AND NUMBR READY FOR NEW CARD
C
    4 TOP=0
      NUMBR=0
C
C...     FETCH NEXT ITEM AND ITS TERMINATOR
C
    5 CALL INPUT
      CALL INPUT
      ITMP=STACK(1,TOP-1)
C
C...     IS IT FINI. IF SO THIS IS THE END OF THIS SET OF TABLES
C
      IF(CNAMTB(ITMP).EQ.FINI)GOTO 30
  105 ICOD = NAMTBL(ITMP)
      M=STACK(1,TOP)
      IF(CNAMTB(M).NE.FINI)GOTO 106
C
      WRITE(VLFILE,2055)CNAMTB(M)
 2055 FORMAT(1H ,36HERROR NO. 7040 IN SUBROUTINE LOADI. ,A6   ,48H IS IN
     * A WRONG POSITION. SEARCH FOR DOUPLE COMMA)
      GOTO 7
C
C...     BRANCH ON SWITCH - TO 6 IF THESE ARE BASIC PRODUCTIONS,
C...                        TO 9 IF THEY ARE GEOMETRIC ONES.
C
  106 GO TO(6,9),SWITCH
C
C...     IF CLASS AND MODE ARE BOTH ZERO, THIS CANNOT BE A META-CLASS,
C...     SO SET ERROR FLAG AND GIVE DIAGNOSTIC
C
    6 IF(ICOD.NE.0)GO TO 8
      WRITE(VLFILE,2001)CNAMTB(M)
 2001 FORMAT(1H ,36HERROR NO. 7011 IN SUBROUTINE LOADI. ,A6   ,46H IS NO
     *T A META-LINGUISTIC CLASS, CARD IGNORED.)
    7 ERROR=.TRUE.
      IF(SWITCH.EQ.2)GOTO 37
      GO TO 4
C
C...     ITEM IS AN IDENTIFIER. SHOULD HAVE NON-ZERO MODE - OTHERWISE
C...     ISSUE DIAGNOSTIC
C
  201 K=ICOD-J
      IF (K.GT.QKDENT) GOTO 209
      IF(K.EQ.0)GO TO 5004
C
C...     HAS AN IDENTIFIER OF THIS MODE APPEARED PREVIOUSLY
C
      IF(KDENT(K).NE.0)GO TO 5001
C
C...     NO. STORE ITS NAMTBL POINTER IN KDENT, AND CONTINUE PROCESSING
C
      GOTO 220
  209 WRITE (VLFILE,210) CNAMTB(M), ICOD
  210 FORMAT(74H0ERROR NO. 7038 THE SIZE OF THE KDENT ARRAY IN LOADI MUS
     1T BE EXPANDED. ***/101H KDENT CONTAINS POINTERS TO THE NAMTBL ENTR
     2IES OF IDENTIFIERS USED IN BASIC OR GEOMETRIC PRODUCTIONS./57H THE
     3 IDENTIFIER THAT CAUSED THE LIMITS TO BE EXCEEDED IS , A6,20H WHOS
     4E CLASS-MODE = ,I5)
      STOP
  220 KDENT(K) = ITMP
      GO TO 12
C
C...     YES. SET ITMP TO CONTENTS OF KDENT AND EXAMINE WORK TO SEE
C...     IF AN IDENTIFIER OF THIS MODE HAS ALREADY APPEARED IN THIS SET
C...     IF ONE HAS, SKIP EXAMINATION OF ASSOC AND CONTINUE PROCESSING.
C
 5001 ITMP=KDENT(K)
      IF(NUMBR.EQ.0)GO TO 12
      DO 5002 L=1,NUMBR
      IF(WORK(1,L).EQ.ITMP)GO TO 5003
 5002 CONTINUE
      GO TO 12
C
C...     IS ITEM BRKPNT
C
    8 IF(IBKPNT.EQ.ITMP)GO TO 25
C
C...     NO. IS IT ALL
C
      IF (NAMTBL(ITMP).NE.9999000) GOTO 11
C
C...     YES. IS THERE ANYTHING ELSE ON THE CARD
C
      IF (NUMBR.EQ.0) GO TO 202
C
C...     YES. OUTPUT DIAGNOSTIC.
C
      WRITE(VLFILE,3001)
 3001 FORMAT (1H ,63HERROR NO. 7013 IN SUBROUTINE LOADI.  ALL DOES NOT A
     *PPEAR ALONE.)
       GO TO 7
C
C...     CARD CONTAINS ALL
C
  202 KNT  = ITMP
      GO TO 18
C
C...     GEOMETRIC PROCESSING
C
    9 J = MODULO*(ICOD/MODULO)
C
C...     IS ITEM AN IDENTIFIER
C
      IF (J.EQ.IDENT(1)) GO TO 201
C
C...     NO. IS IT A CONDITIONAL GEOMETRIC OR LARGE GEOMETRIC
C
      IF (J .NE. CONGEO(1) .AND. J .NE. CONBIG(1))  GO TO 10
C
C...     YES. IS NEXT ITEM /
C
      IF (NAMTBL(M).EQ.SLASH(1)) GOTO 26
C
C...     NO.
C
      GO TO 12
C
C...     IS ITEM A NUMBER
C
   10 IF(J.EQ.DIGIT(1))GO TO 24
C
C...     NO. IT IS NEITHER IDENT,NOR CONGEO,NOR CONBIG,NOR NUMBER.
C...     OUTPUT DIAGNOSTIC
C
 5004 WRITE(VLFILE,2002) CNAMTB(ITMP),NAMTBL(ITMP)
 2002 FORMAT(1H ,36HERROR NO. 7012 IN SUBROUTINE LOADI. ,A6,   10H OF CL
     *ASS ,I6,48H IS NOT A VALID GEOM. FORMAT NAME. CARD IGNORED.)
      GO TO 7
C
C...     ITEM IS NOT BRKPNT OR ALL. IS IT A NUMBER.
C
   11 IF((ICOD.EQ.DIGIT(1)).AND.(CNAMTB(ITMP).NE.IDIGIT))GOTO 24
C
C...     UPDATE NO. OF ITEMS ON CARD AND TEST IF THIS EXCEEDS LIMIT
C
   12 NUMBR=NUMBR+1
      IF (NUMBR.GT.QWORK) CALL SPILL(9,'LOADI   ')
      GO TO 14
C
C...     TOO MANY ITEMS FOR TABLE - OUTPUT DIAGNOSTIC
C
   13 WRITE(VLFILE,2003)
 2003 FORMAT(1H ,66HERROR NO. 7014 IN SUBROUTINE LOADI. LOAD TABLE FULL.
     * CARD IGNORED.)
      GO TO 7
C
C...     STORE NAMTBL POINTER TO ITEM IN FIRST COLUMN OF WORK
C
   14 WORK(1,NUMBR)=ITMP
C
C...     IF THIS IS NOT THE FIRST ITEM, SEARCH ASSOC TO SEE IF THIS
C...     ITEM HAS BEEN USED PREVIOUSLY.
C
      IF(NUMEL.EQ.0)GO TO 16
      DO 15 I=1,NUMEL
      IF(ITMP.EQ.ASSOC(1,I))GO TO 17
   15 CONTINUE
C
C...     THIS IS ITS FIRST APPEARENCE. STORE NAMTBL POINTER AND INTCNT
C...     IN ASSOC, AND INTCNT IN SECOND COLUMN OF WORK
C
   16 NUMEL=NUMEL+1
C
C...     IS TABLE FULL
C
      IF (NUMEL.GT.QASSOC) CALL SPILL(4,'LOADI   ')
C
C...     NO.
C
      ASSOC(1,NUMEL)=ITMP
      ASSOC(2,NUMEL)=INTCNT
      ASSOC(3,NUMEL)=ITMP
      WORK(2,NUMBR)=INTCNT
      L=MOD(NAMTBL(ITMP),MODULO)
      IF((NAMTBL(ITMP)-L).EQ.IDENT(1))L=L+50
      GO TO 18
C
C...     ITEM HAS BEEN USED BEFORE - STORE VALUE ALREADY ASSIGNED IN
C...     ASSOC IN SECOND COLUMN OF WORK
C
   17 WORK(2,NUMBR)=ASSOC(2,I)
      IF(NUMBR.GT.1)ASSOC(3,I)=0
C
C...     UPDATE PRODUCTION TABLE POINTER AND CHECK IF IT EXCEEDS LIMIT
C
   18 PRODI=PRODI+1
      IF (PRODI.GT.QPRODN) CALL SPILL(7,'LOADI   ')
C
C...     NO. STORE NAMTBL POINTER IN NEXT CELL OF PRODN
C
      PRODN(PRODI)=ITMP
C
C...     IF TERMINATING CHARACTER IS NOT RTERM, RETURN FOR NEXT ITEM
C
 5003 IF (NAMTBL(M).NE.RTERM(1)) GOTO 5
C
C...     THIS WAS LAST ITEM OF SET - PUT IT IN PRODN NEGATIVELY
C
      PRODN(PRODI)=-PRODN(PRODI)
C
C...     IF THIS WAS ONLY ITEM IN SET GO BACK FOR NEXT CARD
C
      IF(NUMBR.EQ.0)GO TO 3
      K=INTCNT
      J=INTCNT
C
C...     THIS LOOP SETS THE SECOND COLUMN OF ASSOC TO THE SAME VALUE
C...     FOR ALL ALTERNATIVES IN THIS SET, AND FOR ALL ITEMS WHICH ARE
C...     ALTERNATIVES IN ANY OTHER SET TO AN ITEM IN THIS SET.
C
      DO 23 L=1,NUMBR
      IF(WORK(2,L)-K)19,23,20
C
C...     J IS THE GROUP NO. OF THIS ITEM IF IT IS LESS THAN K
C
   19 J=WORK(2,L)
      GO TO 21
C
C...     K IS THE MAXIMUM GROUP NO. SO FAR ENCOUNTERED IN THIS SET
C
   20 K=WORK(2,L)
   21 DO 22 N=1,NUMEL
C
C...     TEST FOR ANY ITEMS IN ASSOC WITH GROUP NO. EQUAL TO MAX. SO
C...     FAR IN THIS SET, AND CHANGE THEM TO MINIMUM SO FAR IN THIS SET
C
      IF(ASSOC(2,N).EQ.K)ASSOC(2,N)=J
   22 CONTINUE
C
C...     SET K TO THE MINIMUM GROUP NO. IN THIS SET
C
   23 K=J
C
C...     ON EXIT ALL ITEMS HAVE GROUP NO. K, THE LOWEST POSSIBLE.
C...     IF THIS IS GREATER THAN THE CURRENT MAX. VALUE - DIAGNOSTIC,
C...     IF IT IS EQUAL TO THE CURRENT MAXIMUM - UPDATE MAXIMUM AND
C...     FETCH NEXT CARD,
C...     IF IT IS LESS THAN CURRENT MAXIMUM - FETCH NEXT CARD.
C
      IF(K-INTCNT) 3,2,13
C
C...     NUMBER - SHOULD BE ONLY ITEM ON CARD
C
   24 IF ((NUMBR.EQ.0).AND.(NAMTBL(M).EQ.RTERM(1))) GOTO 18
C
C...     IT IS NOT - SO DIAGNOSTIC
C
      WRITE(VLFILE,2004) CNAMTB(ITMP)
 2004 FORMAT(1H ,36HERROR NO. 7015 IN SUBROUTINE LOADI. ,A6   ,37H APPEA
     *RS INCORRECTLY IN A PRODUCTION.)
      GO TO 7
C
C...     BREAK-POINT. STORE ITS POSITION. SHOULD BE ONLY ITEM ON CARD.
C
   25 BREAK=MCTOP
      MCTOP=POSTN
      IPROD=PRODI+1
      IF ((NUMBR.EQ.0).AND.(NAMTBL(M).EQ.RTERM(1))) GOTO 4
      WRITE(VLFILE,2005)
 2005 FORMAT(1H ,79HERROR NO. 7016 IN SUBROUTINE LOADI. BREAKPOINT INDIC
     *ATOR DOES NOT APPEAR ALONE.)
      GO TO 7
C
C...     CONGEO OR CONBIG FOLLOWED BY /. SHOULD BE FIRST AND ONLY
C...     APPEARANCE FOR THIS MODE. TEST GEOMLC TO FIND OUT.
C
   26 L=ICOD-J
      IF (L.GT.QGEOML) CALL SPILL(5,'LOADI   ')
      IF(LL.GT.0)GO TO 27
      IF(GEOMLC(L).EQ.0)GO TO 27
C
C...     GEOMLC(MODE) IS NON-ZERO - I.E. THIS SURFACE TYPE HAS ALREADY
C...     BEEN USED. ISSUE DIAGNOSTIC.
C
      WRITE(VLFILE,2006) CNAMTB(ITMP)
 2006 FORMAT (1H ,60HERROR NO. 7017 IN SUBROUTINE LOADI. TWO SETS OF FOR
     *MATS FOR ,A6)
      GO TO 7
C
C...     CONGEO OR CONBIG SHOULD BE ALONE.3CHECK IT.
C
   27 IF( NUMBR.EQ.0)GO TO 28
C
C...     NO.
C
      WRITE(VLFILE,2007) CNAMTB(ITMP)
 2007 FORMAT(1H ,36HERROR NO. 7018 IN SUBROUTINE LOADI. ,A6   ,41H FORMA
     *T IDENTIFIER DOES NOT APPEAR ALONE.)
      GO TO 7
C
C...     SKIP ITEMS UNTIL RTERM IS REACHED
C
   28 CALL INPUT
      K=STACK(1,TOP)
      IF (NAMTBL(K).NE.RTERM(1)) GOTO 28
C
C...     IS THIS FIRST PRODUCTION
C
      IF(PRODI.EQ.0)GO TO 29
C
C...     NO. UPDATE PRODUCTION TABLE POINTER, STORE MARER IN PRODUCTION
C...     TABLE, AND POSITION IN GEOMLC. THEN RETURN FOR NEXT CARD.
C
      IF(ELFILE.EQ.LCDATA)GOTO 39
      PRODI=PRODI+1
      PRODN(PRODI)=-PDERR
   39 IF(NAMTBL(IBKPNT).NE.CONGEO(1))GOTO 38
      GEOMLC(L)=POSTN+1
      GO TO 3
   38 LL=LL+1
      GEOMLC(LL)=ITMP
      IF(LL.EQ.1)GOTO 4
      GO TO 3
C
C...     FIRST PRODUCTION. SET GEOMLC(1).
C
   29 IF(NAMTBL(IBKPNT).NE.CONGEO(1))GOTO 38
      GEOMLC(L)=1
      GO TO 4
C
C...     FINI REACHED. SHOULD BE ALONE - IF NOT ISSUE DIAGNOSTIC
C...     BUT ACCEPT FINI AS VALID
C
   30 IF ((NUMBR.EQ.0).AND.(NAMTBL(M).EQ.RTERM(1))) GOTO 31
      WRITE(VLFILE,2008)
 2008 FORMAT(1H ,89HERROR NO. 7019 IN SUBROUTINE LOADI. PRODUCTION LIST
     * TERMINATOR INCORRECT. ERROR IGNORED.)
C
C...     SET MARKER IN PRODN AND DECREASE GROUP NO. BY ONE
C
   31 IF(ELFILE.EQ.LCDATA)GOTO 40
      PRODI=PRODI+1
      PRODN(PRODI)=-PDERR
   40 INTCNT=INTCNT-1
C
C...     CLEAR LENGTH
C
      DO 36 I=1,QLENGT
      LENGTH(1,I) = 0
   36 LENGTH(2,I) = 0
      NUMGP=0
C
C...     THIS LOOP SETS UP THE ARRAY LENGTH SO THAT COL.1 CONTAINS THE
C...     SET NUMBERS, COL.2 THE NO. OF ITEMS IN THAT SET.
C...     IT IS ARRANGED IN DESCENDING  ORDER OF MAGNITUDE IN COL.2
C
      DO 35 I=1,INTCNT
      I1=I
C
C...     COUNT NO. OF ITEMS IN ASSOC WITH GROUP NO. I
C
      K=0
      DO 32 L=1,NUMEL
      IF(ASSOC(2,L).EQ.I)K=K+1
   32 CONTINUE
      IF(K.EQ.0)GO TO 35
      NUMGP=NUMGP+1
C
C...     TEST VALID NO. OF GROUPS. IF TOO LARGE ISSUE DIAGNOSTIC.
C
      IF(NUMGP.GT.QLENGT)GO TO 13
C
C...     SET L TO THE POSITION IN LENGTH WHERE THE FIRST GROUP WITH
C...     LESS MEMBERS THAN THIS ONE OCCURS.
C
      DO 33 L=1,NUMGP
      IF(K.GT.LENGTH(2,L))GO TO 34
   33 CONTINUE
      L=NUMGP
C
C...     STORE GROUP NO. AND NUMBER OF ELENTS IN GROUP AT THIS POINT
C...     IN LENGTH, AND MOVE DOWN SUBSEQUENT ENTRIES.
C
   34 M1=LENGTH(1,L)
      M2=LENGTH(2,L)
      LENGTH(1,L)=I1
      LENGTH(2,L)=K
      IF(L.EQ.NUMGP)GO TO 35
      I1=M1
      K=M2
      L=L+1
      GO TO 34
   35 CONTINUE
C
C...     IF BASIC PRODUCTION PROCESSING AND ALL APPEARED AT LEAST
C...     ONCE - SET SECOND COL. OF NAMTBL ENTRY FOR ALL TO ALL BITS SET
C     *****************************************************************
      IF((SWITCH.NE.1).OR.(KNT.EQ.0))GOTO 37
      CNAMTB(KNT)='******'
   37 RETURN
       END
**** SOURCE FILE : M0006714.W01   ***
*
C
C              FORTRAN SUBROUTINE LOADM
C
C LINKAGE       CALL   LOADM
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          INTEGER FCT.  NAME                          MAIN
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOADM
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  CHARST:     BEGINNING OF BASIC CHARACTER SECTION OF NAMTBL
C  CHARND:     END OF BASIC CHARACTER SECTION OF NAMTBL
C  NAMEST:     NAMTBL INDEX OF BEGIN OF THE PART PROGRAM NAME  SECTION
C  NAMMAX:     NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C  NAMTBL:     NAME TABLE OR DICTIONARY
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
C  CODES:      SPACE FOR ALL CLASS CODES
      DIMENSION CODES(150)
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  BPFILE:     BLOCK DATA OUTPUT OF CODE TABLE AND BASIC PRODUCTIONS
      EQUIVALENCE (BPFILE,SYMFIL(1))
C  LCDATA:     INPUT FILE NUMBER OF PRODUCTION TABLES SEQUEN. MODE
      EQUIVALENCE (LCDATA,SYMFIL(5))
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QCODE:      DIMENSION OF ARRAY CODE
      EQUIVALENCE (QCODE,LDXSIZ(1))
C  QCLSWD:     DIMENSION OF ARRAY CLSWRD
      EQUIVALENCE (QCLSWD,LDXSIZ(14))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  ERROR:      FLAG SET IF ERROR IN PRODUCTION TABLE
C
C       16.    RELATION OF ORDINAL NUMBERS TO NAMTBL INDEXES
C
      COMMON/CLSWRD/CLSWRD
      DIMENSION CLSWRD(100)
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515)
C  MAXCLS:     NUMBER OF DEFINITIONS IN A TRANSFORMATION SECTIION
      EQUIVALENCE (MAXCLS,BRANCH(6))
C*
C PURPOSE      TO READ THE META-LINQUISTIC CLASSES AND TO
C              PRODUCE A BLOCK DATA PROGRAM FOR THEM.
      CHARACTER*6 I
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C
C              I                  C            META-NAME
C              J                  I            CLASS
C              JJ                 I            CODE SUBSCRIPT
C              JJJ                I            CODE SUBSCRIP (JJ+1)
C              K                  I            NAMTBL POINTER
C              L                  I            NAMTBL INDEX OF J
C**
C
C...     WRITE HEADING FOR BLOCK DATA PROGRAM
C
      WRITE(VLFILE,17)
   17 FORMAT(1H1,5X,35HCODES TABLE LOADING OF META CLASSES/4X,5HENTRY,5X
     /,4HCODE)
      WRITE(BPFILE,1) QCODE
    1 FORMAT(6X,17HBLOCK DATA BDCODE,57X/
     16X,22HIMPLICIT INTEGER (A-Z),52X/
     26X,16HCOMMON/CODE/CODE,58X/
     36X,15HDIMENSION CODE(I4, 1H),54X)
C
C...     INITIALIZE SUBSCRIPTS FOR BLOCK DATA
C
      JJ = 1
      JJJ = 2
C
C...     CLEAR NAMTBL
C
      DO 7 K = NAMEST,NAMMAX
    7 NAMTBL(K) = 0
      II=0
      DO 27 K=1,QCLSWD
   27 CLSWRD(K)=0
C
C...     READ NEXT CARD - I = META-NAME
C...                      J = ITS CLASS
C
    2 READ(LCDATA,3)I,J,IPRIOR
    3 FORMAT(A6,7X,I6,5X,I3)
C
C...     LIST IT
C
      WRITE(VLFILE,13)I,J,IPRIOR
   13 FORMAT(1X,A6,7X,I6,5X,I3)
C
C...     THIS SET OF CARDS IS TERMINATED BY A NEGATIVE NUMBER IN
C...     THE CLASS FIELD. IS J NEGATIVE
C
      IF (J.LT.0) GO TO 5
C
C...     NO. PUT META-NAME IN NAMTBL WITH CORRECT CLASS,
C...     AND PUT CLASS INTO ARRAY CODE.
C
      K = NAME(I)
      NAMTBL(K) = J
      IF (JJ.GT.QCODE) CALL SPILL(1,'LOADM   ')
   12 CODES(JJ) = J
C
C...     IS THERE A CHARACTER IN CHARACTER PART OF NAMTBL WITH THIS
C...     CLASS. IF THERE IS, STORE THE INDEX OF THE FIRST SUCH
C...     CHARACTER IN CODE, IF NOT STORE INDEX OF LAST ITEM IN THE
C...     CHARACTER PORTION.
C
      DO 8 L=CHARST,CHARND
      IF (NAMTBL(L).EQ.J) GOTO 9
    8 CONTINUE
      L = CHARND
    9 CODES(JJJ) = L
C
C...     OUTPUT NEXT LINE OF BLOCK DATA PROGRAM TOGETHER WITH COMMENT
C
      WRITE(BPFILE,4)I,JJ,JJJ,J,L
    4 FORMAT(29HC   META LINGUISTIC CLASS    ,A6,45X/6X,10HDATA CODE(
     1,I3,7H),CODE(,I3,2H)/,I5,1H,I6,1H/,36X)
C
      IF(IPRIOR.GE.QCLSWD)CALL SPILL(14,'LOADM   ')
      IF(IPRIOR)20,10,22
   22 IF(CLSWRD(IPRIOR).EQ.0)GOTO 23
   20 WRITE(VLFILE,21)
   21 FORMAT(1H ,74HERROR NO. 7025 IN SUBROUTINE LOADM.  INVALID OR MULT
     *IPLE DEFINED PRIORITY.)
      ERROR=.TRUE.
      GOTO 10
   23 CLSWRD(IPRIOR)=K
      IF(L.GT.49.OR.L.EQ.2.OR.L.EQ.15.OR.L.EQ.36)GOTO 10
      CLSWRD(IPRIOR)=L
C
C...     UPDATE CODE SUBSCRIPTS AND RETURN FOR NEXT CARD
C
   10 JJ = JJ+2
      JJJ = JJJ+2
      GO TO 2
C
C...     TERMINATING CARD READ. OUTPUT END CARD AND RETURN
C
    5 WRITE(BPFILE,6)
    6 FORMAT (7X,3HEND,70X)
      K=0
      DO 25 L=1,QCLSWD
      IF(CLSWRD(L).EQ.0)GOTO 25
      K=K+1
      CLSWRD(K)=CLSWRD(L)
   25 CONTINUE
      MAXCLS=K+1
      RETURN
       END
**** SOURCE FILE : M0006715.X01   ***
*
C
C              FORTRAN SUBROUTINE LOADN
C
C LINKAGE       CALL   LOADN
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          INTEGER FCT.  NAME            SUBROUTINE    LOADG
C
      SUBROUTINE LOADN
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  INAMST:     BEGIN GEOMETRIC DEFINITION ROUTINE NAME SECTION(NAMTBL)
C  NAMMAX:     NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C  IFIXST:     INDEX OF BEGINNING OF FIXED POINT NUMBER SECTION,CNUMTB
C  NAMBTL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C  CNUMTB:     NUMBER TABLE
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  NTFILE:     BLOCK DATA OUTPUT OF NAMTBL AND NAMTBL POINTERS
      EQUIVALENCE (NTFILE,SYMFIL(2))
C  LCDATA:     INPUT FILE NUMBER OF PRODUCTION TABLES SEQUEN. MODE
      EQUIVALENCE (LCDATA,SYMFIL(5))
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QAPTXX:     DIMENSION OF ARRAY APTXXX (OUTPUT)
      EQUIVALENCE (QAPTXX,LDXSIZ(20))
C  QAPTYY:     DIMENSION OF ARRAY APTYYY (OUTPUT)
      EQUIVALENCE (QAPTYY,LDXSIZ(21))
C  QSUBNA:     DIMENSION OF ARRAY SUBNAM
      EQUIVALENCE (QSUBNA,LDXSIZ(22))
C  QHOLER:     DIMENSION OF ARRAY HOLER
      EQUIVALENCE (QHOLER,LDXSIZ(23))
C  QINMBR:     DIMENSION OF COMMON/NUMPTR/ DATA
      EQUIVALENCE (QINMBR,LDXSIZ(24))
C  QISUB:      DIMENSION OF COMMON/SUBLST/ DATA
      EQUIVALENCE (QISUB,LDXSIZ(25))
C  QIHOL:      DIMENSION OF COMMON/BCDPTR/ DATA
      EQUIVALENCE (QIHOL,LDXSIZ(26))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      COMMON/LDSCOM/LDSCOM
      DIMENSION LDSCOM(9)
C  PRODI:      POINTER TO LAST ENTRY IN PRODN TABLE
      EQUIVALENCE (PRODI,LDSCOM(4))
C
C       13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C  PRODA:      CONTAINS NAMTBL INDICES OF THOSE NAMES
C              TO BE PRE-LOADED INTO NAMTBL
C  IPRODB:     NAMTBL INDEXES ASSOCIATED WITH PRODB ENTRIES
C  PRODB:      PRE-LOADED NAMES ALPHABETICALLY SORTED
C*
C PURPOSE      TO READ ALL THOSE NAMES TO BE PRE-LOADED INTO
C              NAMTBL, AND TO PRODUCE A BLOCK DATA PROGRAM
C              FOR VARIOUS POINTERS TO NAMTBL.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C
C              HOL         3      C*6  CONTAINS BCD NAMES FOR PUTTING
C                                              IN BLOCK DATA
C              HOLER       4      C*6          CONTAINS SPECIAL NAMES,
C              IHOLER      4      I            CLASS CODES FOR NAMTBL
C              I                  I            INDEX OF DO-LOOP
C              II                 C*6          CONTAINS NAME
C              I1                 I            SUBSCRIPT IN DO LOOP
C              J                  I            CLASS/MODE
C              K                  I            NAMTBL INDEX
C              K1                 I            NAMTBL INDEX
C              NAMSUB      5      I            CONTAINS BCD NAMES FOR
C                                              B.D. ORG.
C              NUMBRS      14     C*6          CONTAINS BCD NUMBERS FOR
C                                              NAMTBL
C              SUBNAM     109     C*6          CONTAINS SUBROUTINE NAMES
C              ISUBNM     109     I            + ASSOC. CLASS CODES FOR
C                                              NAMTBL
C              SUBPTR       113   I            TO SPECIFY ORDER OF ITEMS
C                                              IN B.D. FOR SUBLST
C              TEMP               C*6          TEMPORARY STORAGE FOR
C                                              NAME DURING SORTING
C              ITEMP              I            TEMPORARY STORAGE FOR
C                                              NAMTBL INDEX DURING SORT
C
      CHARACTER*6 SUBNAM(109),HOLER(4),NUMBRS(14),HOL(3),II,NAMSUB(5)
      CHARACTER*6 TEMP
      DIMENSION  ISUBNM(109),IHOLER(4),SUBPTR(113)
      DATA SUBNAM(1)/'UNDEF '/,ISUBNM(1)/19100/,
     1     SUBNAM(2)/'APT001'/,ISUBNM(2)/19101/,
     2     SUBNAM(3)/'APT003'/,ISUBNM(3)/19102/,
     3     SUBNAM(4)/'APT004'/,ISUBNM(4)/19103/,
     4     SUBNAM(5)/'APT005'/,ISUBNM(5)/19104/,
     5     SUBNAM(6)/'APT006'/,ISUBNM(6)/19105/,
     6     SUBNAM(7)/'APT007'/,ISUBNM(7)/19106/,
     7     SUBNAM(8)/'APT008'/,ISUBNM(8)/19107/,
     8     SUBNAM(9)/'APT009'/,ISUBNM(9)/19108/
      DATA SUBNAM(10)/'APT010'/ISUBNM(10)/19109/,
     1     SUBNAM(11)/'APT011'/,ISUBNM(11)/19110/,
     2     SUBNAM(12)/'APT012'/,ISUBNM(12)/19111/,
     3     SUBNAM(13)/'APT014'/,ISUBNM(13)/19112/,
     4     SUBNAM(14)/'APT015'/,ISUBNM(14)/19113/,
     5     SUBNAM(15)/'APT016'/,ISUBNM(15)/19114/,
     6     SUBNAM(16)/'APT017'/,ISUBNM(16)/19115/,
     7     SUBNAM(17)/'APT018'/,ISUBNM(17)/19116/,
     8     SUBNAM(18)/'APT019'/,ISUBNM(18)/19117/,
     9     SUBNAM(19)/'APT020'/,ISUBNM(19)/19118/
      DATA SUBNAM(20)/'APT021'/,ISUBNM(20)/19119/,
     1     SUBNAM(21)/'APT022'/,ISUBNM(21)/19120/,
     2     SUBNAM(22)/'APT023'/,ISUBNM(22)/19121/,
     3     SUBNAM(23)/'APT024'/,ISUBNM(23)/19122/,
     4     SUBNAM(24)/'APT025'/,ISUBNM(24)/19123/,
     5     SUBNAM(25)/'APT026'/,ISUBNM(25)/19124/,
     6     SUBNAM(26)/'APT027'/,ISUBNM(26)/19125/,
     7     SUBNAM(27)/'APT028'/,ISUBNM(27)/19126/,
     8     SUBNAM(28)/'APT029'/,ISUBNM(28)/19127/,
     9     SUBNAM(29)/'APT030'/,ISUBNM(29)/19128/
      DATA SUBNAM(30)/'APT031'/,ISUBNM(30)/19129/,
     1     SUBNAM(31)/'APT032'/,ISUBNM(31)/19130/,
     2     SUBNAM(32)/'APT033'/,ISUBNM(32)/19131/,
     3     SUBNAM(33)/'APT035'/,ISUBNM(33)/19132/,
     4     SUBNAM(34)/'APT036'/,ISUBNM(34)/19133/,
     5     SUBNAM(35)/'APT037'/,ISUBNM(35)/19134/,
     6     SUBNAM(36)/'APT038'/,ISUBNM(36)/19135/,
     7     SUBNAM(37)/'APT039'/,ISUBNM(37)/19136/,
     8     SUBNAM(38)/'APT040'/,ISUBNM(38)/19137/,
     9     SUBNAM(39)/'APT044'/,ISUBNM(39)/19138/
      DATA SUBNAM(40)/'APT045'/,ISUBNM(40)/19139/,
     1     SUBNAM(41)/'APT046'/,ISUBNM(41)/19140/,
     2     SUBNAM(42)/'APT047'/,ISUBNM(42)/19141/,
     3     SUBNAM(43)/'APT048'/,ISUBNM(43)/19142/,
     4     SUBNAM(44)/'APT049'/,ISUBNM(44)/19143/,
     5     SUBNAM(45)/'APT050'/,ISUBNM(45)/19144/,
     6     SUBNAM(46)/'APT051'/,ISUBNM(46)/19145/,
     7     SUBNAM(47)/'APT052'/,ISUBNM(47)/19146/,
     8     SUBNAM(48)/'APT053'/,ISUBNM(48)/19147/,
     9     SUBNAM(49)/'APT054'/,ISUBNM(49)/19148/
      DATA SUBNAM(50)/'APT055'/,ISUBNM(50)/19149/,
     1     SUBNAM(51)/'APT056'/,ISUBNM(51)/19150/,
     2     SUBNAM(52)/'APT057'/,ISUBNM(52)/19151/,
     3     SUBNAM(53)/'APT058'/,ISUBNM(53)/19152/,
     4     SUBNAM(54)/'APT060'/,ISUBNM(54)/19153/,
     5     SUBNAM(55)/'APT061'/,ISUBNM(55)/19154/,
     6     SUBNAM(56)/'APT062'/,ISUBNM(56)/19155/,
     7     SUBNAM(57)/'APT063'/,ISUBNM(57)/19156/,
     8     SUBNAM(58)/'APT064'/,ISUBNM(58)/19157/,
     9     SUBNAM(59)/'APT065'/,ISUBNM(59)/19158/
      DATA SUBNAM(60)/'APT066'/,ISUBNM(60)/19159/,
     1     SUBNAM(61)/'APT067'/,ISUBNM(61)/19160/,
     2     SUBNAM(62)/'APT068'/,ISUBNM(62)/19161/,
     3     SUBNAM(63)/'APT073'/,ISUBNM(63)/19162/,
     4     SUBNAM(64)/'APT075'/,ISUBNM(64)/19163/,
     5     SUBNAM(65)/'APT077'/,ISUBNM(65)/19164/,
     6     SUBNAM(66)/'APT078'/,ISUBNM(66)/19165/,
     7     SUBNAM(67)/'APT079'/,ISUBNM(67)/19166/,
     8     SUBNAM(68)/'APT081'/,ISUBNM(68)/19167/,
     9     SUBNAM(69)/'APT083'/,ISUBNM(69)/19168/
      DATA SUBNAM(70)/'APT085'/,ISUBNM(70)/19169/,
     1     SUBNAM(71)/'APT087'/,ISUBNM(71)/19170/,
     2     SUBNAM(72)/'APT088'/,ISUBNM(72)/19171/,
     3     SUBNAM(73)/'APT090'/,ISUBNM(73)/19172/,
     4     SUBNAM(74)/'APT092'/,ISUBNM(74)/19173/,
     5     SUBNAM(75)/'APT093'/,ISUBNM(75)/19174/,
     6     SUBNAM(76)/'APT094'/,ISUBNM(76)/19175/,
     7     SUBNAM(77)/'APT100'/,ISUBNM(77)/19176/,
     8     SUBNAM(78)/'APT200'/,ISUBNM(78)/19177/,
     9     SUBNAM(79)/'APT201'/,ISUBNM(79)/19178/
      DATA SUBNAM(80)/'APT298'/,ISUBNM(80)/19179/,
     1     SUBNAM(81)/'APT299'/,ISUBNM(81)/19180/,
     2     SUBNAM(82)/'APT041'/,ISUBNM(82)/19193/,
     3     SUBNAM(83)/'APT043'/,ISUBNM(83)/19195/,
     4     SUBNAM(84)/'APT295'/,ISUBNM(84)/19196/,
     5     SUBNAM(85)/'APT042'/,ISUBNM(85)/19194/,
     6     SUBNAM(86)/'APT069'/,ISUBNM(86)/19198/,
     7     SUBNAM(87)/'APT070'/,ISUBNM(87)/19199/,
     8     SUBNAM(88)/'APT071'/,ISUBNM(88)/19200/,
     9     SUBNAM(89)/'APT072'/,ISUBNM(89)/19201/
      DATA SUBNAM(90)/'APT074'/,ISUBNM(90)/19203/,
     1     SUBNAM(91)/'APT034'/,ISUBNM(91)/19204/,
     2     SUBNAM(92)/'DEFEXT'/,ISUBNM(92)/19202/,
     3     SUBNAM(93)/'APT101'/,ISUBNM(93)/19207/,
     4     SUBNAM(94)/'NDTEST'/,ISUBNM(94)/19011/,
     5     SUBNAM(95)/'COMP3D'/,ISUBNM(95)/19012/,
     6     SUBNAM(96)/'TLON  '/,ISUBNM(96)/19003/,
     7     SUBNAM(97)/'GOTOPN'/,ISUBNM(97)/19208/,
     8     SUBNAM(98)/'APT105'/,ISUBNM(98)/19209/,
     9     SUBNAM(99)/'APT106'/,ISUBNM(99)/19211/
      DATA SUBNAM(100)/'TRANSF'/,ISUBNM(100)/19212/,
     1     SUBNAM(101)/'APT104'/,ISUBNM(101)/19213/,
     2     SUBNAM(102)/'APT102'/,ISUBNM(102)/19214/,
     3     SUBNAM(103)/'APT103'/,ISUBNM(103)/19215/
     4    ,SUBNAM(104)/'APT107'/,ISUBNM(104)/19216/
     5    ,SUBNAM(105)/'APT013'/,ISUBNM(105)/19217/
     6    ,SUBNAM(106)/'APT108'/,ISUBNM(106)/19218/
     7    ,SUBNAM(107)/'APT109'/,ISUBNM(107)/19219/
     8    ,SUBNAM(108)/'APT110'/,ISUBNM(108)/19247/
     9    ,SUBNAM(109)/'LOGIF '/,ISUBNM(109)/19248/
      DATA HOLER(1)/'.AC.  '/,IHOLER(1)/31000/,
     1     HOLER(2)/'APTER'/,IHOLER(2)/31000/,
     2     HOLER(3)/'$21T$1'/,IHOLER(3)/31000/,
     3     HOLER(4)/'$$TAB'/,IHOLER(4)/31000/
      DATA NUMBRS
C        1   2   3   4   5   6   7   8   9  10   11   12   13   14
     * /'0','1','2','3','4','5','6','7','8','9','0.','1.','10.',' '/
C
      DATA HOL(1)/'FEDRAT'/,
     1     HOL(2)/'TO'/,
     2     HOL(3)/'DS'/
C
      DATA SUBPTR( 1)/ 2/,SUBPTR( 2)/ 5/,SUBPTR( 3)/ 6/,SUBPTR( 4)/ 8/,
     1     SUBPTR( 5)/11/,SUBPTR( 6)/10/,SUBPTR( 7)/12/,SUBPTR( 8)/16/,
     2     SUBPTR( 9)/17/,SUBPTR(10)/19/,SUBPTR(11)/20/,SUBPTR(12)/43/,
     3     SUBPTR(13)/23/,SUBPTR(14)/24/,SUBPTR(15)/25/,SUBPTR(16)/32/,
     4     SUBPTR(17)/21/,SUBPTR(18)/22/,SUBPTR(19)/34/,SUBPTR(20)/35/,
     5     SUBPTR(21)/32/,SUBPTR(22)/36/,SUBPTR(23)/37/,SUBPTR(24)/38/,
     6     SUBPTR(25)/39/,SUBPTR(26)/40/,SUBPTR(27)/97/,SUBPTR(28)/42/,
     7     SUBPTR(29)/44/,SUBPTR(30)/45/,SUBPTR(31)/46/,SUBPTR(32)/47/,
     8     SUBPTR(33)/48/,SUBPTR(34)/49/,SUBPTR(35)/50/,SUBPTR(36)/51/,
     9     SUBPTR(37)/52/,SUBPTR(38)/53/,SUBPTR(39)/55/,SUBPTR(40)/56/
      DATA SUBPTR(41)/59/,SUBPTR(42)/60/,SUBPTR(43)/61/,SUBPTR(44)/-1/,
     1     SUBPTR(45)/98/,SUBPTR(46)/ 4/,SUBPTR(47)/ 7/,SUBPTR(48)/ 9/,
     2     SUBPTR(49)/ 1/,SUBPTR(50)/13/,SUBPTR(51)/14/,SUBPTR(52)/15/,
     3     SUBPTR(53)/18/,SUBPTR(54)/26/,SUBPTR(55)/27/,SUBPTR(56)/28/,
     4     SUBPTR(57)/29/,SUBPTR(58)/30/,SUBPTR(59)/31/,SUBPTR(60)/33/,
     5     SUBPTR(61)/ 9/,SUBPTR(62)/41/,SUBPTR(63)/57/,SUBPTR(64)/58/,
     6     SUBPTR(65)/ 3/,SUBPTR(66)/33/,SUBPTR(67)/71/,SUBPTR(68)/75/,
     7     SUBPTR(69)/54/,SUBPTR(70)/11/,SUBPTR(71)/54/,SUBPTR(72)/70/,
     8     SUBPTR(73)/76/,SUBPTR(74)/ 0/,SUBPTR(75)/81/,SUBPTR(76)/82/,
     9     SUBPTR(77)/84/,SUBPTR(78)/85/,SUBPTR(79)/86/,SUBPTR(80)/87/
      DATA SUBPTR(81)/88/,SUBPTR(82)/91/,SUBPTR(83)/89/,SUBPTR(84)/90/,
     1     SUBPTR(85)/67/,SUBPTR(86)/68/,SUBPTR(87)/65/,SUBPTR(88)/64/,
     2     SUBPTR(89)/66/,SUBPTR(90)/69/,SUBPTR(91)/77/,SUBPTR(92)/78/,
     3     SUBPTR(93)/83/,SUBPTR(94)/79/,SUBPTR(95)/80/,SUBPTR(96)/92/,
     4     SUBPTR(97)/93/,SUBPTR(98)/94/,SUBPTR(99)/95/,
     5     SUBPTR(100)/96/,SUBPTR(101)/72/,SUBPTR(102)/97/,
     6     SUBPTR(103)/98/,SUBPTR(104)/99/,SUBPTR(105)/100/,
     7     SUBPTR(106)/101/,SUBPTR(107)/102/,SUBPTR(108)/103/
     8    ,SUBPTR(109)/104/,SUBPTR(110)/105/,SUBPTR(111)/106/
     9    ,SUBPTR(112)/107/,SUBPTR(113)/108/
      DATA NAMSUB(1)/'ZSURF'/,
     1     NAMSUB(2)/'ERROR'/,
     2     NAMSUB(3)/'PSIS'/,
     3     NAMSUB(4)/'REFSYS'/,
     4     NAMSUB(5)/'TLAXIS'/
C**
      WRITE(VLFILE,110)
  110 FORMAT (1H1,5X,32HEXTERNAL NAME TABLE LOADING DATA/4X,4HNAME,10X,
     /5HCLASS,10X,4HNAME,7X,6HNAMTBL)
C
C...     CLEAR NAMTBL
C
      DO 10 I=INAMST,NAMMAX
   10 NAMTBL(I) = 0
      L=0
C
C...     READ NEXT CARD,II = NAME, J = ITS CLASS AND MODE
C
   20 READ(LCDATA,30)II,J
   30 FORMAT(A6,7X,I6)
C
C...     THIS SET OF CARDS IS TERMINATED BY A NEGATIVE NUMBER
C...     IN THE CLASS FIELD. IS J NEGATIVE
C
      IF (J.LT.0) GOTO 40
C
C...     NO. PUT NAME AND ITS CLASS IN NAMTBL,
C...     THEN RETURN FOR NEXT CARD.
C
      K=NAME(II)
      NAMTBL(K) = J
      L=L+1
      PRODA(L)=K
      IPRODB(L)=K
      PRODB(L)=CNAMTB(K)
      GOTO 20
C
C...     TERMINATING CARD READ. PUT SUBROUTINE NAMES AND CLASSES
C...     INTO NAMTBL FROM INAMST UPWARDS.
C
   40 PRODI=J
      DO 50 I=1,QSUBNA
      J = INAMST+I-1
      NAMTBL(J) = ISUBNM(I)
      CNAMTB(J)=SUBNAM(I)
   50 CONTINUE
C
C...  PUT .AC.,APTER,$21T$1,AND, ..TAB INTO NAMTBL IMMEDIATELY
C...     ABOVE THE SUBROUTINE NAMES.
C
      DO 60 I=1,QHOLER
      J = J+1
      NAMTBL(J) = IHOLER(I)
      CNAMTB(J)=HOLER(I)
   60 CONTINUE
C
C...     PUT 0-9,0.,1.,10. INTO NUMBER TABLE, CNUMTB, STARTING AT IFIXST
C
      DO 70 I=1,13
      J = IFIXST+I-1
      CNUMTB(J)=NUMBRS(I)
   70 CONTINUE
C
C...     WRITE CARDS BEING SORTED TO LISTING
C
C... SORT PRE-LOADED NAMES ALPHABETICALLY
      LM1=L-1
      DO 71 I=1,LM1
        IP1=I+1
        IK=I
        DO 72 J=IP1,L
          IF (LGT(PRODB(IK),PRODB(J))) THEN
            IK=J
          ENDIF
   72   CONTINUE
        IF (IK.NE.I) THEN
          TEMP=PRODB(IK)
          ITEMP=IPRODB(IK)
          PRODB(IK)=PRODB(I)
          IPRODB(IK)=IPRODB(I)
          PRODB(I)=TEMP
          IPRODB(I)=ITEMP
        ENDIF
   71 CONTINUE
C
      DO 75 I=1,L
      J=PRODA(I)
      K=IPRODB(I)
   75 WRITE(VLFILE,120)CNAMTB(J),NAMTBL(J),
     *                 CNAMTB(K),K
  120 FORMAT(4X,A6,7X,I6,10X,A6,7X,I4)
      WRITE(VLFILE,130)PRODI
  130 FORMAT(17X,I6)
C
C...     NAMTBL IS NOW LOADED. GENERATE BLOCK DATA PROGRAMS CONTAINING
C...     POINTERS TO SUBROUTINE NAMES, CONTENTS OF IFIXST-IFIXND, AND
C...     CERTAIN SPECIAL NAMES THAT CAN BE USED IN I.L. WITHOUT
C...     APPEARING EXPLICITLY IN THE PART PROGRAM.
C...     FIRST WRITE HEADING FOR BCDPTR BLOCK DATA PROGRAM.
C
      WRITE(NTFILE,1) QIHOL
    1 FORMAT(6X,17HBLOCK DATA BDBCDP,57X/
     1,35HC     BLOCK DATA PROGRAM FOR BCDPTR,45X/
     26X,22HIMPLICIT INTEGER (A-Z),52X/
     36X,20HCOMMON/BCDPTR/BCDPTR,54X/
     46X,17HDIMENSION BCDPTR(I4,1H),52X/
     56X,48HEQUIVALENCE(DOTAC ,BCDPTR(1)),(FEDRAT,BCDPTR(2)),26X/
     66X,48HEQUIVALENCE(TO    ,BCDPTR(3)),(DS    ,BCDPTR(4)),26X/
     76X,48HEQUIVALENCE(ERASB ,BCDPTR(5)),(ITDOT1,BCDPTR(6)),26X/
     86X,29HEQUIVALENCE(DOTTAB,BCDPTR(7)),45X)
      K=INAMST+QSUBNA
      I = 1
C
C...     WRITE POINTER TO .AC.
C
      WRITE(NTFILE,2) HOLER(1),I,K
    2 FORMAT (23HC   NAMTBL POINTER FOR , A6,51X/
     16X,12HDATA BCDPTR(,I1,2H)/,I4,1H/,54X)
C
C...     WRITE POINTERS TO FEDRAT, TO, DS
C
      DO 80 I=2,4
      K1=NAME(HOL(I-1))
   80 WRITE(NTFILE,2) HOL(I-1),I,K1
C
C...     WRITE POINTERS TO APTER,$21T$1, $$TAB
C
      DO 90 I=5,7
      K = K+1
   90 WRITE(NTFILE,2) HOLER(I-3),I,K
C
C...     TERMINATE BLOCK DATA PROGRAM
      WRITE(NTFILE,9)
C
C...     WRITE BLOCK DATA PROGRAM FOR NUMPTR
C
      WRITE(NTFILE,3) QINMBR
    3 FORMAT (6X,17HBLOCK DATA BDNUMP,57X/
     *35HC     BLOCK DATA PROGRAM FOR NUMPTR,45X/
     *6X,22HIMPLICIT INTEGER (A-Z),52X/
     *6X,20HCOMMON/NUMPTR/NUMPTR,54X/
     16X,17HDIMENSION NUMPTR(,I4,1H),52X/
     26X,50HEQUIVALENCE(ZERO  ,NUMPTR( 1)),(ZEROPT,NUMPTR( 2)),24X/
     36X,50HEQUIVALENCE(ONE   ,NUMPTR( 3)),(ONEPT ,NUMPTR( 4)),24X/
     46X,50HEQUIVALENCE(TWO   ,NUMPTR( 5)),(THREE ,NUMPTR( 6)),24X/
     56X,50HEQUIVALENCE(FOUR  ,NUMPTR( 7)),(FIVE  ,NUMPTR( 8)),24X/
     66X,50HEQUIVALENCE(SIX   ,NUMPTR( 9)),(SEVEN ,NUMPTR(10)),24X/
     76X,50HEQUIVALENCE(EIGHT ,NUMPTR(11)),(NINE  ,NUMPTR(12)),24X/
     *6X,50HEQUIVALENCE(TENPT ,NUMPTR(13))                    ,24X/
     81HC,79X)
C
C...     WRITE POINTERS TO 0, 0., 1, 1.
C
      DO 200 I=1,2
      K = NAMMAX+IFIXST+I-1
      J = 2*I - 1
      WRITE(NTFILE,4) NUMBRS(I),J,K
    4 FORMAT (23HC   NAMTBL POINTER FOR ,A3,54X/
     16X,12HDATA NUMPTR(,I2,2H)/,I4,1H/,53X)
      I1 = I+10
      K = K+10
      J = J+1
  200 WRITE(NTFILE,4) NUMBRS(I1),J,K
C
C...     WRITE POINTERS TO 2-9
C
      DO 210 I=5,12
      K = NAMMAX+IFIXST+I-3
  210 WRITE(NTFILE,4) NUMBRS(I-2),I,K
C
C...     WRITE POINTER FOR 10.
C
      K=NAMMAX+IFIXST+12
      I=13
      WRITE(NTFILE,4) NUMBRS(I),I,K
C
C...     TERMINATE BLOCK DATA PROGRAM
      WRITE(NTFILE,9)
C
C...     WRITE BLOCK DATA PROGRAM FOR SUBLST.
C...     IN THIS BLOCK SUBROUTINES ARE NOT LISTED IN NUMERICAL ORDER,
C...     BUT IN THE ORDER DETERMINED BY APTXXX IN PRO026.
C
      QSBLST=QAPTXX+QAPTYY+QISUB+1
      WRITE(NTFILE,5) QSBLST,QAPTXX,QAPTYY,QISUB
    5 FORMAT(6X,17HBLOCK DATA BDSUBL,57X/
     *35HC     BLOCK DATA PROGRAM FOR SUBLST,45X/
     *6X,22HIMPLICIT INTEGER (A-Z),52X/
     *6X,20HCOMMON/SUBLST/SUBLST,54X/
     16X,17HDIMENSION SUBLST(I4,9H),APTXXX(I4,9H),APTYYY(I4,7H),ISUB(I4,
     31H),15X/,1HC,79X/
     46X,34HEQUIVALENCE(SUBLST(  1),APTXXX(1)),40X/
     56X,34HEQUIVALENCE(SUBLST(121),APTYYY(1)),40X/
     66X,32HEQUIVALENCE(SUBLST(126),ISUB(1)),42X/
     76X,29HEQUIVALENCE (APT085,ISUB( 1)),45X/
     86X,29HEQUIVALENCE (APT200,ISUB( 2)),45X/
     96X,29HEQUIVALENCE (APT201,ISUB( 3)),45X/
     A6X,29HEQUIVALENCE (APT298,ISUB( 5)),45X/
     B6X,29HEQUIVALENCE (APT299,ISUB( 6)),45X/
     C6X,29HEQUIVALENCE (ERROR ,ISUB( 7)),45X/
     D6X,29HEQUIVALENCE (PSIS  ,ISUB( 8)),45X/
     E6X,29HEQUIVALENCE (REFSYS,ISUB( 9)),45X/
     F6X,29HEQUIVALENCE (TLAXIS,ISUB(10)),45X)
C
C...     WRITE POINTERS TO SUBROUTINES IN APTXXX
C
      DO 220 I=1,43
      J = SUBPTR(I)
      K = INAMST+J
  220 WRITE(NTFILE,6)SUBNAM(J+1),I,K
    6 FORMAT (23HC   NAMTBL POINTER FOR ,A6,51X/
     16X,12HDATA APTXXX(,I3,2H)/,I4,1H/,52X)
C
C...     INSERT POINTER TO ZSURF AT THIS POINT
C
      I = 44
      K=NAME(NAMSUB(1))
      WRITE(NTFILE,6) NAMSUB(1),I,K
C
C...     WRITE POINTERS TO REMAINING SUBROUTINES IN APTXXX
C
      DO 225 I = 45,84
      J = SUBPTR(I)
      K = INAMST+J
  225 WRITE(NTFILE,6) SUBNAM(J+1),I,K
      DO 230 I=85,92
      J=SUBPTR(I+20)
      K=INAMST+J
  230 WRITE(NTFILE,6) SUBNAM(J+1),I,K
      DO 231 I=95,103
      J=SUBPTR(I+1)
      K = INAMST+J
  231 WRITE(NTFILE,6) SUBNAM(J+1),I,K
C
C...     INSERT POINTER TO LOGIF AT THIS POINT
C
      I = 104
      J = SUBPTR(113)
      K= INAMST+J
      WRITE(NTFILE,6) SUBNAM(J+1),I,K
C
C...     WRITE POINTERS TO SUBROUTINES IN APTYYY
C
      DO 240 I=1,QAPTYY
      J=SUBPTR(I+84)
      K = INAMST+J
  240 WRITE(NTFILE,7) SUBNAM(J+1),I,K
    7 FORMAT (23HC   NAMTBL POINTER FOR ,A6,51X/
     16X,12HDATA APTYYY(,I1,2H)/,I4,1H/,54X)
C
C...     WRITE POINTERS TO APT085,APT200,APT201,APT295,APT298,APT299
C
      DO 250 I=1,6
      J=SUBPTR(I+89)
      K = INAMST+J
  250 WRITE(NTFILE,8) SUBNAM(J+1),I,K
    8 FORMAT (23HC   NAMTBL POINTER FOR ,A6,51X/
     16X,10HDATA ISUB(,I2,2H)/,I4,1H/,55X)
C
C...     WRITE POINTERS TO ERROR,PSIS,REFSYS,TLAXIS
C
      DO 260 I=7,QISUB
      K=NAME(NAMSUB(I-5))
  260 WRITE(NTFILE,8) NAMSUB(I-5),I,K
C
C...     BLOCK DATA PROGRAM IS NOW COMPLETE.
C...     WRITE END CARD AND RETURN
C
      WRITE(NTFILE,9)
    9 FORMAT (7X,3HEND,70X)
      RETURN
       END
**** SOURCE FILE : M0006716.X01   ***
*
C
C              FORTRAN SUBROUTINE LOADP
C
C LINKAGE       CALL   LOADP
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    LOADB                         MAIN
C          SUBROUTINE    LOADI
C          SUBROUTINE    LOADS
C          INTEGER FCT.  NAME
C          SUBROUTINE    BCDBIN
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOADP
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMTBL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002)
C  MCTOP:      VALUE OF POSTN FOR MBKPNT
      EQUIVALENCE (MCTOP,STKLST(2))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
      DIMENSION CODES(150),DIGIT(2)
C  DIGIT       (1)=CODE CLASS 10000,(2)=NAMTBL INDEX OF 'DIGIT '
      EQUIVALENCE (DIGIT(1),CODES(19))
C
C        5.    CLASS CODE MODULI
C
C  MODULO:     NAMTBL CLASS AND CODE FACTOR 1000 TO DEVIDE OUT CLASS
      COMMON/MODULI/MODULO
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  BPFILE:     BLOCK DATA OUTPUT OF CODE TABLE AND BASIC PRODUCTIONS
      EQUIVALENCE (BPFILE,SYMFIL(1))
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QMETA:      DIMENSION OF ARRAY META (OUTPUT)
      EQUIVALENCE (QMETA,LDXSIZ(2))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  ERROR:      FLAG SET IF ERROR IN PRODUCTION TABLE
C  NUMEL:      NUMBER OF ELEMENTS IN ASSOC TABLE
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  BREAK:      VALUE OF POSTN FOR BRKPNT
C  PDERR:      NAMTBL INDEX OF '28' = PROD. NOT FOUND
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C
C       12.    BIT OUTPUT PATTERNS
C
      COMMON/ELBIT/ELBIT
      DIMENSION ELBIT(200)
C
C       13.    NAMTBL INDEXES OF THE PROD. TABLES
C
      INCLUDE (PRODN)    
C
C       19.    BIT CONSTANTS
C
      INCLUDE (ALLBTS)    
C  Z9999       SIGNALIZES START OF A SURFACE PRODUCTION SEQUENCE
C  ZAAAA       SIGNALIZES JUMP ADDRESSES IN THE PRODUCTION TABLE
C  ZCCCC       SIGNALIZES A PRODUCTION NUMBER IN THE TABLE
C*
C PURPOSE      TO CAUSE THE READING OF THE META CLASSES AND
C              THE BASIC PRODUCTION TABLES, AND TO PRODUCE
C              FORTRAN BLOCK DATA PROGRAMS FOR THE META CLASSES,
C              AND FOR THE LOADING OF THE PRODUCTION TABLE.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C
C              I                  I            COUNTER FOR DO LOOPS
C              IANY               C*6          CONTAINS ALL ('ALL')
C              I28                C*6          CONTAINS ('28')
C              J                  I            NAMTBL INDEX OF PROD. NO.
C              K                  I            GENERAL VARIABLE
C              L                  I            NAMTBL INDEX
C              M                  I            NUMBER OF CHARACTERS IN 3
C
C   CHARACTER FUNCTION TO CONVERT INTEGER TO HEXADECIMAL STRING
      CHARACTER*8 HEX
                     
      CHARACTER*6 IANY,I28
      DATA I28/'28'/,IANY/'ALL'/
C**
C...     PUT ALL, 28 INTO NAMTBL
C
      K = NAME (IANY)
      NAMTBL(K) = 9999000
      PDERR=NAME(I28)
      NAMTBL(PDERR) = DIGIT(1)
      K=1
      WRITE(VLFILE,4001)
 4001 FORMAT (1H1,5X,27HBASIC PRODUCTION PROCESSING)
C
C...     CALL LOADI TO READ PRODUCTION TABLES
C
      CALL LOADI(K)
C
C...     IF THERE WAS A FORMATTING ERROR IN THE PRODUCTION TABLES
C...     RETURN, OTHERWISE CALL LOADS TO ASSIGN BIT-PATTERNS
C...     AND TO PRODUCE THE INTERNAL PRODUCTION TABLES.
C
      IF(ERROR)RETURN
      CALL LOADB
      CALL LOADS
      QPRODT=(IPROD+12)/10*10
      I=QMETA+3
      J=QPRODT+QMETA+2
C
C...     WRITE HEADING FOR BLOCK DATA PROGRAM
C
      WRITE(BPFILE,3000)
 3000 FORMAT(6X,17HBLOCK DATA BDSCRT,57X/
     11HC,79X/
     26X,22HIMPLICIT INTEGER (A-Z),52X/
     36X,20HCOMMON/SRCTBL/SRCTBL,54X)
      WRITE(BPFILE,3001) J,QPRODT,QMETA,I
 3001 FORMAT(6X,17HDIMENSION SRCTBL(,I4,9H),PRODTB(,I4,7H),META(,I2,1H)
     1,30X/
     26X,31HEQUIVALENCE (BRKPNT,SRCTBL(1)),,43X/
     35X,32H1            (MBKPNT,SRCTBL(2)),,43X/
     35X,33H2            (META(1),SRCTBL(3)),,42X/
     45X,31H3            (PRODTB(1),SRCTBL(,I2,3H)) ,39X)
C
C...     WRITE DATA STATEMENTS TO ASSIGN BIT-PATTERS TO EACH ITEM
C...     THAT OCCURRED IN THE PRODUCTION TABLES, I.E. THE META-CLASSES.
C
      DO 2 I=1,NUMEL
      K=ASSOC(1,I)
      L = NAMTBL(K)/MODULO
      IF (L.GT.QMETA) CALL SPILL(2,'LOADP   ')
    2 WRITE(BPFILE,3002)CNAMTB(K),NAMTBL(K),HEX(ELBIT(I)),L,ELBIT(I)
 3002 FORMAT(20HC    META ENTRY FOR ,A6,7H CLASS ,I5,5H  / Z,A8,1H/,
     * 28X/6X,10HDATA META(,I3,22H)                    /,I11,1H/,28X)
C
C...     WRITE BREAKPOINT DATA STATEMENT
C
      BREAK=BREAK+1
      MCTOP=MCTOP+2
      WRITE(BPFILE,3003)MCTOP,BREAK
 3003 FORMAT(6X,19HDATA BRKPNT,MBKPNT/,I2,1H,,I2,1H/,49X)
C
C...     WRITE DATA STATEMENTS TO PRODUCE PRODUCTION TABLE
C
      K=0
      JJ=1
      WRITE(BPFILE,3008)K,JJ,(Z9999+K)
      DO 100 I=1,IPROD
      JJ=JJ+1
C
C...     IF NEXT ITEM IS NEGATIVE IT IS THE TERMINATOR OF THIS
C...     PRODUCTION. IS IT NEGATIVE
C
      IF(PRODN(I).LT.0)GOTO 98
      IF (PRODN(I).EQ.0) PRODN(I)=ALLBTS(1)
      IF(JJ.NE.BREAK.AND.JJ.NE.MCTOP) GOTO 97
      K=4*I
      WRITE(BPFILE,3008)K,JJ,(Z9999+K)
 3008 FORMAT(36HC                         /Z9999/ + ,I4,40X/
     *       6X,12HDATA PRODTB(,I6,3H) /I11,1H/,42X)
      JJ=JJ+1
C
C...     NO. WRITE DATA STATEMENT WITH OCTAL VALUE.
   97 WRITE(BPFILE,3004)HEX(PRODN(I)),JJ,PRODN(I)
 3004 FORMAT(29HC                         / Z,A8,1H/,42X/
     *       6X,12HDATA PRODTB(,I6,3H) /I11,1H/,42X)
      GO TO 100
C
C...     THIS ITEM IS NEGATIVE, -(NO. OF PRODUCTION).
C...     FETCH BCD OF ITS MODULUS FROM THE NAMTBL AND WRITE
C...     DATA STATEMENT FOR NEGATIVE INTEGER.
C
   98 J=-PRODN(I)
      CALL BCDBIN(CNAMTB(J),K,M)
      IF(K.GE.10000)GOTO 99
      WRITE(BPFILE,3005)K,JJ,(ZCCCC+K)
 3005 FORMAT(36HC                         /ZCCCC/ + ,I4,40X/
     *       6X,12HDATA PRODTB(,I6,3H) /I11,1H/,42X)
      GOTO 100
   99 K=K-10000
      WRITE(BPFILE,3006)K,JJ,(ZAAAA+K)
 3006 FORMAT(36HC                         /ZAAAA/ + ,I4,40X/
     *       6X,12HDATA PRODTB(,I6,3H) /I11,1H/,42X)
  100 CONTINUE
C
C...     BLOCK DATA PROGRAM IS NOW WRITTEN.
C...     WRITE END CARD AND RETURN.
C
      WRITE(BPFILE,3007)
 3007 FORMAT(7X,3HEND,70X)
      RETURN
       END
**** SOURCE FILE : M0006717.W02   ***
*
C
C              FORTRAN SUBROUTINE LOADS
C
C LINKAGE       CALL   LOADS
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    SPILL           SUBROUTINE    LOADG
C                                        SUBROUTINE    LOADP
C
      SUBROUTINE LOADS
C
      IMPLICIT INTEGER (A-Z)
C
C        0.    SYSTEM DEPENDENT PARAMETERS
C
      INCLUDE (SDP)    
C  NBWRD:      NO OF BITS PER COMPUTER WORD
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMTBL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
      DIMENSION CODES(150),DIGIT(2),NUMBER(2),TEMP(2)
C  DIGIT:      (1)=CODE CLASS 10000,(2)=NAMTBL INDEX OF 'DIGIT '
      EQUIVALENCE (DIGIT(1),CODES(19))
C  NUMBER:     (1)=CODE CLASS 14000,(2)=NAMTBL INDEX OF 'NUMBER'
      EQUIVALENCE (NUMBER(1),CODES(27))
C  TEMP:       (1)=CODE CLASS 17000,(2)=NAMTBL INDEX OF 'TEMP  '
      EQUIVALENCE (TEMP(1),CODES(33))
C
C        4.    BIT COMBINATION TABLE
C
C  BIT:        CONTAINS THE ELEMENTARY BIT PATTERNS
      COMMON/BITCOM/BIT
      DIMENSION BIT(32)
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QLENGT:     DIMENSION OF ARRAY LENGTH
      EQUIVALENCE (QLENGT,LDXSIZ(6))
C  QKGRP:      DIMENSION OF ARRAY KGRP
      EQUIVALENCE (QKGRP,LDXSIZ(19))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  NUMEL:      NUMBER OF ELEMENTS IN ASSOC TABLE
C  PRODI:      POINTER TO LAST ENTRY IN PRODN TABLE
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  NUMGP:      NUMBER OF GROUPS IN PRODUCTION TABLE
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C
C       10.    TABLE OF GROUPS AND NUMBER OF CONTAINED ELEMENTS
C
      COMMON/LENGTH/LENGTH
      DIMENSION LENGTH(3,100)
C
C       12.    BIT OUTPUT PATTERNS
C
      COMMON/ELBIT/ELBIT
      DIMENSION ELBIT(200),LBIT(200)
C  LBIT:       BIT PATTERNS FOR ELEMENTS OF ASSOC TABLE
      EQUIVALENCE (LBIT(1),ELBIT(1))
C
C       13.    NAMTBL INDEXES OF THE PROD. TABLES
C
      INCLUDE (PRODN)    
C  PRODN:      NAMTBL INDEXES OF THE PROD. TABLES IN SEQUENT. MODE
C*
C NOTES        THE INTEGER VARIABLE IBITS IS A COMPUTER DE-
C              PENDENT WORD.  IT SHOULD CONTAIN THE NUMBER OF
C              BITS (EXCLUDING THE SIGN BIT) IN A COMPUTER
C              WORD.  IT IS USED IN ASSIGINING UNIQUE BIT-PATTERNS
C              TO EACH ITEM IN THE VARIOUS TABLES.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C
C              I                  I            DO LOOP INDEX
C              IBITS              I            NUMBER OF USEFULL BITS IN
C                                              A COMPUTER WORD
C              IDGIT              I            NAMTBL INDEX OF DIGIT
C              IDIGIT             C*6          CONTAINS DIGIT ('DIGIT')
C              IELT               I            POSITION OF ELEMENT BIT
C              IEND               I            PRODI+1
C              IGRP               I            NUMBER OF ITEMS IN EACH
C                                              GROUP
C              II                 I            GENERAL VARIABLE
C              INMBR              I            NAMTBL INDEX OF NUMBER
C              INUMBR             C*6          CONTAINS NUMBER
C                                              ('NUMBER')
C              J                  I            GENERAL VARIABLE
C              JDFCIT             I            DIFFERENCE BETWEEN
C                                              MAXIMUM POSSIBLE NO. OF
C                                              COMBINATIONS AND NO. OF
C                                              ELEMENTS
C              JEXCES             I            DIFFERENCES BETWEEN NO.
C                                              OF GROUPS AND NO. OF BITS
C              JJ                 I            GENERAL VARIABLE
C              K                  I            DO LOOP INDEX
C              KERP         75    I            ZONE NUMBER FOR EACH
C                                              GROUP
C              KJ                 I            NEXT ZONE NUMBER
C              L                  I            NAMTBL INDEX
C              LENTH3             L            FLAG USED DURING ATTEMPTS
C                                              TO MERGE GROUPS
C              MAXLTH             I            MAXIMUM NUMBER OF
C                                              ELEMENTS IN ANY ONE SET
C              MORE               L            FLAG TO SAY IF MORE ITEMS
C                                              TO COME IN THIS SET OF
C                                              ALTERNATIVES
C              NUMZAV             I            IBITS-MAXLTM=NO. BITS
C                                              AVAILABLE FOR ZONE BITS
C              TEMP               I            USED FOR TEMPORARY
C                                              STORAGE OF---
C                                              1) SUM OF NO. OF ELEMENTS
C                                                IN 2 GROUPS
C                                              2) NAMTBL INDEX OF NEXT
C                                                ITEM IN PRODUCTION
C                                                TABLE
C              NEMTBL     3000    I            ARRAY HOLDING BIT
C                                              PATTERNS
C...           ASSOC IS A TWO COLUMN ARRAY OF GROUP ELEMENTS
C...           THE FIRST COLUMN CONTAINS THE NAME TABLE POINTER
C...           AND THE SECOND COLUMN HAS THE GROUP NUMBER OF THE
C...           ELEMENTS (NOTE..THE THIRD COLUMN IS A WORKING AREA)
C...           ELBIT IS A ONE COLUMN ARRAY WITH THE BIT PATTERNS OF THE
C...           ELEMENTS IN ASSOC TABLE
C...           LENGTH IS A THREE COLUMN ARRAY OF GROUPS.
C...           THE FIRST COLUMN IN LENGTH IS THE GROUP NUMBER,
C...           THE SECOND COLUMN HAS THE NUMBER OF ELEMENTS IN
C...           THIS GROUP, AND THE THIRD COLUMN HAS THE TOTAL
C...           NUMBER OF ALL ELEMENTS IF THIS GROUP CONTAINS OTHERS
C...           OF  THE THIRD COLUMN IS -INDEX OF LENGTH WITH
C...           WHICH THIS GROUP IS COMBINED.
C...           NUMEL IS THE TOTAL NUMBER OF ELEMENTS IN ASSOC
C...           NUMGP IS THE TOTAL NUMBER OF GROUPS IN THE LENGTH TABLE
C
      DIMENSION KGRP(100),IGRP(100),NEMTBL(3000)
      CHARACTER*6 INUMBR,IDIGIT
      LOGICAL LENTH3,LENTH4,MORE
      DATA INUMBR/'NUMBER'/,
     1     IDIGIT/'DIGIT'/
      DATA    LENTH3/.TRUE./,LENTH4/.FALSE./
C
C...  **********************************************************
C...  *                                                        *
C...  *  IBITS IS COMPUTER DEPENDENT.                          *
C...  *  IT IS SET EQUAL TO THE NUMBER OF BITS (EXCLUDING THE  *
C...  *  SIGN BIT) IN A COMPUTER WORD.                         *
C...  *                                                        *
C...  **********************************************************
C**
      IBITS = NBWRD-1
C
C...     CLEAR KGRP,IGRP, AND 3RD COLUMN OF LENGTH.
C
      DO 2 I=1,QKGRP
      KGRP(I) = 0
    2 IGRP(I) = 0
      IF (NUMGP.GT.QLENGT) CALL SPILL(6,'LOADS   ')
      DO  3 I=1,NUMGP
    3 LENGTH(3,I) = 0
      MAXLTH = LENGTH(2,1)
      NUMZAV = IBITS - MAXLTH
C
C...     ARE THERE ENOUGH ZONE BITS TO ASSIGN A UNIQUE ONE
C...     TO EACH SET OF ELEMENTS
C
      IF(NUMZAV.GE.NUMGP) GO TO 100
C
C...     NO. TRY TO COMBINE SETS SO AS TO ELIMINATE EXCESS SETS.
C...     JEXCES = NO. OF EXCESS SETS TO BE ELIMINATED,
C...     JDFCIT = (MAX. NO. OF BITS AVAILABLE FOR ZONE BITS)*(MAX. NO.
C...               OF BITS REQUIRED FOR ELEMENT BITS) - TOTAL NO.
C...               OF ELEMENTS.
C...     IF JDFCIT IS LESS THAN ZERO THE EXCESS CANNOT BE ELIMINATED.
C
      JEXCES = NUMGP - NUMZAV
      JDFCIT = NUMZAV*MAXLTH- NUMEL
      IF(JDFCIT.GE.0) GO TO 1
C
C...     NOT ENOUGH BITS AVAILABLE.
C...     SET LENTH3 .FALSE. AND OUTPUT DIAGNOSTIC.
C
      JDFCIT = 0
      LENTH3 = .FALSE.
      GO TO 13
C
C...     MERGING OF GROUPS MAY BE POSSIBLE. TRY TO ELIMINATE EXCESS SETS
C
    1 II = NUMGP-1
C
C...     THIS LOOP ATTEMPTS TO COMBINE GROUPS
C
      DO 12 I = 2,II
C
C...     IF THIS SET HAS BEEN PROCESSED, 3RD COL. OF LENGTH WILL
C...     BE NON-ZERO. TEST THIS
C
      IF(LENGTH(3,I).NE.0) GO TO 12
C
C...     STORE NO. OF ELEMENTS IN THIS GROUP IN 3RD COL. OF LENGTH.
C
      LENGTH(3,I) = LENGTH(2,I)
      J = I+1
C
C...     SEARCH REST OF GROUPS FOR ONE THAT CAN BE COMBINED WITH THIS.
C
      DO 10 JJ = J,NUMGP
C
C...     HAS THIS GROUP ALREADY BEEN PROCESSED.
C
      IF(LENGTH(3,JJ).NE.0) GO TO 10
C
C...     NO. PUT TOTAL NO. OF ELEMENTS IN THIS GROUP AND THE ONE WE ARE
C...     ATTEMPTING TO COMBINE IT WITH IN TEMP AND TEST IF TOTAL IS
C...     GREATER THAN MAX. NO ALLOWED (= LENGTH(2,1))
C
      TEMP(1)=LENGTH(3,I)+LENGTH(2,JJ)
      IF (TEMP(1).GT.MAXLTH) GO TO 10
C
C...     NO. SO PUT NEW TOTAL LENGTH IN 3RD COL. OF ORIGINAL GROUP,
C...     AND NEGATIVE POINTER TO THAT GROUP IN 3RD COL. OF MERGED GROUP.
C...     ALSE SET LENTH3 .FALSE. IF WE CANNOT MERGE ANY MORE GROUPS
C...     WITH THIS ONE.
C
      IF ((TEMP(1)+JDFCIT).LT.MAXLTH) LENTH3 = .FALSE.
      LENGTH(3,I) = TEMP(1)
      LENGTH(3,JJ) = -I
C
C...     REDUCE EXCESS BY ONE AND SEE IF ALL NECCESSARY ELIMINATION
C...     HAS BEEN DONE YET.
C
      JEXCES = JEXCES - 1
      IF(JEXCES.EQ.0) GO TO 100
C
C...     NO. IF LENTH3 IS .TRUE. TRY TO MERGE ANOTHER GROUP WITH THIS.
C
      IF(.NOT.LENTH3) GO TO 11
   10 CONTINUE
C
C...     RESET IDFCIT AND TRY TO PERFORM A FURTHER MERGE.
C
   11 JDFCIT = JDFCIT + LENGTH(3,I)-MAXLTH
      LENTH3 = .TRUE.
   12 CONTINUE
C
C...     CANNOT REDUCE EXCESS SETS TO ZERO. OUTPUT DIAGNOSTIC
C
   13 WRITE(VLFILE,14)
   14 FORMAT (1H ,61HERROR NO. 7031 IN SUBROUTINE LOADS. UNABLE TO COMBI
     *NE GROUPS.)
C
C...     IF WE HAVE NOT YET ATTEMPTED A MERGE, DO SO, OTHERWISE START
C...     FORMING INTERNAL REPRESENTATIONS.
C
      IF(LENTH3) GO TO 100
      LENTH3 = .TRUE.
      GO TO 1
C
C...     THE FOLLOWING LOOPS SET UP ELBIT WITH THE INTERNAL
C...     REPRESENTATIONS OF THE ELEMENTS IN ASSOC.
C
  100 KJ = 1
C
C...     THIS LOOP EXAMINES EACH ITEM IN ASSOC, ONE AT A TIME.
C
      DO  107 I=1,NUMEL
C
C...     THIS LOOP EXAMINES THE CORRESPONDING ITEM IN LENGTH.
C
      DO 103 K = 1,NUMGP
      J = K
C
C...     FIND ITEM IN LENGTH CORRESPONDING TO SET NO. OF THIS ELEMENT.
C
      IF(ASSOC(2,I).NE.LENGTH(1,J)) GO TO 103
C
C...     TEST IF 3RD COL. IS A POINTER TO ANOTHER GROUP.
C
      IF(LENGTH(3,J)) 101,102,102
C
C...     YES. SET J TO POINT TO THAT GROUP - I.E. TO GROUP WHICH NOW
C...     CONTAINS THE ELEMENT IN ASSOC.
C
  101 J = -LENGTH(3,J)
C
C...     INCREASE CORRESPONDING ITEM OF IGRP - CONTAINS NO. OF ELEMENTS
C...     IN THIS GROUP - AND SET IELT TO POSITION FOR ELEMENT BIT.
C
  102 IGRP(J) = IGRP(J)+1
      IELT = NUMZAV+1+IGRP(J)
C
C...     ARE THERE MORE THAN MAX. ALLOWABLE NO. OF ELEMENTS IN GROUP
C
      IF (IGRP(J).GT.MAXLTH)        GO TO 105
C
C...     IS THIS FIRST ELEMENT ENCOUNTERED IN THIS GROUP
C
      IF (KGRP(J).NE.0) GO TO 108
C
C...     YES. HAVE WE HAD MAX. NO. OF GROUPS YET
C
      IF(KJ.GT.NUMZAV) GO TO 110
C
C...     NO. INCREASE KJ BY 1 - KJ = ZONE NO. OF THIS GROUP
C...     STORE ZONE NO. IN KGRP
C
      KJ = KJ+1
      KGRP(J) = KJ
C
C...     FORM INTERNAL REPRESENTATION IN LBIT
C
  108 J = KGRP(J)
      LBIT(I) = ORF(BIT(J),BIT(IELT))
      GO TO 107
C
C...     MORE THAN MAX. NO. OF GROUPS - ISSUE DIAGNOSTIC
C
  110 WRITE(VLFILE,111)KJ
  111 FORMAT (1H ,54HERROR NO. 7032 IN SUBROUTINE LOADS. TOO MANY GROUPS
     *...,I5)
C
C...     END OF LOOP
C
  103 CONTINUE
C
C...     THIS ELEMENT HAS NO ENTRY IN LENGTH TABLE - ISSUE DIAGNOSTIC
C
      L = ASSOC(1,I)
      WRITE(VLFILE,104) CNAMTB(L)
  104 FORMAT(1H ,46HERROR NO. 7033 IN SUBROUTINE LOADS.  ELEMENT  ,A6,
     * 24H HAS NO GROUP ASSIGNMENT)
      GO TO 107
C
C...     MORE THAN MAX. NO. OF ELEMENTS ALLOWABLE IN ONE GROUP -
C...     ISSUE DIAGNOSTIC
C
  105 WRITE(VLFILE,106) J
  106 FORMAT (1H ,64HERROR NO. 7034 IN SUBROUTINE LOADS.  TOO MANY ELEME
     *NTS IN GROUP ,I5)
      IGRP(J) = 0
C
C...     END OF LOOP TO SET UP ELBIT
C
  107 CONTINUE
C
C...
C
      INMBR = 0
      IDGIT = 0
C
C...     THIS LOOP PUTS BCD OF EACH ELEMENT IN ASSOC IN CASSOC, AND
C...     PUTS THE INTERNAL REPRESENTATION IN NEMTBL LOCATION CORRES.
C...     TO ENTRY IN NAMTBL, AND SETS IDGIT AND INMBR TO THE NAMTBL
C...     POINTERS OF DIGIT AND NUMBER RESPECTIVELY.
C
      DO 140 I= 1,NUMEL
      L = ASSOC(1,I)
      CASSOC(I) = CNAMTB(L)
      IF(CNAMTB(L).EQ.IDIGIT)IDGIT=L
      IF(CNAMTB(L).EQ.INUMBR)INMBR=L
      NEMTBL(L) = ELBIT(I)
  140 CONTINUE
C...
      MORE = .TRUE.
      TEMP(1) = PRODN(1)
      PRODN(1) = 0
      IPROD = 1
      JEND = PRODI+1
C
C...     THIS LOOP FORMS THE INTERNAL PRODUCTION TABLES IN PRODN.
C...     TEMP CONTAINS NEXT ITEM, IPROD CONTAINS NEXT VACANT POSITION.
C
      DO 154 I = 2,JEND
C
C...     IS NEXT ITEM NEGATIVE - I.E. THE LAST ELEMENT FOR THIS
C...     SET OF ALTERNATIVES, OR THE PRODUCTION NUMBER.
C
      IF (TEMP(1) .GT. 0) GO TO 152
      TEMP(1) = -TEMP(1)
C
C...     IS IT POINTER TO PRODUCTION NUMBER
C
      IF (((NAMTBL(TEMP(1)).NE.DIGIT(1))
     /   .OR. (IDGIT.EQ.TEMP(1)))
     /   .AND.
     /   ((NAMTBL(TEMP(1)).NE.NUMBER(1))
     /   .OR. (INMBR.EQ.TEMP(1))))        GO TO 151
C
C...     YES. IF LAST GROUP OF ALTERNATIVES HAS NOT BEEN TERMINATED,
C...     ISSUE DIAGNOSTIC
C
      IF(PRODN(IPROD).NE.0) WRITE(VLFILE,150)
  150 FORMAT (1H ,61HERROR NO. 7035 IN SUBROUTINE LOADS.  INCOMPLETE GRO
     *UP IGNORED)
C
C...     STORE NEGATIVE NAMTBL POINTER IN PRODN(IPROD), AND NEXT
C...     ITEM IN TEMP.
C
      PRODN(IPROD) = -TEMP(1)
      TEMP(1) = PRODN(I)
      GO TO 153
C
C...     END OF GROUP OF ALTERNATIVES. SET FLAG FOR NO MORE, OR THIS
C...     ITEM INTO CURRENT WORD AND FETCH NEXT ITEM INTO TEMP.
C
  151 MORE = .FALSE.
  152 PRODN(IPROD) = ORF(PRODN(IPROD),NEMTBL(TEMP(1)))
      TEMP(1) =PRODN(I)
C
C...     ARE THERE MORE ALTERNATIVES IN THIS GROUP
C
      IF(MORE) GO TO 154
C
C...     NO. UPDATE POINTER TO NEXT VACANT POSITION, AND CLEAR THAT
C...     WORD. SET FLAG FOR MORE ITEMS.
C
  153 IPROD = IPROD+1
      PRODN(IPROD) = 0
      MORE = .TRUE.
C
C...     END OF LOOP
C
  154   CONTINUE
C
C...     SET IPROD TO NO. OF WORDS IN PRODUCTION TABLE,
C...     AND RETURN.
C
      IPROD = IPROD-1
      RETURN
      END
**** SOURCE FILE : M0006718.W01   ***
*
C
C              FORTRAN SUBROUTINE LOADT
C
C LINKAGE       CALL   LOADT
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    CFORM           SUBROUTINE    LOADG
C          SUBROUTINE    LOADA
C          SUBROUTINE    LOADI
C          SUBROUTINE    LOADU
C          SUBROUTINE    LOAD0
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOADT
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMTBL:     INTEGER CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002),PRODR(3000)
C  PRODR:      ORDINAL NUMBERS OF THE PRD. TABLES IN SEQUENT. MODE
      EQUIVALENCE (PRODR(1),STKLST(3))
C
C        3.    METALINGUISTIC VARIABLE CLASS CODES
C
      COMMON/CODES/CODES
      DIMENSION CODES(150),DIGIT(2),CONGEO(2)
C  DIGIT:      (1)=CODE CLASS 10000,(2)=NAMTBL INDEX OF 'DIGIT '
      EQUIVALENCE (DIGIT(1),CODES(19))
C  CONGEO:     (1)=CODE CLASS 39000,(2)=NAMTBL INDEX OF 'CONGEO'
      EQUIVALENCE (CONGEO(1),CODES(77))
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  ELFILE:     I/O FILE NUMBER OF TRANSFORMED PRODUCTION TABLE
      EQUIVALENCE (ELFILE,SYMFIL(4))
C  LCDATA:     INPUT FILE NUMBER OF PRODUCTION TABLES SEQUEN. MODE
      EQUIVALENCE (LCDATA,SYMFIL(5))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QSTACK:     DIMENSION OF ARRAY PRODR
      EQUIVALENCE (QSTACK,LDXSIZ(12))
C  QLEVPO:     DIMENSION OF ARRAY LEVPOS
      EQUIVALENCE (QLEVPO,LDXSIZ(13))
C  QCLSWD:     DIMENSION OF ARRAY LENGTH
      EQUIVALENCE (QCLSWD,LDXSIZ(14))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  IBKPNT:     NAMTBL INDEX OF BRKPNT
C  PRODI:      POINTER TO LAST ENTRY IN PRODN TABLE
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  PDERR:      NAMTBL INDEX OF '28' = PROD. NOT FOUND
C
C       11.    GEOMETRIC TABLE LOCATIONS
C
C  GEOMLC:     START POSITION FOR A SRF TYPE IN THE GEOMETRIC TABLE
      COMMON/GEOMLC/GEOMLC
      DIMENSION GEOMLC(50)
C
C       13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C
C       14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250)
C
C       15.    INTEGER CODE AND LEVPOS COLUMN OF A PRODUCTION
C
      COMMON/PROCOD/PROCOD
      DIMENSION PROCOD(2,1500)
C
C       16.    RELATION OF ORDINAL NUMBERS TO NAMTBL INDEXES
C
      COMMON/CLSWRD/CLSWRD
      DIMENSION CLSWRD(100)
C
C       17.    OUTPUT SPACE FOR TRANSFORMED PRODUCTION LIST
C
      COMMON/OUTARY/OUTARY
      CHARACTER*80 OUTARY
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515)
C  LEVEL:      ACTUALLY PROCESSED PRODUCTION LEVEL
      EQUIVALENCE (LEVEL,BRANCH(5))
C  MAXCLS:     NUMBER OF DEFINITIONS IN A TRANSFORMATION SECTIION
      EQUIVALENCE (MAXCLS,BRANCH(6))
C*
C PURPOSE      TO CHANGE THE GEOMETRIC PRODUCTION TABLE FROM
C              SEQUENTIAL READ FORMAT TO A BRANCHING MODE TABLE.
C
      CHARACTER*6 IDIGIT
      DATA IDIGIT/'DIGI'/
C**
      QPRODR=QSTACK*2
      NAMTBL(IBKPNT)=CONGEO(1)
      KK=0
C
C     SAVE CONTENT OF PRODN IN PRODR
C
      MM=PRODI-1
C
      DO 1 I=1,MM
      IF(I.GT.QPRODR)CALL SPILL(12,'LOADT   ')
    1 PRODR(I)=PRODN(I)
C
C     ORDINAL NUMBERS REPLACE THE NAMTBL ADDRESSES OF THE CLASS WORDS
C
      REWIND ELFILE
      M=1
   10 MAXCLS=0
      CLSWRD(1)=0
      DO 60 IPRO=M,MM
      J=PRODR(IPRO)
      IF(J.EQ.-PDERR)GOTO 70
      K=IABS(J)
      IF(NAMTBL(K).EQ.DIGIT(1).AND.CNAMTB(K).NE.IDIGIT)GOTO 60
      DO 20 L=1,MAXCLS
      IF(K.EQ.CLSWRD(L))GOTO 30
   20 CONTINUE
      MAXCLS=MAXCLS+1
      IF(MAXCLS.GT.QCLSWD)CALL SPILL(14,'LOADT   ')
      CLSWRD(MAXCLS)=K
      L=MAXCLS
   30 PRODR(IPRO)=L*ISIGN(1,J)
   60 CONTINUE
      PRODR(IPRO)=-PDERR
   70 IPRO=IPRO-1
C
C     FILL THE ARRAY LEVPOS (LEVEL POSITION). IT IS
C     LEVPOS( 1,X)   PRIORITY NUMBER
C     LEVPOS( 2,X)   START ADDRESS (IN PRODR) OF THE 2ND LEVEL
C     LEVPOS( 3,X)   START ADDRESS (IN PRODR) OF THE 3RD LEVEL
C     LEVPOS( 4,X)   START ADDRESS (IN PRODR) OF THE 4TH LEVEL
C     LEVPOS( 5,X)   START ADDRESS (IN PRODR) OF THE 5TH LEVEL
C     LEVPOS( 6,X)   START ADDRESS (IN PRODR) OF THE 6TH LEVEL
C     LEVPOS( 7,X)   START ADDRESS (IN PRODR) OF THE 7TH LEVEL
C     LEVPOS( 8,X)   START ADDRESS (IN PRODR) OF THE 8TH LEVEL
C     LEVPOS( 9,X)   START ADDRESS (IN PRODR) OF THE 9TH LEVEL
C     LEVPOS(10,X)   NUMBER OF LEVELS OF THE PRODUCTION
C     LEVPOS(11,X)   PRODUCTION NUMBER (NAMTBL ADDR.) AT FAILING SEARCH
C     LEVPOS(12,X)   PRODUCTION NUMBER (NAMTBL ADDR.)
C
      DO 81 J=1,QLEVPO
      DO 80 I=1,11
   80 LEVPOS(I,J)=0
   81 CONTINUE
      DO 85 I=14,15
   85 BRANCH(I)=0
      LEVEL=0
C
      KPRO=1
      LEVPOS(1,1)=M
      DO 100 I=M,IPRO
      J=PRODR(I)
      K=IABS(J)
      IF(K.GT.MAXCLS)GOTO 90
      IF(J.NE.K)LEVEL=LEVEL+1
      IF(LEVEL.GT.8.OR.LEVEL.LT.1)GOTO 100
      IF(LEVPOS(LEVEL+1,KPRO).EQ.0)LEVPOS(LEVEL+1,KPRO)=I+1
      GOTO 100
   90 LEVPOS(10,KPRO)=LEVEL
      LEVPOS(12,KPRO)=K
      IF(LEVEL.EQ.0)KPRO=KPRO-1
      LEVEL=0
      KPRO=KPRO+1
      IF(KPRO.GT.QLEVPO)CALL SPILL(13,'LOADT   ')
      LEVPOS(1,KPRO)=I+1
  100 CONTINUE
      KPRO=KPRO-1
      IF(KPRO.LT.2)GOTO 390
C
C     EXTEND LEVPOS ARRAY IN A WAY, THAT ONLY ONE PRIORITY NUMBER (CLASS
C     WORD) IS LEADING A TOTAL LINE OF LEVPOS
C
      K=KPRO
      DO 140 I=1,K
      L=LEVPOS(1,I)
      N=LEVPOS(2,I)-1
      LEVPOS(1,I)=IABS(PRODR(L))
      IF(L.EQ.N)GOTO 140
      L=L+1
      DO 130 J=L,N
      IF(KPRO.GT.QLEVPO)CALL SPILL(13,'LOADT   ')
      KPRO=KPRO+1
      DO 120 LL=2,12
  120 LEVPOS(LL,KPRO)=LEVPOS(LL,I)
  130 LEVPOS(1,KPRO)=IABS(PRODR(J))
  140 CONTINUE
C
      LL=1
      CALL LOAD0(LL,KPRO)
C
C
C     LOAD ONE LEVEL PRODUCTION NUMBER FOR SECOND PRODUCTION NUMBER
C
      DO 155 I=2,KPRO
      IF(LEVPOS(10,I).NE.1)GOTO 155
      J=LEVPOS(1,I)
      N=I-1
      DO 150 L=1,N
      IF(LEVPOS(1,L).NE.J)GOTO 150
      LEVPOS(1,I)=0
      LEVPOS(11,L)=LEVPOS(12,I)
  150 CONTINUE
  155 CONTINUE
C
C         DELETE  SINGLE LEVEL PRODUCTIONS
C
      K=KPRO
      KPRO=0
      DO 170 I=1,K
      IF(LEVPOS(1,I).EQ.0)GOTO 170
      KPRO=KPRO+1
      DO 160 L=1,12
  160 LEVPOS(L,KPRO)=LEVPOS(L,I)
  170 CONTINUE
C
  390 KK=KK+1
      LL=GEOMLC(KK)
      GEOMLC(KK)=0
      OUTARY=' '
      CALL CFORM(CNAMTB(LL),OUTARY,8,6)
      CALL CFORM('/$$',OUTARY,14,3)
      WRITE(ELFILE,999)OUTARY
      LL=1
      IPROD=0
      CALL LOADU(LL,KPRO)
C
C         OUTPUT OF A GEOMETRIC PRODUCTION GROUP
C
      CALL LOADA
      M=IPRO+2
      OUTARY=' '
      IF(M.LT.MM)GOTO 10
C
      CALL CFORM('FINI',OUTARY,8,4)
      WRITE(ELFILE,999)OUTARY
      REWIND ELFILE
      KK=2
      LL=LCDATA
      LCDATA=ELFILE
      CALL LOADI(KK)
      LCDATA=LL
C
      RETURN
  999 FORMAT(A80)
      END
**** SOURCE FILE : M0006719.W01   ***
*
C
C              FORTRAN SUBROUTINE LOADU
C
C LINKAGE       CALL   LOADU(LL,KK)
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    LOAD1           SUBROUTINE    LOADB
C          SUBROUTINE    LOAD2           SUBROUTINE    LOADT
C          SUBROUTINE    SORT
C          SUBROUTINE    SPILL
C
      SUBROUTINE LOADU(LL,KK)
C
      IMPLICIT INTEGER (A-Z)
C
C        2.    STACK AND POINTER STORAGE
C
      COMMON/STKLST/STKLST
      DIMENSION STKLST(3002),PRODR(3000)
C  PRODR:      ORDINAL NUMBERS OF THE PRD. TABLES IN SEQUENT. MODE
      EQUIVALENCE (PRODR(1),STKLST(3))
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QLENGT:     DIMENSION OF ARRAY LENGTH
      EQUIVALENCE (QLENGT,LDXSIZ(6))
C  QPRODN:     DIMENSION OF ARRAY PRODN
      EQUIVALENCE (QPRODN,LDXSIZ(7))
C
C        8.    CONTROL FLAGS AND POINTERS
C
      INCLUDE (LDSCOM)    
C  ERROR:      FLAG SET IF ERROR IN PRODUCTION TABLE
C  IPROD:      NUMBER OF ITEMS IN PRODUCTION TABLES
C  BREAK:      VALUE OF POSTN FOR BRKPNT
C  PDERR:      NAMTBL INDEX OF '28' = PROD. NOT FOUND
C  KNT:        NAMTBL INDEX OF ALL
C
C        9.    ITEM AND GROUP CONTROL
C
      INCLUDE (ASSOC)    
C  JASSOC:     STORAGE OF CLASS WORD COLLECTION. TABLE COMPRESSION
C
C       10.    ITEM AND GROUP CONTROL
C
      COMMON/LENGTH/LENGTH
      DIMENSION LENGTH(3,100)
C
C       13.    SPACE FOR PRODUCTION LISTS
C
      INCLUDE (PRODN)    
C  PROD2:      CONTAINS PRODUCTION TABLES IN JUMP MODE
C
C       14.    LEVEL START OF THE PRODUCTIONS IN PRODR
C
      COMMON/LEVPOS/LEVPOS
      DIMENSION LEVPOS(12,250)
C
C       16.    RELATION OF ORDINAL NUMBERS TO NAMTBL INDEXES
C
      COMMON/CLSWRD/CLSWRD
      DIMENSION CLSWRD(100)
C
C       18.    CONTROL FLAGS AND POINTERS FOR TRANSFORMATION
C
      COMMON/BRANCH/BRANCH
      DIMENSION BRANCH(515),LEVPRD(2,250)
C  TENMIL:     CONTAINS DIVISOR 10000
      EQUIVALENCE (TENMIL,BRANCH(2))
C  LEVEL:      ACTUALLY PROCESSED PRODUCTION LEVEL
      EQUIVALENCE (LEVEL,BRANCH(5))
C  MAXCLS:     NUMBER OF DEFINITIONS IN A TRANSFORMATION SECTIION
      EQUIVALENCE (MAXCLS,BRANCH(6))
C  IADRES:     CODE DESCRIBES LEVEL NUMBER AND LEADING CLASS WORD
      EQUIVALENCE (IADRES,BRANCH(7))
C  ID1:        BEGIN OF A REGION IN ARRAY PROCOD TO BE PROCESSED
      EQUIVALENCE (ID1,BRANCH(8))
C  ID2:        END OF A REGION IN ARRAY PROCOD TO BE PROCESSED
      EQUIVALENCE (ID2,BRANCH(9))
C  IRET:       ALL LEVELS ARE PROCESSED
      EQUIVALENCE (IRET,BRANCH(11))
C  STRTPR:     FIRST PRODCTION COLUMN IN ARRAY LEVPOS
      EQUIVALENCE (STRTPR,BRANCH(12))
C  ENDPRD:     LAST PRODCTION COLUMN IN ARRAY LEVPOS
      EQUIVALENCE (ENDPRD,BRANCH(13))
C  LGT:        POINTER TO LAST ENTRY IN LENGTH
      EQUIVALENCE (LGT,BRANCH(14))
C  CONCAT:     =1 IF TRANSFORMATION OF THE CONCATENATING PRODUCTIONS
      EQUIVALENCE (CONCAT,BRANCH(15))
C  LEVPRD:     CONTAINS THE PRODUCTION NUMBERS FOR A FAILED SEARCH
      EQUIVALENCE (LEVPRD(1,1),BRANCH(16))
C*
C PURPOSE    TO CONTROL THE LEVEL GENERATION AND CONNECTION
C            TO HANDLE THE PARTICULAR PRODUCTIONS
C
C     HANDLING OF THE FIRST LEVEL, SEARCH FOR PARTICULAR PRODUCTIONS
C
C     PROD2(1,X)   PROD2(2,X)
C     N*TENMIL+I1  IN              I1  =CLASS WORD ORDINAL NUMBER
C                                  IN  =CLASS WORD ORDINAL NUMBER OF
C                                       LEVEL N , N =LEVEL NUMBER
C     TENMIL +I1   TENMIL+A        A   =ADDRESS OF JASSOC FOR A COLLEC-
C                                       TED GROUP OF CLASS WORDS
C     0            -LEVPOS(10,Y)   PRODUCTION NUMBER.END OF PRODUCTION
C     GT.0         GT.PROD2(1,X)   POSITIONS OF HIGHER LEVELLED CLASS
C                                  WORDS IN ARRAY PROCOD
C     LT.0         GT.0            PARTICULAR HIGHER LEVELLED PRODUCTION
C                                  STARTING ON AT PRODR(-PROD2(1,X),
C**                                                      PROD2(2,X))
      IF(KK.LT.2)GOTO 580
      CALL SORT(LEVPOS(1,LL),12,KK+1-LL,1,2)
      LGT=0
      STRTPR=LL
      ENDPRD=KK
      II=IPROD
      III=IPROD+1
      I1=0
      M=0
      DO 120 I=LL,KK
      IF(LEVPOS(11,I).EQ.0)LEVPOS(11,I)=PDERR
      LEVPRD(1,I)=0
      LEVPRD(2,I)=PDERR
      IF(I1.EQ.LEVPOS(1,I))GOTO 110
      I1=LEVPOS(1,I)
      J1=I
      IPROD=IPROD+2
      IF(IPROD.GT.QPRODN/2)CALL SPILL(7,'LOADU   ')
      PROD2(1,IPROD-1)=TENMIL+I1
      PROD2(2,IPROD-1)=I1
      IF(CONCAT.EQ.1)GOTO 100
      IF(LENGTH(1,I1).LT.0)PROD2(2,IPROD-1)=TENMIL-LENGTH(1,I1)
  100 IF(LEVPOS(10,I).GT.1)GOTO 110
      PROD2(1,IPROD)=0
      PROD2(2,IPROD)=-LEVPOS(12,I)
      GOTO 120
  110 PROD2(1,IPROD)=J1
      PROD2(2,IPROD)=I
  120 CONTINUE
      IF(CLSWRD(I1).EQ.KNT)GOTO 130
      IPROD=IPROD+1
      IF(IPROD.GT.QPRODN/2)CALL SPILL(7,'LOADU   ')
      PROD2(1,IPROD)=0
      PROD2(2,IPROD)=-PDERR
C
C     FIND ALL POSSIBLE VARIATIONS OF A STARTING CLASS WORD
C
  130 LPROD=IPROD
  140 II=II+1
      IF(II.GT.LPROD)GOTO 240
      IF(PROD2(1,II).LT.TENMIL)GOTO 140
      IF(PROD2(1,II+1).LT.1)GOTO 140
      I1=PROD2(2,II)
      IF(I1.GT.TENMIL)I1=JASSOC(I1+1-TENMIL)
      ID1=PROD2(1,II+1)
      ID2=PROD2(2,II+1)
      IF(ID2.GT.ID1)GOTO 150
      PROD2(1,II+1)=-2
      LEVPOS(11,ID1)=-LEVPOS(11,ID1)
      GOTO 140
C
C         SECOND LEVEL PROCESSING
C         PREPARE PRODUCTION CODE OF LEVEL 2 TO 5
C
  150 LEVEL=2
      CALL LOAD1
      J1=IPROD
      IADRES=LEVEL*TENMIL+I1
      CALL LOAD2(II)
      J2=IPROD
      IF(IRET.EQ.1)GOTO 140
C
  160 J1=J1+1
      IF(J1.GT.J2)GOTO 140
      IF(PROD2(1,J1).LT.TENMIL)GOTO 160
      IF(PROD2(1,J1+1).LT.1)GOTO 160
C
C         THIRD LEVEL PROCESSING
C
      ID1=PROD2(1,J1+1)
      ID2=PROD2(2,J1+1)
      LEVEL=3
      IADRES=LEVEL*TENMIL+I1
      J3=IPROD
      CALL LOAD2(J1)
      J4=IPROD
      IF(IRET.EQ.1)GOTO 160
C
  170 J3=J3+1
      IF(J3.GT.J4)GOTO 160
      IF(PROD2(1,J3).LT.TENMIL)GOTO 170
      IF(PROD2(1,J3+1).LT.1)GOTO 170
C
C         FORTH LEVEL PROCESSING
C
      ID1=PROD2(1,J3+1)
      ID2=PROD2(2,J3+1)
      LEVEL=4
      IADRES=LEVEL*TENMIL+I1
      J5=IPROD
      CALL LOAD2(J3)
      J6=IPROD
      IF(IRET.EQ.1)GOTO 170
C
  180 J5=J5+1
      IF(J5.GT.J6)GOTO 170
      IF(PROD2(1,J5).LT.TENMIL)GOTO 180
      IF(PROD2(1,J5+1).LT.1)GOTO 180
C
C         FIFTH LEVEL PROCESSING
C
      ID1=PROD2(1,J5+1)
      ID2=PROD2(2,J5+1)
      LEVEL=5
      IADRES=LEVEL*TENMIL+I1
      J7=IPROD
      CALL LOAD2(J5)
      J8=IPROD
      IF(IRET.EQ.1)GOTO 180
C
C         PREPARE PRODUCTION CODE OF LEVEL 6 TO 9
C
  190 J7=J7+1
      IF(J7.GT.J8)GOTO 180
      IF(PROD2(1,J7).LT.TENMIL)GOTO 190
      IF(PROD2(1,J7+1).LT.1)GOTO 190
      LEVEL=6
      ID1=PROD2(1,J7+1)
      ID2=PROD2(2,J7+1)
      CALL LOAD1
C
C         SIXTH LEVEL PROCESSING
C
      J9=IPROD
      IADRES=LEVEL*TENMIL+I1
      CALL LOAD2(J7)
      J10=IPROD
      IF(IRET.EQ.1)GOTO 190
C
  200 J9=J9+1
      IF(J9.GT.J10)GOTO 190
      IF(PROD2(1,J9).LT.TENMIL)GOTO 200
      IF(PROD2(1,J9+1).LT.1)GOTO 200
C
C         SEVENTH LEVEL PROCESSING
C
      ID1=PROD2(1,J9+1)
      ID2=PROD2(2,J9+1)
      LEVEL=7
      IADRES=LEVEL*TENMIL+I1
      J11=IPROD
      CALL LOAD2(J9)
      J12=IPROD
      IF(IRET.EQ.1)GOTO 200
C
  210 J11=J11+1
      IF(J11.GT.J12)GOTO 200
      IF(PROD2(1,J11).LT.TENMIL)GOTO 210
      IF(PROD2(1,J11+1).LT.1)GOTO 210
C
C         8TH LEVEL PROCESSING
C
      ID1=PROD2(1,J11+1)
      ID2=PROD2(2,J11+1)
      LEVEL=8
      IADRES=LEVEL*TENMIL+I1
      CALL LOAD2(J11)
      IF(IRET.EQ.1)GOTO 210
C
      WRITE(VLFILE,230)
  230 FORMAT(1H ,99HERROR NO. 7049 IN SUBROUTINE LOADU. THE SUBROUTINE M
     *UST BE EXTENDED TO DISSOLVE LONGER PRODUCTIONS.)
      ERROR=.TRUE.
      GOTO 570
C
C     CONNECT THE LEVELS BY INSERTING THE ADDRESSES (GOTO)
C
  240 DO 280 I=III,IPROD
      J1=PROD2(1,I)
      IF(J1.LE.TENMIL)GOTO 280
      PROD2(1,I)=TENMIL
      IF(PROD2(1,I+1).LT.1)GOTO 280
      J1=J1+TENMIL
      J=I+2
      DO 250 M=J,IPROD
      IF(J1.EQ.PROD2(1,M).AND.PROD2(2,M+1).NE.0)GOTO 260
  250 CONTINUE
      GOTO 280
  260 PROD2(1,I+1)=0
      PROD2(2,I+1)=TENMIL+4*M
  270 IF(PROD2(1,M+1).GT.0)PROD2(2,M+1)=0
      IF(PROD2(1,M+1).LT.1)PROD2(1,M)=TENMIL
      M=M+2
      IF(J1.NE.PROD2(1,M))GOTO 280
      GOTO 270
  280 CONTINUE
C
C     SEARCH FOR UNIFORM END SECTIONS OF THE PRODUCTIONS
C
      J1=IPROD+1
      J3=STRTPR-1
  290 J2=J1
  300 J3=J3+1
      IF(J3.GE.ENDPRD)GOTO 450
      IF(LEVPOS(11,J3).GT.0)GOTO 300
      LEVPOS(11,J3)=IABS(LEVPOS(11,J3))
      PROD2(1,J2)=J3
      J4=J3+1
      DO 310 I=J4,ENDPRD
      IF(LEVPOS(11,I).GT.0)GOTO 310
      IF(LEVPOS(12,I).NE.LEVPOS(12,J3))GOTO 310
      IF(IABS(LEVPOS(11,I)).NE.IABS(LEVPOS(11,J3)))GOTO 310
      IF(LEVPRD(1,I).NE.LEVPRD(1,J3))GOTO 310
      LEVPOS(11,I)=IABS(LEVPOS(11,I))
      J2=J2+1
      PROD2(1,J2)=I
  310 CONTINUE
      IF(J1.EQ.J2)GOTO 300
      J4=0
      DO 340 I=1,IPROD
      IF(PROD2(1,I).GE.0)GOTO 340
      DO 320 J=J1,J2
      IF(PROD2(2,I).EQ.PROD2(1,J))GOTO 330
  320 CONTINUE
      GOTO 340
  330 IF(J4.GE.QLENGT)GOTO 340
      J4=J4+1
      LENGTH(1,J4)=-PROD2(1,I)
      LENGTH(2,J4)=PROD2(2,I)
      LENGTH(3,J4)=I
  340 CONTINUE
  350 J5=-1
      J6=0
      DO 360 I=1,J4
      IF(LENGTH(2,I).LT.0)GOTO 360
      J7=LEVPOS(10,LENGTH(2,I))-LENGTH(1,I)
      IF(J5-J7)355,354,360
  354 IF(LEVPOS(10,LENGTH(2,I)).LE.J6)GOTO 360
  355 J5=J7
      J6=LEVPOS(10,LENGTH(2,I))
      J11=I
  360 CONTINUE
      IF(J5.LT.0)GOTO 290
      J7=LENGTH(2,J11)
      J8=LEVPOS(10,J7)+1
      IF(J8.LT.10)GOTO 380
      J8=LEVPOS(9,J7)
  370 J8=J8+1
      K=IABS(PRODR(J8))
      IF(K.GT.MAXCLS)GOTO 390
      GOTO 370
  380 J8=LEVPOS(J8,J7)
  390 DO 440 I=1,J4
      J9=LENGTH(2,I)
      IF(J7.EQ.J9.OR.J9.LT.0)GOTO 440
      J6=LEVPOS(10,J9)+1
      IF(J6.LT.10)GOTO 410
      J6=LEVPOS(9,J9)
  400 J6=J6+1
      K=IABS(PRODR(J6))
      IF(K.GT.MAXCLS)GOTO 420
      GOTO 400
  410 J6=LEVPOS(J6,J9)
  420 J2=LEVPOS(LENGTH(1,I),J9)
      J10=J8
  430 J10=J10-1
      J6 =J6 -1
      IF(PRODR(J6).NE.PRODR(J10))GOTO 440
      IF(J6.GT.J2)GOTO 430
      J=LENGTH(3,I)
      PROD2(1,J)=PROD2(1,J)+LEVPOS(10,J9)-LEVPOS(10,J7)
      PROD2(2,J)=J7
      LENGTH(2,I)=-1
  440 CONTINUE
C
      LENGTH(2,J11)=-1
      GOTO 350
  450 LEVPOS(11,ENDPRD)=IABS(LEVPOS(11,ENDPRD))
      BREAK=IPROD
      IF(CONCAT.EQ.1)GOTO 570
C
C     COLLECT THE FINAL PART OF ALL PARTICULAR PRODUCTIONS IN 'LENGTH'
C
      J10=BREAK-1
      DO 560 I=III,J10
      IF(PROD2(1,I).GE.0)GOTO 560
      J1=1
      J2=PROD2(2,I)
      J3=I+1
      J4=-PROD2(1,I)
      J5=LEVPOS(10,J2)
      LENGTH(1,J1)=I
      LENGTH(2,J1)=J4
C
      DO 490 K=J3,BREAK
      IF(PROD2(1,K).GE.0)GOTO 490
      IF(PROD2(2,K).NE.J2)GOTO 490
      J1=J1+1
      LENGTH(1,J1)=K
      LENGTH(2,J1)=-PROD2(1,K)
      J4=MIN(LENGTH(2,J1),J4)
  490 CONTINUE
C
      DO 500 K=1,J1
      J3=LENGTH(1,K)
      PROD2(1,J3)=0
  500 PROD2(2,J3)=TENMIL+4*(IPROD+LENGTH(2,K)-J4+1)
C
      J6=MIN(8,J5)
      DO 510 K=J4,J6
      IPROD=IPROD+1
      PROD2(1,IPROD)=LEVPOS(K,J2)
  510 PROD2(2,IPROD)=LEVPOS(K+1,J2)-1
      IF(J5.LT.9)GOTO 550
      J6=LEVPOS(9,J2)-1
  520 J6=J6+1
      IF(IABS(PRODR(J6)).GT.MAXCLS)GOTO 550
      J7=J6
      IF(PRODR(J7).LT.0)GOTO 540
  530 J7=J7+1
      IF(PRODR(J7).GT.0)GOTO 530
  540 IPROD=IPROD+1
      PROD2(1,IPROD)=J6
      PROD2(2,IPROD)=J7
      J6=J7
      GOTO 520
C
  550 IPROD=IPROD+2
      PROD2(1,IPROD)=0
      PROD2(1,IPROD-1)=0
      PROD2(2,IPROD)=-IABS(LEVPOS(11,J2))
      IF(LEVPRD(2,J2).LT.PDERR)PROD2(2,IPROD)=-LEVPRD(1,J2)
      PROD2(2,IPROD-1)=-LEVPOS(12,J2)
  560 CONTINUE
C
  570 RETURN
C
  580 BREAK=0
      IF(MAXCLS.EQ.0)GOTO 620
      J6=LEVPOS(10,1)
      J5=MIN(8,J6)
      DO 590 I=1,J5
      IPROD=IPROD+1
      PROD2(1,IPROD)=LEVPOS(IPROD, 1)
  590 PROD2(2,IPROD)=LEVPOS(IPROD+1,1)-1
      IF(J6.LT.9)GOTO 620
      J5=PROD2(2,IPROD)
      DO 610 I=9,J6
      IPROD=IPROD+1
      J5=J5+1
      PROD2(1,IPROD)=J5
  600 IF(PRODR(J5).LT.0)GOTO 610
      J5=J5+1
      GOTO 600
  610 PROD2(2,IPROD)=J5
  620 IPROD=IPROD+2
      PROD2(1,IPROD)=0
      PROD2(1,IPROD-1)=0
      PROD2(2,IPROD)=-PDERR
      PROD2(2,IPROD-1)=-LEVPOS(12,1)
      GOTO 570
C
      END
**** SOURCE FILE : M0006724.W01   ***
*
C
C              FORTRAN SUBROUTINE NAME
C
C LINKAGE       CALL    NAME  (STR)
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    HELP            SUBROUTINE    LOADG
C                                        SUBROUTINE    LOADM
C                                        SUBROUTINE    LOADN
C                                        SUBROUTINE    LOADP
C                                        SUBROUTINE    INPUT
C
      INTEGER  FUNCTION  NAME  (STR)
C
      IMPLICIT INTEGER (A-Z)
C
C        1.    NAME TABLE AND TABLE LIMITS
C
      INCLUDE (NAMETB)    
C  NAMEST:     NAMTBL INDEX OF BEGIN OF THE PART PROGRAM NAME  SECTION
C  NAMMAX:     NAMTBL INDEX OF END OF THE PART PROGRAM NAME SECTION
C  NAMTBL:     INTEGER CODE CORRESPONDING TO NAME TABLE ENTRY
C  CNAMTB:     NAME TABLE OR DICTIONARY
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C*
C PURPOSE      TO FIND THE POSITION IN NAMTBL OF A BCD NAME,
C              AND TO PUT THE NAME INTO NAMTBL IF IT IS NOT
C              ALREADY THERE.
C ARGUMENTS    STR     CHARACTER STRING CONTAINING THE
C              SYMBOLIC NAME.
C NOTES        THE NAMTBL IS SEARCHED USING A HASH TECHNIQUE.
C
C LOCAL                                INITIAL
C VARIABLES    NAME   DIMENSION  TYPE  VALUE   DESCRIPTION
C              STR                C            ARGUMENT OF FUNCTION =
C                                              SYMBOLIC NAME
C              BCD                I            BCD OF NAME
C              I                  I            INDEX OF DO LOOP
C              J                  I            MASK TABLE SEARCH
C                                              STARTING POINT
C              NAME               I            FUNCTION NAME
C
      CHARACTER*6 STR
C**
C**   CALCULATE BCD
C
      BCD=BCDF(STR(1:4))
C
C...     FIND STARTING PLACE IN TABLE.
C
   10 J=MOD(BCD,NAMMAX-NAMEST)
      IF (J.LT.0) THEN
        J=J+NAMMAX
      ELSE
        J=J+NAMEST
      ENDIF
C
C...     SEARCH FROM THERE UP TO TOP OF TABLE.
C
      DO 20 I = J,NAMMAX
C
C...     IS THERE AN ENTRY AT THIS LOCATION
C
      IF (NAMTBL(I).EQ.0) GOTO 40
C
C...     YES. IS IT THIS NAME
C
      IF(CNAMTB(I).EQ.STR)GOTO 100
C
C...     NO. CONTINUE SEARCH.
C
   20 CONTINUE
C
C...     NOT IN THAT PART OF TABLE - SEARCH FROM BOTTOM TO STARTING PT.
C
      DO 30 I = NAMEST,J
C
C...     IS THERE AN ENTRY AT THIS LOCATION
C
      IF (NAMTBL(I).EQ.0) GOTO 40
C
C...     YES. IS IT THIS NAME
C
      IF(CNAMTB(I).EQ.STR)GOTO 100
C
C...     NO. CONTINUE SEARCH.
C
   30 CONTINUE
C
C...     TABLE FULL - ISSUE DIAGNOSTIC
C
      WRITE(VLFILE,999)
  999 FORMAT (1H ,54HERROR NO. 3001 IN SUBROUTINE NAME. NAME TABLE OVERF
     *LOW)
      CALL HELP
      RETURN
C
C...     NAME IS NOT IN TABLE - PUT IT IN
C
   40 CNAMTB(I) = STR
C
C...     ENTRY IF NAME FOUND.
C...     IS THIS A SYNONYM
C
  100 IF (NAMTBL(I).LT.0) GOTO 110
C
C...     NO. RETURN INDEX.
C
      NAME = I
      RETURN
C
C...     YES. RETURN INDEX OF SYNONYM
C
  110 NAME = -NAMTBL(I)
      RETURN
       END
**** SOURCE FILE : M0006728.V01   ***
*
      INTEGER FUNCTION  ORF(A,B)
C
C. THIS ROUTINE IS COMPILER DEPENDENT.
C
C  THREE POSSIBLE VERSIONS ARE OUTLINED HERE
C
C-IBM-VERSION
C
C   THE TRICK USED HERE WILL WORK ON
C   FORTRAN(G) AND (H), IT MAY NOT WORK ON OTHER COMPILERS.
C      LOGICAL  AL,BL,ORL
C      INTEGER AI,BI,ORI
C      EQUIVALENCE (AL,AI),(BL,BI),(ORI,ORL)
C      AI=A
C      BI=B
C      ORL=AL.OR.BL
C      ORF=ORI
C
C-VAX-VERSION
C
      INTEGER A,B
      ORF=IOR(A,B)
C
C
C-PRIME-VERSION
C
C      INTEGER A,B
C      ORF=OR(A,B)
C
      RETURN
      END
**** SOURCE FILE : M0006725.V02   ***
*
C
C              FORTRAN SUBROUTINE READ
C
C LINKAGE       CALL   READ(INCHAR,SEQNO)
C
C          SUBSIDIARIES                  CALLED FROM
C          TYPE          ENTRY           TYPE          ENTRY
C          SUBROUTINE    HELP            SUBROUTINE    INPUT
C
      SUBROUTINE READ(INCHAR,SEQNO)
C
      IMPLICIT INTEGER (A-Z)
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  LCDATA:     INPUT FILE NUMBER OF PRODUCTION TABLES SEQUEN. MODE
      EQUIVALENCE (LCDATA,SYMFIL(5))
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C*
C PURPOSE      TO READ AND LIST A CARD IMAGE, AND PLACE IN A 72 WORD
C              ARRAY THE INDEX TO THE NAMTBL OF THE CHARACTERS
C              CONTAINED IN THE RECORD, ONE INDEX PER CHARACTER.
C
C ARGUMENTS    ARRAY     A 72 WORD ARRAY INTO WHICH IS PLACED INDICES
C                        TO THE NAMTBL OF THE FIRST 72 CHARACTERS
C                        OF THE RECORD.
C              SEQNO     A DOUBLE WORD INTO WHICH IS PLACED THE
C                        SEQUENCE NUMBER OF THE RECORD.
C
C     VARIABLES                    INITIAL
C         NAME  DIMENSION TYPE     VALUE  EQUIV  DESCRIPTION
C
C         I               I                      DO LOOP INDEX
C
C         II              I        0             POINTER TO LOCATION
C                                                OF CHARACTER IN LIST
C                                                OF VALID CHARACTERS
C
C         VALIDC          C*NVLD                 LIST OF VALID
C                                                CHARACTERS
C
C         CONV   NVLD     I        DATA          INDEX OF VALID
C                                  DEF           CHARACTERS IN NAMTBL
C
C         RDCHAR          C*80                   READ AREA
C
C         INCHAR 72       I                      INDEX TO NAMTBL FOR
C                                                EACH CHARACTER READ
C
C         SEQNO           C*8                    SEQUENCE NUMBER
C                                                OF RECORD
C
      DIMENSION INCHAR(76)
      PARAMETER (NVLD=53)
      CHARACTER RDCHAR*80,SEQNO*8,VALIDC*(NVLD)
      DIMENSION CONV(NVLD)
C
      DATA          II/0/
C
C    LIST OF VALID NUMBERS
C
      DATA VALIDC( 1:10)/'0123456789'/
      DATA VALIDC(11:36)/'ABCDEFGHIJKLMNOPQRSTUVWXYZ'/
      DATA VALIDC(37:48)/' +-*/=.,''()$'/
C  ASCII/EBCDIC REPRESENTATION OF BCDIC CHARACTERS ()+='
      DATA VALIDC(49:53)/'%<&#@'/
C
C                   CONV TABLE
C
C                 0   1   2   3   4   5   6   7   8   9
      DATA CONV/  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,
C                 A   B   C   D   E   F   G   H   I
     1           15, 16, 17, 18, 19, 20, 21, 22, 23,
C                 J   K   L   M   N   O   P   Q   R
     2           27, 28, 29, 30, 31, 32, 33, 34, 35,
C                 S   T   U   V   W   X   Y   Z
     3           40, 41, 42, 43, 44, 45, 46, 47,
C                SP   +   -   *   /   =   .   ,   '   (   )   $
     4           38, 14, 26, 37, 39, 12, 24, 48, 13, 49, 25, 36,
C                 %   <   &   #   @
     5           49, 25, 26, 12, 13/
C
C**
C                   READ CARD IMAGE
      READ(LCDATA,20,END=50) RDCHAR
   20 FORMAT (A80)
      WRITE(VLFILE,30) RDCHAR
   30 FORMAT (1H ,4X,A80)
C
C...                SET UP INDEX TO CHAR PORTION OF NAMTBL
C
      DO 40 I=1,72
C                    ONE CHARACTER
      II=INDEX(VALIDC,RDCHAR(I:I))
C                    LOC OF CHARACTER IN NAMTBL
      IF (II.EQ.O) THEN
         INCHAR(I)=0
      ELSE
         INCHAR(I)=CONV(II)
      ENDIF
   40 CONTINUE
C
      SEQNO=RDCHAR(73:80)
C
      RETURN
C        ......... MODIFY FOR THE REAL WORLD...........
   50 CALL HELP
      RETURN
      END
**** SOURCE FILE : M0006200.V02   ***
*
      SUBROUTINE SORT(F,L,N,IS,IL)
      INTEGER F(L,N),TEMP
      LOGICAL EQULTY
C    'N' RECORDS OF LENGTH 'L' IN ARRAY 'F' ARE SORTED IN ASCENDING
C    ORDER ACCORDING TO THE VALUE OF 'IL' ITEMS STARTING FROM THE
C    'IS'TH IN EACH RECORD)
C    INDEX FOR LAST WORD TO BE SORTED ON
      IT=IS+IL-1
C    FOR EACH RECORD EXCEPT THE LAST
      NM1=N-1
      DO 1 I=1,NM1
      IP1=I+1
C    RECORD WITH LOWEST CHARACTER-STRING VALUE
      IK=I
      DO 2 J=IP1,N
        EQULTY=.TRUE.
        DO 3 K=IS,IT
          IF (EQULTY) THEN
            IF (F(K,IK).GT.F(K,J)) THEN
              IK=J
              EQULTY=.FALSE.
            ELSE IF (F(K,IK).LT.F(K,J)) THEN
              EQULTY=.FALSE.
            ELSE
              EQULTY=.TRUE.
            ENDIF
          ENDIF
    3   CONTINUE
    2 CONTINUE
      IF (IK.NE.I) THEN
C   INTERCHANGE RECORDS
        DO 4 J=1,L
          TEMP=F(J,IK)
          F(J,IK)=F(J,I)
          F(J,I)=TEMP
    4   CONTINUE
      ENDIF
C
    1 CONTINUE
      RETURN
      END
**** SOURCE FILE : M0006727.W01   ***
*
C
C              FORTRAN SUBROUTINE SPILL
C
C LINKAGE       CALL   SPILL(INDEX,SUBNAM)
C
C          SUBSIDIARIES                  CALLED FROM
C          NONE                          TYPE          ENTRY
C                                        SUBROUTINE    LOADB
C                                        SUBROUTINE    LOADG
C                                        SUBROUTINE    LOADI
C                                        SUBROUTINE    LOADM
C                                        SUBROUTINE    LOADP
C                                        SUBROUTINE    LOADS
C                                        SUBROUTINE    LOADT
C                                        SUBROUTINE    LOADU
C                                        SUBROUTINE    LOAD1
C                                        SUBROUTINE    LOAD2
C
      SUBROUTINE SPILL(INDEX,SUBNAM)
C
      IMPLICIT INTEGER (A-Z)
C
C        6.    SYMBOLIC FILE DEFINITIONS
C
      COMMON/SYMFIL/SYMFIL
      DIMENSION SYMFIL(6)
C  VLFILE:     VERIFICATION LISTING FILE
      EQUIVALENCE (VLFILE,SYMFIL(6))
C
C        7.    RESTRICTION DATA FOR CAPACITY CONTROL
C
      COMMON/LDXSIZ/LDXSIZ
      DIMENSION LDXSIZ(28)
C  QCODE       DIMENSION OF ARRAY CODE
      EQUIVALENCE (QCODE,LDXSIZ(1))
C  QMETA       DIMENSION OF ARRAY META (OUTPUT)
      EQUIVALENCE (QMETA,LDXSIZ(2))
C  QPMIDT      DIMENSION OF ARRAY PMIDTB
      EQUIVALENCE (QPMIDT,LDXSIZ(3))
C  QASSOC      DIMENSION OF ARRAY ASSOC
      EQUIVALENCE (QASSOC,LDXSIZ(4))
C  QGEOML      DIMENSION OF ARRAY GEOMLC
      EQUIVALENCE (QGEOML,LDXSIZ(5))
C  QLENGT      DIMENSION OF ARRAY LENGTH
      EQUIVALENCE (QLENGT,LDXSIZ(6))
C  QPRODN      DIMENSION OF ARRAY PRODN
      EQUIVALENCE (QPRODN,LDXSIZ(7))
C  QPROCD      DIMENSION OF ARRAY PROCOD
      EQUIVALENCE (QPROCD,LDXSIZ(8))
C  QWORK       DIMENSION OF ARRAY WORK
      EQUIVALENCE (QWORK,LDXSIZ(9))
C  QIAGMX      DIMENSION OF ARRAY IAGMXY
      EQUIVALENCE (QIAGMX,LDXSIZ(10))
C  QPROD2      DIMENSION OF ARRAY PROD2
      EQUIVALENCE (QPROD2,LDXSIZ(11))
C  QSTACK      DIMENSION OF ARRAY STKLST
      EQUIVALENCE (QSTACK,LDXSIZ(12))
C  QLEVPO      DIMENSION OF ARRAY LEVPOS
      EQUIVALENCE (QLEVPO,LDXSIZ(13))
C  QCLSWD      DIMENSION OF ARRAY CLSWRD
      EQUIVALENCE (QCLSWD,LDXSIZ(14))
C*
C     PURPOSE       TO PRINT DIAGNOSTICS CONCERNING ARRAY CAPACITY
C                   OVERFLOW
C...  ARGUMENTS     INDEX     POINTER TO THE LOCATION IN THE COMMON
C...                          BLOCK LDXSIZ CONTAINING THE DIMENSION
C...                          REPRESENTING THE CAPACITY OF THE
C...                          OVERFLOWED ARRAY.
      CHARACTER*6 SUBNAM
      CHARACTER*6 ARRAY(14),WHERE(14)*16
C
      DATA ARRAY(1)/'CODES'/,WHERE(1)/'COMMON/CODES/'/
      DATA ARRAY(2)/'META'/,WHERE(2)/'COMMON/SCRTBL/'/
      DATA ARRAY(3)/'PMIDTB'/,WHERE(3)/'COMMON/GMTY/'/
      DATA ARRAY(4)/'ASSOC'/,WHERE(4)/'COMMON/ASSOC/'/
      DATA ARRAY(5)/'GEOMLC'/,WHERE(5)/'COMMON/GEOMLC/'/
      DATA ARRAY(6)/'LENGTH'/,WHERE(6)/'COMMON/LENGTH/'/
      DATA ARRAY(7)/'PRODN'/,WHERE(7)/'COMMON/PRODN/'/
      DATA ARRAY(8)/'PROCOD'/,WHERE(8)/'COMMON/PROCOD/'/
      DATA ARRAY(9)/'WORK'/,WHERE(9)/'COMMON/LEVPOS/'/
      DATA ARRAY(10)/'IAGMXY'/,WHERE(10)/'SUBRTN. LOADG'/
      DATA ARRAY(11)/'PROD2'/,WHERE(11)/'COMMON/PRODN/'/
      DATA ARRAY(12)/'PRODR'/,WHERE(12)/'COMMON/STKLST/'/
      DATA ARRAY(13)/'LEVPOS'/,WHERE(13)/'COMMON/LEVPOS/'/
      DATA ARRAY(14)/'CLSWRD'/,WHERE(14)/'COMMON/CLSWRD/'/
C**
      WRITE (VLFILE,1000) SUBNAM,ARRAY(INDEX),WHERE(INDEX),LDXSIZ(INDEX)
 10000FORMAT(1H ,30HERROR NO. 7036  IN SUBROUTINE ,A6,1H./1H ,
     122HTHE CAPACITY OF ARRAY ,A6,4H IN ,A6,   9H, SET AT ,I4,
     2 54H HAS BEEN EXCEEDED. REVISE INPUT OR REDIMENSION ARRAY.)
      STOP
      END
**** SOURCE FILE : CFORM000.ORG   ***
*
*
*  * CFORM *  FORTRAN 77 SUBROUTINE  26.10.84  E.MCLELLAN
*
*  PURPOSE:  TO INSERT A CHARACTER STRING IN A CHARACTER BUFFER
*            AT LOCATION POSN.
*            THE LENGTH OF THE STRING IS RETURNED IF THE ARGUMENT
*            LENGTH IS ZERO ON INPUT.
*
*  CALLING SEQUENCE:
*                   CALL CFORM(STRING,BUFFER,POSN,LENGTH)
*
*  ARGUMENTS:
*                   TYPE       DESCRIPTION
*       STRING      CHARACTER  CHARACTER STRING TO BE INSERTED
*       BUFFER      CHARACTER  CHARACTER BUFFER INTO WHICH
*                              STRING IS TO BE INSERTED
*       POSN        INTEGER    LOCATION IN CHARACTER BUFFER
*                              AT WHICH STRING IS TO BE INSERTED
*       LENGTH      INTEGER    LENGTH OF STRING
*                              IF = 0 ON INPUT, ACTUAL LENGTH
*                              IS RETURNED TO CALLING ROUTINE
*
*  GLOBAL VARIABLES:  NONE
*
*  LOCAL VARIABLES:  NONE
*
*  FILES:  NONE
*
*  SUBSIDIARIES:  NONE
*
      SUBROUTINE CFORM(STRING,BUFFER,POSN,LENGTH)
C
      CHARACTER STRING*(*),BUFFER*(*)
      INTEGER POSN,LENGTH
C
C.....IF LENGTH IS ZERO ON INPUT RETURN ACTUAL LENGTH OF STRING
C
      IF (LENGTH.EQ.0) THEN
         LENGTH=LEN(STRING)
      ENDIF
C
C.....INSERT CHARACTER STRING IN PRINT BUFFER
C
      BUFFER(POSN:POSN+LENGTH-1)=STRING(1:LENGTH)
C
      RETURN
      END
**** SOURCE FILE : HEX00000.ORG   ***
*
*
*  * HEX *  FORTRAN 77 CHARACTER FUNCTION   6.11.85  E.MCLELLAN
*
*  PURPOSE:  TO CONVERT AN INTEGER VALUE TO A CHARACTER STRING
*            REPRESENTING THE EQUIVALENT HEXADECIMAL NUMBER
*
*  CALLING SEQUENCE:
*                   STRING=HEX(VALUE)
*
*  ARGUMENTS:
*                   TYPE       DESCRIPTION
*       VALUE       INTEGER    INTEGER VALUE TO BE CONVERTED
*                              TO HEX CHARACTER STRING
*
*  GLOBAL VARIABLES:  NONE
*
*  LOCAL VARIABLES:
*                   TYPE       DESCRIPTION
*       DIV         INTEGER    DIVISORS FOR EACH HALF BYTE
*                              POSITION (POWERS OF 16)
*       J           INTEGER    INTEGRAL QUOTIENT
*       V           INTEGER    DIVIDEND
*       H           CHARACTER  HEX CHARACTERS (0-F)
*
*  FILES:  NONE
*
*  SUBSIDIARIES:  NONE
*
      CHARACTER*8 FUNCTION HEX(VALUE)
C
      INTEGER VALUE,DIV(7),J,V
      CHARACTER H(0:15)
C
      DATA DIV / 268435456, 16777216, 1048576,
     1           65536,  4096,  256,   16    /
C
      DATA H / '0','1','2','3','4','5','6','7',
     1         '8','9','A','B','C','D','E','F'/
C
      V=VALUE
      DO 10 I=1,7
        J=V/DIV(I)
        V=V-J*DIV(I)
        HEX(I:I)=H(J)
  10  CONTINUE
      HEX(8:8)=H(V)
C
      RETURN
      END
**** SOURCE FILE : SHIFT000.ORG   ***
*
      SUBROUTINE SHIFT(WORD,JCHAR)
*
*  *  SHIFT  *  VAX11 VERSION   4.10.85    E.MCLELLAN
*
*  PURPOSE     TO APPEND A SINGLE CHARACTER 'JCHAR' TO THE CHARACTER
*              STRING BEING SET UP IN 'WORD' TO FORM A LEFT-JUSTIFIED
*              'NAME' IN 'WORD'
*
*  CALLING SEQUENCE
*              CALL SHIFT(WORD,JCHAR)
*  ARGUMENTS   WORD   CHARACTER STRING IN WHICH A 'NAME'
*                     IS BEING BUILT UP
*              JCHAR  CONTAINS THE NEXT CHARACTER (LEFT JUSTIFIED)
*                     TO BE PLACED IN WORD
*
      CHARACTER*6 WORD,JCHAR,TEMP
C
      J=INDEX(WORD(1:),' ')
      IF(J.NE.0) THEN
       WORD(J:J)=JCHAR(1:1)
      ELSE
C  LEFT SHIFT CONTENTS OF WORD AND APPEND CHARACTER
       TEMP=WORD(2:6)//JCHAR(1:1)
       WORD=TEMP
      ENDIF
      RETURN
      END
**** SOURCE FILE : BCDF0000.W01   ***
*
*
*  * BCDF *  FORTRAN 77 INTEGER FUNCTION  19-DEC-1985  E.MCLELLAN
*            MODIFIED                      2-FEB-1988  E.MCLELLAN
*
*  PURPOSE:  CONVERT A STRING OF CHARACTERS WHICH OCCUPY THE SAME
*            NUMBER OF BYTES AS AN INTEGER WORD INTO AN EQUIVALENT
*            INTEGER VALUE
*
*  CALLING SEQUENCE:
*                   VALUE=BCDF(STR)
*
*  ARGUMENTS:
*                   TYPE       DESCRIPTION
*       STR         CHARACTER  STRING TO BE CONVERTED
*
*  GLOBAL VARIABLES:
*
*---------------------------------------------------
*   VARIABLE        BLOCK     TYPE       DESCRIPTION
*---------------------------------------------------
*   IWRD            SDP       INTEGER    NO. OF BYTES PER WORD
*   NBCHAR          SDP       INTEGER    NO. OF BITS PER BYTE
*
*  LOCAL VARIABLES:
*                   TYPE       DESCRIPTION
*        I          INTEGER    LOOP COUNT
*        BCD        INTEGER    VARIABLE FOR BUILDING UP BCD VALUE
*        TSTR       CHARACTER  TEMPORARY STORAGE FOR STRING
*
*  FILES:  NONE
*
*  SUBSIDIARIES:  NONE
*
      INTEGER FUNCTION BCDF(STR)
C
      INCLUDE (SDP)    
C
      INTEGER  BCD
      CHARACTER*(*) STR,TSTR*10
C
      BCD=0
      TSTR=STR//' '
      DO 10 I=1,IWRD
      BCD=ISHFT(BCD,NBCHAR)+ICHAR(TSTR(I:I))
  10  CONTINUE
C
      BCDF=BCD
C
      RETURN
      END
